{"ast":null,"code":"/**\n * @fileoverview Compatibility class for flat config.\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst path = require(\"path\");\n\nconst environments = require(\"../conf/environments\");\n\nconst createDebug = require(\"debug\");\n\nconst {\n  ConfigArrayFactory\n} = require(\"./config-array-factory\"); //-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/** @typedef {import(\"../../shared/types\").Environment} Environment */\n\n/** @typedef {import(\"../../shared/types\").Processor} Processor */\n\n\nconst debug = createDebug(\"eslintrc:flat-compat\");\nconst cafactory = Symbol(\"cafactory\");\n/**\n * Translates an ESLintRC-style config object into a flag-config-style config\n * object.\n * @param {Object} eslintrcConfig An ESLintRC-style config object.\n * @param {Object} options Options to help translate the config.\n * @param {string} options.resolveConfigRelativeTo To the directory to resolve\n *      configs from.\n * @param {string} options.resolvePluginsRelativeTo The directory to resolve\n *      plugins from.\n * @param {ReadOnlyMap<string,Environment>} options.pluginEnvironments A map of plugin environment\n *      names to objects.\n * @param {ReadOnlyMap<string,Processor>} options.pluginProcessors A map of plugin processor\n *      names to objects.\n * @returns {Object} A flag-config-style config object.\n */\n\nfunction translateESLintRC(eslintrcConfig, _ref) {\n  let {\n    resolveConfigRelativeTo,\n    resolvePluginsRelativeTo,\n    pluginEnvironments,\n    pluginProcessors\n  } = _ref;\n  const flatConfig = {};\n  const configs = [];\n  const languageOptions = {};\n  const linterOptions = {};\n  const keysToCopy = [\"settings\", \"rules\", \"processor\"];\n  const languageOptionsKeysToCopy = [\"globals\", \"parser\", \"parserOptions\"];\n  const linterOptionsKeysToCopy = [\"noInlineConfig\", \"reportUnusedDisableDirectives\"]; // check for special settings for eslint:all and eslint:recommended:\n\n  if (eslintrcConfig.settings) {\n    if (eslintrcConfig.settings[\"eslint:all\"] === true) {\n      return [\"eslint:all\"];\n    }\n\n    if (eslintrcConfig.settings[\"eslint:recommended\"] === true) {\n      return [\"eslint:recommended\"];\n    }\n  } // copy over simple translations\n\n\n  for (const key of keysToCopy) {\n    if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n      flatConfig[key] = eslintrcConfig[key];\n    }\n  } // copy over languageOptions\n\n\n  for (const key of languageOptionsKeysToCopy) {\n    if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n      // create the languageOptions key in the flat config\n      flatConfig.languageOptions = languageOptions;\n\n      if (key === \"parser\") {\n        debug(`Resolving parser '${languageOptions[key]}' relative to ${resolveConfigRelativeTo}`);\n\n        if (eslintrcConfig[key].error) {\n          throw eslintrcConfig[key].error;\n        }\n\n        languageOptions[key] = eslintrcConfig[key].definition;\n        continue;\n      } // clone any object values that are in the eslintrc config\n\n\n      if (eslintrcConfig[key] && typeof eslintrcConfig[key] === \"object\") {\n        languageOptions[key] = { ...eslintrcConfig[key]\n        };\n      } else {\n        languageOptions[key] = eslintrcConfig[key];\n      }\n    }\n  } // copy over linterOptions\n\n\n  for (const key of linterOptionsKeysToCopy) {\n    if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n      flatConfig.linterOptions = linterOptions;\n      linterOptions[key] = eslintrcConfig[key];\n    }\n  } // move ecmaVersion a level up\n\n\n  if (languageOptions.parserOptions) {\n    if (\"ecmaVersion\" in languageOptions.parserOptions) {\n      languageOptions.ecmaVersion = languageOptions.parserOptions.ecmaVersion;\n      delete languageOptions.parserOptions.ecmaVersion;\n    }\n\n    if (\"sourceType\" in languageOptions.parserOptions) {\n      languageOptions.sourceType = languageOptions.parserOptions.sourceType;\n      delete languageOptions.parserOptions.sourceType;\n    } // check to see if we even need parserOptions anymore and remove it if not\n\n\n    if (Object.keys(languageOptions.parserOptions).length === 0) {\n      delete languageOptions.parserOptions;\n    }\n  } // overrides\n\n\n  if (eslintrcConfig.criteria) {\n    flatConfig.files = [absoluteFilePath => eslintrcConfig.criteria.test(absoluteFilePath)];\n  } // translate plugins\n\n\n  if (eslintrcConfig.plugins && typeof eslintrcConfig.plugins === \"object\") {\n    debug(`Translating plugins: ${eslintrcConfig.plugins}`);\n    flatConfig.plugins = {};\n\n    for (const pluginName of Object.keys(eslintrcConfig.plugins)) {\n      debug(`Translating plugin: ${pluginName}`);\n      debug(`Resolving plugin '${pluginName} relative to ${resolvePluginsRelativeTo}`);\n      const {\n        definition: plugin,\n        error\n      } = eslintrcConfig.plugins[pluginName];\n\n      if (error) {\n        throw error;\n      }\n\n      flatConfig.plugins[pluginName] = plugin; // create a config for any processors\n\n      if (plugin.processors) {\n        for (const processorName of Object.keys(plugin.processors)) {\n          if (processorName.startsWith(\".\")) {\n            debug(`Assigning processor: ${pluginName}/${processorName}`);\n            configs.unshift({\n              files: [`**/*${processorName}`],\n              processor: pluginProcessors.get(`${pluginName}/${processorName}`)\n            });\n          }\n        }\n      }\n    }\n  } // translate env - must come after plugins\n\n\n  if (eslintrcConfig.env && typeof eslintrcConfig.env === \"object\") {\n    for (const envName of Object.keys(eslintrcConfig.env)) {\n      // only add environments that are true\n      if (eslintrcConfig.env[envName]) {\n        debug(`Translating environment: ${envName}`);\n\n        if (environments.has(envName)) {\n          // built-in environments should be defined first\n          configs.unshift(...translateESLintRC(environments.get(envName), {\n            resolveConfigRelativeTo,\n            resolvePluginsRelativeTo\n          }));\n        } else if (pluginEnvironments.has(envName)) {\n          // if the environment comes from a plugin, it should come after the plugin config\n          configs.push(...translateESLintRC(pluginEnvironments.get(envName), {\n            resolveConfigRelativeTo,\n            resolvePluginsRelativeTo\n          }));\n        }\n      }\n    }\n  } // only add if there are actually keys in the config\n\n\n  if (Object.keys(flatConfig).length > 0) {\n    configs.push(flatConfig);\n  }\n\n  return configs;\n} //-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * A compatibility class for working with configs.\n */\n\n\nclass FlatCompat {\n  constructor() {\n    let {\n      baseDirectory = process.cwd(),\n      resolvePluginsRelativeTo = baseDirectory\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.baseDirectory = baseDirectory;\n    this.resolvePluginsRelativeTo = resolvePluginsRelativeTo;\n    this[cafactory] = new ConfigArrayFactory({\n      cwd: baseDirectory,\n      resolvePluginsRelativeTo,\n      eslintAllPath: path.resolve(__dirname, \"../conf/eslint-all.js\"),\n      eslintRecommendedPath: path.resolve(__dirname, \"../conf/eslint-recommended.js\")\n    });\n  }\n  /**\n   * Translates an ESLintRC-style config into a flag-config-style config.\n   * @param {Object} eslintrcConfig The ESLintRC-style config object.\n   * @returns {Object} A flag-config-style config object.\n   */\n\n\n  config(eslintrcConfig) {\n    const eslintrcArray = this[cafactory].create(eslintrcConfig, {\n      basePath: this.baseDirectory\n    });\n    const flatArray = [];\n    let hasIgnorePatterns = false;\n    eslintrcArray.forEach(configData => {\n      if (configData.type === \"config\") {\n        hasIgnorePatterns = hasIgnorePatterns || configData.ignorePattern;\n        flatArray.push(...translateESLintRC(configData, {\n          resolveConfigRelativeTo: path.join(this.baseDirectory, \"__placeholder.js\"),\n          resolvePluginsRelativeTo: path.join(this.resolvePluginsRelativeTo, \"__placeholder.js\"),\n          pluginEnvironments: eslintrcArray.pluginEnvironments,\n          pluginProcessors: eslintrcArray.pluginProcessors\n        }));\n      }\n    }); // combine ignorePatterns to emulate ESLintRC behavior better\n\n    if (hasIgnorePatterns) {\n      flatArray.unshift({\n        ignores: [filePath => {\n          // Compute the final config for this file.\n          // This filters config array elements by `files`/`excludedFiles` then merges the elements.\n          const finalConfig = eslintrcArray.extractConfig(filePath); // Test the `ignorePattern` properties of the final config.\n\n          return Boolean(finalConfig.ignores) && finalConfig.ignores(filePath);\n        }]\n      });\n    }\n\n    return flatArray;\n  }\n  /**\n   * Translates the `env` section of an ESLintRC-style config.\n   * @param {Object} envConfig The `env` section of an ESLintRC config.\n   * @returns {Object} A flag-config object representing the environments.\n   */\n\n\n  env(envConfig) {\n    return this.config({\n      env: envConfig\n    });\n  }\n  /**\n   * Translates the `extends` section of an ESLintRC-style config.\n   * @param {...string} configsToExtend The names of the configs to load.\n   * @returns {Object} A flag-config object representing the config.\n   */\n\n\n  extends() {\n    for (var _len = arguments.length, configsToExtend = new Array(_len), _key = 0; _key < _len; _key++) {\n      configsToExtend[_key] = arguments[_key];\n    }\n\n    return this.config({\n      extends: configsToExtend\n    });\n  }\n  /**\n   * Translates the `plugins` section of an ESLintRC-style config.\n   * @param {...string} plugins The names of the plugins to load.\n   * @returns {Object} A flag-config object representing the plugins.\n   */\n\n\n  plugins() {\n    for (var _len2 = arguments.length, plugins = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      plugins[_key2] = arguments[_key2];\n    }\n\n    return this.config({\n      plugins\n    });\n  }\n\n}\n\nexports.FlatCompat = FlatCompat;","map":{"version":3,"names":["path","require","environments","createDebug","ConfigArrayFactory","debug","cafactory","Symbol","translateESLintRC","eslintrcConfig","resolveConfigRelativeTo","resolvePluginsRelativeTo","pluginEnvironments","pluginProcessors","flatConfig","configs","languageOptions","linterOptions","keysToCopy","languageOptionsKeysToCopy","linterOptionsKeysToCopy","settings","key","error","definition","parserOptions","ecmaVersion","sourceType","Object","keys","length","criteria","files","absoluteFilePath","test","plugins","pluginName","plugin","processors","processorName","startsWith","unshift","processor","get","env","envName","has","push","FlatCompat","constructor","baseDirectory","process","cwd","eslintAllPath","resolve","__dirname","eslintRecommendedPath","config","eslintrcArray","create","basePath","flatArray","hasIgnorePatterns","forEach","configData","type","ignorePattern","join","ignores","filePath","finalConfig","extractConfig","Boolean","envConfig","extends","configsToExtend","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/@eslint/eslintrc/lib/flat-compat.js"],"sourcesContent":["/**\n * @fileoverview Compatibility class for flat config.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nconst path = require(\"path\");\nconst environments = require(\"../conf/environments\");\nconst createDebug = require(\"debug\");\nconst { ConfigArrayFactory } = require(\"./config-array-factory\");\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/** @typedef {import(\"../../shared/types\").Environment} Environment */\n/** @typedef {import(\"../../shared/types\").Processor} Processor */\n\nconst debug = createDebug(\"eslintrc:flat-compat\");\nconst cafactory = Symbol(\"cafactory\");\n\n/**\n * Translates an ESLintRC-style config object into a flag-config-style config\n * object.\n * @param {Object} eslintrcConfig An ESLintRC-style config object.\n * @param {Object} options Options to help translate the config.\n * @param {string} options.resolveConfigRelativeTo To the directory to resolve\n *      configs from.\n * @param {string} options.resolvePluginsRelativeTo The directory to resolve\n *      plugins from.\n * @param {ReadOnlyMap<string,Environment>} options.pluginEnvironments A map of plugin environment\n *      names to objects.\n * @param {ReadOnlyMap<string,Processor>} options.pluginProcessors A map of plugin processor\n *      names to objects.\n * @returns {Object} A flag-config-style config object.\n */\nfunction translateESLintRC(eslintrcConfig, {\n    resolveConfigRelativeTo,\n    resolvePluginsRelativeTo,\n    pluginEnvironments,\n    pluginProcessors\n}) {\n\n    const flatConfig = {};\n    const configs = [];\n    const languageOptions = {};\n    const linterOptions = {};\n    const keysToCopy = [\"settings\", \"rules\", \"processor\"];\n    const languageOptionsKeysToCopy = [\"globals\", \"parser\", \"parserOptions\"];\n    const linterOptionsKeysToCopy = [\"noInlineConfig\", \"reportUnusedDisableDirectives\"];\n\n    // check for special settings for eslint:all and eslint:recommended:\n    if (eslintrcConfig.settings) {\n        if (eslintrcConfig.settings[\"eslint:all\"] === true) {\n            return [\"eslint:all\"];\n        }\n\n        if (eslintrcConfig.settings[\"eslint:recommended\"] === true) {\n            return [\"eslint:recommended\"];\n        }\n    }\n\n    // copy over simple translations\n    for (const key of keysToCopy) {\n        if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n            flatConfig[key] = eslintrcConfig[key];\n        }\n    }\n\n    // copy over languageOptions\n    for (const key of languageOptionsKeysToCopy) {\n        if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n\n            // create the languageOptions key in the flat config\n            flatConfig.languageOptions = languageOptions;\n\n            if (key === \"parser\") {\n                debug(`Resolving parser '${languageOptions[key]}' relative to ${resolveConfigRelativeTo}`);\n\n                if (eslintrcConfig[key].error) {\n                    throw eslintrcConfig[key].error;\n                }\n\n                languageOptions[key] = eslintrcConfig[key].definition;\n                continue;\n            }\n\n            // clone any object values that are in the eslintrc config\n            if (eslintrcConfig[key] && typeof eslintrcConfig[key] === \"object\") {\n                languageOptions[key] = {\n                    ...eslintrcConfig[key]\n                };\n            } else {\n                languageOptions[key] = eslintrcConfig[key];\n            }\n        }\n    }\n\n    // copy over linterOptions\n    for (const key of linterOptionsKeysToCopy) {\n        if (key in eslintrcConfig && typeof eslintrcConfig[key] !== \"undefined\") {\n            flatConfig.linterOptions = linterOptions;\n            linterOptions[key] = eslintrcConfig[key];\n        }\n    }\n\n    // move ecmaVersion a level up\n    if (languageOptions.parserOptions) {\n\n        if (\"ecmaVersion\" in languageOptions.parserOptions) {\n            languageOptions.ecmaVersion = languageOptions.parserOptions.ecmaVersion;\n            delete languageOptions.parserOptions.ecmaVersion;\n        }\n\n        if (\"sourceType\" in languageOptions.parserOptions) {\n            languageOptions.sourceType = languageOptions.parserOptions.sourceType;\n            delete languageOptions.parserOptions.sourceType;\n        }\n\n        // check to see if we even need parserOptions anymore and remove it if not\n        if (Object.keys(languageOptions.parserOptions).length === 0) {\n            delete languageOptions.parserOptions;\n        }\n    }\n\n    // overrides\n    if (eslintrcConfig.criteria) {\n        flatConfig.files = [absoluteFilePath => eslintrcConfig.criteria.test(absoluteFilePath)];\n    }\n\n    // translate plugins\n    if (eslintrcConfig.plugins && typeof eslintrcConfig.plugins === \"object\") {\n        debug(`Translating plugins: ${eslintrcConfig.plugins}`);\n\n        flatConfig.plugins = {};\n\n        for (const pluginName of Object.keys(eslintrcConfig.plugins)) {\n\n            debug(`Translating plugin: ${pluginName}`);\n            debug(`Resolving plugin '${pluginName} relative to ${resolvePluginsRelativeTo}`);\n\n            const { definition: plugin, error } = eslintrcConfig.plugins[pluginName];\n\n            if (error) {\n                throw error;\n            }\n\n            flatConfig.plugins[pluginName] = plugin;\n\n            // create a config for any processors\n            if (plugin.processors) {\n                for (const processorName of Object.keys(plugin.processors)) {\n                    if (processorName.startsWith(\".\")) {\n                        debug(`Assigning processor: ${pluginName}/${processorName}`);\n\n                        configs.unshift({\n                            files: [`**/*${processorName}`],\n                            processor: pluginProcessors.get(`${pluginName}/${processorName}`)\n                        });\n                    }\n\n                }\n            }\n        }\n    }\n\n    // translate env - must come after plugins\n    if (eslintrcConfig.env && typeof eslintrcConfig.env === \"object\") {\n        for (const envName of Object.keys(eslintrcConfig.env)) {\n\n            // only add environments that are true\n            if (eslintrcConfig.env[envName]) {\n                debug(`Translating environment: ${envName}`);\n\n                if (environments.has(envName)) {\n\n                    // built-in environments should be defined first\n                    configs.unshift(...translateESLintRC(environments.get(envName), {\n                        resolveConfigRelativeTo,\n                        resolvePluginsRelativeTo\n                    }));\n                } else if (pluginEnvironments.has(envName)) {\n\n                    // if the environment comes from a plugin, it should come after the plugin config\n                    configs.push(...translateESLintRC(pluginEnvironments.get(envName), {\n                        resolveConfigRelativeTo,\n                        resolvePluginsRelativeTo\n                    }));\n                }\n            }\n        }\n    }\n\n    // only add if there are actually keys in the config\n    if (Object.keys(flatConfig).length > 0) {\n        configs.push(flatConfig);\n    }\n\n    return configs;\n}\n\n\n//-----------------------------------------------------------------------------\n// Exports\n//-----------------------------------------------------------------------------\n\n/**\n * A compatibility class for working with configs.\n */\nclass FlatCompat {\n\n    constructor({\n        baseDirectory = process.cwd(),\n        resolvePluginsRelativeTo = baseDirectory\n    } = {}) {\n        this.baseDirectory = baseDirectory;\n        this.resolvePluginsRelativeTo = resolvePluginsRelativeTo;\n        this[cafactory] = new ConfigArrayFactory({\n            cwd: baseDirectory,\n            resolvePluginsRelativeTo,\n            eslintAllPath: path.resolve(__dirname, \"../conf/eslint-all.js\"),\n            eslintRecommendedPath: path.resolve(__dirname, \"../conf/eslint-recommended.js\")\n        });\n    }\n\n    /**\n     * Translates an ESLintRC-style config into a flag-config-style config.\n     * @param {Object} eslintrcConfig The ESLintRC-style config object.\n     * @returns {Object} A flag-config-style config object.\n     */\n    config(eslintrcConfig) {\n        const eslintrcArray = this[cafactory].create(eslintrcConfig, {\n            basePath: this.baseDirectory\n        });\n\n        const flatArray = [];\n        let hasIgnorePatterns = false;\n\n        eslintrcArray.forEach(configData => {\n            if (configData.type === \"config\") {\n                hasIgnorePatterns = hasIgnorePatterns || configData.ignorePattern;\n                flatArray.push(...translateESLintRC(configData, {\n                    resolveConfigRelativeTo: path.join(this.baseDirectory, \"__placeholder.js\"),\n                    resolvePluginsRelativeTo: path.join(this.resolvePluginsRelativeTo, \"__placeholder.js\"),\n                    pluginEnvironments: eslintrcArray.pluginEnvironments,\n                    pluginProcessors: eslintrcArray.pluginProcessors\n                }));\n            }\n        });\n\n        // combine ignorePatterns to emulate ESLintRC behavior better\n        if (hasIgnorePatterns) {\n            flatArray.unshift({\n                ignores: [filePath => {\n\n                    // Compute the final config for this file.\n                    // This filters config array elements by `files`/`excludedFiles` then merges the elements.\n                    const finalConfig = eslintrcArray.extractConfig(filePath);\n\n                    // Test the `ignorePattern` properties of the final config.\n                    return Boolean(finalConfig.ignores) && finalConfig.ignores(filePath);\n                }]\n            });\n        }\n\n        return flatArray;\n    }\n\n    /**\n     * Translates the `env` section of an ESLintRC-style config.\n     * @param {Object} envConfig The `env` section of an ESLintRC config.\n     * @returns {Object} A flag-config object representing the environments.\n     */\n    env(envConfig) {\n        return this.config({\n            env: envConfig\n        });\n    }\n\n    /**\n     * Translates the `extends` section of an ESLintRC-style config.\n     * @param {...string} configsToExtend The names of the configs to load.\n     * @returns {Object} A flag-config object representing the config.\n     */\n    extends(...configsToExtend) {\n        return this.config({\n            extends: configsToExtend\n        });\n    }\n\n    /**\n     * Translates the `plugins` section of an ESLintRC-style config.\n     * @param {...string} plugins The names of the plugins to load.\n     * @returns {Object} A flag-config object representing the plugins.\n     */\n    plugins(...plugins) {\n        return this.config({\n            plugins\n        });\n    }\n}\n\nexports.FlatCompat = FlatCompat;\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,OAAD,CAA3B;;AACA,MAAM;EAAEG;AAAF,IAAyBH,OAAO,CAAC,wBAAD,CAAtC,C,CAEA;AACA;AACA;;AAEA;;AACA;;;AAEA,MAAMI,KAAK,GAAGF,WAAW,CAAC,sBAAD,CAAzB;AACA,MAAMG,SAAS,GAAGC,MAAM,CAAC,WAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,cAA3B,QAKG;EAAA,IALwC;IACvCC,uBADuC;IAEvCC,wBAFuC;IAGvCC,kBAHuC;IAIvCC;EAJuC,CAKxC;EAEC,MAAMC,UAAU,GAAG,EAAnB;EACA,MAAMC,OAAO,GAAG,EAAhB;EACA,MAAMC,eAAe,GAAG,EAAxB;EACA,MAAMC,aAAa,GAAG,EAAtB;EACA,MAAMC,UAAU,GAAG,CAAC,UAAD,EAAa,OAAb,EAAsB,WAAtB,CAAnB;EACA,MAAMC,yBAAyB,GAAG,CAAC,SAAD,EAAY,QAAZ,EAAsB,eAAtB,CAAlC;EACA,MAAMC,uBAAuB,GAAG,CAAC,gBAAD,EAAmB,+BAAnB,CAAhC,CARD,CAUC;;EACA,IAAIX,cAAc,CAACY,QAAnB,EAA6B;IACzB,IAAIZ,cAAc,CAACY,QAAf,CAAwB,YAAxB,MAA0C,IAA9C,EAAoD;MAChD,OAAO,CAAC,YAAD,CAAP;IACH;;IAED,IAAIZ,cAAc,CAACY,QAAf,CAAwB,oBAAxB,MAAkD,IAAtD,EAA4D;MACxD,OAAO,CAAC,oBAAD,CAAP;IACH;EACJ,CAnBF,CAqBC;;;EACA,KAAK,MAAMC,GAAX,IAAkBJ,UAAlB,EAA8B;IAC1B,IAAII,GAAG,IAAIb,cAAP,IAAyB,OAAOA,cAAc,CAACa,GAAD,CAArB,KAA+B,WAA5D,EAAyE;MACrER,UAAU,CAACQ,GAAD,CAAV,GAAkBb,cAAc,CAACa,GAAD,CAAhC;IACH;EACJ,CA1BF,CA4BC;;;EACA,KAAK,MAAMA,GAAX,IAAkBH,yBAAlB,EAA6C;IACzC,IAAIG,GAAG,IAAIb,cAAP,IAAyB,OAAOA,cAAc,CAACa,GAAD,CAArB,KAA+B,WAA5D,EAAyE;MAErE;MACAR,UAAU,CAACE,eAAX,GAA6BA,eAA7B;;MAEA,IAAIM,GAAG,KAAK,QAAZ,EAAsB;QAClBjB,KAAK,CAAE,qBAAoBW,eAAe,CAACM,GAAD,CAAM,iBAAgBZ,uBAAwB,EAAnF,CAAL;;QAEA,IAAID,cAAc,CAACa,GAAD,CAAd,CAAoBC,KAAxB,EAA+B;UAC3B,MAAMd,cAAc,CAACa,GAAD,CAAd,CAAoBC,KAA1B;QACH;;QAEDP,eAAe,CAACM,GAAD,CAAf,GAAuBb,cAAc,CAACa,GAAD,CAAd,CAAoBE,UAA3C;QACA;MACH,CAdoE,CAgBrE;;;MACA,IAAIf,cAAc,CAACa,GAAD,CAAd,IAAuB,OAAOb,cAAc,CAACa,GAAD,CAArB,KAA+B,QAA1D,EAAoE;QAChEN,eAAe,CAACM,GAAD,CAAf,GAAuB,EACnB,GAAGb,cAAc,CAACa,GAAD;QADE,CAAvB;MAGH,CAJD,MAIO;QACHN,eAAe,CAACM,GAAD,CAAf,GAAuBb,cAAc,CAACa,GAAD,CAArC;MACH;IACJ;EACJ,CAvDF,CAyDC;;;EACA,KAAK,MAAMA,GAAX,IAAkBF,uBAAlB,EAA2C;IACvC,IAAIE,GAAG,IAAIb,cAAP,IAAyB,OAAOA,cAAc,CAACa,GAAD,CAArB,KAA+B,WAA5D,EAAyE;MACrER,UAAU,CAACG,aAAX,GAA2BA,aAA3B;MACAA,aAAa,CAACK,GAAD,CAAb,GAAqBb,cAAc,CAACa,GAAD,CAAnC;IACH;EACJ,CA/DF,CAiEC;;;EACA,IAAIN,eAAe,CAACS,aAApB,EAAmC;IAE/B,IAAI,iBAAiBT,eAAe,CAACS,aAArC,EAAoD;MAChDT,eAAe,CAACU,WAAhB,GAA8BV,eAAe,CAACS,aAAhB,CAA8BC,WAA5D;MACA,OAAOV,eAAe,CAACS,aAAhB,CAA8BC,WAArC;IACH;;IAED,IAAI,gBAAgBV,eAAe,CAACS,aAApC,EAAmD;MAC/CT,eAAe,CAACW,UAAhB,GAA6BX,eAAe,CAACS,aAAhB,CAA8BE,UAA3D;MACA,OAAOX,eAAe,CAACS,aAAhB,CAA8BE,UAArC;IACH,CAV8B,CAY/B;;;IACA,IAAIC,MAAM,CAACC,IAAP,CAAYb,eAAe,CAACS,aAA5B,EAA2CK,MAA3C,KAAsD,CAA1D,EAA6D;MACzD,OAAOd,eAAe,CAACS,aAAvB;IACH;EACJ,CAlFF,CAoFC;;;EACA,IAAIhB,cAAc,CAACsB,QAAnB,EAA6B;IACzBjB,UAAU,CAACkB,KAAX,GAAmB,CAACC,gBAAgB,IAAIxB,cAAc,CAACsB,QAAf,CAAwBG,IAAxB,CAA6BD,gBAA7B,CAArB,CAAnB;EACH,CAvFF,CAyFC;;;EACA,IAAIxB,cAAc,CAAC0B,OAAf,IAA0B,OAAO1B,cAAc,CAAC0B,OAAtB,KAAkC,QAAhE,EAA0E;IACtE9B,KAAK,CAAE,wBAAuBI,cAAc,CAAC0B,OAAQ,EAAhD,CAAL;IAEArB,UAAU,CAACqB,OAAX,GAAqB,EAArB;;IAEA,KAAK,MAAMC,UAAX,IAAyBR,MAAM,CAACC,IAAP,CAAYpB,cAAc,CAAC0B,OAA3B,CAAzB,EAA8D;MAE1D9B,KAAK,CAAE,uBAAsB+B,UAAW,EAAnC,CAAL;MACA/B,KAAK,CAAE,qBAAoB+B,UAAW,gBAAezB,wBAAyB,EAAzE,CAAL;MAEA,MAAM;QAAEa,UAAU,EAAEa,MAAd;QAAsBd;MAAtB,IAAgCd,cAAc,CAAC0B,OAAf,CAAuBC,UAAvB,CAAtC;;MAEA,IAAIb,KAAJ,EAAW;QACP,MAAMA,KAAN;MACH;;MAEDT,UAAU,CAACqB,OAAX,CAAmBC,UAAnB,IAAiCC,MAAjC,CAX0D,CAa1D;;MACA,IAAIA,MAAM,CAACC,UAAX,EAAuB;QACnB,KAAK,MAAMC,aAAX,IAA4BX,MAAM,CAACC,IAAP,CAAYQ,MAAM,CAACC,UAAnB,CAA5B,EAA4D;UACxD,IAAIC,aAAa,CAACC,UAAd,CAAyB,GAAzB,CAAJ,EAAmC;YAC/BnC,KAAK,CAAE,wBAAuB+B,UAAW,IAAGG,aAAc,EAArD,CAAL;YAEAxB,OAAO,CAAC0B,OAAR,CAAgB;cACZT,KAAK,EAAE,CAAE,OAAMO,aAAc,EAAtB,CADK;cAEZG,SAAS,EAAE7B,gBAAgB,CAAC8B,GAAjB,CAAsB,GAAEP,UAAW,IAAGG,aAAc,EAApD;YAFC,CAAhB;UAIH;QAEJ;MACJ;IACJ;EACJ,CA3HF,CA6HC;;;EACA,IAAI9B,cAAc,CAACmC,GAAf,IAAsB,OAAOnC,cAAc,CAACmC,GAAtB,KAA8B,QAAxD,EAAkE;IAC9D,KAAK,MAAMC,OAAX,IAAsBjB,MAAM,CAACC,IAAP,CAAYpB,cAAc,CAACmC,GAA3B,CAAtB,EAAuD;MAEnD;MACA,IAAInC,cAAc,CAACmC,GAAf,CAAmBC,OAAnB,CAAJ,EAAiC;QAC7BxC,KAAK,CAAE,4BAA2BwC,OAAQ,EAArC,CAAL;;QAEA,IAAI3C,YAAY,CAAC4C,GAAb,CAAiBD,OAAjB,CAAJ,EAA+B;UAE3B;UACA9B,OAAO,CAAC0B,OAAR,CAAgB,GAAGjC,iBAAiB,CAACN,YAAY,CAACyC,GAAb,CAAiBE,OAAjB,CAAD,EAA4B;YAC5DnC,uBAD4D;YAE5DC;UAF4D,CAA5B,CAApC;QAIH,CAPD,MAOO,IAAIC,kBAAkB,CAACkC,GAAnB,CAAuBD,OAAvB,CAAJ,EAAqC;UAExC;UACA9B,OAAO,CAACgC,IAAR,CAAa,GAAGvC,iBAAiB,CAACI,kBAAkB,CAAC+B,GAAnB,CAAuBE,OAAvB,CAAD,EAAkC;YAC/DnC,uBAD+D;YAE/DC;UAF+D,CAAlC,CAAjC;QAIH;MACJ;IACJ;EACJ,CAtJF,CAwJC;;;EACA,IAAIiB,MAAM,CAACC,IAAP,CAAYf,UAAZ,EAAwBgB,MAAxB,GAAiC,CAArC,EAAwC;IACpCf,OAAO,CAACgC,IAAR,CAAajC,UAAb;EACH;;EAED,OAAOC,OAAP;AACH,C,CAGD;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMiC,UAAN,CAAiB;EAEbC,WAAW,GAGH;IAAA,IAHI;MACRC,aAAa,GAAGC,OAAO,CAACC,GAAR,EADR;MAERzC,wBAAwB,GAAGuC;IAFnB,CAGJ,uEAAJ,EAAI;IACJ,KAAKA,aAAL,GAAqBA,aAArB;IACA,KAAKvC,wBAAL,GAAgCA,wBAAhC;IACA,KAAKL,SAAL,IAAkB,IAAIF,kBAAJ,CAAuB;MACrCgD,GAAG,EAAEF,aADgC;MAErCvC,wBAFqC;MAGrC0C,aAAa,EAAErD,IAAI,CAACsD,OAAL,CAAaC,SAAb,EAAwB,uBAAxB,CAHsB;MAIrCC,qBAAqB,EAAExD,IAAI,CAACsD,OAAL,CAAaC,SAAb,EAAwB,+BAAxB;IAJc,CAAvB,CAAlB;EAMH;EAED;AACJ;AACA;AACA;AACA;;;EACIE,MAAM,CAAChD,cAAD,EAAiB;IACnB,MAAMiD,aAAa,GAAG,KAAKpD,SAAL,EAAgBqD,MAAhB,CAAuBlD,cAAvB,EAAuC;MACzDmD,QAAQ,EAAE,KAAKV;IAD0C,CAAvC,CAAtB;IAIA,MAAMW,SAAS,GAAG,EAAlB;IACA,IAAIC,iBAAiB,GAAG,KAAxB;IAEAJ,aAAa,CAACK,OAAd,CAAsBC,UAAU,IAAI;MAChC,IAAIA,UAAU,CAACC,IAAX,KAAoB,QAAxB,EAAkC;QAC9BH,iBAAiB,GAAGA,iBAAiB,IAAIE,UAAU,CAACE,aAApD;QACAL,SAAS,CAACd,IAAV,CAAe,GAAGvC,iBAAiB,CAACwD,UAAD,EAAa;UAC5CtD,uBAAuB,EAAEV,IAAI,CAACmE,IAAL,CAAU,KAAKjB,aAAf,EAA8B,kBAA9B,CADmB;UAE5CvC,wBAAwB,EAAEX,IAAI,CAACmE,IAAL,CAAU,KAAKxD,wBAAf,EAAyC,kBAAzC,CAFkB;UAG5CC,kBAAkB,EAAE8C,aAAa,CAAC9C,kBAHU;UAI5CC,gBAAgB,EAAE6C,aAAa,CAAC7C;QAJY,CAAb,CAAnC;MAMH;IACJ,CAVD,EARmB,CAoBnB;;IACA,IAAIiD,iBAAJ,EAAuB;MACnBD,SAAS,CAACpB,OAAV,CAAkB;QACd2B,OAAO,EAAE,CAACC,QAAQ,IAAI;UAElB;UACA;UACA,MAAMC,WAAW,GAAGZ,aAAa,CAACa,aAAd,CAA4BF,QAA5B,CAApB,CAJkB,CAMlB;;UACA,OAAOG,OAAO,CAACF,WAAW,CAACF,OAAb,CAAP,IAAgCE,WAAW,CAACF,OAAZ,CAAoBC,QAApB,CAAvC;QACH,CARQ;MADK,CAAlB;IAWH;;IAED,OAAOR,SAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIjB,GAAG,CAAC6B,SAAD,EAAY;IACX,OAAO,KAAKhB,MAAL,CAAY;MACfb,GAAG,EAAE6B;IADU,CAAZ,CAAP;EAGH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,OAAO,GAAqB;IAAA,kCAAjBC,eAAiB;MAAjBA,eAAiB;IAAA;;IACxB,OAAO,KAAKlB,MAAL,CAAY;MACfiB,OAAO,EAAEC;IADM,CAAZ,CAAP;EAGH;EAED;AACJ;AACA;AACA;AACA;;;EACIxC,OAAO,GAAa;IAAA,mCAATA,OAAS;MAATA,OAAS;IAAA;;IAChB,OAAO,KAAKsB,MAAL,CAAY;MACftB;IADe,CAAZ,CAAP;EAGH;;AA1FY;;AA6FjByC,OAAO,CAAC5B,UAAR,GAAqBA,UAArB"},"metadata":{},"sourceType":"script"}