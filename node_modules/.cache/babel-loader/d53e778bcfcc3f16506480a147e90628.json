{"ast":null,"code":"let _fs;\n\ntry {\n  _fs = require('graceful-fs');\n} catch (_) {\n  _fs = require('fs');\n}\n\nconst universalify = require('universalify');\n\nconst {\n  stringify,\n  stripBom\n} = require('./utils');\n\nasync function _readFile(file) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  const fs = options.fs || _fs;\n  const shouldThrow = 'throws' in options ? options.throws : true;\n  let data = await universalify.fromCallback(fs.readFile)(file, options);\n  data = stripBom(data);\n  let obj;\n\n  try {\n    obj = JSON.parse(data, options ? options.reviver : null);\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`;\n      throw err;\n    } else {\n      return null;\n    }\n  }\n\n  return obj;\n}\n\nconst readFile = universalify.fromPromise(_readFile);\n\nfunction readFileSync(file) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof options === 'string') {\n    options = {\n      encoding: options\n    };\n  }\n\n  const fs = options.fs || _fs;\n  const shouldThrow = 'throws' in options ? options.throws : true;\n\n  try {\n    let content = fs.readFileSync(file, options);\n    content = stripBom(content);\n    return JSON.parse(content, options.reviver);\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`;\n      throw err;\n    } else {\n      return null;\n    }\n  }\n}\n\nasync function _writeFile(file, obj) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const fs = options.fs || _fs;\n  const str = stringify(obj, options);\n  await universalify.fromCallback(fs.writeFile)(file, str, options);\n}\n\nconst writeFile = universalify.fromPromise(_writeFile);\n\nfunction writeFileSync(file, obj) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const fs = options.fs || _fs;\n  const str = stringify(obj, options); // not sure if fs.writeFileSync returns anything, but just in case\n\n  return fs.writeFileSync(file, str, options);\n}\n\nconst jsonfile = {\n  readFile,\n  readFileSync,\n  writeFile,\n  writeFileSync\n};\nmodule.exports = jsonfile;","map":{"version":3,"names":["_fs","require","_","universalify","stringify","stripBom","_readFile","file","options","encoding","fs","shouldThrow","throws","data","fromCallback","readFile","obj","JSON","parse","reviver","err","message","fromPromise","readFileSync","content","_writeFile","str","writeFile","writeFileSync","jsonfile","module","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/jsonfile/index.js"],"sourcesContent":["let _fs\ntry {\n  _fs = require('graceful-fs')\n} catch (_) {\n  _fs = require('fs')\n}\nconst universalify = require('universalify')\nconst { stringify, stripBom } = require('./utils')\n\nasync function _readFile (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  let data = await universalify.fromCallback(fs.readFile)(file, options)\n\n  data = stripBom(data)\n\n  let obj\n  try {\n    obj = JSON.parse(data, options ? options.reviver : null)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n\n  return obj\n}\n\nconst readFile = universalify.fromPromise(_readFile)\n\nfunction readFileSync (file, options = {}) {\n  if (typeof options === 'string') {\n    options = { encoding: options }\n  }\n\n  const fs = options.fs || _fs\n\n  const shouldThrow = 'throws' in options ? options.throws : true\n\n  try {\n    let content = fs.readFileSync(file, options)\n    content = stripBom(content)\n    return JSON.parse(content, options.reviver)\n  } catch (err) {\n    if (shouldThrow) {\n      err.message = `${file}: ${err.message}`\n      throw err\n    } else {\n      return null\n    }\n  }\n}\n\nasync function _writeFile (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n\n  await universalify.fromCallback(fs.writeFile)(file, str, options)\n}\n\nconst writeFile = universalify.fromPromise(_writeFile)\n\nfunction writeFileSync (file, obj, options = {}) {\n  const fs = options.fs || _fs\n\n  const str = stringify(obj, options)\n  // not sure if fs.writeFileSync returns anything, but just in case\n  return fs.writeFileSync(file, str, options)\n}\n\nconst jsonfile = {\n  readFile,\n  readFileSync,\n  writeFile,\n  writeFileSync\n}\n\nmodule.exports = jsonfile\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}