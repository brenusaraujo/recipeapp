{"ast":null,"code":"'use strict';\n/*eslint-disable max-len*/\n\nvar common = require('./common');\n\nvar YAMLException = require('./exception');\n\nvar Type = require('./type');\n\nfunction compileList(schema, name, result) {\n  var exclude = [];\n  schema.include.forEach(function (includedSchema) {\n    result = compileList(includedSchema, name, result);\n  });\n  schema[name].forEach(function (currentType) {\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {\n        exclude.push(previousIndex);\n      }\n    });\n    result.push(currentType);\n  });\n  return result.filter(function (type, index) {\n    return exclude.indexOf(index) === -1;\n  });\n}\n\nfunction\n  /* lists... */\ncompileMap() {\n  var result = {\n    scalar: {},\n    sequence: {},\n    mapping: {},\n    fallback: {}\n  },\n      index,\n      length;\n\n  function collectType(type) {\n    result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n\n  return result;\n}\n\nfunction Schema(definition) {\n  this.include = definition.include || [];\n  this.implicit = definition.implicit || [];\n  this.explicit = definition.explicit || [];\n  this.implicit.forEach(function (type) {\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n  });\n  this.compiledImplicit = compileList(this, 'implicit', []);\n  this.compiledExplicit = compileList(this, 'explicit', []);\n  this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\n\nSchema.DEFAULT = null;\n\nSchema.create = function createSchema() {\n  var schemas, types;\n\n  switch (arguments.length) {\n    case 1:\n      schemas = Schema.DEFAULT;\n      types = arguments[0];\n      break;\n\n    case 2:\n      schemas = arguments[0];\n      types = arguments[1];\n      break;\n\n    default:\n      throw new YAMLException('Wrong number of arguments for Schema.create function');\n  }\n\n  schemas = common.toArray(schemas);\n  types = common.toArray(types);\n\n  if (!schemas.every(function (schema) {\n    return schema instanceof Schema;\n  })) {\n    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n  }\n\n  if (!types.every(function (type) {\n    return type instanceof Type;\n  })) {\n    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n  }\n\n  return new Schema({\n    include: schemas,\n    explicit: types\n  });\n};\n\nmodule.exports = Schema;","map":{"version":3,"names":["common","require","YAMLException","Type","compileList","schema","name","result","exclude","include","forEach","includedSchema","currentType","previousType","previousIndex","tag","kind","push","filter","type","index","indexOf","compileMap","scalar","sequence","mapping","fallback","length","collectType","arguments","Schema","definition","implicit","explicit","loadKind","compiledImplicit","compiledExplicit","compiledTypeMap","DEFAULT","create","createSchema","schemas","types","toArray","every","module","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/js-yaml/lib/js-yaml/schema.js"],"sourcesContent":["'use strict';\n\n/*eslint-disable max-len*/\n\nvar common        = require('./common');\nvar YAMLException = require('./exception');\nvar Type          = require('./type');\n\n\nfunction compileList(schema, name, result) {\n  var exclude = [];\n\n  schema.include.forEach(function (includedSchema) {\n    result = compileList(includedSchema, name, result);\n  });\n\n  schema[name].forEach(function (currentType) {\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {\n        exclude.push(previousIndex);\n      }\n    });\n\n    result.push(currentType);\n  });\n\n  return result.filter(function (type, index) {\n    return exclude.indexOf(index) === -1;\n  });\n}\n\n\nfunction compileMap(/* lists... */) {\n  var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {}\n      }, index, length;\n\n  function collectType(type) {\n    result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\n\n\nfunction Schema(definition) {\n  this.include  = definition.include  || [];\n  this.implicit = definition.implicit || [];\n  this.explicit = definition.explicit || [];\n\n  this.implicit.forEach(function (type) {\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n  });\n\n  this.compiledImplicit = compileList(this, 'implicit', []);\n  this.compiledExplicit = compileList(this, 'explicit', []);\n  this.compiledTypeMap  = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\n\n\nSchema.DEFAULT = null;\n\n\nSchema.create = function createSchema() {\n  var schemas, types;\n\n  switch (arguments.length) {\n    case 1:\n      schemas = Schema.DEFAULT;\n      types = arguments[0];\n      break;\n\n    case 2:\n      schemas = arguments[0];\n      types = arguments[1];\n      break;\n\n    default:\n      throw new YAMLException('Wrong number of arguments for Schema.create function');\n  }\n\n  schemas = common.toArray(schemas);\n  types = common.toArray(types);\n\n  if (!schemas.every(function (schema) { return schema instanceof Schema; })) {\n    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n  }\n\n  if (!types.every(function (type) { return type instanceof Type; })) {\n    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n  }\n\n  return new Schema({\n    include: schemas,\n    explicit: types\n  });\n};\n\n\nmodule.exports = Schema;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}