{"ast":null,"code":"/**\n * @fileoverview Rule to flag assignment of the exception parameter\n * @author Stephen Murray <spmurrayzzz>\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow reassigning exceptions in `catch` clauses\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-ex-assign\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Do not assign to the exception parameter.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n    function checkVariable(variable) {\n      astUtils.getModifyingReferences(variable.references).forEach(reference => {\n        context.report({\n          node: reference.identifier,\n          messageId: \"unexpected\"\n        });\n      });\n    }\n\n    return {\n      CatchClause(node) {\n        context.getDeclaredVariables(node).forEach(checkVariable);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","checkVariable","variable","getModifyingReferences","references","forEach","reference","report","node","identifier","messageId","CatchClause","getDeclaredVariables"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-ex-assign.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag assignment of the exception parameter\n * @author Stephen Murray <spmurrayzzz>\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow reassigning exceptions in `catch` clauses\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-ex-assign\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Do not assign to the exception parameter.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            astUtils.getModifyingReferences(variable.references).forEach(reference => {\n                context.report({ node: reference.identifier, messageId: \"unexpected\" });\n            });\n        }\n\n        return {\n            CatchClause(node) {\n                context.getDeclaredVariables(node).forEach(checkVariable);\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,oDADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;MAC7BjB,QAAQ,CAACkB,sBAAT,CAAgCD,QAAQ,CAACE,UAAzC,EAAqDC,OAArD,CAA6DC,SAAS,IAAI;QACtEN,OAAO,CAACO,MAAR,CAAe;UAAEC,IAAI,EAAEF,SAAS,CAACG,UAAlB;UAA8BC,SAAS,EAAE;QAAzC,CAAf;MACH,CAFD;IAGH;;IAED,OAAO;MACHC,WAAW,CAACH,IAAD,EAAO;QACdR,OAAO,CAACY,oBAAR,CAA6BJ,IAA7B,EAAmCH,OAAnC,CAA2CJ,aAA3C;MACH;;IAHE,CAAP;EAMH;;AArCY,CAAjB"},"metadata":{},"sourceType":"script"}