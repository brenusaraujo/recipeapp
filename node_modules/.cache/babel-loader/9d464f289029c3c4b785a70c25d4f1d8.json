{"ast":null,"code":"/**\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing around embedded expressions of template strings\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/template-curly-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      expectedBefore: \"Expected space(s) before '}'.\",\n      expectedAfter: \"Expected space(s) after '${'.\",\n      unexpectedBefore: \"Unexpected space(s) before '}'.\",\n      unexpectedAfter: \"Unexpected space(s) after '${'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const always = context.options[0] === \"always\";\n    /**\n     * Checks spacing before `}` of a given token.\n     * @param {Token} token A token to check. This is a Template token.\n     * @returns {void}\n     */\n\n    function checkSpacingBefore(token) {\n      if (!token.value.startsWith(\"}\")) {\n        return; // starts with a backtick, this is the first template element in the template literal\n      }\n\n      const prevToken = sourceCode.getTokenBefore(token, {\n        includeComments: true\n      }),\n            hasSpace = sourceCode.isSpaceBetween(prevToken, token);\n\n      if (!astUtils.isTokenOnSameLine(prevToken, token)) {\n        return;\n      }\n\n      if (always && !hasSpace) {\n        context.report({\n          loc: {\n            start: token.loc.start,\n            end: {\n              line: token.loc.start.line,\n              column: token.loc.start.column + 1\n            }\n          },\n          messageId: \"expectedBefore\",\n          fix: fixer => fixer.insertTextBefore(token, \" \")\n        });\n      }\n\n      if (!always && hasSpace) {\n        context.report({\n          loc: {\n            start: prevToken.loc.end,\n            end: token.loc.start\n          },\n          messageId: \"unexpectedBefore\",\n          fix: fixer => fixer.removeRange([prevToken.range[1], token.range[0]])\n        });\n      }\n    }\n    /**\n     * Checks spacing after `${` of a given token.\n     * @param {Token} token A token to check. This is a Template token.\n     * @returns {void}\n     */\n\n\n    function checkSpacingAfter(token) {\n      if (!token.value.endsWith(\"${\")) {\n        return; // ends with a backtick, this is the last template element in the template literal\n      }\n\n      const nextToken = sourceCode.getTokenAfter(token, {\n        includeComments: true\n      }),\n            hasSpace = sourceCode.isSpaceBetween(token, nextToken);\n\n      if (!astUtils.isTokenOnSameLine(token, nextToken)) {\n        return;\n      }\n\n      if (always && !hasSpace) {\n        context.report({\n          loc: {\n            start: {\n              line: token.loc.end.line,\n              column: token.loc.end.column - 2\n            },\n            end: token.loc.end\n          },\n          messageId: \"expectedAfter\",\n          fix: fixer => fixer.insertTextAfter(token, \" \")\n        });\n      }\n\n      if (!always && hasSpace) {\n        context.report({\n          loc: {\n            start: token.loc.end,\n            end: nextToken.loc.start\n          },\n          messageId: \"unexpectedAfter\",\n          fix: fixer => fixer.removeRange([token.range[1], nextToken.range[0]])\n        });\n      }\n    }\n\n    return {\n      TemplateElement(node) {\n        const token = sourceCode.getFirstToken(node);\n        checkSpacingBefore(token);\n        checkSpacingAfter(token);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","expectedBefore","expectedAfter","unexpectedBefore","unexpectedAfter","create","context","sourceCode","getSourceCode","always","options","checkSpacingBefore","token","value","startsWith","prevToken","getTokenBefore","includeComments","hasSpace","isSpaceBetween","isTokenOnSameLine","report","loc","start","end","line","column","messageId","fix","fixer","insertTextBefore","removeRange","range","checkSpacingAfter","endsWith","nextToken","getTokenAfter","insertTextAfter","TemplateElement","node","getFirstToken"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/template-curly-spacing.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce spacing around embedded expressions of template strings\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow spacing around embedded expressions of template strings\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/template-curly-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            { enum: [\"always\", \"never\"] }\n        ],\n        messages: {\n            expectedBefore: \"Expected space(s) before '}'.\",\n            expectedAfter: \"Expected space(s) after '${'.\",\n            unexpectedBefore: \"Unexpected space(s) before '}'.\",\n            unexpectedAfter: \"Unexpected space(s) after '${'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const always = context.options[0] === \"always\";\n\n        /**\n         * Checks spacing before `}` of a given token.\n         * @param {Token} token A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingBefore(token) {\n            if (!token.value.startsWith(\"}\")) {\n                return; // starts with a backtick, this is the first template element in the template literal\n            }\n\n            const prevToken = sourceCode.getTokenBefore(token, { includeComments: true }),\n                hasSpace = sourceCode.isSpaceBetween(prevToken, token);\n\n            if (!astUtils.isTokenOnSameLine(prevToken, token)) {\n                return;\n            }\n\n            if (always && !hasSpace) {\n                context.report({\n                    loc: {\n                        start: token.loc.start,\n                        end: {\n                            line: token.loc.start.line,\n                            column: token.loc.start.column + 1\n                        }\n                    },\n                    messageId: \"expectedBefore\",\n                    fix: fixer => fixer.insertTextBefore(token, \" \")\n                });\n            }\n\n            if (!always && hasSpace) {\n                context.report({\n                    loc: {\n                        start: prevToken.loc.end,\n                        end: token.loc.start\n                    },\n                    messageId: \"unexpectedBefore\",\n                    fix: fixer => fixer.removeRange([prevToken.range[1], token.range[0]])\n                });\n            }\n        }\n\n        /**\n         * Checks spacing after `${` of a given token.\n         * @param {Token} token A token to check. This is a Template token.\n         * @returns {void}\n         */\n        function checkSpacingAfter(token) {\n            if (!token.value.endsWith(\"${\")) {\n                return; // ends with a backtick, this is the last template element in the template literal\n            }\n\n            const nextToken = sourceCode.getTokenAfter(token, { includeComments: true }),\n                hasSpace = sourceCode.isSpaceBetween(token, nextToken);\n\n            if (!astUtils.isTokenOnSameLine(token, nextToken)) {\n                return;\n            }\n\n            if (always && !hasSpace) {\n                context.report({\n                    loc: {\n                        start: {\n                            line: token.loc.end.line,\n                            column: token.loc.end.column - 2\n                        },\n                        end: token.loc.end\n                    },\n                    messageId: \"expectedAfter\",\n                    fix: fixer => fixer.insertTextAfter(token, \" \")\n                });\n            }\n\n            if (!always && hasSpace) {\n                context.report({\n                    loc: {\n                        start: token.loc.end,\n                        end: nextToken.loc.start\n                    },\n                    messageId: \"unexpectedAfter\",\n                    fix: fixer => fixer.removeRange([token.range[1], nextToken.range[0]])\n                });\n            }\n        }\n\n        return {\n            TemplateElement(node) {\n                const token = sourceCode.getFirstToken(node);\n\n                checkSpacingBefore(token);\n                checkSpacingAfter(token);\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,6EADX;MAEFC,QAAQ,EAAE,cAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,OAAO,EAAE,YAVP;IAYFC,MAAM,EAAE,CACJ;MAAEC,IAAI,EAAE,CAAC,QAAD,EAAW,OAAX;IAAR,CADI,CAZN;IAeFC,QAAQ,EAAE;MACNC,cAAc,EAAE,+BADV;MAENC,aAAa,EAAE,+BAFT;MAGNC,gBAAgB,EAAE,iCAHZ;MAINC,eAAe,EAAE;IAJX;EAfR,CADO;;EAwBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IACA,MAAMC,MAAM,GAAGH,OAAO,CAACI,OAAR,CAAgB,CAAhB,MAAuB,QAAtC;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;MAC/B,IAAI,CAACA,KAAK,CAACC,KAAN,CAAYC,UAAZ,CAAuB,GAAvB,CAAL,EAAkC;QAC9B,OAD8B,CACtB;MACX;;MAED,MAAMC,SAAS,GAAGR,UAAU,CAACS,cAAX,CAA0BJ,KAA1B,EAAiC;QAAEK,eAAe,EAAE;MAAnB,CAAjC,CAAlB;MAAA,MACIC,QAAQ,GAAGX,UAAU,CAACY,cAAX,CAA0BJ,SAA1B,EAAqCH,KAArC,CADf;;MAGA,IAAI,CAAC1B,QAAQ,CAACkC,iBAAT,CAA2BL,SAA3B,EAAsCH,KAAtC,CAAL,EAAmD;QAC/C;MACH;;MAED,IAAIH,MAAM,IAAI,CAACS,QAAf,EAAyB;QACrBZ,OAAO,CAACe,MAAR,CAAe;UACXC,GAAG,EAAE;YACDC,KAAK,EAAEX,KAAK,CAACU,GAAN,CAAUC,KADhB;YAEDC,GAAG,EAAE;cACDC,IAAI,EAAEb,KAAK,CAACU,GAAN,CAAUC,KAAV,CAAgBE,IADrB;cAEDC,MAAM,EAAEd,KAAK,CAACU,GAAN,CAAUC,KAAV,CAAgBG,MAAhB,GAAyB;YAFhC;UAFJ,CADM;UAQXC,SAAS,EAAE,gBARA;UASXC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,gBAAN,CAAuBlB,KAAvB,EAA8B,GAA9B;QATH,CAAf;MAWH;;MAED,IAAI,CAACH,MAAD,IAAWS,QAAf,EAAyB;QACrBZ,OAAO,CAACe,MAAR,CAAe;UACXC,GAAG,EAAE;YACDC,KAAK,EAAER,SAAS,CAACO,GAAV,CAAcE,GADpB;YAEDA,GAAG,EAAEZ,KAAK,CAACU,GAAN,CAAUC;UAFd,CADM;UAKXI,SAAS,EAAE,kBALA;UAMXC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACE,WAAN,CAAkB,CAAChB,SAAS,CAACiB,KAAV,CAAgB,CAAhB,CAAD,EAAqBpB,KAAK,CAACoB,KAAN,CAAY,CAAZ,CAArB,CAAlB;QANH,CAAf;MAQH;IACJ;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASC,iBAAT,CAA2BrB,KAA3B,EAAkC;MAC9B,IAAI,CAACA,KAAK,CAACC,KAAN,CAAYqB,QAAZ,CAAqB,IAArB,CAAL,EAAiC;QAC7B,OAD6B,CACrB;MACX;;MAED,MAAMC,SAAS,GAAG5B,UAAU,CAAC6B,aAAX,CAAyBxB,KAAzB,EAAgC;QAAEK,eAAe,EAAE;MAAnB,CAAhC,CAAlB;MAAA,MACIC,QAAQ,GAAGX,UAAU,CAACY,cAAX,CAA0BP,KAA1B,EAAiCuB,SAAjC,CADf;;MAGA,IAAI,CAACjD,QAAQ,CAACkC,iBAAT,CAA2BR,KAA3B,EAAkCuB,SAAlC,CAAL,EAAmD;QAC/C;MACH;;MAED,IAAI1B,MAAM,IAAI,CAACS,QAAf,EAAyB;QACrBZ,OAAO,CAACe,MAAR,CAAe;UACXC,GAAG,EAAE;YACDC,KAAK,EAAE;cACHE,IAAI,EAAEb,KAAK,CAACU,GAAN,CAAUE,GAAV,CAAcC,IADjB;cAEHC,MAAM,EAAEd,KAAK,CAACU,GAAN,CAAUE,GAAV,CAAcE,MAAd,GAAuB;YAF5B,CADN;YAKDF,GAAG,EAAEZ,KAAK,CAACU,GAAN,CAAUE;UALd,CADM;UAQXG,SAAS,EAAE,eARA;UASXC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACQ,eAAN,CAAsBzB,KAAtB,EAA6B,GAA7B;QATH,CAAf;MAWH;;MAED,IAAI,CAACH,MAAD,IAAWS,QAAf,EAAyB;QACrBZ,OAAO,CAACe,MAAR,CAAe;UACXC,GAAG,EAAE;YACDC,KAAK,EAAEX,KAAK,CAACU,GAAN,CAAUE,GADhB;YAEDA,GAAG,EAAEW,SAAS,CAACb,GAAV,CAAcC;UAFlB,CADM;UAKXI,SAAS,EAAE,iBALA;UAMXC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACE,WAAN,CAAkB,CAACnB,KAAK,CAACoB,KAAN,CAAY,CAAZ,CAAD,EAAiBG,SAAS,CAACH,KAAV,CAAgB,CAAhB,CAAjB,CAAlB;QANH,CAAf;MAQH;IACJ;;IAED,OAAO;MACHM,eAAe,CAACC,IAAD,EAAO;QAClB,MAAM3B,KAAK,GAAGL,UAAU,CAACiC,aAAX,CAAyBD,IAAzB,CAAd;QAEA5B,kBAAkB,CAACC,KAAD,CAAlB;QACAqB,iBAAiB,CAACrB,KAAD,CAAjB;MACH;;IANE,CAAP;EAQH;;AA1HY,CAAjB"},"metadata":{},"sourceType":"script"}