{"ast":null,"code":"/**\n * @fileoverview Main CLI object.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n/*\n * The CLI object should *not* call process.exit() directly. It should only return\n * exit codes. This allows other programs to use the CLI object and still control\n * when the program exits.\n */\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst fs = require(\"fs\");\n\nconst path = require(\"path\");\n\nconst defaultOptions = require(\"../../conf/default-cli-options\");\n\nconst pkg = require(\"../../package.json\");\n\nconst {\n  Legacy: {\n    ConfigOps,\n    naming,\n    CascadingConfigArrayFactory,\n    IgnorePattern,\n    getUsedExtractedConfigs,\n    ModuleResolver\n  }\n} = require(\"@eslint/eslintrc\");\n\nconst {\n  FileEnumerator\n} = require(\"./file-enumerator\");\n\nconst {\n  Linter\n} = require(\"../linter\");\n\nconst builtInRules = require(\"../rules\");\n\nconst loadRules = require(\"./load-rules\");\n\nconst hash = require(\"./hash\");\n\nconst LintResultCache = require(\"./lint-result-cache\");\n\nconst debug = require(\"debug\")(\"eslint:cli-engine\");\n\nconst validFixTypes = new Set([\"problem\", \"suggestion\", \"layout\"]); //------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n// For VSCode IntelliSense\n\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n\n/** @typedef {import(\"../shared/types\").DeprecatedRuleInfo} DeprecatedRuleInfo */\n\n/** @typedef {import(\"../shared/types\").LintMessage} LintMessage */\n\n/** @typedef {import(\"../shared/types\").ParserOptions} ParserOptions */\n\n/** @typedef {import(\"../shared/types\").Plugin} Plugin */\n\n/** @typedef {import(\"../shared/types\").RuleConf} RuleConf */\n\n/** @typedef {import(\"../shared/types\").Rule} Rule */\n\n/** @typedef {ReturnType<CascadingConfigArrayFactory[\"getConfigArrayForFile\"]>} ConfigArray */\n\n/** @typedef {ReturnType<ConfigArray[\"extractConfig\"]>} ExtractedConfig */\n\n/**\n * The options to configure a CLI engine with.\n * @typedef {Object} CLIEngineOptions\n * @property {boolean} [allowInlineConfig] Enable or disable inline configuration comments.\n * @property {ConfigData} [baseConfig] Base config object, extended by all configs used with this CLIEngine instance\n * @property {boolean} [cache] Enable result caching.\n * @property {string} [cacheLocation] The cache file to use instead of .eslintcache.\n * @property {string} [configFile] The configuration file to use.\n * @property {string} [cwd] The value to use for the current working directory.\n * @property {string[]} [envs] An array of environments to load.\n * @property {string[]|null} [extensions] An array of file extensions to check.\n * @property {boolean|Function} [fix] Execute in autofix mode. If a function, should return a boolean.\n * @property {string[]} [fixTypes] Array of rule types to apply fixes for.\n * @property {string[]} [globals] An array of global variables to declare.\n * @property {boolean} [ignore] False disables use of .eslintignore.\n * @property {string} [ignorePath] The ignore file to use instead of .eslintignore.\n * @property {string|string[]} [ignorePattern] One or more glob patterns to ignore.\n * @property {boolean} [useEslintrc] False disables looking for .eslintrc\n * @property {string} [parser] The name of the parser to use.\n * @property {ParserOptions} [parserOptions] An object of parserOption settings to use.\n * @property {string[]} [plugins] An array of plugins to load.\n * @property {Record<string,RuleConf>} [rules] An object of rules to use.\n * @property {string[]} [rulePaths] An array of directories to load custom rules from.\n * @property {boolean} [reportUnusedDisableDirectives] `true` adds reports for unused eslint-disable directives\n * @property {boolean} [globInputPaths] Set to false to skip glob resolution of input file paths to lint (default: true). If false, each input file paths is assumed to be a non-glob path to an existing file.\n * @property {string} [resolvePluginsRelativeTo] The folder where plugins should be resolved from, defaulting to the CWD\n */\n\n/**\n * A linting result.\n * @typedef {Object} LintResult\n * @property {string} filePath The path to the file that was linted.\n * @property {LintMessage[]} messages All of the messages for the result.\n * @property {number} errorCount Number of errors for the result.\n * @property {number} warningCount Number of warnings for the result.\n * @property {number} fixableErrorCount Number of fixable errors for the result.\n * @property {number} fixableWarningCount Number of fixable warnings for the result.\n * @property {string} [source] The source code of the file that was linted.\n * @property {string} [output] The source code of the file that was linted, with as many fixes applied as possible.\n */\n\n/**\n * Linting results.\n * @typedef {Object} LintReport\n * @property {LintResult[]} results All of the result.\n * @property {number} errorCount Number of errors for the result.\n * @property {number} warningCount Number of warnings for the result.\n * @property {number} fixableErrorCount Number of fixable errors for the result.\n * @property {number} fixableWarningCount Number of fixable warnings for the result.\n * @property {DeprecatedRuleInfo[]} usedDeprecatedRules The list of used deprecated rules.\n */\n\n/**\n * Private data for CLIEngine.\n * @typedef {Object} CLIEngineInternalSlots\n * @property {Map<string, Plugin>} additionalPluginPool The map for additional plugins.\n * @property {string} cacheFilePath The path to the cache of lint results.\n * @property {CascadingConfigArrayFactory} configArrayFactory The factory of configs.\n * @property {(filePath: string) => boolean} defaultIgnores The default predicate function to check if a file ignored or not.\n * @property {FileEnumerator} fileEnumerator The file enumerator.\n * @property {ConfigArray[]} lastConfigArrays The list of config arrays that the last `executeOnFiles` or `executeOnText` used.\n * @property {LintResultCache|null} lintResultCache The cache of lint results.\n * @property {Linter} linter The linter instance which has loaded rules.\n * @property {CLIEngineOptions} options The normalized options of this instance.\n */\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/** @type {WeakMap<CLIEngine, CLIEngineInternalSlots>} */\n\nconst internalSlotsMap = new WeakMap();\n/**\n * Determines if each fix type in an array is supported by ESLint and throws\n * an error if not.\n * @param {string[]} fixTypes An array of fix types to check.\n * @returns {void}\n * @throws {Error} If an invalid fix type is found.\n */\n\nfunction validateFixTypes(fixTypes) {\n  for (const fixType of fixTypes) {\n    if (!validFixTypes.has(fixType)) {\n      throw new Error(`Invalid fix type \"${fixType}\" found.`);\n    }\n  }\n}\n/**\n * It will calculate the error and warning count for collection of messages per file\n * @param {LintMessage[]} messages Collection of messages\n * @returns {Object} Contains the stats\n * @private\n */\n\n\nfunction calculateStatsPerFile(messages) {\n  return messages.reduce((stat, message) => {\n    if (message.fatal || message.severity === 2) {\n      stat.errorCount++;\n\n      if (message.fatal) {\n        stat.fatalErrorCount++;\n      }\n\n      if (message.fix) {\n        stat.fixableErrorCount++;\n      }\n    } else {\n      stat.warningCount++;\n\n      if (message.fix) {\n        stat.fixableWarningCount++;\n      }\n    }\n\n    return stat;\n  }, {\n    errorCount: 0,\n    fatalErrorCount: 0,\n    warningCount: 0,\n    fixableErrorCount: 0,\n    fixableWarningCount: 0\n  });\n}\n/**\n * It will calculate the error and warning count for collection of results from all files\n * @param {LintResult[]} results Collection of messages from all the files\n * @returns {Object} Contains the stats\n * @private\n */\n\n\nfunction calculateStatsPerRun(results) {\n  return results.reduce((stat, result) => {\n    stat.errorCount += result.errorCount;\n    stat.fatalErrorCount += result.fatalErrorCount;\n    stat.warningCount += result.warningCount;\n    stat.fixableErrorCount += result.fixableErrorCount;\n    stat.fixableWarningCount += result.fixableWarningCount;\n    return stat;\n  }, {\n    errorCount: 0,\n    fatalErrorCount: 0,\n    warningCount: 0,\n    fixableErrorCount: 0,\n    fixableWarningCount: 0\n  });\n}\n/**\n * Processes an source code using ESLint.\n * @param {Object} config The config object.\n * @param {string} config.text The source code to verify.\n * @param {string} config.cwd The path to the current working directory.\n * @param {string|undefined} config.filePath The path to the file of `text`. If this is undefined, it uses `<text>`.\n * @param {ConfigArray} config.config The config.\n * @param {boolean} config.fix If `true` then it does fix.\n * @param {boolean} config.allowInlineConfig If `true` then it uses directive comments.\n * @param {boolean} config.reportUnusedDisableDirectives If `true` then it reports unused `eslint-disable` comments.\n * @param {FileEnumerator} config.fileEnumerator The file enumerator to check if a path is a target or not.\n * @param {Linter} config.linter The linter instance to verify.\n * @returns {LintResult} The result of linting.\n * @private\n */\n\n\nfunction verifyText(_ref) {\n  let {\n    text,\n    cwd,\n    filePath: providedFilePath,\n    config,\n    fix,\n    allowInlineConfig,\n    reportUnusedDisableDirectives,\n    fileEnumerator,\n    linter\n  } = _ref;\n  const filePath = providedFilePath || \"<text>\";\n  debug(`Lint ${filePath}`);\n  /*\n   * Verify.\n   * `config.extractConfig(filePath)` requires an absolute path, but `linter`\n   * doesn't know CWD, so it gives `linter` an absolute path always.\n   */\n\n  const filePathToVerify = filePath === \"<text>\" ? path.join(cwd, filePath) : filePath;\n  const {\n    fixed,\n    messages,\n    output\n  } = linter.verifyAndFix(text, config, {\n    allowInlineConfig,\n    filename: filePathToVerify,\n    fix,\n    reportUnusedDisableDirectives,\n\n    /**\n     * Check if the linter should adopt a given code block or not.\n     * @param {string} blockFilename The virtual filename of a code block.\n     * @returns {boolean} `true` if the linter should adopt the code block.\n     */\n    filterCodeBlock(blockFilename) {\n      return fileEnumerator.isTargetPath(blockFilename);\n    }\n\n  }); // Tweak and return.\n\n  const result = {\n    filePath,\n    messages,\n    ...calculateStatsPerFile(messages)\n  };\n\n  if (fixed) {\n    result.output = output;\n  }\n\n  if (result.errorCount + result.warningCount > 0 && typeof result.output === \"undefined\") {\n    result.source = text;\n  }\n\n  return result;\n}\n/**\n * Returns result with warning by ignore settings\n * @param {string} filePath File path of checked code\n * @param {string} baseDir  Absolute path of base directory\n * @returns {LintResult} Result with single warning\n * @private\n */\n\n\nfunction createIgnoreResult(filePath, baseDir) {\n  let message;\n  const isHidden = filePath.split(path.sep).find(segment => /^\\./u.test(segment));\n  const isInNodeModules = baseDir && path.relative(baseDir, filePath).startsWith(\"node_modules\");\n\n  if (isHidden) {\n    message = \"File ignored by default.  Use a negated ignore pattern (like \\\"--ignore-pattern '!<relative/path/to/filename>'\\\") to override.\";\n  } else if (isInNodeModules) {\n    message = \"File ignored by default. Use \\\"--ignore-pattern '!node_modules/*'\\\" to override.\";\n  } else {\n    message = \"File ignored because of a matching ignore pattern. Use \\\"--no-ignore\\\" to override.\";\n  }\n\n  return {\n    filePath: path.resolve(filePath),\n    messages: [{\n      fatal: false,\n      severity: 1,\n      message\n    }],\n    errorCount: 0,\n    warningCount: 1,\n    fixableErrorCount: 0,\n    fixableWarningCount: 0\n  };\n}\n/**\n * Get a rule.\n * @param {string} ruleId The rule ID to get.\n * @param {ConfigArray[]} configArrays The config arrays that have plugin rules.\n * @returns {Rule|null} The rule or null.\n */\n\n\nfunction getRule(ruleId, configArrays) {\n  for (const configArray of configArrays) {\n    const rule = configArray.pluginRules.get(ruleId);\n\n    if (rule) {\n      return rule;\n    }\n  }\n\n  return builtInRules.get(ruleId) || null;\n}\n/**\n * Collect used deprecated rules.\n * @param {ConfigArray[]} usedConfigArrays The config arrays which were used.\n * @returns {IterableIterator<DeprecatedRuleInfo>} Used deprecated rules.\n */\n\n\nfunction* iterateRuleDeprecationWarnings(usedConfigArrays) {\n  const processedRuleIds = new Set(); // Flatten used configs.\n\n  /** @type {ExtractedConfig[]} */\n\n  const configs = [].concat(...usedConfigArrays.map(getUsedExtractedConfigs)); // Traverse rule configs.\n\n  for (const config of configs) {\n    for (const [ruleId, ruleConfig] of Object.entries(config.rules)) {\n      // Skip if it was processed.\n      if (processedRuleIds.has(ruleId)) {\n        continue;\n      }\n\n      processedRuleIds.add(ruleId); // Skip if it's not used.\n\n      if (!ConfigOps.getRuleSeverity(ruleConfig)) {\n        continue;\n      }\n\n      const rule = getRule(ruleId, usedConfigArrays); // Skip if it's not deprecated.\n\n      if (!(rule && rule.meta && rule.meta.deprecated)) {\n        continue;\n      } // This rule was used and deprecated.\n\n\n      yield {\n        ruleId,\n        replacedBy: rule.meta.replacedBy || []\n      };\n    }\n  }\n}\n/**\n * Checks if the given message is an error message.\n * @param {LintMessage} message The message to check.\n * @returns {boolean} Whether or not the message is an error message.\n * @private\n */\n\n\nfunction isErrorMessage(message) {\n  return message.severity === 2;\n}\n/**\n * return the cacheFile to be used by eslint, based on whether the provided parameter is\n * a directory or looks like a directory (ends in `path.sep`), in which case the file\n * name will be the `cacheFile/.cache_hashOfCWD`\n *\n * if cacheFile points to a file or looks like a file then in will just use that file\n * @param {string} cacheFile The name of file to be used to store the cache\n * @param {string} cwd Current working directory\n * @returns {string} the resolved path to the cache file\n */\n\n\nfunction getCacheFile(cacheFile, cwd) {\n  /*\n   * make sure the path separators are normalized for the environment/os\n   * keeping the trailing path separator if present\n   */\n  const normalizedCacheFile = path.normalize(cacheFile);\n  const resolvedCacheFile = path.resolve(cwd, normalizedCacheFile);\n  const looksLikeADirectory = normalizedCacheFile.slice(-1) === path.sep;\n  /**\n   * return the name for the cache file in case the provided parameter is a directory\n   * @returns {string} the resolved path to the cacheFile\n   */\n\n  function getCacheFileForDirectory() {\n    return path.join(resolvedCacheFile, `.cache_${hash(cwd)}`);\n  }\n\n  let fileStats;\n\n  try {\n    fileStats = fs.lstatSync(resolvedCacheFile);\n  } catch {\n    fileStats = null;\n  }\n  /*\n   * in case the file exists we need to verify if the provided path\n   * is a directory or a file. If it is a directory we want to create a file\n   * inside that directory\n   */\n\n\n  if (fileStats) {\n    /*\n     * is a directory or is a file, but the original file the user provided\n     * looks like a directory but `path.resolve` removed the `last path.sep`\n     * so we need to still treat this like a directory\n     */\n    if (fileStats.isDirectory() || looksLikeADirectory) {\n      return getCacheFileForDirectory();\n    } // is file so just use that file\n\n\n    return resolvedCacheFile;\n  }\n  /*\n   * here we known the file or directory doesn't exist,\n   * so we will try to infer if its a directory if it looks like a directory\n   * for the current operating system.\n   */\n  // if the last character passed is a path separator we assume is a directory\n\n\n  if (looksLikeADirectory) {\n    return getCacheFileForDirectory();\n  }\n\n  return resolvedCacheFile;\n}\n/**\n * Convert a string array to a boolean map.\n * @param {string[]|null} keys The keys to assign true.\n * @param {boolean} defaultValue The default value for each property.\n * @param {string} displayName The property name which is used in error message.\n * @returns {Record<string,boolean>} The boolean map.\n */\n\n\nfunction toBooleanMap(keys, defaultValue, displayName) {\n  if (keys && !Array.isArray(keys)) {\n    throw new Error(`${displayName} must be an array.`);\n  }\n\n  if (keys && keys.length > 0) {\n    return keys.reduce((map, def) => {\n      const [key, value] = def.split(\":\");\n\n      if (key !== \"__proto__\") {\n        map[key] = value === void 0 ? defaultValue : value === \"true\";\n      }\n\n      return map;\n    }, {});\n  }\n\n  return void 0;\n}\n/**\n * Create a config data from CLI options.\n * @param {CLIEngineOptions} options The options\n * @returns {ConfigData|null} The created config data.\n */\n\n\nfunction createConfigDataFromOptions(options) {\n  const {\n    ignorePattern,\n    parser,\n    parserOptions,\n    plugins,\n    rules\n  } = options;\n  const env = toBooleanMap(options.envs, true, \"envs\");\n  const globals = toBooleanMap(options.globals, false, \"globals\");\n\n  if (env === void 0 && globals === void 0 && (ignorePattern === void 0 || ignorePattern.length === 0) && parser === void 0 && parserOptions === void 0 && plugins === void 0 && rules === void 0) {\n    return null;\n  }\n\n  return {\n    env,\n    globals,\n    ignorePatterns: ignorePattern,\n    parser,\n    parserOptions,\n    plugins,\n    rules\n  };\n}\n/**\n * Checks whether a directory exists at the given location\n * @param {string} resolvedPath A path from the CWD\n * @returns {boolean} `true` if a directory exists\n */\n\n\nfunction directoryExists(resolvedPath) {\n  try {\n    return fs.statSync(resolvedPath).isDirectory();\n  } catch (error) {\n    if (error && (error.code === \"ENOENT\" || error.code === \"ENOTDIR\")) {\n      return false;\n    }\n\n    throw error;\n  }\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nclass CLIEngine {\n  /**\n   * Creates a new instance of the core CLI engine.\n   * @param {CLIEngineOptions} providedOptions The options for this instance.\n   */\n  constructor(providedOptions) {\n    const options = Object.assign(Object.create(null), defaultOptions, {\n      cwd: process.cwd()\n    }, providedOptions);\n\n    if (options.fix === void 0) {\n      options.fix = false;\n    }\n\n    const additionalPluginPool = new Map();\n    const cacheFilePath = getCacheFile(options.cacheLocation || options.cacheFile, options.cwd);\n    const configArrayFactory = new CascadingConfigArrayFactory({\n      additionalPluginPool,\n      baseConfig: options.baseConfig || null,\n      cliConfig: createConfigDataFromOptions(options),\n      cwd: options.cwd,\n      ignorePath: options.ignorePath,\n      resolvePluginsRelativeTo: options.resolvePluginsRelativeTo,\n      rulePaths: options.rulePaths,\n      specificConfigPath: options.configFile,\n      useEslintrc: options.useEslintrc,\n      builtInRules,\n      loadRules,\n      eslintRecommendedPath: path.resolve(__dirname, \"../../conf/eslint-recommended.js\"),\n      eslintAllPath: path.resolve(__dirname, \"../../conf/eslint-all.js\")\n    });\n    const fileEnumerator = new FileEnumerator({\n      configArrayFactory,\n      cwd: options.cwd,\n      extensions: options.extensions,\n      globInputPaths: options.globInputPaths,\n      errorOnUnmatchedPattern: options.errorOnUnmatchedPattern,\n      ignore: options.ignore\n    });\n    const lintResultCache = options.cache ? new LintResultCache(cacheFilePath, options.cacheStrategy) : null;\n    const linter = new Linter({\n      cwd: options.cwd\n    });\n    /** @type {ConfigArray[]} */\n\n    const lastConfigArrays = [configArrayFactory.getConfigArrayForFile()]; // Store private data.\n\n    internalSlotsMap.set(this, {\n      additionalPluginPool,\n      cacheFilePath,\n      configArrayFactory,\n      defaultIgnores: IgnorePattern.createDefaultIgnore(options.cwd),\n      fileEnumerator,\n      lastConfigArrays,\n      lintResultCache,\n      linter,\n      options\n    }); // setup special filter for fixes\n\n    if (options.fix && options.fixTypes && options.fixTypes.length > 0) {\n      debug(`Using fix types ${options.fixTypes}`); // throw an error if any invalid fix types are found\n\n      validateFixTypes(options.fixTypes); // convert to Set for faster lookup\n\n      const fixTypes = new Set(options.fixTypes); // save original value of options.fix in case it's a function\n\n      const originalFix = typeof options.fix === \"function\" ? options.fix : () => true;\n\n      options.fix = message => {\n        const rule = message.ruleId && getRule(message.ruleId, lastConfigArrays);\n        const matches = rule && rule.meta && fixTypes.has(rule.meta.type);\n        return matches && originalFix(message);\n      };\n    }\n  }\n\n  getRules() {\n    const {\n      lastConfigArrays\n    } = internalSlotsMap.get(this);\n    return new Map(function* () {\n      yield* builtInRules;\n\n      for (const configArray of lastConfigArrays) {\n        yield* configArray.pluginRules;\n      }\n    }());\n  }\n  /**\n   * Returns results that only contains errors.\n   * @param {LintResult[]} results The results to filter.\n   * @returns {LintResult[]} The filtered results.\n   */\n\n\n  static getErrorResults(results) {\n    const filtered = [];\n    results.forEach(result => {\n      const filteredMessages = result.messages.filter(isErrorMessage);\n\n      if (filteredMessages.length > 0) {\n        filtered.push({ ...result,\n          messages: filteredMessages,\n          errorCount: filteredMessages.length,\n          warningCount: 0,\n          fixableErrorCount: result.fixableErrorCount,\n          fixableWarningCount: 0\n        });\n      }\n    });\n    return filtered;\n  }\n  /**\n   * Outputs fixes from the given results to files.\n   * @param {LintReport} report The report object created by CLIEngine.\n   * @returns {void}\n   */\n\n\n  static outputFixes(report) {\n    report.results.filter(result => Object.prototype.hasOwnProperty.call(result, \"output\")).forEach(result => {\n      fs.writeFileSync(result.filePath, result.output);\n    });\n  }\n  /**\n   * Add a plugin by passing its configuration\n   * @param {string} name Name of the plugin.\n   * @param {Plugin} pluginObject Plugin configuration object.\n   * @returns {void}\n   */\n\n\n  addPlugin(name, pluginObject) {\n    const {\n      additionalPluginPool,\n      configArrayFactory,\n      lastConfigArrays\n    } = internalSlotsMap.get(this);\n    additionalPluginPool.set(name, pluginObject);\n    configArrayFactory.clearCache();\n    lastConfigArrays.length = 1;\n    lastConfigArrays[0] = configArrayFactory.getConfigArrayForFile();\n  }\n  /**\n   * Resolves the patterns passed into executeOnFiles() into glob-based patterns\n   * for easier handling.\n   * @param {string[]} patterns The file patterns passed on the command line.\n   * @returns {string[]} The equivalent glob patterns.\n   */\n\n\n  resolveFileGlobPatterns(patterns) {\n    const {\n      options\n    } = internalSlotsMap.get(this);\n\n    if (options.globInputPaths === false) {\n      return patterns.filter(Boolean);\n    }\n\n    const extensions = (options.extensions || [\".js\"]).map(ext => ext.replace(/^\\./u, \"\"));\n    const dirSuffix = `/**/*.{${extensions.join(\",\")}}`;\n    return patterns.filter(Boolean).map(pathname => {\n      const resolvedPath = path.resolve(options.cwd, pathname);\n      const newPath = directoryExists(resolvedPath) ? pathname.replace(/[/\\\\]$/u, \"\") + dirSuffix : pathname;\n      return path.normalize(newPath).replace(/\\\\/gu, \"/\");\n    });\n  }\n  /**\n   * Executes the current configuration on an array of file and directory names.\n   * @param {string[]} patterns An array of file and directory names.\n   * @returns {LintReport} The results for all files that were linted.\n   */\n\n\n  executeOnFiles(patterns) {\n    const {\n      cacheFilePath,\n      fileEnumerator,\n      lastConfigArrays,\n      lintResultCache,\n      linter,\n      options: {\n        allowInlineConfig,\n        cache,\n        cwd,\n        fix,\n        reportUnusedDisableDirectives\n      }\n    } = internalSlotsMap.get(this);\n    const results = [];\n    const startTime = Date.now(); // Clear the last used config arrays.\n\n    lastConfigArrays.length = 0; // Delete cache file; should this do here?\n\n    if (!cache) {\n      try {\n        fs.unlinkSync(cacheFilePath);\n      } catch (error) {\n        const errorCode = error && error.code; // Ignore errors when no such file exists or file system is read only (and cache file does not exist)\n\n        if (errorCode !== \"ENOENT\" && !(errorCode === \"EROFS\" && !fs.existsSync(cacheFilePath))) {\n          throw error;\n        }\n      }\n    } // Iterate source code files.\n\n\n    for (const {\n      config,\n      filePath,\n      ignored\n    } of fileEnumerator.iterateFiles(patterns)) {\n      if (ignored) {\n        results.push(createIgnoreResult(filePath, cwd));\n        continue;\n      }\n      /*\n       * Store used configs for:\n       * - this method uses to collect used deprecated rules.\n       * - `getRules()` method uses to collect all loaded rules.\n       * - `--fix-type` option uses to get the loaded rule's meta data.\n       */\n\n\n      if (!lastConfigArrays.includes(config)) {\n        lastConfigArrays.push(config);\n      } // Skip if there is cached result.\n\n\n      if (lintResultCache) {\n        const cachedResult = lintResultCache.getCachedLintResults(filePath, config);\n\n        if (cachedResult) {\n          const hadMessages = cachedResult.messages && cachedResult.messages.length > 0;\n\n          if (hadMessages && fix) {\n            debug(`Reprocessing cached file to allow autofix: ${filePath}`);\n          } else {\n            debug(`Skipping file since it hasn't changed: ${filePath}`);\n            results.push(cachedResult);\n            continue;\n          }\n        }\n      } // Do lint.\n\n\n      const result = verifyText({\n        text: fs.readFileSync(filePath, \"utf8\"),\n        filePath,\n        config,\n        cwd,\n        fix,\n        allowInlineConfig,\n        reportUnusedDisableDirectives,\n        fileEnumerator,\n        linter\n      });\n      results.push(result);\n      /*\n       * Store the lint result in the LintResultCache.\n       * NOTE: The LintResultCache will remove the file source and any\n       * other properties that are difficult to serialize, and will\n       * hydrate those properties back in on future lint runs.\n       */\n\n      if (lintResultCache) {\n        lintResultCache.setCachedLintResults(filePath, config, result);\n      }\n    } // Persist the cache to disk.\n\n\n    if (lintResultCache) {\n      lintResultCache.reconcile();\n    }\n\n    debug(`Linting complete in: ${Date.now() - startTime}ms`);\n    let usedDeprecatedRules;\n    return {\n      results,\n      ...calculateStatsPerRun(results),\n\n      // Initialize it lazily because CLI and `ESLint` API don't use it.\n      get usedDeprecatedRules() {\n        if (!usedDeprecatedRules) {\n          usedDeprecatedRules = Array.from(iterateRuleDeprecationWarnings(lastConfigArrays));\n        }\n\n        return usedDeprecatedRules;\n      }\n\n    };\n  }\n  /**\n   * Executes the current configuration on text.\n   * @param {string} text A string of JavaScript code to lint.\n   * @param {string} [filename] An optional string representing the texts filename.\n   * @param {boolean} [warnIgnored] Always warn when a file is ignored\n   * @returns {LintReport} The results for the linting.\n   */\n\n\n  executeOnText(text, filename, warnIgnored) {\n    const {\n      configArrayFactory,\n      fileEnumerator,\n      lastConfigArrays,\n      linter,\n      options: {\n        allowInlineConfig,\n        cwd,\n        fix,\n        reportUnusedDisableDirectives\n      }\n    } = internalSlotsMap.get(this);\n    const results = [];\n    const startTime = Date.now();\n    const resolvedFilename = filename && path.resolve(cwd, filename); // Clear the last used config arrays.\n\n    lastConfigArrays.length = 0;\n\n    if (resolvedFilename && this.isPathIgnored(resolvedFilename)) {\n      if (warnIgnored) {\n        results.push(createIgnoreResult(resolvedFilename, cwd));\n      }\n    } else {\n      const config = configArrayFactory.getConfigArrayForFile(resolvedFilename || \"__placeholder__.js\");\n      /*\n       * Store used configs for:\n       * - this method uses to collect used deprecated rules.\n       * - `getRules()` method uses to collect all loaded rules.\n       * - `--fix-type` option uses to get the loaded rule's meta data.\n       */\n\n      lastConfigArrays.push(config); // Do lint.\n\n      results.push(verifyText({\n        text,\n        filePath: resolvedFilename,\n        config,\n        cwd,\n        fix,\n        allowInlineConfig,\n        reportUnusedDisableDirectives,\n        fileEnumerator,\n        linter\n      }));\n    }\n\n    debug(`Linting complete in: ${Date.now() - startTime}ms`);\n    let usedDeprecatedRules;\n    return {\n      results,\n      ...calculateStatsPerRun(results),\n\n      // Initialize it lazily because CLI and `ESLint` API don't use it.\n      get usedDeprecatedRules() {\n        if (!usedDeprecatedRules) {\n          usedDeprecatedRules = Array.from(iterateRuleDeprecationWarnings(lastConfigArrays));\n        }\n\n        return usedDeprecatedRules;\n      }\n\n    };\n  }\n  /**\n   * Returns a configuration object for the given file based on the CLI options.\n   * This is the same logic used by the ESLint CLI executable to determine\n   * configuration for each file it processes.\n   * @param {string} filePath The path of the file to retrieve a config object for.\n   * @returns {ConfigData} A configuration object for the file.\n   */\n\n\n  getConfigForFile(filePath) {\n    const {\n      configArrayFactory,\n      options\n    } = internalSlotsMap.get(this);\n    const absolutePath = path.resolve(options.cwd, filePath);\n\n    if (directoryExists(absolutePath)) {\n      throw Object.assign(new Error(\"'filePath' should not be a directory path.\"), {\n        messageTemplate: \"print-config-with-directory-path\"\n      });\n    }\n\n    return configArrayFactory.getConfigArrayForFile(absolutePath).extractConfig(absolutePath).toCompatibleObjectAsConfigFileContent();\n  }\n  /**\n   * Checks if a given path is ignored by ESLint.\n   * @param {string} filePath The path of the file to check.\n   * @returns {boolean} Whether or not the given path is ignored.\n   */\n\n\n  isPathIgnored(filePath) {\n    const {\n      configArrayFactory,\n      defaultIgnores,\n      options: {\n        cwd,\n        ignore\n      }\n    } = internalSlotsMap.get(this);\n    const absolutePath = path.resolve(cwd, filePath);\n\n    if (ignore) {\n      const config = configArrayFactory.getConfigArrayForFile(absolutePath).extractConfig(absolutePath);\n      const ignores = config.ignores || defaultIgnores;\n      return ignores(absolutePath);\n    }\n\n    return defaultIgnores(absolutePath);\n  }\n  /**\n   * Returns the formatter representing the given format or null if the `format` is not a string.\n   * @param {string} [format] The name of the format to load or the path to a\n   *      custom formatter.\n   * @returns {(Function|null)} The formatter function or null if the `format` is not a string.\n   */\n\n\n  getFormatter(format) {\n    // default is stylish\n    const resolvedFormatName = format || \"stylish\"; // only strings are valid formatters\n\n    if (typeof resolvedFormatName === \"string\") {\n      // replace \\ with / for Windows compatibility\n      const normalizedFormatName = resolvedFormatName.replace(/\\\\/gu, \"/\");\n      const slots = internalSlotsMap.get(this);\n      const cwd = slots ? slots.options.cwd : process.cwd();\n      const namespace = naming.getNamespaceFromTerm(normalizedFormatName);\n      let formatterPath; // if there's a slash, then it's a file (TODO: this check seems dubious for scoped npm packages)\n\n      if (!namespace && normalizedFormatName.indexOf(\"/\") > -1) {\n        formatterPath = path.resolve(cwd, normalizedFormatName);\n      } else {\n        try {\n          const npmFormat = naming.normalizePackageName(normalizedFormatName, \"eslint-formatter\");\n          formatterPath = ModuleResolver.resolve(npmFormat, path.join(cwd, \"__placeholder__.js\"));\n        } catch {\n          formatterPath = path.resolve(__dirname, \"formatters\", normalizedFormatName);\n        }\n      }\n\n      try {\n        return require(formatterPath);\n      } catch (ex) {\n        ex.message = `There was a problem loading formatter: ${formatterPath}\\nError: ${ex.message}`;\n        throw ex;\n      }\n    } else {\n      return null;\n    }\n  }\n\n}\n\nCLIEngine.version = pkg.version;\nCLIEngine.getFormatter = CLIEngine.prototype.getFormatter;\nmodule.exports = {\n  CLIEngine,\n\n  /**\n   * Get the internal slots of a given CLIEngine instance for tests.\n   * @param {CLIEngine} instance The CLIEngine instance to get.\n   * @returns {CLIEngineInternalSlots} The internal slots.\n   */\n  getCLIEngineInternalSlots(instance) {\n    return internalSlotsMap.get(instance);\n  }\n\n};","map":{"version":3,"names":["fs","require","path","defaultOptions","pkg","Legacy","ConfigOps","naming","CascadingConfigArrayFactory","IgnorePattern","getUsedExtractedConfigs","ModuleResolver","FileEnumerator","Linter","builtInRules","loadRules","hash","LintResultCache","debug","validFixTypes","Set","internalSlotsMap","WeakMap","validateFixTypes","fixTypes","fixType","has","Error","calculateStatsPerFile","messages","reduce","stat","message","fatal","severity","errorCount","fatalErrorCount","fix","fixableErrorCount","warningCount","fixableWarningCount","calculateStatsPerRun","results","result","verifyText","text","cwd","filePath","providedFilePath","config","allowInlineConfig","reportUnusedDisableDirectives","fileEnumerator","linter","filePathToVerify","join","fixed","output","verifyAndFix","filename","filterCodeBlock","blockFilename","isTargetPath","source","createIgnoreResult","baseDir","isHidden","split","sep","find","segment","test","isInNodeModules","relative","startsWith","resolve","getRule","ruleId","configArrays","configArray","rule","pluginRules","get","iterateRuleDeprecationWarnings","usedConfigArrays","processedRuleIds","configs","concat","map","ruleConfig","Object","entries","rules","add","getRuleSeverity","meta","deprecated","replacedBy","isErrorMessage","getCacheFile","cacheFile","normalizedCacheFile","normalize","resolvedCacheFile","looksLikeADirectory","slice","getCacheFileForDirectory","fileStats","lstatSync","isDirectory","toBooleanMap","keys","defaultValue","displayName","Array","isArray","length","def","key","value","createConfigDataFromOptions","options","ignorePattern","parser","parserOptions","plugins","env","envs","globals","ignorePatterns","directoryExists","resolvedPath","statSync","error","code","CLIEngine","constructor","providedOptions","assign","create","process","additionalPluginPool","Map","cacheFilePath","cacheLocation","configArrayFactory","baseConfig","cliConfig","ignorePath","resolvePluginsRelativeTo","rulePaths","specificConfigPath","configFile","useEslintrc","eslintRecommendedPath","__dirname","eslintAllPath","extensions","globInputPaths","errorOnUnmatchedPattern","ignore","lintResultCache","cache","cacheStrategy","lastConfigArrays","getConfigArrayForFile","set","defaultIgnores","createDefaultIgnore","originalFix","matches","type","getRules","getErrorResults","filtered","forEach","filteredMessages","filter","push","outputFixes","report","prototype","hasOwnProperty","call","writeFileSync","addPlugin","name","pluginObject","clearCache","resolveFileGlobPatterns","patterns","Boolean","ext","replace","dirSuffix","pathname","newPath","executeOnFiles","startTime","Date","now","unlinkSync","errorCode","existsSync","ignored","iterateFiles","includes","cachedResult","getCachedLintResults","hadMessages","readFileSync","setCachedLintResults","reconcile","usedDeprecatedRules","from","executeOnText","warnIgnored","resolvedFilename","isPathIgnored","getConfigForFile","absolutePath","messageTemplate","extractConfig","toCompatibleObjectAsConfigFileContent","ignores","getFormatter","format","resolvedFormatName","normalizedFormatName","slots","namespace","getNamespaceFromTerm","formatterPath","indexOf","npmFormat","normalizePackageName","ex","version","module","exports","getCLIEngineInternalSlots","instance"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/cli-engine/cli-engine.js"],"sourcesContent":["/**\n * @fileoverview Main CLI object.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n/*\n * The CLI object should *not* call process.exit() directly. It should only return\n * exit codes. This allows other programs to use the CLI object and still control\n * when the program exits.\n */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst defaultOptions = require(\"../../conf/default-cli-options\");\nconst pkg = require(\"../../package.json\");\n\n\nconst {\n    Legacy: {\n        ConfigOps,\n        naming,\n        CascadingConfigArrayFactory,\n        IgnorePattern,\n        getUsedExtractedConfigs,\n        ModuleResolver\n    }\n} = require(\"@eslint/eslintrc\");\n\nconst { FileEnumerator } = require(\"./file-enumerator\");\n\nconst { Linter } = require(\"../linter\");\nconst builtInRules = require(\"../rules\");\nconst loadRules = require(\"./load-rules\");\nconst hash = require(\"./hash\");\nconst LintResultCache = require(\"./lint-result-cache\");\n\nconst debug = require(\"debug\")(\"eslint:cli-engine\");\nconst validFixTypes = new Set([\"problem\", \"suggestion\", \"layout\"]);\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n// For VSCode IntelliSense\n/** @typedef {import(\"../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../shared/types\").DeprecatedRuleInfo} DeprecatedRuleInfo */\n/** @typedef {import(\"../shared/types\").LintMessage} LintMessage */\n/** @typedef {import(\"../shared/types\").ParserOptions} ParserOptions */\n/** @typedef {import(\"../shared/types\").Plugin} Plugin */\n/** @typedef {import(\"../shared/types\").RuleConf} RuleConf */\n/** @typedef {import(\"../shared/types\").Rule} Rule */\n/** @typedef {ReturnType<CascadingConfigArrayFactory[\"getConfigArrayForFile\"]>} ConfigArray */\n/** @typedef {ReturnType<ConfigArray[\"extractConfig\"]>} ExtractedConfig */\n\n/**\n * The options to configure a CLI engine with.\n * @typedef {Object} CLIEngineOptions\n * @property {boolean} [allowInlineConfig] Enable or disable inline configuration comments.\n * @property {ConfigData} [baseConfig] Base config object, extended by all configs used with this CLIEngine instance\n * @property {boolean} [cache] Enable result caching.\n * @property {string} [cacheLocation] The cache file to use instead of .eslintcache.\n * @property {string} [configFile] The configuration file to use.\n * @property {string} [cwd] The value to use for the current working directory.\n * @property {string[]} [envs] An array of environments to load.\n * @property {string[]|null} [extensions] An array of file extensions to check.\n * @property {boolean|Function} [fix] Execute in autofix mode. If a function, should return a boolean.\n * @property {string[]} [fixTypes] Array of rule types to apply fixes for.\n * @property {string[]} [globals] An array of global variables to declare.\n * @property {boolean} [ignore] False disables use of .eslintignore.\n * @property {string} [ignorePath] The ignore file to use instead of .eslintignore.\n * @property {string|string[]} [ignorePattern] One or more glob patterns to ignore.\n * @property {boolean} [useEslintrc] False disables looking for .eslintrc\n * @property {string} [parser] The name of the parser to use.\n * @property {ParserOptions} [parserOptions] An object of parserOption settings to use.\n * @property {string[]} [plugins] An array of plugins to load.\n * @property {Record<string,RuleConf>} [rules] An object of rules to use.\n * @property {string[]} [rulePaths] An array of directories to load custom rules from.\n * @property {boolean} [reportUnusedDisableDirectives] `true` adds reports for unused eslint-disable directives\n * @property {boolean} [globInputPaths] Set to false to skip glob resolution of input file paths to lint (default: true). If false, each input file paths is assumed to be a non-glob path to an existing file.\n * @property {string} [resolvePluginsRelativeTo] The folder where plugins should be resolved from, defaulting to the CWD\n */\n\n/**\n * A linting result.\n * @typedef {Object} LintResult\n * @property {string} filePath The path to the file that was linted.\n * @property {LintMessage[]} messages All of the messages for the result.\n * @property {number} errorCount Number of errors for the result.\n * @property {number} warningCount Number of warnings for the result.\n * @property {number} fixableErrorCount Number of fixable errors for the result.\n * @property {number} fixableWarningCount Number of fixable warnings for the result.\n * @property {string} [source] The source code of the file that was linted.\n * @property {string} [output] The source code of the file that was linted, with as many fixes applied as possible.\n */\n\n/**\n * Linting results.\n * @typedef {Object} LintReport\n * @property {LintResult[]} results All of the result.\n * @property {number} errorCount Number of errors for the result.\n * @property {number} warningCount Number of warnings for the result.\n * @property {number} fixableErrorCount Number of fixable errors for the result.\n * @property {number} fixableWarningCount Number of fixable warnings for the result.\n * @property {DeprecatedRuleInfo[]} usedDeprecatedRules The list of used deprecated rules.\n */\n\n/**\n * Private data for CLIEngine.\n * @typedef {Object} CLIEngineInternalSlots\n * @property {Map<string, Plugin>} additionalPluginPool The map for additional plugins.\n * @property {string} cacheFilePath The path to the cache of lint results.\n * @property {CascadingConfigArrayFactory} configArrayFactory The factory of configs.\n * @property {(filePath: string) => boolean} defaultIgnores The default predicate function to check if a file ignored or not.\n * @property {FileEnumerator} fileEnumerator The file enumerator.\n * @property {ConfigArray[]} lastConfigArrays The list of config arrays that the last `executeOnFiles` or `executeOnText` used.\n * @property {LintResultCache|null} lintResultCache The cache of lint results.\n * @property {Linter} linter The linter instance which has loaded rules.\n * @property {CLIEngineOptions} options The normalized options of this instance.\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/** @type {WeakMap<CLIEngine, CLIEngineInternalSlots>} */\nconst internalSlotsMap = new WeakMap();\n\n/**\n * Determines if each fix type in an array is supported by ESLint and throws\n * an error if not.\n * @param {string[]} fixTypes An array of fix types to check.\n * @returns {void}\n * @throws {Error} If an invalid fix type is found.\n */\nfunction validateFixTypes(fixTypes) {\n    for (const fixType of fixTypes) {\n        if (!validFixTypes.has(fixType)) {\n            throw new Error(`Invalid fix type \"${fixType}\" found.`);\n        }\n    }\n}\n\n/**\n * It will calculate the error and warning count for collection of messages per file\n * @param {LintMessage[]} messages Collection of messages\n * @returns {Object} Contains the stats\n * @private\n */\nfunction calculateStatsPerFile(messages) {\n    return messages.reduce((stat, message) => {\n        if (message.fatal || message.severity === 2) {\n            stat.errorCount++;\n            if (message.fatal) {\n                stat.fatalErrorCount++;\n            }\n            if (message.fix) {\n                stat.fixableErrorCount++;\n            }\n        } else {\n            stat.warningCount++;\n            if (message.fix) {\n                stat.fixableWarningCount++;\n            }\n        }\n        return stat;\n    }, {\n        errorCount: 0,\n        fatalErrorCount: 0,\n        warningCount: 0,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0\n    });\n}\n\n/**\n * It will calculate the error and warning count for collection of results from all files\n * @param {LintResult[]} results Collection of messages from all the files\n * @returns {Object} Contains the stats\n * @private\n */\nfunction calculateStatsPerRun(results) {\n    return results.reduce((stat, result) => {\n        stat.errorCount += result.errorCount;\n        stat.fatalErrorCount += result.fatalErrorCount;\n        stat.warningCount += result.warningCount;\n        stat.fixableErrorCount += result.fixableErrorCount;\n        stat.fixableWarningCount += result.fixableWarningCount;\n        return stat;\n    }, {\n        errorCount: 0,\n        fatalErrorCount: 0,\n        warningCount: 0,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0\n    });\n}\n\n/**\n * Processes an source code using ESLint.\n * @param {Object} config The config object.\n * @param {string} config.text The source code to verify.\n * @param {string} config.cwd The path to the current working directory.\n * @param {string|undefined} config.filePath The path to the file of `text`. If this is undefined, it uses `<text>`.\n * @param {ConfigArray} config.config The config.\n * @param {boolean} config.fix If `true` then it does fix.\n * @param {boolean} config.allowInlineConfig If `true` then it uses directive comments.\n * @param {boolean} config.reportUnusedDisableDirectives If `true` then it reports unused `eslint-disable` comments.\n * @param {FileEnumerator} config.fileEnumerator The file enumerator to check if a path is a target or not.\n * @param {Linter} config.linter The linter instance to verify.\n * @returns {LintResult} The result of linting.\n * @private\n */\nfunction verifyText({\n    text,\n    cwd,\n    filePath: providedFilePath,\n    config,\n    fix,\n    allowInlineConfig,\n    reportUnusedDisableDirectives,\n    fileEnumerator,\n    linter\n}) {\n    const filePath = providedFilePath || \"<text>\";\n\n    debug(`Lint ${filePath}`);\n\n    /*\n     * Verify.\n     * `config.extractConfig(filePath)` requires an absolute path, but `linter`\n     * doesn't know CWD, so it gives `linter` an absolute path always.\n     */\n    const filePathToVerify = filePath === \"<text>\" ? path.join(cwd, filePath) : filePath;\n    const { fixed, messages, output } = linter.verifyAndFix(\n        text,\n        config,\n        {\n            allowInlineConfig,\n            filename: filePathToVerify,\n            fix,\n            reportUnusedDisableDirectives,\n\n            /**\n             * Check if the linter should adopt a given code block or not.\n             * @param {string} blockFilename The virtual filename of a code block.\n             * @returns {boolean} `true` if the linter should adopt the code block.\n             */\n            filterCodeBlock(blockFilename) {\n                return fileEnumerator.isTargetPath(blockFilename);\n            }\n        }\n    );\n\n    // Tweak and return.\n    const result = {\n        filePath,\n        messages,\n        ...calculateStatsPerFile(messages)\n    };\n\n    if (fixed) {\n        result.output = output;\n    }\n    if (\n        result.errorCount + result.warningCount > 0 &&\n        typeof result.output === \"undefined\"\n    ) {\n        result.source = text;\n    }\n\n    return result;\n}\n\n/**\n * Returns result with warning by ignore settings\n * @param {string} filePath File path of checked code\n * @param {string} baseDir  Absolute path of base directory\n * @returns {LintResult} Result with single warning\n * @private\n */\nfunction createIgnoreResult(filePath, baseDir) {\n    let message;\n    const isHidden = filePath.split(path.sep)\n        .find(segment => /^\\./u.test(segment));\n    const isInNodeModules = baseDir && path.relative(baseDir, filePath).startsWith(\"node_modules\");\n\n    if (isHidden) {\n        message = \"File ignored by default.  Use a negated ignore pattern (like \\\"--ignore-pattern '!<relative/path/to/filename>'\\\") to override.\";\n    } else if (isInNodeModules) {\n        message = \"File ignored by default. Use \\\"--ignore-pattern '!node_modules/*'\\\" to override.\";\n    } else {\n        message = \"File ignored because of a matching ignore pattern. Use \\\"--no-ignore\\\" to override.\";\n    }\n\n    return {\n        filePath: path.resolve(filePath),\n        messages: [\n            {\n                fatal: false,\n                severity: 1,\n                message\n            }\n        ],\n        errorCount: 0,\n        warningCount: 1,\n        fixableErrorCount: 0,\n        fixableWarningCount: 0\n    };\n}\n\n/**\n * Get a rule.\n * @param {string} ruleId The rule ID to get.\n * @param {ConfigArray[]} configArrays The config arrays that have plugin rules.\n * @returns {Rule|null} The rule or null.\n */\nfunction getRule(ruleId, configArrays) {\n    for (const configArray of configArrays) {\n        const rule = configArray.pluginRules.get(ruleId);\n\n        if (rule) {\n            return rule;\n        }\n    }\n    return builtInRules.get(ruleId) || null;\n}\n\n/**\n * Collect used deprecated rules.\n * @param {ConfigArray[]} usedConfigArrays The config arrays which were used.\n * @returns {IterableIterator<DeprecatedRuleInfo>} Used deprecated rules.\n */\nfunction *iterateRuleDeprecationWarnings(usedConfigArrays) {\n    const processedRuleIds = new Set();\n\n    // Flatten used configs.\n    /** @type {ExtractedConfig[]} */\n    const configs = [].concat(\n        ...usedConfigArrays.map(getUsedExtractedConfigs)\n    );\n\n    // Traverse rule configs.\n    for (const config of configs) {\n        for (const [ruleId, ruleConfig] of Object.entries(config.rules)) {\n\n            // Skip if it was processed.\n            if (processedRuleIds.has(ruleId)) {\n                continue;\n            }\n            processedRuleIds.add(ruleId);\n\n            // Skip if it's not used.\n            if (!ConfigOps.getRuleSeverity(ruleConfig)) {\n                continue;\n            }\n            const rule = getRule(ruleId, usedConfigArrays);\n\n            // Skip if it's not deprecated.\n            if (!(rule && rule.meta && rule.meta.deprecated)) {\n                continue;\n            }\n\n            // This rule was used and deprecated.\n            yield {\n                ruleId,\n                replacedBy: rule.meta.replacedBy || []\n            };\n        }\n    }\n}\n\n/**\n * Checks if the given message is an error message.\n * @param {LintMessage} message The message to check.\n * @returns {boolean} Whether or not the message is an error message.\n * @private\n */\nfunction isErrorMessage(message) {\n    return message.severity === 2;\n}\n\n\n/**\n * return the cacheFile to be used by eslint, based on whether the provided parameter is\n * a directory or looks like a directory (ends in `path.sep`), in which case the file\n * name will be the `cacheFile/.cache_hashOfCWD`\n *\n * if cacheFile points to a file or looks like a file then in will just use that file\n * @param {string} cacheFile The name of file to be used to store the cache\n * @param {string} cwd Current working directory\n * @returns {string} the resolved path to the cache file\n */\nfunction getCacheFile(cacheFile, cwd) {\n\n    /*\n     * make sure the path separators are normalized for the environment/os\n     * keeping the trailing path separator if present\n     */\n    const normalizedCacheFile = path.normalize(cacheFile);\n\n    const resolvedCacheFile = path.resolve(cwd, normalizedCacheFile);\n    const looksLikeADirectory = normalizedCacheFile.slice(-1) === path.sep;\n\n    /**\n     * return the name for the cache file in case the provided parameter is a directory\n     * @returns {string} the resolved path to the cacheFile\n     */\n    function getCacheFileForDirectory() {\n        return path.join(resolvedCacheFile, `.cache_${hash(cwd)}`);\n    }\n\n    let fileStats;\n\n    try {\n        fileStats = fs.lstatSync(resolvedCacheFile);\n    } catch {\n        fileStats = null;\n    }\n\n\n    /*\n     * in case the file exists we need to verify if the provided path\n     * is a directory or a file. If it is a directory we want to create a file\n     * inside that directory\n     */\n    if (fileStats) {\n\n        /*\n         * is a directory or is a file, but the original file the user provided\n         * looks like a directory but `path.resolve` removed the `last path.sep`\n         * so we need to still treat this like a directory\n         */\n        if (fileStats.isDirectory() || looksLikeADirectory) {\n            return getCacheFileForDirectory();\n        }\n\n        // is file so just use that file\n        return resolvedCacheFile;\n    }\n\n    /*\n     * here we known the file or directory doesn't exist,\n     * so we will try to infer if its a directory if it looks like a directory\n     * for the current operating system.\n     */\n\n    // if the last character passed is a path separator we assume is a directory\n    if (looksLikeADirectory) {\n        return getCacheFileForDirectory();\n    }\n\n    return resolvedCacheFile;\n}\n\n/**\n * Convert a string array to a boolean map.\n * @param {string[]|null} keys The keys to assign true.\n * @param {boolean} defaultValue The default value for each property.\n * @param {string} displayName The property name which is used in error message.\n * @returns {Record<string,boolean>} The boolean map.\n */\nfunction toBooleanMap(keys, defaultValue, displayName) {\n    if (keys && !Array.isArray(keys)) {\n        throw new Error(`${displayName} must be an array.`);\n    }\n    if (keys && keys.length > 0) {\n        return keys.reduce((map, def) => {\n            const [key, value] = def.split(\":\");\n\n            if (key !== \"__proto__\") {\n                map[key] = value === void 0\n                    ? defaultValue\n                    : value === \"true\";\n            }\n\n            return map;\n        }, {});\n    }\n    return void 0;\n}\n\n/**\n * Create a config data from CLI options.\n * @param {CLIEngineOptions} options The options\n * @returns {ConfigData|null} The created config data.\n */\nfunction createConfigDataFromOptions(options) {\n    const {\n        ignorePattern,\n        parser,\n        parserOptions,\n        plugins,\n        rules\n    } = options;\n    const env = toBooleanMap(options.envs, true, \"envs\");\n    const globals = toBooleanMap(options.globals, false, \"globals\");\n\n    if (\n        env === void 0 &&\n        globals === void 0 &&\n        (ignorePattern === void 0 || ignorePattern.length === 0) &&\n        parser === void 0 &&\n        parserOptions === void 0 &&\n        plugins === void 0 &&\n        rules === void 0\n    ) {\n        return null;\n    }\n    return {\n        env,\n        globals,\n        ignorePatterns: ignorePattern,\n        parser,\n        parserOptions,\n        plugins,\n        rules\n    };\n}\n\n/**\n * Checks whether a directory exists at the given location\n * @param {string} resolvedPath A path from the CWD\n * @returns {boolean} `true` if a directory exists\n */\nfunction directoryExists(resolvedPath) {\n    try {\n        return fs.statSync(resolvedPath).isDirectory();\n    } catch (error) {\n        if (error && (error.code === \"ENOENT\" || error.code === \"ENOTDIR\")) {\n            return false;\n        }\n        throw error;\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nclass CLIEngine {\n\n    /**\n     * Creates a new instance of the core CLI engine.\n     * @param {CLIEngineOptions} providedOptions The options for this instance.\n     */\n    constructor(providedOptions) {\n        const options = Object.assign(\n            Object.create(null),\n            defaultOptions,\n            { cwd: process.cwd() },\n            providedOptions\n        );\n\n        if (options.fix === void 0) {\n            options.fix = false;\n        }\n\n        const additionalPluginPool = new Map();\n        const cacheFilePath = getCacheFile(\n            options.cacheLocation || options.cacheFile,\n            options.cwd\n        );\n        const configArrayFactory = new CascadingConfigArrayFactory({\n            additionalPluginPool,\n            baseConfig: options.baseConfig || null,\n            cliConfig: createConfigDataFromOptions(options),\n            cwd: options.cwd,\n            ignorePath: options.ignorePath,\n            resolvePluginsRelativeTo: options.resolvePluginsRelativeTo,\n            rulePaths: options.rulePaths,\n            specificConfigPath: options.configFile,\n            useEslintrc: options.useEslintrc,\n            builtInRules,\n            loadRules,\n            eslintRecommendedPath: path.resolve(__dirname, \"../../conf/eslint-recommended.js\"),\n            eslintAllPath: path.resolve(__dirname, \"../../conf/eslint-all.js\")\n        });\n        const fileEnumerator = new FileEnumerator({\n            configArrayFactory,\n            cwd: options.cwd,\n            extensions: options.extensions,\n            globInputPaths: options.globInputPaths,\n            errorOnUnmatchedPattern: options.errorOnUnmatchedPattern,\n            ignore: options.ignore\n        });\n        const lintResultCache =\n            options.cache ? new LintResultCache(cacheFilePath, options.cacheStrategy) : null;\n        const linter = new Linter({ cwd: options.cwd });\n\n        /** @type {ConfigArray[]} */\n        const lastConfigArrays = [configArrayFactory.getConfigArrayForFile()];\n\n        // Store private data.\n        internalSlotsMap.set(this, {\n            additionalPluginPool,\n            cacheFilePath,\n            configArrayFactory,\n            defaultIgnores: IgnorePattern.createDefaultIgnore(options.cwd),\n            fileEnumerator,\n            lastConfigArrays,\n            lintResultCache,\n            linter,\n            options\n        });\n\n        // setup special filter for fixes\n        if (options.fix && options.fixTypes && options.fixTypes.length > 0) {\n            debug(`Using fix types ${options.fixTypes}`);\n\n            // throw an error if any invalid fix types are found\n            validateFixTypes(options.fixTypes);\n\n            // convert to Set for faster lookup\n            const fixTypes = new Set(options.fixTypes);\n\n            // save original value of options.fix in case it's a function\n            const originalFix = (typeof options.fix === \"function\")\n                ? options.fix : () => true;\n\n            options.fix = message => {\n                const rule = message.ruleId && getRule(message.ruleId, lastConfigArrays);\n                const matches = rule && rule.meta && fixTypes.has(rule.meta.type);\n\n                return matches && originalFix(message);\n            };\n        }\n    }\n\n    getRules() {\n        const { lastConfigArrays } = internalSlotsMap.get(this);\n\n        return new Map(function *() {\n            yield* builtInRules;\n\n            for (const configArray of lastConfigArrays) {\n                yield* configArray.pluginRules;\n            }\n        }());\n    }\n\n    /**\n     * Returns results that only contains errors.\n     * @param {LintResult[]} results The results to filter.\n     * @returns {LintResult[]} The filtered results.\n     */\n    static getErrorResults(results) {\n        const filtered = [];\n\n        results.forEach(result => {\n            const filteredMessages = result.messages.filter(isErrorMessage);\n\n            if (filteredMessages.length > 0) {\n                filtered.push({\n                    ...result,\n                    messages: filteredMessages,\n                    errorCount: filteredMessages.length,\n                    warningCount: 0,\n                    fixableErrorCount: result.fixableErrorCount,\n                    fixableWarningCount: 0\n                });\n            }\n        });\n\n        return filtered;\n    }\n\n    /**\n     * Outputs fixes from the given results to files.\n     * @param {LintReport} report The report object created by CLIEngine.\n     * @returns {void}\n     */\n    static outputFixes(report) {\n        report.results.filter(result => Object.prototype.hasOwnProperty.call(result, \"output\")).forEach(result => {\n            fs.writeFileSync(result.filePath, result.output);\n        });\n    }\n\n\n    /**\n     * Add a plugin by passing its configuration\n     * @param {string} name Name of the plugin.\n     * @param {Plugin} pluginObject Plugin configuration object.\n     * @returns {void}\n     */\n    addPlugin(name, pluginObject) {\n        const {\n            additionalPluginPool,\n            configArrayFactory,\n            lastConfigArrays\n        } = internalSlotsMap.get(this);\n\n        additionalPluginPool.set(name, pluginObject);\n        configArrayFactory.clearCache();\n        lastConfigArrays.length = 1;\n        lastConfigArrays[0] = configArrayFactory.getConfigArrayForFile();\n    }\n\n    /**\n     * Resolves the patterns passed into executeOnFiles() into glob-based patterns\n     * for easier handling.\n     * @param {string[]} patterns The file patterns passed on the command line.\n     * @returns {string[]} The equivalent glob patterns.\n     */\n    resolveFileGlobPatterns(patterns) {\n        const { options } = internalSlotsMap.get(this);\n\n        if (options.globInputPaths === false) {\n            return patterns.filter(Boolean);\n        }\n\n        const extensions = (options.extensions || [\".js\"]).map(ext => ext.replace(/^\\./u, \"\"));\n        const dirSuffix = `/**/*.{${extensions.join(\",\")}}`;\n\n        return patterns.filter(Boolean).map(pathname => {\n            const resolvedPath = path.resolve(options.cwd, pathname);\n            const newPath = directoryExists(resolvedPath)\n                ? pathname.replace(/[/\\\\]$/u, \"\") + dirSuffix\n                : pathname;\n\n            return path.normalize(newPath).replace(/\\\\/gu, \"/\");\n        });\n    }\n\n    /**\n     * Executes the current configuration on an array of file and directory names.\n     * @param {string[]} patterns An array of file and directory names.\n     * @returns {LintReport} The results for all files that were linted.\n     */\n    executeOnFiles(patterns) {\n        const {\n            cacheFilePath,\n            fileEnumerator,\n            lastConfigArrays,\n            lintResultCache,\n            linter,\n            options: {\n                allowInlineConfig,\n                cache,\n                cwd,\n                fix,\n                reportUnusedDisableDirectives\n            }\n        } = internalSlotsMap.get(this);\n        const results = [];\n        const startTime = Date.now();\n\n        // Clear the last used config arrays.\n        lastConfigArrays.length = 0;\n\n        // Delete cache file; should this do here?\n        if (!cache) {\n            try {\n                fs.unlinkSync(cacheFilePath);\n            } catch (error) {\n                const errorCode = error && error.code;\n\n                // Ignore errors when no such file exists or file system is read only (and cache file does not exist)\n                if (errorCode !== \"ENOENT\" && !(errorCode === \"EROFS\" && !fs.existsSync(cacheFilePath))) {\n                    throw error;\n                }\n            }\n        }\n\n        // Iterate source code files.\n        for (const { config, filePath, ignored } of fileEnumerator.iterateFiles(patterns)) {\n            if (ignored) {\n                results.push(createIgnoreResult(filePath, cwd));\n                continue;\n            }\n\n            /*\n             * Store used configs for:\n             * - this method uses to collect used deprecated rules.\n             * - `getRules()` method uses to collect all loaded rules.\n             * - `--fix-type` option uses to get the loaded rule's meta data.\n             */\n            if (!lastConfigArrays.includes(config)) {\n                lastConfigArrays.push(config);\n            }\n\n            // Skip if there is cached result.\n            if (lintResultCache) {\n                const cachedResult =\n                    lintResultCache.getCachedLintResults(filePath, config);\n\n                if (cachedResult) {\n                    const hadMessages =\n                        cachedResult.messages &&\n                        cachedResult.messages.length > 0;\n\n                    if (hadMessages && fix) {\n                        debug(`Reprocessing cached file to allow autofix: ${filePath}`);\n                    } else {\n                        debug(`Skipping file since it hasn't changed: ${filePath}`);\n                        results.push(cachedResult);\n                        continue;\n                    }\n                }\n            }\n\n            // Do lint.\n            const result = verifyText({\n                text: fs.readFileSync(filePath, \"utf8\"),\n                filePath,\n                config,\n                cwd,\n                fix,\n                allowInlineConfig,\n                reportUnusedDisableDirectives,\n                fileEnumerator,\n                linter\n            });\n\n            results.push(result);\n\n            /*\n             * Store the lint result in the LintResultCache.\n             * NOTE: The LintResultCache will remove the file source and any\n             * other properties that are difficult to serialize, and will\n             * hydrate those properties back in on future lint runs.\n             */\n            if (lintResultCache) {\n                lintResultCache.setCachedLintResults(filePath, config, result);\n            }\n        }\n\n        // Persist the cache to disk.\n        if (lintResultCache) {\n            lintResultCache.reconcile();\n        }\n\n        debug(`Linting complete in: ${Date.now() - startTime}ms`);\n        let usedDeprecatedRules;\n\n        return {\n            results,\n            ...calculateStatsPerRun(results),\n\n            // Initialize it lazily because CLI and `ESLint` API don't use it.\n            get usedDeprecatedRules() {\n                if (!usedDeprecatedRules) {\n                    usedDeprecatedRules = Array.from(\n                        iterateRuleDeprecationWarnings(lastConfigArrays)\n                    );\n                }\n                return usedDeprecatedRules;\n            }\n        };\n    }\n\n    /**\n     * Executes the current configuration on text.\n     * @param {string} text A string of JavaScript code to lint.\n     * @param {string} [filename] An optional string representing the texts filename.\n     * @param {boolean} [warnIgnored] Always warn when a file is ignored\n     * @returns {LintReport} The results for the linting.\n     */\n    executeOnText(text, filename, warnIgnored) {\n        const {\n            configArrayFactory,\n            fileEnumerator,\n            lastConfigArrays,\n            linter,\n            options: {\n                allowInlineConfig,\n                cwd,\n                fix,\n                reportUnusedDisableDirectives\n            }\n        } = internalSlotsMap.get(this);\n        const results = [];\n        const startTime = Date.now();\n        const resolvedFilename = filename && path.resolve(cwd, filename);\n\n\n        // Clear the last used config arrays.\n        lastConfigArrays.length = 0;\n        if (resolvedFilename && this.isPathIgnored(resolvedFilename)) {\n            if (warnIgnored) {\n                results.push(createIgnoreResult(resolvedFilename, cwd));\n            }\n        } else {\n            const config = configArrayFactory.getConfigArrayForFile(\n                resolvedFilename || \"__placeholder__.js\"\n            );\n\n            /*\n             * Store used configs for:\n             * - this method uses to collect used deprecated rules.\n             * - `getRules()` method uses to collect all loaded rules.\n             * - `--fix-type` option uses to get the loaded rule's meta data.\n             */\n            lastConfigArrays.push(config);\n\n            // Do lint.\n            results.push(verifyText({\n                text,\n                filePath: resolvedFilename,\n                config,\n                cwd,\n                fix,\n                allowInlineConfig,\n                reportUnusedDisableDirectives,\n                fileEnumerator,\n                linter\n            }));\n        }\n\n        debug(`Linting complete in: ${Date.now() - startTime}ms`);\n        let usedDeprecatedRules;\n\n        return {\n            results,\n            ...calculateStatsPerRun(results),\n\n            // Initialize it lazily because CLI and `ESLint` API don't use it.\n            get usedDeprecatedRules() {\n                if (!usedDeprecatedRules) {\n                    usedDeprecatedRules = Array.from(\n                        iterateRuleDeprecationWarnings(lastConfigArrays)\n                    );\n                }\n                return usedDeprecatedRules;\n            }\n        };\n    }\n\n    /**\n     * Returns a configuration object for the given file based on the CLI options.\n     * This is the same logic used by the ESLint CLI executable to determine\n     * configuration for each file it processes.\n     * @param {string} filePath The path of the file to retrieve a config object for.\n     * @returns {ConfigData} A configuration object for the file.\n     */\n    getConfigForFile(filePath) {\n        const { configArrayFactory, options } = internalSlotsMap.get(this);\n        const absolutePath = path.resolve(options.cwd, filePath);\n\n        if (directoryExists(absolutePath)) {\n            throw Object.assign(\n                new Error(\"'filePath' should not be a directory path.\"),\n                { messageTemplate: \"print-config-with-directory-path\" }\n            );\n        }\n\n        return configArrayFactory\n            .getConfigArrayForFile(absolutePath)\n            .extractConfig(absolutePath)\n            .toCompatibleObjectAsConfigFileContent();\n    }\n\n    /**\n     * Checks if a given path is ignored by ESLint.\n     * @param {string} filePath The path of the file to check.\n     * @returns {boolean} Whether or not the given path is ignored.\n     */\n    isPathIgnored(filePath) {\n        const {\n            configArrayFactory,\n            defaultIgnores,\n            options: { cwd, ignore }\n        } = internalSlotsMap.get(this);\n        const absolutePath = path.resolve(cwd, filePath);\n\n        if (ignore) {\n            const config = configArrayFactory\n                .getConfigArrayForFile(absolutePath)\n                .extractConfig(absolutePath);\n            const ignores = config.ignores || defaultIgnores;\n\n            return ignores(absolutePath);\n        }\n\n        return defaultIgnores(absolutePath);\n    }\n\n    /**\n     * Returns the formatter representing the given format or null if the `format` is not a string.\n     * @param {string} [format] The name of the format to load or the path to a\n     *      custom formatter.\n     * @returns {(Function|null)} The formatter function or null if the `format` is not a string.\n     */\n    getFormatter(format) {\n\n        // default is stylish\n        const resolvedFormatName = format || \"stylish\";\n\n        // only strings are valid formatters\n        if (typeof resolvedFormatName === \"string\") {\n\n            // replace \\ with / for Windows compatibility\n            const normalizedFormatName = resolvedFormatName.replace(/\\\\/gu, \"/\");\n\n            const slots = internalSlotsMap.get(this);\n            const cwd = slots ? slots.options.cwd : process.cwd();\n            const namespace = naming.getNamespaceFromTerm(normalizedFormatName);\n\n            let formatterPath;\n\n            // if there's a slash, then it's a file (TODO: this check seems dubious for scoped npm packages)\n            if (!namespace && normalizedFormatName.indexOf(\"/\") > -1) {\n                formatterPath = path.resolve(cwd, normalizedFormatName);\n            } else {\n                try {\n                    const npmFormat = naming.normalizePackageName(normalizedFormatName, \"eslint-formatter\");\n\n                    formatterPath = ModuleResolver.resolve(npmFormat, path.join(cwd, \"__placeholder__.js\"));\n                } catch {\n                    formatterPath = path.resolve(__dirname, \"formatters\", normalizedFormatName);\n                }\n            }\n\n            try {\n                return require(formatterPath);\n            } catch (ex) {\n                ex.message = `There was a problem loading formatter: ${formatterPath}\\nError: ${ex.message}`;\n                throw ex;\n            }\n\n        } else {\n            return null;\n        }\n    }\n}\n\nCLIEngine.version = pkg.version;\nCLIEngine.getFormatter = CLIEngine.prototype.getFormatter;\n\nmodule.exports = {\n    CLIEngine,\n\n    /**\n     * Get the internal slots of a given CLIEngine instance for tests.\n     * @param {CLIEngine} instance The CLIEngine instance to get.\n     * @returns {CLIEngineInternalSlots} The internal slots.\n     */\n    getCLIEngineInternalSlots(instance) {\n        return internalSlotsMap.get(instance);\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}