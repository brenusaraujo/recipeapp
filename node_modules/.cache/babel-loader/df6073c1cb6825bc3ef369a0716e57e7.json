{"ast":null,"code":"/**\n * @fileoverview Rule that warns when identifier names are shorter or longer\n * than the values provided in configuration.\n * @author Burak Yigit Kaya aka BYK\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce minimum and maximum identifier lengths\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/id-length\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        min: {\n          type: \"integer\",\n          default: 2\n        },\n        max: {\n          type: \"integer\"\n        },\n        exceptions: {\n          type: \"array\",\n          uniqueItems: true,\n          items: {\n            type: \"string\"\n          }\n        },\n        exceptionPatterns: {\n          type: \"array\",\n          uniqueItems: true,\n          items: {\n            type: \"string\"\n          }\n        },\n        properties: {\n          enum: [\"always\", \"never\"]\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      tooShort: \"Identifier name '{{name}}' is too short (< {{min}}).\",\n      tooLong: \"Identifier name '{{name}}' is too long (> {{max}}).\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const minLength = typeof options.min !== \"undefined\" ? options.min : 2;\n    const maxLength = typeof options.max !== \"undefined\" ? options.max : Infinity;\n    const properties = options.properties !== \"never\";\n    const exceptions = new Set(options.exceptions);\n    const exceptionPatterns = (options.exceptionPatterns || []).map(pattern => new RegExp(pattern, \"u\"));\n    const reportedNode = new Set();\n    /**\n     * Checks if a string matches the provided exception patterns\n     * @param {string} name The string to check.\n     * @returns {boolean} if the string is a match\n     * @private\n     */\n\n    function matchesExceptionPattern(name) {\n      return exceptionPatterns.some(pattern => pattern.test(name));\n    }\n\n    const SUPPORTED_EXPRESSIONS = {\n      MemberExpression: properties && function (parent) {\n        return !parent.computed && ( // regular property assignment\n        parent.parent.left === parent && parent.parent.type === \"AssignmentExpression\" || // or the last identifier in an ObjectPattern destructuring\n        parent.parent.type === \"Property\" && parent.parent.value === parent && parent.parent.parent.type === \"ObjectPattern\" && parent.parent.parent.parent.left === parent.parent.parent);\n      },\n\n      AssignmentPattern(parent, node) {\n        return parent.left === node;\n      },\n\n      VariableDeclarator(parent, node) {\n        return parent.id === node;\n      },\n\n      Property(parent, node) {\n        if (parent.parent.type === \"ObjectPattern\") {\n          return parent.value !== parent.key && parent.value === node || parent.value === parent.key && parent.key === node && properties;\n        }\n\n        return properties && !parent.computed && parent.key === node;\n      },\n\n      ImportDefaultSpecifier: true,\n      RestElement: true,\n      FunctionExpression: true,\n      ArrowFunctionExpression: true,\n      ClassDeclaration: true,\n      FunctionDeclaration: true,\n      MethodDefinition: true,\n      CatchClause: true,\n      ArrayPattern: true\n    };\n    return {\n      Identifier(node) {\n        const name = node.name;\n        const parent = node.parent;\n        const isShort = name.length < minLength;\n        const isLong = name.length > maxLength;\n\n        if (!(isShort || isLong) || exceptions.has(name) || matchesExceptionPattern(name)) {\n          return; // Nothing to report\n        }\n\n        const isValidExpression = SUPPORTED_EXPRESSIONS[parent.type];\n\n        if (isValidExpression && !reportedNode.has(node) && (isValidExpression === true || isValidExpression(parent, node))) {\n          reportedNode.add(node);\n          context.report({\n            node,\n            messageId: isShort ? \"tooShort\" : \"tooLong\",\n            data: {\n              name,\n              min: minLength,\n              max: maxLength\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","min","default","max","exceptions","uniqueItems","items","exceptionPatterns","enum","additionalProperties","messages","tooShort","tooLong","create","context","options","minLength","maxLength","Infinity","Set","map","pattern","RegExp","reportedNode","matchesExceptionPattern","name","some","test","SUPPORTED_EXPRESSIONS","MemberExpression","parent","computed","left","value","AssignmentPattern","node","VariableDeclarator","id","Property","key","ImportDefaultSpecifier","RestElement","FunctionExpression","ArrowFunctionExpression","ClassDeclaration","FunctionDeclaration","MethodDefinition","CatchClause","ArrayPattern","Identifier","isShort","length","isLong","has","isValidExpression","add","report","messageId","data"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/id-length.js"],"sourcesContent":["/**\n * @fileoverview Rule that warns when identifier names are shorter or longer\n * than the values provided in configuration.\n * @author Burak Yigit Kaya aka BYK\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce minimum and maximum identifier lengths\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/id-length\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    min: {\n                        type: \"integer\",\n                        default: 2\n                    },\n                    max: {\n                        type: \"integer\"\n                    },\n                    exceptions: {\n                        type: \"array\",\n                        uniqueItems: true,\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    exceptionPatterns: {\n                        type: \"array\",\n                        uniqueItems: true,\n                        items: {\n                            type: \"string\"\n                        }\n                    },\n                    properties: {\n                        enum: [\"always\", \"never\"]\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            tooShort: \"Identifier name '{{name}}' is too short (< {{min}}).\",\n            tooLong: \"Identifier name '{{name}}' is too long (> {{max}}).\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const minLength = typeof options.min !== \"undefined\" ? options.min : 2;\n        const maxLength = typeof options.max !== \"undefined\" ? options.max : Infinity;\n        const properties = options.properties !== \"never\";\n        const exceptions = new Set(options.exceptions);\n        const exceptionPatterns = (options.exceptionPatterns || []).map(pattern => new RegExp(pattern, \"u\"));\n        const reportedNode = new Set();\n\n        /**\n         * Checks if a string matches the provided exception patterns\n         * @param {string} name The string to check.\n         * @returns {boolean} if the string is a match\n         * @private\n         */\n        function matchesExceptionPattern(name) {\n            return exceptionPatterns.some(pattern => pattern.test(name));\n        }\n\n        const SUPPORTED_EXPRESSIONS = {\n            MemberExpression: properties && function(parent) {\n                return !parent.computed && (\n\n                    // regular property assignment\n                    (parent.parent.left === parent && parent.parent.type === \"AssignmentExpression\" ||\n\n                    // or the last identifier in an ObjectPattern destructuring\n                    parent.parent.type === \"Property\" && parent.parent.value === parent &&\n                    parent.parent.parent.type === \"ObjectPattern\" && parent.parent.parent.parent.left === parent.parent.parent)\n                );\n            },\n            AssignmentPattern(parent, node) {\n                return parent.left === node;\n            },\n            VariableDeclarator(parent, node) {\n                return parent.id === node;\n            },\n            Property(parent, node) {\n\n                if (parent.parent.type === \"ObjectPattern\") {\n                    return (\n                        parent.value !== parent.key && parent.value === node ||\n                        parent.value === parent.key && parent.key === node && properties\n                    );\n                }\n                return properties && !parent.computed && parent.key === node;\n            },\n            ImportDefaultSpecifier: true,\n            RestElement: true,\n            FunctionExpression: true,\n            ArrowFunctionExpression: true,\n            ClassDeclaration: true,\n            FunctionDeclaration: true,\n            MethodDefinition: true,\n            CatchClause: true,\n            ArrayPattern: true\n        };\n\n        return {\n            Identifier(node) {\n                const name = node.name;\n                const parent = node.parent;\n\n                const isShort = name.length < minLength;\n                const isLong = name.length > maxLength;\n\n                if (!(isShort || isLong) || exceptions.has(name) || matchesExceptionPattern(name)) {\n                    return; // Nothing to report\n                }\n\n                const isValidExpression = SUPPORTED_EXPRESSIONS[parent.type];\n\n                if (isValidExpression && !reportedNode.has(node) && (isValidExpression === true || isValidExpression(parent, node))) {\n                    reportedNode.add(node);\n                    context.report({\n                        node,\n                        messageId: isShort ? \"tooShort\" : \"tooLong\",\n                        data: { name, min: minLength, max: maxLength }\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}