{"ast":null,"code":"/**\n * @fileoverview enforce \"for\" loop update clause moving the counter in the right direction.(for-direction)\n * @author Aladdin-ADD<hh_2013@foxmail.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"enforce \\\"for\\\" loop update clause moving the counter in the right direction.\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/for-direction\"\n    },\n    fixable: null,\n    schema: [],\n    messages: {\n      incorrectDirection: \"The update clause in this loop moves the variable in the wrong direction.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * report an error.\n     * @param {ASTNode} node the node to report.\n     * @returns {void}\n     */\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"incorrectDirection\"\n      });\n    }\n    /**\n     * check the right side of the assignment\n     * @param {ASTNode} update UpdateExpression to check\n     * @param {int} dir expected direction that could either be turned around or invalidated\n     * @returns {int} return dir, the negated dir or zero if it's not clear for identifiers\n     */\n\n\n    function getRightDirection(update, dir) {\n      if (update.right.type === \"UnaryExpression\") {\n        if (update.right.operator === \"-\") {\n          return -dir;\n        }\n      } else if (update.right.type === \"Identifier\") {\n        return 0;\n      }\n\n      return dir;\n    }\n    /**\n     * check UpdateExpression add/sub the counter\n     * @param {ASTNode} update UpdateExpression to check\n     * @param {string} counter variable name to check\n     * @returns {int} if add return 1, if sub return -1, if nochange, return 0\n     */\n\n\n    function getUpdateDirection(update, counter) {\n      if (update.argument.type === \"Identifier\" && update.argument.name === counter) {\n        if (update.operator === \"++\") {\n          return 1;\n        }\n\n        if (update.operator === \"--\") {\n          return -1;\n        }\n      }\n\n      return 0;\n    }\n    /**\n     * check AssignmentExpression add/sub the counter\n     * @param {ASTNode} update AssignmentExpression to check\n     * @param {string} counter variable name to check\n     * @returns {int} if add return 1, if sub return -1, if nochange, return 0\n     */\n\n\n    function getAssignmentDirection(update, counter) {\n      if (update.left.name === counter) {\n        if (update.operator === \"+=\") {\n          return getRightDirection(update, 1);\n        }\n\n        if (update.operator === \"-=\") {\n          return getRightDirection(update, -1);\n        }\n      }\n\n      return 0;\n    }\n\n    return {\n      ForStatement(node) {\n        if (node.test && node.test.type === \"BinaryExpression\" && node.test.left.type === \"Identifier\" && node.update) {\n          const counter = node.test.left.name;\n          const operator = node.test.operator;\n          const update = node.update;\n          let wrongDirection;\n\n          if (operator === \"<\" || operator === \"<=\") {\n            wrongDirection = -1;\n          } else if (operator === \">\" || operator === \">=\") {\n            wrongDirection = 1;\n          } else {\n            return;\n          }\n\n          if (update.type === \"UpdateExpression\") {\n            if (getUpdateDirection(update, counter) === wrongDirection) {\n              report(node);\n            }\n          } else if (update.type === \"AssignmentExpression\" && getAssignmentDirection(update, counter) === wrongDirection) {\n            report(node);\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","incorrectDirection","create","context","report","node","messageId","getRightDirection","update","dir","right","operator","getUpdateDirection","counter","argument","name","getAssignmentDirection","left","ForStatement","test","wrongDirection"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/for-direction.js"],"sourcesContent":["/**\n * @fileoverview enforce \"for\" loop update clause moving the counter in the right direction.(for-direction)\n * @author Aladdin-ADD<hh_2013@foxmail.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"enforce \\\"for\\\" loop update clause moving the counter in the right direction.\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/for-direction\"\n        },\n\n        fixable: null,\n        schema: [],\n\n        messages: {\n            incorrectDirection: \"The update clause in this loop moves the variable in the wrong direction.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * report an error.\n         * @param {ASTNode} node the node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({\n                node,\n                messageId: \"incorrectDirection\"\n            });\n        }\n\n        /**\n         * check the right side of the assignment\n         * @param {ASTNode} update UpdateExpression to check\n         * @param {int} dir expected direction that could either be turned around or invalidated\n         * @returns {int} return dir, the negated dir or zero if it's not clear for identifiers\n         */\n        function getRightDirection(update, dir) {\n            if (update.right.type === \"UnaryExpression\") {\n                if (update.right.operator === \"-\") {\n                    return -dir;\n                }\n            } else if (update.right.type === \"Identifier\") {\n                return 0;\n            }\n            return dir;\n        }\n\n        /**\n         * check UpdateExpression add/sub the counter\n         * @param {ASTNode} update UpdateExpression to check\n         * @param {string} counter variable name to check\n         * @returns {int} if add return 1, if sub return -1, if nochange, return 0\n         */\n        function getUpdateDirection(update, counter) {\n            if (update.argument.type === \"Identifier\" && update.argument.name === counter) {\n                if (update.operator === \"++\") {\n                    return 1;\n                }\n                if (update.operator === \"--\") {\n                    return -1;\n                }\n            }\n            return 0;\n        }\n\n        /**\n         * check AssignmentExpression add/sub the counter\n         * @param {ASTNode} update AssignmentExpression to check\n         * @param {string} counter variable name to check\n         * @returns {int} if add return 1, if sub return -1, if nochange, return 0\n         */\n        function getAssignmentDirection(update, counter) {\n            if (update.left.name === counter) {\n                if (update.operator === \"+=\") {\n                    return getRightDirection(update, 1);\n                }\n                if (update.operator === \"-=\") {\n                    return getRightDirection(update, -1);\n                }\n            }\n            return 0;\n        }\n        return {\n            ForStatement(node) {\n\n                if (node.test && node.test.type === \"BinaryExpression\" && node.test.left.type === \"Identifier\" && node.update) {\n                    const counter = node.test.left.name;\n                    const operator = node.test.operator;\n                    const update = node.update;\n\n                    let wrongDirection;\n\n                    if (operator === \"<\" || operator === \"<=\") {\n                        wrongDirection = -1;\n                    } else if (operator === \">\" || operator === \">=\") {\n                        wrongDirection = 1;\n                    } else {\n                        return;\n                    }\n\n                    if (update.type === \"UpdateExpression\") {\n                        if (getUpdateDirection(update, counter) === wrongDirection) {\n                            report(node);\n                        }\n                    } else if (update.type === \"AssignmentExpression\" && getAssignmentDirection(update, counter) === wrongDirection) {\n                        report(node);\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}