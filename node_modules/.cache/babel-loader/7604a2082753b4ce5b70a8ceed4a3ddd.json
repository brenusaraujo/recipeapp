{"ast":null,"code":"/**\n * @fileoverview Rule to enforce placing object properties on separate lines.\n * @author Vitor Balocco\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce placing object properties on separate lines\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/object-property-newline\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowAllPropertiesOnSameLine: {\n          type: \"boolean\",\n          default: false\n        },\n        allowMultiplePropertiesPerLine: {\n          // Deprecated\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    fixable: \"whitespace\",\n    messages: {\n      propertiesOnNewlineAll: \"Object properties must go on a new line if they aren't all on the same line.\",\n      propertiesOnNewline: \"Object properties must go on a new line.\"\n    }\n  },\n\n  create(context) {\n    const allowSameLine = context.options[0] && (context.options[0].allowAllPropertiesOnSameLine || context.options[0].allowMultiplePropertiesPerLine\n    /* Deprecated */\n    );\n    const messageId = allowSameLine ? \"propertiesOnNewlineAll\" : \"propertiesOnNewline\";\n    const sourceCode = context.getSourceCode();\n    return {\n      ObjectExpression(node) {\n        if (allowSameLine) {\n          if (node.properties.length > 1) {\n            const firstTokenOfFirstProperty = sourceCode.getFirstToken(node.properties[0]);\n            const lastTokenOfLastProperty = sourceCode.getLastToken(node.properties[node.properties.length - 1]);\n\n            if (firstTokenOfFirstProperty.loc.end.line === lastTokenOfLastProperty.loc.start.line) {\n              // All keys and values are on the same line\n              return;\n            }\n          }\n        }\n\n        for (let i = 1; i < node.properties.length; i++) {\n          const lastTokenOfPreviousProperty = sourceCode.getLastToken(node.properties[i - 1]);\n          const firstTokenOfCurrentProperty = sourceCode.getFirstToken(node.properties[i]);\n\n          if (lastTokenOfPreviousProperty.loc.end.line === firstTokenOfCurrentProperty.loc.start.line) {\n            context.report({\n              node,\n              loc: firstTokenOfCurrentProperty.loc,\n              messageId,\n\n              fix(fixer) {\n                const comma = sourceCode.getTokenBefore(firstTokenOfCurrentProperty);\n                const rangeAfterComma = [comma.range[1], firstTokenOfCurrentProperty.range[0]]; // Don't perform a fix if there are any comments between the comma and the next property.\n\n                if (sourceCode.text.slice(rangeAfterComma[0], rangeAfterComma[1]).trim()) {\n                  return null;\n                }\n\n                return fixer.replaceTextRange(rangeAfterComma, \"\\n\");\n              }\n\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allowAllPropertiesOnSameLine","default","allowMultiplePropertiesPerLine","additionalProperties","fixable","messages","propertiesOnNewlineAll","propertiesOnNewline","create","context","allowSameLine","options","messageId","sourceCode","getSourceCode","ObjectExpression","node","length","firstTokenOfFirstProperty","getFirstToken","lastTokenOfLastProperty","getLastToken","loc","end","line","start","i","lastTokenOfPreviousProperty","firstTokenOfCurrentProperty","report","fix","fixer","comma","getTokenBefore","rangeAfterComma","range","text","slice","trim","replaceTextRange"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/object-property-newline.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce placing object properties on separate lines.\n * @author Vitor Balocco\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce placing object properties on separate lines\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/object-property-newline\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowAllPropertiesOnSameLine: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    allowMultiplePropertiesPerLine: { // Deprecated\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        fixable: \"whitespace\",\n\n        messages: {\n            propertiesOnNewlineAll: \"Object properties must go on a new line if they aren't all on the same line.\",\n            propertiesOnNewline: \"Object properties must go on a new line.\"\n        }\n    },\n\n    create(context) {\n        const allowSameLine = context.options[0] && (\n            (context.options[0].allowAllPropertiesOnSameLine || context.options[0].allowMultiplePropertiesPerLine /* Deprecated */)\n        );\n        const messageId = allowSameLine\n            ? \"propertiesOnNewlineAll\"\n            : \"propertiesOnNewline\";\n\n        const sourceCode = context.getSourceCode();\n\n        return {\n            ObjectExpression(node) {\n                if (allowSameLine) {\n                    if (node.properties.length > 1) {\n                        const firstTokenOfFirstProperty = sourceCode.getFirstToken(node.properties[0]);\n                        const lastTokenOfLastProperty = sourceCode.getLastToken(node.properties[node.properties.length - 1]);\n\n                        if (firstTokenOfFirstProperty.loc.end.line === lastTokenOfLastProperty.loc.start.line) {\n\n                            // All keys and values are on the same line\n                            return;\n                        }\n                    }\n                }\n\n                for (let i = 1; i < node.properties.length; i++) {\n                    const lastTokenOfPreviousProperty = sourceCode.getLastToken(node.properties[i - 1]);\n                    const firstTokenOfCurrentProperty = sourceCode.getFirstToken(node.properties[i]);\n\n                    if (lastTokenOfPreviousProperty.loc.end.line === firstTokenOfCurrentProperty.loc.start.line) {\n                        context.report({\n                            node,\n                            loc: firstTokenOfCurrentProperty.loc,\n                            messageId,\n                            fix(fixer) {\n                                const comma = sourceCode.getTokenBefore(firstTokenOfCurrentProperty);\n                                const rangeAfterComma = [comma.range[1], firstTokenOfCurrentProperty.range[0]];\n\n                                // Don't perform a fix if there are any comments between the comma and the next property.\n                                if (sourceCode.text.slice(rangeAfterComma[0], rangeAfterComma[1]).trim()) {\n                                    return null;\n                                }\n\n                                return fixer.replaceTextRange(rangeAfterComma, \"\\n\");\n                            }\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}