{"ast":null,"code":"/**\n * @fileoverview Disallow use of multiple spaces.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow multiple spaces\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-multi-spaces\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptions: {\n          type: \"object\",\n          patternProperties: {\n            \"^([A-Z][a-z]*)+$\": {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        },\n        ignoreEOLComments: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      multipleSpaces: \"Multiple spaces found before '{{displayValue}}'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const options = context.options[0] || {};\n    const ignoreEOLComments = options.ignoreEOLComments;\n    const exceptions = Object.assign({\n      Property: true\n    }, options.exceptions);\n    const hasExceptions = Object.keys(exceptions).filter(key => exceptions[key]).length > 0;\n    /**\n     * Formats value of given comment token for error message by truncating its length.\n     * @param {Token} token comment token\n     * @returns {string} formatted value\n     * @private\n     */\n\n    function formatReportedCommentValue(token) {\n      const valueLines = token.value.split(\"\\n\");\n      const value = valueLines[0];\n      const formattedValue = `${value.slice(0, 12)}...`;\n      return valueLines.length === 1 && value.length <= 12 ? value : formattedValue;\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Program() {\n        sourceCode.tokensAndComments.forEach((leftToken, leftIndex, tokensAndComments) => {\n          if (leftIndex === tokensAndComments.length - 1) {\n            return;\n          }\n\n          const rightToken = tokensAndComments[leftIndex + 1]; // Ignore tokens that don't have 2 spaces between them or are on different lines\n\n          if (!sourceCode.text.slice(leftToken.range[1], rightToken.range[0]).includes(\"  \") || leftToken.loc.end.line < rightToken.loc.start.line) {\n            return;\n          } // Ignore comments that are the last token on their line if `ignoreEOLComments` is active.\n\n\n          if (ignoreEOLComments && astUtils.isCommentToken(rightToken) && (leftIndex === tokensAndComments.length - 2 || rightToken.loc.end.line < tokensAndComments[leftIndex + 2].loc.start.line)) {\n            return;\n          } // Ignore tokens that are in a node in the \"exceptions\" object\n\n\n          if (hasExceptions) {\n            const parentNode = sourceCode.getNodeByRangeIndex(rightToken.range[0] - 1);\n\n            if (parentNode && exceptions[parentNode.type]) {\n              return;\n            }\n          }\n\n          let displayValue;\n\n          if (rightToken.type === \"Block\") {\n            displayValue = `/*${formatReportedCommentValue(rightToken)}*/`;\n          } else if (rightToken.type === \"Line\") {\n            displayValue = `//${formatReportedCommentValue(rightToken)}`;\n          } else {\n            displayValue = rightToken.value;\n          }\n\n          context.report({\n            node: rightToken,\n            loc: {\n              start: leftToken.loc.end,\n              end: rightToken.loc.start\n            },\n            messageId: \"multipleSpaces\",\n            data: {\n              displayValue\n            },\n            fix: fixer => fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \" \")\n          });\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","exceptions","patternProperties","additionalProperties","ignoreEOLComments","default","messages","multipleSpaces","create","context","sourceCode","getSourceCode","options","Object","assign","Property","hasExceptions","keys","filter","key","length","formatReportedCommentValue","token","valueLines","value","split","formattedValue","slice","Program","tokensAndComments","forEach","leftToken","leftIndex","rightToken","text","range","includes","loc","end","line","start","isCommentToken","parentNode","getNodeByRangeIndex","displayValue","report","node","messageId","data","fix","fixer","replaceTextRange"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-multi-spaces.js"],"sourcesContent":["/**\n * @fileoverview Disallow use of multiple spaces.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow multiple spaces\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-multi-spaces\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"object\",\n                        patternProperties: {\n                            \"^([A-Z][a-z]*)+$\": {\n                                type: \"boolean\"\n                            }\n                        },\n                        additionalProperties: false\n                    },\n                    ignoreEOLComments: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            multipleSpaces: \"Multiple spaces found before '{{displayValue}}'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const options = context.options[0] || {};\n        const ignoreEOLComments = options.ignoreEOLComments;\n        const exceptions = Object.assign({ Property: true }, options.exceptions);\n        const hasExceptions = Object.keys(exceptions).filter(key => exceptions[key]).length > 0;\n\n        /**\n         * Formats value of given comment token for error message by truncating its length.\n         * @param {Token} token comment token\n         * @returns {string} formatted value\n         * @private\n         */\n        function formatReportedCommentValue(token) {\n            const valueLines = token.value.split(\"\\n\");\n            const value = valueLines[0];\n            const formattedValue = `${value.slice(0, 12)}...`;\n\n            return valueLines.length === 1 && value.length <= 12 ? value : formattedValue;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program() {\n                sourceCode.tokensAndComments.forEach((leftToken, leftIndex, tokensAndComments) => {\n                    if (leftIndex === tokensAndComments.length - 1) {\n                        return;\n                    }\n                    const rightToken = tokensAndComments[leftIndex + 1];\n\n                    // Ignore tokens that don't have 2 spaces between them or are on different lines\n                    if (\n                        !sourceCode.text.slice(leftToken.range[1], rightToken.range[0]).includes(\"  \") ||\n                        leftToken.loc.end.line < rightToken.loc.start.line\n                    ) {\n                        return;\n                    }\n\n                    // Ignore comments that are the last token on their line if `ignoreEOLComments` is active.\n                    if (\n                        ignoreEOLComments &&\n                        astUtils.isCommentToken(rightToken) &&\n                        (\n                            leftIndex === tokensAndComments.length - 2 ||\n                            rightToken.loc.end.line < tokensAndComments[leftIndex + 2].loc.start.line\n                        )\n                    ) {\n                        return;\n                    }\n\n                    // Ignore tokens that are in a node in the \"exceptions\" object\n                    if (hasExceptions) {\n                        const parentNode = sourceCode.getNodeByRangeIndex(rightToken.range[0] - 1);\n\n                        if (parentNode && exceptions[parentNode.type]) {\n                            return;\n                        }\n                    }\n\n                    let displayValue;\n\n                    if (rightToken.type === \"Block\") {\n                        displayValue = `/*${formatReportedCommentValue(rightToken)}*/`;\n                    } else if (rightToken.type === \"Line\") {\n                        displayValue = `//${formatReportedCommentValue(rightToken)}`;\n                    } else {\n                        displayValue = rightToken.value;\n                    }\n\n                    context.report({\n                        node: rightToken,\n                        loc: { start: leftToken.loc.end, end: rightToken.loc.start },\n                        messageId: \"multipleSpaces\",\n                        data: { displayValue },\n                        fix: fixer => fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \" \")\n                    });\n                });\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}