{"ast":null,"code":"/**\n * @fileoverview Rule to enforce getter and setter pairs in objects and classes.\n * @author Gyandeep Singh\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/**\n * Property name if it can be computed statically, otherwise the list of the tokens of the key node.\n * @typedef {string|Token[]} Key\n */\n\n/**\n * Accessor nodes with the same key.\n * @typedef {Object} AccessorData\n * @property {Key} key Accessor's key\n * @property {ASTNode[]} getters List of getter nodes.\n * @property {ASTNode[]} setters List of setter nodes.\n */\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not the given lists represent the equal tokens in the same order.\n * Tokens are compared by their properties, not by instance.\n * @param {Token[]} left First list of tokens.\n * @param {Token[]} right Second list of tokens.\n * @returns {boolean} `true` if the lists have same tokens.\n */\n\n\nfunction areEqualTokenLists(left, right) {\n  if (left.length !== right.length) {\n    return false;\n  }\n\n  for (let i = 0; i < left.length; i++) {\n    const leftToken = left[i],\n          rightToken = right[i];\n\n    if (leftToken.type !== rightToken.type || leftToken.value !== rightToken.value) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Checks whether or not the given keys are equal.\n * @param {Key} left First key.\n * @param {Key} right Second key.\n * @returns {boolean} `true` if the keys are equal.\n */\n\n\nfunction areEqualKeys(left, right) {\n  if (typeof left === \"string\" && typeof right === \"string\") {\n    // Statically computed names.\n    return left === right;\n  }\n\n  if (Array.isArray(left) && Array.isArray(right)) {\n    // Token lists.\n    return areEqualTokenLists(left, right);\n  }\n\n  return false;\n}\n/**\n * Checks whether or not a given node is of an accessor kind ('get' or 'set').\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if the node is of an accessor kind.\n */\n\n\nfunction isAccessorKind(node) {\n  return node.kind === \"get\" || node.kind === \"set\";\n}\n/**\n * Checks whether or not a given node is an argument of a specified method call.\n * @param {ASTNode} node A node to check.\n * @param {number} index An expected index of the node in arguments.\n * @param {string} object An expected name of the object of the method.\n * @param {string} property An expected name of the method.\n * @returns {boolean} `true` if the node is an argument of the specified method call.\n */\n\n\nfunction isArgumentOfMethodCall(node, index, object, property) {\n  const parent = node.parent;\n  return parent.type === \"CallExpression\" && astUtils.isSpecificMemberAccess(parent.callee, object, property) && parent.arguments[index] === node;\n}\n/**\n * Checks whether or not a given node is a property descriptor.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\n\n\nfunction isPropertyDescriptor(node) {\n  // Object.defineProperty(obj, \"foo\", {set: ...})\n  if (isArgumentOfMethodCall(node, 2, \"Object\", \"defineProperty\") || isArgumentOfMethodCall(node, 2, \"Reflect\", \"defineProperty\")) {\n    return true;\n  }\n  /*\n   * Object.defineProperties(obj, {foo: {set: ...}})\n   * Object.create(proto, {foo: {set: ...}})\n   */\n\n\n  const grandparent = node.parent.parent;\n  return grandparent.type === \"ObjectExpression\" && (isArgumentOfMethodCall(grandparent, 1, \"Object\", \"create\") || isArgumentOfMethodCall(grandparent, 1, \"Object\", \"defineProperties\"));\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce getter and setter pairs in objects and classes\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/accessor-pairs\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        getWithoutSet: {\n          type: \"boolean\",\n          default: false\n        },\n        setWithoutGet: {\n          type: \"boolean\",\n          default: true\n        },\n        enforceForClassMembers: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingGetterInPropertyDescriptor: \"Getter is not present in property descriptor.\",\n      missingSetterInPropertyDescriptor: \"Setter is not present in property descriptor.\",\n      missingGetterInObjectLiteral: \"Getter is not present for {{ name }}.\",\n      missingSetterInObjectLiteral: \"Setter is not present for {{ name }}.\",\n      missingGetterInClass: \"Getter is not present for class {{ name }}.\",\n      missingSetterInClass: \"Setter is not present for class {{ name }}.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const checkGetWithoutSet = config.getWithoutSet === true;\n    const checkSetWithoutGet = config.setWithoutGet !== false;\n    const enforceForClassMembers = config.enforceForClassMembers !== false;\n    const sourceCode = context.getSourceCode();\n    /**\n     * Reports the given node.\n     * @param {ASTNode} node The node to report.\n     * @param {string} messageKind \"missingGetter\" or \"missingSetter\".\n     * @returns {void}\n     * @private\n     */\n\n    function report(node, messageKind) {\n      if (node.type === \"Property\") {\n        context.report({\n          node,\n          messageId: `${messageKind}InObjectLiteral`,\n          loc: astUtils.getFunctionHeadLoc(node.value, sourceCode),\n          data: {\n            name: astUtils.getFunctionNameWithKind(node.value)\n          }\n        });\n      } else if (node.type === \"MethodDefinition\") {\n        context.report({\n          node,\n          messageId: `${messageKind}InClass`,\n          loc: astUtils.getFunctionHeadLoc(node.value, sourceCode),\n          data: {\n            name: astUtils.getFunctionNameWithKind(node.value)\n          }\n        });\n      } else {\n        context.report({\n          node,\n          messageId: `${messageKind}InPropertyDescriptor`\n        });\n      }\n    }\n    /**\n     * Reports each of the nodes in the given list using the same messageId.\n     * @param {ASTNode[]} nodes Nodes to report.\n     * @param {string} messageKind \"missingGetter\" or \"missingSetter\".\n     * @returns {void}\n     * @private\n     */\n\n\n    function reportList(nodes, messageKind) {\n      for (const node of nodes) {\n        report(node, messageKind);\n      }\n    }\n    /**\n     * Creates a new `AccessorData` object for the given getter or setter node.\n     * @param {ASTNode} node A getter or setter node.\n     * @returns {AccessorData} New `AccessorData` object that contains the given node.\n     * @private\n     */\n\n\n    function createAccessorData(node) {\n      const name = astUtils.getStaticPropertyName(node);\n      const key = name !== null ? name : sourceCode.getTokens(node.key);\n      return {\n        key,\n        getters: node.kind === \"get\" ? [node] : [],\n        setters: node.kind === \"set\" ? [node] : []\n      };\n    }\n    /**\n     * Merges the given `AccessorData` object into the given accessors list.\n     * @param {AccessorData[]} accessors The list to merge into.\n     * @param {AccessorData} accessorData The object to merge.\n     * @returns {AccessorData[]} The same instance with the merged object.\n     * @private\n     */\n\n\n    function mergeAccessorData(accessors, accessorData) {\n      const equalKeyElement = accessors.find(a => areEqualKeys(a.key, accessorData.key));\n\n      if (equalKeyElement) {\n        equalKeyElement.getters.push(...accessorData.getters);\n        equalKeyElement.setters.push(...accessorData.setters);\n      } else {\n        accessors.push(accessorData);\n      }\n\n      return accessors;\n    }\n    /**\n     * Checks accessor pairs in the given list of nodes.\n     * @param {ASTNode[]} nodes The list to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkList(nodes) {\n      const accessors = nodes.filter(isAccessorKind).map(createAccessorData).reduce(mergeAccessorData, []);\n\n      for (const {\n        getters,\n        setters\n      } of accessors) {\n        if (checkSetWithoutGet && setters.length && !getters.length) {\n          reportList(setters, \"missingGetter\");\n        }\n\n        if (checkGetWithoutSet && getters.length && !setters.length) {\n          reportList(getters, \"missingSetter\");\n        }\n      }\n    }\n    /**\n     * Checks accessor pairs in an object literal.\n     * @param {ASTNode} node `ObjectExpression` node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkObjectLiteral(node) {\n      checkList(node.properties.filter(p => p.type === \"Property\"));\n    }\n    /**\n     * Checks accessor pairs in a property descriptor.\n     * @param {ASTNode} node Property descriptor `ObjectExpression` node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkPropertyDescriptor(node) {\n      const namesToCheck = node.properties.filter(p => p.type === \"Property\" && p.kind === \"init\" && !p.computed).map(_ref => {\n        let {\n          key\n        } = _ref;\n        return key.name;\n      });\n      const hasGetter = namesToCheck.includes(\"get\");\n      const hasSetter = namesToCheck.includes(\"set\");\n\n      if (checkSetWithoutGet && hasSetter && !hasGetter) {\n        report(node, \"missingGetter\");\n      }\n\n      if (checkGetWithoutSet && hasGetter && !hasSetter) {\n        report(node, \"missingSetter\");\n      }\n    }\n    /**\n     * Checks the given object expression as an object literal and as a possible property descriptor.\n     * @param {ASTNode} node `ObjectExpression` node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkObjectExpression(node) {\n      checkObjectLiteral(node);\n\n      if (isPropertyDescriptor(node)) {\n        checkPropertyDescriptor(node);\n      }\n    }\n    /**\n     * Checks the given class body.\n     * @param {ASTNode} node `ClassBody` node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkClassBody(node) {\n      const methodDefinitions = node.body.filter(m => m.type === \"MethodDefinition\");\n      checkList(methodDefinitions.filter(m => m.static));\n      checkList(methodDefinitions.filter(m => !m.static));\n    }\n\n    const listeners = {};\n\n    if (checkSetWithoutGet || checkGetWithoutSet) {\n      listeners.ObjectExpression = checkObjectExpression;\n\n      if (enforceForClassMembers) {\n        listeners.ClassBody = checkClassBody;\n      }\n    }\n\n    return listeners;\n  }\n\n};","map":{"version":3,"names":["astUtils","require","areEqualTokenLists","left","right","length","i","leftToken","rightToken","type","value","areEqualKeys","Array","isArray","isAccessorKind","node","kind","isArgumentOfMethodCall","index","object","property","parent","isSpecificMemberAccess","callee","arguments","isPropertyDescriptor","grandparent","module","exports","meta","docs","description","category","recommended","url","schema","properties","getWithoutSet","default","setWithoutGet","enforceForClassMembers","additionalProperties","messages","missingGetterInPropertyDescriptor","missingSetterInPropertyDescriptor","missingGetterInObjectLiteral","missingSetterInObjectLiteral","missingGetterInClass","missingSetterInClass","create","context","config","options","checkGetWithoutSet","checkSetWithoutGet","sourceCode","getSourceCode","report","messageKind","messageId","loc","getFunctionHeadLoc","data","name","getFunctionNameWithKind","reportList","nodes","createAccessorData","getStaticPropertyName","key","getTokens","getters","setters","mergeAccessorData","accessors","accessorData","equalKeyElement","find","a","push","checkList","filter","map","reduce","checkObjectLiteral","p","checkPropertyDescriptor","namesToCheck","computed","hasGetter","includes","hasSetter","checkObjectExpression","checkClassBody","methodDefinitions","body","m","static","listeners","ObjectExpression","ClassBody"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/accessor-pairs.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce getter and setter pairs in objects and classes.\n * @author Gyandeep Singh\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/**\n * Property name if it can be computed statically, otherwise the list of the tokens of the key node.\n * @typedef {string|Token[]} Key\n */\n\n/**\n * Accessor nodes with the same key.\n * @typedef {Object} AccessorData\n * @property {Key} key Accessor's key\n * @property {ASTNode[]} getters List of getter nodes.\n * @property {ASTNode[]} setters List of setter nodes.\n */\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not the given lists represent the equal tokens in the same order.\n * Tokens are compared by their properties, not by instance.\n * @param {Token[]} left First list of tokens.\n * @param {Token[]} right Second list of tokens.\n * @returns {boolean} `true` if the lists have same tokens.\n */\nfunction areEqualTokenLists(left, right) {\n    if (left.length !== right.length) {\n        return false;\n    }\n\n    for (let i = 0; i < left.length; i++) {\n        const leftToken = left[i],\n            rightToken = right[i];\n\n        if (leftToken.type !== rightToken.type || leftToken.value !== rightToken.value) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Checks whether or not the given keys are equal.\n * @param {Key} left First key.\n * @param {Key} right Second key.\n * @returns {boolean} `true` if the keys are equal.\n */\nfunction areEqualKeys(left, right) {\n    if (typeof left === \"string\" && typeof right === \"string\") {\n\n        // Statically computed names.\n        return left === right;\n    }\n    if (Array.isArray(left) && Array.isArray(right)) {\n\n        // Token lists.\n        return areEqualTokenLists(left, right);\n    }\n\n    return false;\n}\n\n/**\n * Checks whether or not a given node is of an accessor kind ('get' or 'set').\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if the node is of an accessor kind.\n */\nfunction isAccessorKind(node) {\n    return node.kind === \"get\" || node.kind === \"set\";\n}\n\n/**\n * Checks whether or not a given node is an argument of a specified method call.\n * @param {ASTNode} node A node to check.\n * @param {number} index An expected index of the node in arguments.\n * @param {string} object An expected name of the object of the method.\n * @param {string} property An expected name of the method.\n * @returns {boolean} `true` if the node is an argument of the specified method call.\n */\nfunction isArgumentOfMethodCall(node, index, object, property) {\n    const parent = node.parent;\n\n    return (\n        parent.type === \"CallExpression\" &&\n        astUtils.isSpecificMemberAccess(parent.callee, object, property) &&\n        parent.arguments[index] === node\n    );\n}\n\n/**\n * Checks whether or not a given node is a property descriptor.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\nfunction isPropertyDescriptor(node) {\n\n    // Object.defineProperty(obj, \"foo\", {set: ...})\n    if (isArgumentOfMethodCall(node, 2, \"Object\", \"defineProperty\") ||\n        isArgumentOfMethodCall(node, 2, \"Reflect\", \"defineProperty\")\n    ) {\n        return true;\n    }\n\n    /*\n     * Object.defineProperties(obj, {foo: {set: ...}})\n     * Object.create(proto, {foo: {set: ...}})\n     */\n    const grandparent = node.parent.parent;\n\n    return grandparent.type === \"ObjectExpression\" && (\n        isArgumentOfMethodCall(grandparent, 1, \"Object\", \"create\") ||\n        isArgumentOfMethodCall(grandparent, 1, \"Object\", \"defineProperties\")\n    );\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce getter and setter pairs in objects and classes\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/accessor-pairs\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                getWithoutSet: {\n                    type: \"boolean\",\n                    default: false\n                },\n                setWithoutGet: {\n                    type: \"boolean\",\n                    default: true\n                },\n                enforceForClassMembers: {\n                    type: \"boolean\",\n                    default: true\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingGetterInPropertyDescriptor: \"Getter is not present in property descriptor.\",\n            missingSetterInPropertyDescriptor: \"Setter is not present in property descriptor.\",\n            missingGetterInObjectLiteral: \"Getter is not present for {{ name }}.\",\n            missingSetterInObjectLiteral: \"Setter is not present for {{ name }}.\",\n            missingGetterInClass: \"Getter is not present for class {{ name }}.\",\n            missingSetterInClass: \"Setter is not present for class {{ name }}.\"\n        }\n    },\n    create(context) {\n        const config = context.options[0] || {};\n        const checkGetWithoutSet = config.getWithoutSet === true;\n        const checkSetWithoutGet = config.setWithoutGet !== false;\n        const enforceForClassMembers = config.enforceForClassMembers !== false;\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Reports the given node.\n         * @param {ASTNode} node The node to report.\n         * @param {string} messageKind \"missingGetter\" or \"missingSetter\".\n         * @returns {void}\n         * @private\n         */\n        function report(node, messageKind) {\n            if (node.type === \"Property\") {\n                context.report({\n                    node,\n                    messageId: `${messageKind}InObjectLiteral`,\n                    loc: astUtils.getFunctionHeadLoc(node.value, sourceCode),\n                    data: { name: astUtils.getFunctionNameWithKind(node.value) }\n                });\n            } else if (node.type === \"MethodDefinition\") {\n                context.report({\n                    node,\n                    messageId: `${messageKind}InClass`,\n                    loc: astUtils.getFunctionHeadLoc(node.value, sourceCode),\n                    data: { name: astUtils.getFunctionNameWithKind(node.value) }\n                });\n            } else {\n                context.report({\n                    node,\n                    messageId: `${messageKind}InPropertyDescriptor`\n                });\n            }\n        }\n\n        /**\n         * Reports each of the nodes in the given list using the same messageId.\n         * @param {ASTNode[]} nodes Nodes to report.\n         * @param {string} messageKind \"missingGetter\" or \"missingSetter\".\n         * @returns {void}\n         * @private\n         */\n        function reportList(nodes, messageKind) {\n            for (const node of nodes) {\n                report(node, messageKind);\n            }\n        }\n\n        /**\n         * Creates a new `AccessorData` object for the given getter or setter node.\n         * @param {ASTNode} node A getter or setter node.\n         * @returns {AccessorData} New `AccessorData` object that contains the given node.\n         * @private\n         */\n        function createAccessorData(node) {\n            const name = astUtils.getStaticPropertyName(node);\n            const key = (name !== null) ? name : sourceCode.getTokens(node.key);\n\n            return {\n                key,\n                getters: node.kind === \"get\" ? [node] : [],\n                setters: node.kind === \"set\" ? [node] : []\n            };\n        }\n\n        /**\n         * Merges the given `AccessorData` object into the given accessors list.\n         * @param {AccessorData[]} accessors The list to merge into.\n         * @param {AccessorData} accessorData The object to merge.\n         * @returns {AccessorData[]} The same instance with the merged object.\n         * @private\n         */\n        function mergeAccessorData(accessors, accessorData) {\n            const equalKeyElement = accessors.find(a => areEqualKeys(a.key, accessorData.key));\n\n            if (equalKeyElement) {\n                equalKeyElement.getters.push(...accessorData.getters);\n                equalKeyElement.setters.push(...accessorData.setters);\n            } else {\n                accessors.push(accessorData);\n            }\n\n            return accessors;\n        }\n\n        /**\n         * Checks accessor pairs in the given list of nodes.\n         * @param {ASTNode[]} nodes The list to check.\n         * @returns {void}\n         * @private\n         */\n        function checkList(nodes) {\n            const accessors = nodes\n                .filter(isAccessorKind)\n                .map(createAccessorData)\n                .reduce(mergeAccessorData, []);\n\n            for (const { getters, setters } of accessors) {\n                if (checkSetWithoutGet && setters.length && !getters.length) {\n                    reportList(setters, \"missingGetter\");\n                }\n                if (checkGetWithoutSet && getters.length && !setters.length) {\n                    reportList(getters, \"missingSetter\");\n                }\n            }\n        }\n\n        /**\n         * Checks accessor pairs in an object literal.\n         * @param {ASTNode} node `ObjectExpression` node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkObjectLiteral(node) {\n            checkList(node.properties.filter(p => p.type === \"Property\"));\n        }\n\n        /**\n         * Checks accessor pairs in a property descriptor.\n         * @param {ASTNode} node Property descriptor `ObjectExpression` node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkPropertyDescriptor(node) {\n            const namesToCheck = node.properties\n                .filter(p => p.type === \"Property\" && p.kind === \"init\" && !p.computed)\n                .map(({ key }) => key.name);\n\n            const hasGetter = namesToCheck.includes(\"get\");\n            const hasSetter = namesToCheck.includes(\"set\");\n\n            if (checkSetWithoutGet && hasSetter && !hasGetter) {\n                report(node, \"missingGetter\");\n            }\n            if (checkGetWithoutSet && hasGetter && !hasSetter) {\n                report(node, \"missingSetter\");\n            }\n        }\n\n        /**\n         * Checks the given object expression as an object literal and as a possible property descriptor.\n         * @param {ASTNode} node `ObjectExpression` node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkObjectExpression(node) {\n            checkObjectLiteral(node);\n            if (isPropertyDescriptor(node)) {\n                checkPropertyDescriptor(node);\n            }\n        }\n\n        /**\n         * Checks the given class body.\n         * @param {ASTNode} node `ClassBody` node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkClassBody(node) {\n            const methodDefinitions = node.body.filter(m => m.type === \"MethodDefinition\");\n\n            checkList(methodDefinitions.filter(m => m.static));\n            checkList(methodDefinitions.filter(m => !m.static));\n        }\n\n        const listeners = {};\n\n        if (checkSetWithoutGet || checkGetWithoutSet) {\n            listeners.ObjectExpression = checkObjectExpression;\n            if (enforceForClassMembers) {\n                listeners.ClassBody = checkClassBody;\n            }\n        }\n\n        return listeners;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}