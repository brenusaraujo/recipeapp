{"ast":null,"code":"/**\n * @fileoverview Disallow mixed spaces and tabs for indentation\n * @author Jary Niebur\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow mixed spaces and tabs for indentation\",\n      category: \"Stylistic Issues\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-mixed-spaces-and-tabs\"\n    },\n    schema: [{\n      enum: [\"smart-tabs\", true, false]\n    }],\n    messages: {\n      mixedSpacesAndTabs: \"Mixed spaces and tabs.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let smartTabs;\n\n    switch (context.options[0]) {\n      case true: // Support old syntax, maybe add deprecation warning here\n\n      case \"smart-tabs\":\n        smartTabs = true;\n        break;\n\n      default:\n        smartTabs = false;\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      \"Program:exit\"(node) {\n        const lines = sourceCode.lines,\n              comments = sourceCode.getAllComments(),\n              ignoredCommentLines = new Set(); // Add all lines except the first ones.\n\n        comments.forEach(comment => {\n          for (let i = comment.loc.start.line + 1; i <= comment.loc.end.line; i++) {\n            ignoredCommentLines.add(i);\n          }\n        });\n        /*\n         * At least one space followed by a tab\n         * or the reverse before non-tab/-space\n         * characters begin.\n         */\n\n        let regex = /^(?=( +|\\t+))\\1(?:\\t| )/u;\n\n        if (smartTabs) {\n          /*\n           * At least one space followed by a tab\n           * before non-tab/-space characters begin.\n           */\n          regex = /^(?=(\\t*))\\1(?=( +))\\2\\t/u;\n        }\n\n        lines.forEach((line, i) => {\n          const match = regex.exec(line);\n\n          if (match) {\n            const lineNumber = i + 1;\n            const loc = {\n              start: {\n                line: lineNumber,\n                column: match[0].length - 2\n              },\n              end: {\n                line: lineNumber,\n                column: match[0].length\n              }\n            };\n\n            if (!ignoredCommentLines.has(lineNumber)) {\n              const containingNode = sourceCode.getNodeByRangeIndex(sourceCode.getIndexFromLoc(loc.start));\n\n              if (!(containingNode && [\"Literal\", \"TemplateElement\"].includes(containingNode.type))) {\n                context.report({\n                  node,\n                  loc,\n                  messageId: \"mixedSpacesAndTabs\"\n                });\n              }\n            }\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","enum","messages","mixedSpacesAndTabs","create","context","sourceCode","getSourceCode","smartTabs","options","node","lines","comments","getAllComments","ignoredCommentLines","Set","forEach","comment","i","loc","start","line","end","add","regex","match","exec","lineNumber","column","length","has","containingNode","getNodeByRangeIndex","getIndexFromLoc","includes","report","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-mixed-spaces-and-tabs.js"],"sourcesContent":["/**\n * @fileoverview Disallow mixed spaces and tabs for indentation\n * @author Jary Niebur\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow mixed spaces and tabs for indentation\",\n            category: \"Stylistic Issues\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-mixed-spaces-and-tabs\"\n        },\n\n        schema: [\n            {\n                enum: [\"smart-tabs\", true, false]\n            }\n        ],\n\n        messages: {\n            mixedSpacesAndTabs: \"Mixed spaces and tabs.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        let smartTabs;\n\n        switch (context.options[0]) {\n            case true: // Support old syntax, maybe add deprecation warning here\n            case \"smart-tabs\":\n                smartTabs = true;\n                break;\n            default:\n                smartTabs = false;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            \"Program:exit\"(node) {\n                const lines = sourceCode.lines,\n                    comments = sourceCode.getAllComments(),\n                    ignoredCommentLines = new Set();\n\n                // Add all lines except the first ones.\n                comments.forEach(comment => {\n                    for (let i = comment.loc.start.line + 1; i <= comment.loc.end.line; i++) {\n                        ignoredCommentLines.add(i);\n                    }\n                });\n\n                /*\n                 * At least one space followed by a tab\n                 * or the reverse before non-tab/-space\n                 * characters begin.\n                 */\n                let regex = /^(?=( +|\\t+))\\1(?:\\t| )/u;\n\n                if (smartTabs) {\n\n                    /*\n                     * At least one space followed by a tab\n                     * before non-tab/-space characters begin.\n                     */\n                    regex = /^(?=(\\t*))\\1(?=( +))\\2\\t/u;\n                }\n\n                lines.forEach((line, i) => {\n                    const match = regex.exec(line);\n\n                    if (match) {\n                        const lineNumber = i + 1;\n                        const loc = {\n                            start: {\n                                line: lineNumber,\n                                column: match[0].length - 2\n                            },\n                            end: {\n                                line: lineNumber,\n                                column: match[0].length\n                            }\n                        };\n\n                        if (!ignoredCommentLines.has(lineNumber)) {\n                            const containingNode = sourceCode.getNodeByRangeIndex(sourceCode.getIndexFromLoc(loc.start));\n\n                            if (!(containingNode && [\"Literal\", \"TemplateElement\"].includes(containingNode.type))) {\n                                context.report({\n                                    node,\n                                    loc,\n                                    messageId: \"mixedSpacesAndTabs\"\n                                });\n                            }\n                        }\n                    }\n                });\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,gDADX;MAEFC,QAAQ,EAAE,kBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,YAAD,EAAe,IAAf,EAAqB,KAArB;IADV,CADI,CAVN;IAgBFC,QAAQ,EAAE;MACNC,kBAAkB,EAAE;IADd;EAhBR,CADO;;EAsBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IAEA,IAAIC,SAAJ;;IAEA,QAAQH,OAAO,CAACI,OAAR,CAAgB,CAAhB,CAAR;MACI,KAAK,IAAL,CADJ,CACe;;MACX,KAAK,YAAL;QACID,SAAS,GAAG,IAAZ;QACA;;MACJ;QACIA,SAAS,GAAG,KAAZ;IANR,CALY,CAcZ;IACA;IACA;;;IAEA,OAAO;MAEH,eAAeE,IAAf,EAAqB;QACjB,MAAMC,KAAK,GAAGL,UAAU,CAACK,KAAzB;QAAA,MACIC,QAAQ,GAAGN,UAAU,CAACO,cAAX,EADf;QAAA,MAEIC,mBAAmB,GAAG,IAAIC,GAAJ,EAF1B,CADiB,CAKjB;;QACAH,QAAQ,CAACI,OAAT,CAAiBC,OAAO,IAAI;UACxB,KAAK,IAAIC,CAAC,GAAGD,OAAO,CAACE,GAAR,CAAYC,KAAZ,CAAkBC,IAAlB,GAAyB,CAAtC,EAAyCH,CAAC,IAAID,OAAO,CAACE,GAAR,CAAYG,GAAZ,CAAgBD,IAA9D,EAAoEH,CAAC,EAArE,EAAyE;YACrEJ,mBAAmB,CAACS,GAApB,CAAwBL,CAAxB;UACH;QACJ,CAJD;QAMA;AAChB;AACA;AACA;AACA;;QACgB,IAAIM,KAAK,GAAG,0BAAZ;;QAEA,IAAIhB,SAAJ,EAAe;UAEX;AACpB;AACA;AACA;UACoBgB,KAAK,GAAG,2BAAR;QACH;;QAEDb,KAAK,CAACK,OAAN,CAAc,CAACK,IAAD,EAAOH,CAAP,KAAa;UACvB,MAAMO,KAAK,GAAGD,KAAK,CAACE,IAAN,CAAWL,IAAX,CAAd;;UAEA,IAAII,KAAJ,EAAW;YACP,MAAME,UAAU,GAAGT,CAAC,GAAG,CAAvB;YACA,MAAMC,GAAG,GAAG;cACRC,KAAK,EAAE;gBACHC,IAAI,EAAEM,UADH;gBAEHC,MAAM,EAAEH,KAAK,CAAC,CAAD,CAAL,CAASI,MAAT,GAAkB;cAFvB,CADC;cAKRP,GAAG,EAAE;gBACDD,IAAI,EAAEM,UADL;gBAEDC,MAAM,EAAEH,KAAK,CAAC,CAAD,CAAL,CAASI;cAFhB;YALG,CAAZ;;YAWA,IAAI,CAACf,mBAAmB,CAACgB,GAApB,CAAwBH,UAAxB,CAAL,EAA0C;cACtC,MAAMI,cAAc,GAAGzB,UAAU,CAAC0B,mBAAX,CAA+B1B,UAAU,CAAC2B,eAAX,CAA2Bd,GAAG,CAACC,KAA/B,CAA/B,CAAvB;;cAEA,IAAI,EAAEW,cAAc,IAAI,CAAC,SAAD,EAAY,iBAAZ,EAA+BG,QAA/B,CAAwCH,cAAc,CAACrC,IAAvD,CAApB,CAAJ,EAAuF;gBACnFW,OAAO,CAAC8B,MAAR,CAAe;kBACXzB,IADW;kBAEXS,GAFW;kBAGXiB,SAAS,EAAE;gBAHA,CAAf;cAKH;YACJ;UACJ;QACJ,CA5BD;MA6BH;;IA3DE,CAAP;EA6DH;;AArGY,CAAjB"},"metadata":{},"sourceType":"script"}