{"ast":null,"code":"/**\n * @fileoverview Disallows or enforces spaces inside of array brackets.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing inside array brackets\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/array-bracket-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }, {\n      type: \"object\",\n      properties: {\n        singleValue: {\n          type: \"boolean\"\n        },\n        objectsInArrays: {\n          type: \"boolean\"\n        },\n        arraysInArrays: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n      unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n      missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\",\n      missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\"\n    }\n  },\n\n  create(context) {\n    const spaced = context.options[0] === \"always\",\n          sourceCode = context.getSourceCode();\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param {Object} option The option to exclude.\n     * @returns {boolean} Whether or not the property is excluded.\n     */\n\n    function isOptionSet(option) {\n      return context.options[1] ? context.options[1][option] === !spaced : false;\n    }\n\n    const options = {\n      spaced,\n      singleElementException: isOptionSet(\"singleValue\"),\n      objectsInArraysException: isOptionSet(\"objectsInArrays\"),\n      arraysInArraysException: isOptionSet(\"arraysInArrays\")\n    }; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n    function reportNoBeginningSpace(node, token) {\n      const nextToken = sourceCode.getTokenAfter(token);\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: nextToken.loc.start\n        },\n        messageId: \"unexpectedSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], nextToken.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportNoEndingSpace(node, token) {\n      const previousToken = sourceCode.getTokenBefore(token);\n      context.report({\n        node,\n        loc: {\n          start: previousToken.loc.end,\n          end: token.loc.start\n        },\n        messageId: \"unexpectedSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([previousToken.range[1], token.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextAfter(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextBefore(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Determines if a node is an object type\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} Whether or not the node is an object type.\n     */\n\n\n    function isObjectType(node) {\n      return node && (node.type === \"ObjectExpression\" || node.type === \"ObjectPattern\");\n    }\n    /**\n     * Determines if a node is an array type\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} Whether or not the node is an array type.\n     */\n\n\n    function isArrayType(node) {\n      return node && (node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\");\n    }\n    /**\n     * Validates the spacing around array brackets\n     * @param {ASTNode} node The node we're checking for spacing\n     * @returns {void}\n     */\n\n\n    function validateArraySpacing(node) {\n      if (options.spaced && node.elements.length === 0) {\n        return;\n      }\n\n      const first = sourceCode.getFirstToken(node),\n            second = sourceCode.getFirstToken(node, 1),\n            last = node.typeAnnotation ? sourceCode.getTokenBefore(node.typeAnnotation) : sourceCode.getLastToken(node),\n            penultimate = sourceCode.getTokenBefore(last),\n            firstElement = node.elements[0],\n            lastElement = node.elements[node.elements.length - 1];\n      const openingBracketMustBeSpaced = options.objectsInArraysException && isObjectType(firstElement) || options.arraysInArraysException && isArrayType(firstElement) || options.singleElementException && node.elements.length === 1 ? !options.spaced : options.spaced;\n      const closingBracketMustBeSpaced = options.objectsInArraysException && isObjectType(lastElement) || options.arraysInArraysException && isArrayType(lastElement) || options.singleElementException && node.elements.length === 1 ? !options.spaced : options.spaced;\n\n      if (astUtils.isTokenOnSameLine(first, second)) {\n        if (openingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(first, second)) {\n          reportRequiredBeginningSpace(node, first);\n        }\n\n        if (!openingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(first, second)) {\n          reportNoBeginningSpace(node, first);\n        }\n      }\n\n      if (first !== penultimate && astUtils.isTokenOnSameLine(penultimate, last)) {\n        if (closingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n          reportRequiredEndingSpace(node, last);\n        }\n\n        if (!closingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n          reportNoEndingSpace(node, last);\n        }\n      }\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      ArrayPattern: validateArraySpacing,\n      ArrayExpression: validateArraySpacing\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","properties","singleValue","objectsInArrays","arraysInArrays","additionalProperties","messages","unexpectedSpaceAfter","unexpectedSpaceBefore","missingSpaceAfter","missingSpaceBefore","create","context","spaced","options","sourceCode","getSourceCode","isOptionSet","option","singleElementException","objectsInArraysException","arraysInArraysException","reportNoBeginningSpace","node","token","nextToken","getTokenAfter","report","loc","start","end","messageId","data","tokenValue","value","fix","fixer","removeRange","range","reportNoEndingSpace","previousToken","getTokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","isObjectType","isArrayType","validateArraySpacing","elements","length","first","getFirstToken","second","last","typeAnnotation","getLastToken","penultimate","firstElement","lastElement","openingBracketMustBeSpaced","closingBracketMustBeSpaced","isTokenOnSameLine","isSpaceBetweenTokens","ArrayPattern","ArrayExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/array-bracket-spacing.js"],"sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of array brackets.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing inside array brackets\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/array-bracket-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    singleValue: {\n                        type: \"boolean\"\n                    },\n                    objectsInArrays: {\n                        type: \"boolean\"\n                    },\n                    arraysInArrays: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n            unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n            missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\",\n            missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\"\n        }\n    },\n    create(context) {\n        const spaced = context.options[0] === \"always\",\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether an option is set, relative to the spacing option.\n         * If spaced is \"always\", then check whether option is set to false.\n         * If spaced is \"never\", then check whether option is set to true.\n         * @param {Object} option The option to exclude.\n         * @returns {boolean} Whether or not the property is excluded.\n         */\n        function isOptionSet(option) {\n            return context.options[1] ? context.options[1][option] === !spaced : false;\n        }\n\n        const options = {\n            spaced,\n            singleElementException: isOptionSet(\"singleValue\"),\n            objectsInArraysException: isOptionSet(\"objectsInArrays\"),\n            arraysInArraysException: isOptionSet(\"arraysInArrays\")\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports that there shouldn't be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoBeginningSpace(node, token) {\n            const nextToken = sourceCode.getTokenAfter(token);\n\n            context.report({\n                node,\n                loc: { start: token.loc.end, end: nextToken.loc.start },\n                messageId: \"unexpectedSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there shouldn't be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoEndingSpace(node, token) {\n            const previousToken = sourceCode.getTokenBefore(token);\n\n            context.report({\n                node,\n                loc: { start: previousToken.loc.end, end: token.loc.start },\n                messageId: \"unexpectedSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([previousToken.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"missingSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"missingSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Determines if a node is an object type\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} Whether or not the node is an object type.\n         */\n        function isObjectType(node) {\n            return node && (node.type === \"ObjectExpression\" || node.type === \"ObjectPattern\");\n        }\n\n        /**\n         * Determines if a node is an array type\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} Whether or not the node is an array type.\n         */\n        function isArrayType(node) {\n            return node && (node.type === \"ArrayExpression\" || node.type === \"ArrayPattern\");\n        }\n\n        /**\n         * Validates the spacing around array brackets\n         * @param {ASTNode} node The node we're checking for spacing\n         * @returns {void}\n         */\n        function validateArraySpacing(node) {\n            if (options.spaced && node.elements.length === 0) {\n                return;\n            }\n\n            const first = sourceCode.getFirstToken(node),\n                second = sourceCode.getFirstToken(node, 1),\n                last = node.typeAnnotation\n                    ? sourceCode.getTokenBefore(node.typeAnnotation)\n                    : sourceCode.getLastToken(node),\n                penultimate = sourceCode.getTokenBefore(last),\n                firstElement = node.elements[0],\n                lastElement = node.elements[node.elements.length - 1];\n\n            const openingBracketMustBeSpaced =\n                options.objectsInArraysException && isObjectType(firstElement) ||\n                options.arraysInArraysException && isArrayType(firstElement) ||\n                options.singleElementException && node.elements.length === 1\n                    ? !options.spaced : options.spaced;\n\n            const closingBracketMustBeSpaced =\n                options.objectsInArraysException && isObjectType(lastElement) ||\n                options.arraysInArraysException && isArrayType(lastElement) ||\n                options.singleElementException && node.elements.length === 1\n                    ? !options.spaced : options.spaced;\n\n            if (astUtils.isTokenOnSameLine(first, second)) {\n                if (openingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(first, second)) {\n                    reportRequiredBeginningSpace(node, first);\n                }\n                if (!openingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(first, second)) {\n                    reportNoBeginningSpace(node, first);\n                }\n            }\n\n            if (first !== penultimate && astUtils.isTokenOnSameLine(penultimate, last)) {\n                if (closingBracketMustBeSpaced && !sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n                    reportRequiredEndingSpace(node, last);\n                }\n                if (!closingBracketMustBeSpaced && sourceCode.isSpaceBetweenTokens(penultimate, last)) {\n                    reportNoEndingSpace(node, last);\n                }\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ArrayPattern: validateArraySpacing,\n            ArrayExpression: validateArraySpacing\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}