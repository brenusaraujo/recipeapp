{"ast":null,"code":"'use strict';\n\nconst fs = require('../fs');\n\nconst path = require('path');\n\nconst util = require('util');\n\nconst atLeastNode = require('at-least-node');\n\nconst nodeSupportsBigInt = atLeastNode('10.5.0');\n\nconst stat = file => nodeSupportsBigInt ? fs.stat(file, {\n  bigint: true\n}) : fs.stat(file);\n\nconst statSync = file => nodeSupportsBigInt ? fs.statSync(file, {\n  bigint: true\n}) : fs.statSync(file);\n\nfunction getStats(src, dest) {\n  return Promise.all([stat(src), stat(dest).catch(err => {\n    if (err.code === 'ENOENT') return null;\n    throw err;\n  })]).then(_ref => {\n    let [srcStat, destStat] = _ref;\n    return {\n      srcStat,\n      destStat\n    };\n  });\n}\n\nfunction getStatsSync(src, dest) {\n  let destStat;\n  const srcStat = statSync(src);\n\n  try {\n    destStat = statSync(dest);\n  } catch (err) {\n    if (err.code === 'ENOENT') return {\n      srcStat,\n      destStat: null\n    };\n    throw err;\n  }\n\n  return {\n    srcStat,\n    destStat\n  };\n}\n\nfunction checkPaths(src, dest, funcName, cb) {\n  util.callbackify(getStats)(src, dest, (err, stats) => {\n    if (err) return cb(err);\n    const {\n      srcStat,\n      destStat\n    } = stats;\n\n    if (destStat && areIdentical(srcStat, destStat)) {\n      return cb(new Error('Source and destination must not be the same.'));\n    }\n\n    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n      return cb(new Error(errMsg(src, dest, funcName)));\n    }\n\n    return cb(null, {\n      srcStat,\n      destStat\n    });\n  });\n}\n\nfunction checkPathsSync(src, dest, funcName) {\n  const {\n    srcStat,\n    destStat\n  } = getStatsSync(src, dest);\n\n  if (destStat && areIdentical(srcStat, destStat)) {\n    throw new Error('Source and destination must not be the same.');\n  }\n\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n\n  return {\n    srcStat,\n    destStat\n  };\n} // recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\n\n\nfunction checkParentPaths(src, srcStat, dest, funcName, cb) {\n  const srcParent = path.resolve(path.dirname(src));\n  const destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return cb();\n\n  const callback = (err, destStat) => {\n    if (err) {\n      if (err.code === 'ENOENT') return cb();\n      return cb(err);\n    }\n\n    if (areIdentical(srcStat, destStat)) {\n      return cb(new Error(errMsg(src, dest, funcName)));\n    }\n\n    return checkParentPaths(src, srcStat, destParent, funcName, cb);\n  };\n\n  if (nodeSupportsBigInt) fs.stat(destParent, {\n    bigint: true\n  }, callback);else fs.stat(destParent, callback);\n}\n\nfunction checkParentPathsSync(src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src));\n  const destParent = path.resolve(path.dirname(dest));\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return;\n  let destStat;\n\n  try {\n    destStat = statSync(destParent);\n  } catch (err) {\n    if (err.code === 'ENOENT') return;\n    throw err;\n  }\n\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName));\n  }\n\n  return checkParentPathsSync(src, srcStat, destParent, funcName);\n}\n\nfunction areIdentical(srcStat, destStat) {\n  if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n    if (nodeSupportsBigInt || destStat.ino < Number.MAX_SAFE_INTEGER) {\n      // definitive answer\n      return true;\n    } // Use additional heuristics if we can't use 'bigint'.\n    // Different 'ino' could be represented the same if they are >= Number.MAX_SAFE_INTEGER\n    // See issue 657\n\n\n    if (destStat.size === srcStat.size && destStat.mode === srcStat.mode && destStat.nlink === srcStat.nlink && destStat.atimeMs === srcStat.atimeMs && destStat.mtimeMs === srcStat.mtimeMs && destStat.ctimeMs === srcStat.ctimeMs && destStat.birthtimeMs === srcStat.birthtimeMs) {\n      // heuristic answer\n      return true;\n    }\n  }\n\n  return false;\n} // return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\n\n\nfunction isSrcSubdir(src, dest) {\n  const srcArr = path.resolve(src).split(path.sep).filter(i => i);\n  const destArr = path.resolve(dest).split(path.sep).filter(i => i);\n  return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true);\n}\n\nfunction errMsg(src, dest, funcName) {\n  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;\n}\n\nmodule.exports = {\n  checkPaths,\n  checkPathsSync,\n  checkParentPaths,\n  checkParentPathsSync,\n  isSrcSubdir\n};","map":{"version":3,"names":["fs","require","path","util","atLeastNode","nodeSupportsBigInt","stat","file","bigint","statSync","getStats","src","dest","Promise","all","catch","err","code","then","srcStat","destStat","getStatsSync","checkPaths","funcName","cb","callbackify","stats","areIdentical","Error","isDirectory","isSrcSubdir","errMsg","checkPathsSync","checkParentPaths","srcParent","resolve","dirname","destParent","parse","root","callback","checkParentPathsSync","ino","dev","Number","MAX_SAFE_INTEGER","size","mode","nlink","atimeMs","mtimeMs","ctimeMs","birthtimeMs","srcArr","split","sep","filter","i","destArr","reduce","acc","cur","module","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/fs-extra/lib/util/stat.js"],"sourcesContent":["'use strict'\n\nconst fs = require('../fs')\nconst path = require('path')\nconst util = require('util')\nconst atLeastNode = require('at-least-node')\n\nconst nodeSupportsBigInt = atLeastNode('10.5.0')\nconst stat = (file) => nodeSupportsBigInt ? fs.stat(file, { bigint: true }) : fs.stat(file)\nconst statSync = (file) => nodeSupportsBigInt ? fs.statSync(file, { bigint: true }) : fs.statSync(file)\n\nfunction getStats (src, dest) {\n  return Promise.all([\n    stat(src),\n    stat(dest).catch(err => {\n      if (err.code === 'ENOENT') return null\n      throw err\n    })\n  ]).then(([srcStat, destStat]) => ({ srcStat, destStat }))\n}\n\nfunction getStatsSync (src, dest) {\n  let destStat\n  const srcStat = statSync(src)\n  try {\n    destStat = statSync(dest)\n  } catch (err) {\n    if (err.code === 'ENOENT') return { srcStat, destStat: null }\n    throw err\n  }\n  return { srcStat, destStat }\n}\n\nfunction checkPaths (src, dest, funcName, cb) {\n  util.callbackify(getStats)(src, dest, (err, stats) => {\n    if (err) return cb(err)\n    const { srcStat, destStat } = stats\n    if (destStat && areIdentical(srcStat, destStat)) {\n      return cb(new Error('Source and destination must not be the same.'))\n    }\n    if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n      return cb(new Error(errMsg(src, dest, funcName)))\n    }\n    return cb(null, { srcStat, destStat })\n  })\n}\n\nfunction checkPathsSync (src, dest, funcName) {\n  const { srcStat, destStat } = getStatsSync(src, dest)\n  if (destStat && areIdentical(srcStat, destStat)) {\n    throw new Error('Source and destination must not be the same.')\n  }\n  if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return { srcStat, destStat }\n}\n\n// recursively check if dest parent is a subdirectory of src.\n// It works for all file types including symlinks since it\n// checks the src and dest inodes. It starts from the deepest\n// parent and stops once it reaches the src parent or the root path.\nfunction checkParentPaths (src, srcStat, dest, funcName, cb) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return cb()\n  const callback = (err, destStat) => {\n    if (err) {\n      if (err.code === 'ENOENT') return cb()\n      return cb(err)\n    }\n    if (areIdentical(srcStat, destStat)) {\n      return cb(new Error(errMsg(src, dest, funcName)))\n    }\n    return checkParentPaths(src, srcStat, destParent, funcName, cb)\n  }\n  if (nodeSupportsBigInt) fs.stat(destParent, { bigint: true }, callback)\n  else fs.stat(destParent, callback)\n}\n\nfunction checkParentPathsSync (src, srcStat, dest, funcName) {\n  const srcParent = path.resolve(path.dirname(src))\n  const destParent = path.resolve(path.dirname(dest))\n  if (destParent === srcParent || destParent === path.parse(destParent).root) return\n  let destStat\n  try {\n    destStat = statSync(destParent)\n  } catch (err) {\n    if (err.code === 'ENOENT') return\n    throw err\n  }\n  if (areIdentical(srcStat, destStat)) {\n    throw new Error(errMsg(src, dest, funcName))\n  }\n  return checkParentPathsSync(src, srcStat, destParent, funcName)\n}\n\nfunction areIdentical (srcStat, destStat) {\n  if (destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev) {\n    if (nodeSupportsBigInt || destStat.ino < Number.MAX_SAFE_INTEGER) {\n      // definitive answer\n      return true\n    }\n    // Use additional heuristics if we can't use 'bigint'.\n    // Different 'ino' could be represented the same if they are >= Number.MAX_SAFE_INTEGER\n    // See issue 657\n    if (destStat.size === srcStat.size &&\n        destStat.mode === srcStat.mode &&\n        destStat.nlink === srcStat.nlink &&\n        destStat.atimeMs === srcStat.atimeMs &&\n        destStat.mtimeMs === srcStat.mtimeMs &&\n        destStat.ctimeMs === srcStat.ctimeMs &&\n        destStat.birthtimeMs === srcStat.birthtimeMs) {\n      // heuristic answer\n      return true\n    }\n  }\n  return false\n}\n\n// return true if dest is a subdir of src, otherwise false.\n// It only checks the path strings.\nfunction isSrcSubdir (src, dest) {\n  const srcArr = path.resolve(src).split(path.sep).filter(i => i)\n  const destArr = path.resolve(dest).split(path.sep).filter(i => i)\n  return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true)\n}\n\nfunction errMsg (src, dest, funcName) {\n  return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`\n}\n\nmodule.exports = {\n  checkPaths,\n  checkPathsSync,\n  checkParentPaths,\n  checkParentPathsSync,\n  isSrcSubdir\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}