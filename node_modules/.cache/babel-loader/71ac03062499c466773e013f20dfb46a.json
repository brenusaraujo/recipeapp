{"ast":null,"code":"/**\n * @fileoverview Rule to disallow specified names in exports\n * @author Milos Djermanovic\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified names in exports\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-exports\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        restrictedNamedExports: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\"\n    }\n  },\n\n  create(context) {\n    const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n    /**\n     * Checks and reports given exported identifier.\n     * @param {ASTNode} node exported `Identifier` node to check.\n     * @returns {void}\n     */\n\n    function checkExportedName(node) {\n      const name = node.name;\n\n      if (restrictedNames.has(name)) {\n        context.report({\n          node,\n          messageId: \"restrictedNamed\",\n          data: {\n            name\n          }\n        });\n      }\n    }\n\n    return {\n      ExportAllDeclaration(node) {\n        if (node.exported) {\n          checkExportedName(node.exported);\n        }\n      },\n\n      ExportNamedDeclaration(node) {\n        const declaration = node.declaration;\n\n        if (declaration) {\n          if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n            checkExportedName(declaration.id);\n          } else if (declaration.type === \"VariableDeclaration\") {\n            context.getDeclaredVariables(declaration).map(v => v.defs.find(d => d.parent === declaration)).map(d => d.name) // Identifier nodes\n            .forEach(checkExportedName);\n          }\n        } else {\n          node.specifiers.map(s => s.exported).forEach(checkExportedName);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","restrictedNamedExports","items","uniqueItems","additionalProperties","messages","restrictedNamed","create","context","restrictedNames","Set","options","checkExportedName","node","name","has","report","messageId","data","ExportAllDeclaration","exported","ExportNamedDeclaration","declaration","id","getDeclaredVariables","map","v","defs","find","d","parent","forEach","specifiers","s"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-restricted-exports.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow specified names in exports\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow specified names in exports\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-exports\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                restrictedNamedExports: {\n                    type: \"array\",\n                    items: {\n                        type: \"string\"\n                    },\n                    uniqueItems: true\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            restrictedNamed: \"'{{name}}' is restricted from being used as an exported name.\"\n        }\n    },\n\n    create(context) {\n\n        const restrictedNames = new Set(context.options[0] && context.options[0].restrictedNamedExports);\n\n        /**\n         * Checks and reports given exported identifier.\n         * @param {ASTNode} node exported `Identifier` node to check.\n         * @returns {void}\n         */\n        function checkExportedName(node) {\n            const name = node.name;\n\n            if (restrictedNames.has(name)) {\n                context.report({\n                    node,\n                    messageId: \"restrictedNamed\",\n                    data: { name }\n                });\n            }\n        }\n\n        return {\n            ExportAllDeclaration(node) {\n                if (node.exported) {\n                    checkExportedName(node.exported);\n                }\n            },\n\n            ExportNamedDeclaration(node) {\n                const declaration = node.declaration;\n\n                if (declaration) {\n                    if (declaration.type === \"FunctionDeclaration\" || declaration.type === \"ClassDeclaration\") {\n                        checkExportedName(declaration.id);\n                    } else if (declaration.type === \"VariableDeclaration\") {\n                        context.getDeclaredVariables(declaration)\n                            .map(v => v.defs.find(d => d.parent === declaration))\n                            .map(d => d.name) // Identifier nodes\n                            .forEach(checkExportedName);\n                    }\n                } else {\n                    node.specifiers\n                        .map(s => s.exported)\n                        .forEach(checkExportedName);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,qCADX;MAEFC,QAAQ,EAAE,cAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CAAC;MACLN,IAAI,EAAE,QADD;MAELO,UAAU,EAAE;QACRC,sBAAsB,EAAE;UACpBR,IAAI,EAAE,OADc;UAEpBS,KAAK,EAAE;YACHT,IAAI,EAAE;UADH,CAFa;UAKpBU,WAAW,EAAE;QALO;MADhB,CAFP;MAWLC,oBAAoB,EAAE;IAXjB,CAAD,CAVN;IAwBFC,QAAQ,EAAE;MACNC,eAAe,EAAE;IADX;EAxBR,CADO;;EA8BbC,MAAM,CAACC,OAAD,EAAU;IAEZ,MAAMC,eAAe,GAAG,IAAIC,GAAJ,CAAQF,OAAO,CAACG,OAAR,CAAgB,CAAhB,KAAsBH,OAAO,CAACG,OAAR,CAAgB,CAAhB,EAAmBV,sBAAjD,CAAxB;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASW,iBAAT,CAA2BC,IAA3B,EAAiC;MAC7B,MAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB;;MAEA,IAAIL,eAAe,CAACM,GAAhB,CAAoBD,IAApB,CAAJ,EAA+B;QAC3BN,OAAO,CAACQ,MAAR,CAAe;UACXH,IADW;UAEXI,SAAS,EAAE,iBAFA;UAGXC,IAAI,EAAE;YAAEJ;UAAF;QAHK,CAAf;MAKH;IACJ;;IAED,OAAO;MACHK,oBAAoB,CAACN,IAAD,EAAO;QACvB,IAAIA,IAAI,CAACO,QAAT,EAAmB;UACfR,iBAAiB,CAACC,IAAI,CAACO,QAAN,CAAjB;QACH;MACJ,CALE;;MAOHC,sBAAsB,CAACR,IAAD,EAAO;QACzB,MAAMS,WAAW,GAAGT,IAAI,CAACS,WAAzB;;QAEA,IAAIA,WAAJ,EAAiB;UACb,IAAIA,WAAW,CAAC7B,IAAZ,KAAqB,qBAArB,IAA8C6B,WAAW,CAAC7B,IAAZ,KAAqB,kBAAvE,EAA2F;YACvFmB,iBAAiB,CAACU,WAAW,CAACC,EAAb,CAAjB;UACH,CAFD,MAEO,IAAID,WAAW,CAAC7B,IAAZ,KAAqB,qBAAzB,EAAgD;YACnDe,OAAO,CAACgB,oBAAR,CAA6BF,WAA7B,EACKG,GADL,CACSC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAOC,IAAP,CAAYC,CAAC,IAAIA,CAAC,CAACC,MAAF,KAAaR,WAA9B,CADd,EAEKG,GAFL,CAESI,CAAC,IAAIA,CAAC,CAACf,IAFhB,EAEsB;YAFtB,CAGKiB,OAHL,CAGanB,iBAHb;UAIH;QACJ,CATD,MASO;UACHC,IAAI,CAACmB,UAAL,CACKP,GADL,CACSQ,CAAC,IAAIA,CAAC,CAACb,QADhB,EAEKW,OAFL,CAEanB,iBAFb;QAGH;MACJ;;IAxBE,CAAP;EA0BH;;AA7EY,CAAjB"},"metadata":{},"sourceType":"script"}