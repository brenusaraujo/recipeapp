{"ast":null,"code":"/**\n * @fileoverview Rule to disallow whitespace that is not a tab or space, whitespace inside strings and comments are allowed\n * @author Jonathan Kingston\n * @author Christophe Porteneuve\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\nconst ALL_IRREGULARS = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000\\u2028\\u2029]/u;\nconst IRREGULAR_WHITESPACE = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000]+/mgu;\nconst IRREGULAR_LINE_TERMINATORS = /[\\u2028\\u2029]/mgu;\nconst LINE_BREAK = astUtils.createGlobalLinebreakMatcher(); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow irregular whitespace\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-irregular-whitespace\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        skipComments: {\n          type: \"boolean\",\n          default: false\n        },\n        skipStrings: {\n          type: \"boolean\",\n          default: true\n        },\n        skipTemplates: {\n          type: \"boolean\",\n          default: false\n        },\n        skipRegExps: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      noIrregularWhitespace: \"Irregular whitespace not allowed.\"\n    }\n  },\n\n  create(context) {\n    // Module store of errors that we have found\n    let errors = []; // Lookup the `skipComments` option, which defaults to `false`.\n\n    const options = context.options[0] || {};\n    const skipComments = !!options.skipComments;\n    const skipStrings = options.skipStrings !== false;\n    const skipRegExps = !!options.skipRegExps;\n    const skipTemplates = !!options.skipTemplates;\n    const sourceCode = context.getSourceCode();\n    const commentNodes = sourceCode.getAllComments();\n    /**\n     * Removes errors that occur inside the given node\n     * @param {ASTNode} node to check for matching errors.\n     * @returns {void}\n     * @private\n     */\n\n    function removeWhitespaceError(node) {\n      const locStart = node.loc.start;\n      const locEnd = node.loc.end;\n      errors = errors.filter(_ref => {\n        let {\n          loc: {\n            start: errorLocStart\n          }\n        } = _ref;\n        return errorLocStart.line < locStart.line || errorLocStart.line === locStart.line && errorLocStart.column < locStart.column || errorLocStart.line === locEnd.line && errorLocStart.column >= locEnd.column || errorLocStart.line > locEnd.line;\n      });\n    }\n    /**\n     * Checks identifier or literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n     * @param {ASTNode} node to check for matching errors.\n     * @returns {void}\n     * @private\n     */\n\n\n    function removeInvalidNodeErrorsInIdentifierOrLiteral(node) {\n      const shouldCheckStrings = skipStrings && typeof node.value === \"string\";\n      const shouldCheckRegExps = skipRegExps && Boolean(node.regex);\n\n      if (shouldCheckStrings || shouldCheckRegExps) {\n        // If we have irregular characters remove them from the errors list\n        if (ALL_IRREGULARS.test(node.raw)) {\n          removeWhitespaceError(node);\n        }\n      }\n    }\n    /**\n     * Checks template string literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n     * @param {ASTNode} node to check for matching errors.\n     * @returns {void}\n     * @private\n     */\n\n\n    function removeInvalidNodeErrorsInTemplateLiteral(node) {\n      if (typeof node.value.raw === \"string\") {\n        if (ALL_IRREGULARS.test(node.value.raw)) {\n          removeWhitespaceError(node);\n        }\n      }\n    }\n    /**\n     * Checks comment nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n     * @param {ASTNode} node to check for matching errors.\n     * @returns {void}\n     * @private\n     */\n\n\n    function removeInvalidNodeErrorsInComment(node) {\n      if (ALL_IRREGULARS.test(node.value)) {\n        removeWhitespaceError(node);\n      }\n    }\n    /**\n     * Checks the program source for irregular whitespace\n     * @param {ASTNode} node The program node\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForIrregularWhitespace(node) {\n      const sourceLines = sourceCode.lines;\n      sourceLines.forEach((sourceLine, lineIndex) => {\n        const lineNumber = lineIndex + 1;\n        let match;\n\n        while ((match = IRREGULAR_WHITESPACE.exec(sourceLine)) !== null) {\n          errors.push({\n            node,\n            messageId: \"noIrregularWhitespace\",\n            loc: {\n              start: {\n                line: lineNumber,\n                column: match.index\n              },\n              end: {\n                line: lineNumber,\n                column: match.index + match[0].length\n              }\n            }\n          });\n        }\n      });\n    }\n    /**\n     * Checks the program source for irregular line terminators\n     * @param {ASTNode} node The program node\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkForIrregularLineTerminators(node) {\n      const source = sourceCode.getText(),\n            sourceLines = sourceCode.lines,\n            linebreaks = source.match(LINE_BREAK);\n      let lastLineIndex = -1,\n          match;\n\n      while ((match = IRREGULAR_LINE_TERMINATORS.exec(source)) !== null) {\n        const lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;\n        errors.push({\n          node,\n          messageId: \"noIrregularWhitespace\",\n          loc: {\n            start: {\n              line: lineIndex + 1,\n              column: sourceLines[lineIndex].length\n            },\n            end: {\n              line: lineIndex + 2,\n              column: 0\n            }\n          }\n        });\n        lastLineIndex = lineIndex;\n      }\n    }\n    /**\n     * A no-op function to act as placeholder for comment accumulation when the `skipComments` option is `false`.\n     * @returns {void}\n     * @private\n     */\n\n\n    function noop() {}\n\n    const nodes = {};\n\n    if (ALL_IRREGULARS.test(sourceCode.getText())) {\n      nodes.Program = function (node) {\n        /*\n         * As we can easily fire warnings for all white space issues with\n         * all the source its simpler to fire them here.\n         * This means we can check all the application code without having\n         * to worry about issues caused in the parser tokens.\n         * When writing this code also evaluating per node was missing out\n         * connecting tokens in some cases.\n         * We can later filter the errors when they are found to be not an\n         * issue in nodes we don't care about.\n         */\n        checkForIrregularWhitespace(node);\n        checkForIrregularLineTerminators(node);\n      };\n\n      nodes.Identifier = removeInvalidNodeErrorsInIdentifierOrLiteral;\n      nodes.Literal = removeInvalidNodeErrorsInIdentifierOrLiteral;\n      nodes.TemplateElement = skipTemplates ? removeInvalidNodeErrorsInTemplateLiteral : noop;\n\n      nodes[\"Program:exit\"] = function () {\n        if (skipComments) {\n          // First strip errors occurring in comment nodes.\n          commentNodes.forEach(removeInvalidNodeErrorsInComment);\n        } // If we have any errors remaining report on them\n\n\n        errors.forEach(error => context.report(error));\n      };\n    } else {\n      nodes.Program = noop;\n    }\n\n    return nodes;\n  }\n\n};","map":{"version":3,"names":["astUtils","require","ALL_IRREGULARS","IRREGULAR_WHITESPACE","IRREGULAR_LINE_TERMINATORS","LINE_BREAK","createGlobalLinebreakMatcher","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","skipComments","default","skipStrings","skipTemplates","skipRegExps","additionalProperties","messages","noIrregularWhitespace","create","context","errors","options","sourceCode","getSourceCode","commentNodes","getAllComments","removeWhitespaceError","node","locStart","loc","start","locEnd","end","filter","errorLocStart","line","column","removeInvalidNodeErrorsInIdentifierOrLiteral","shouldCheckStrings","value","shouldCheckRegExps","Boolean","regex","test","raw","removeInvalidNodeErrorsInTemplateLiteral","removeInvalidNodeErrorsInComment","checkForIrregularWhitespace","sourceLines","lines","forEach","sourceLine","lineIndex","lineNumber","match","exec","push","messageId","index","length","checkForIrregularLineTerminators","source","getText","linebreaks","lastLineIndex","indexOf","noop","nodes","Program","Identifier","Literal","TemplateElement","error","report"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-irregular-whitespace.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow whitespace that is not a tab or space, whitespace inside strings and comments are allowed\n * @author Jonathan Kingston\n * @author Christophe Porteneuve\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst ALL_IRREGULARS = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000\\u2028\\u2029]/u;\nconst IRREGULAR_WHITESPACE = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000]+/mgu;\nconst IRREGULAR_LINE_TERMINATORS = /[\\u2028\\u2029]/mgu;\nconst LINE_BREAK = astUtils.createGlobalLinebreakMatcher();\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow irregular whitespace\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-irregular-whitespace\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    skipComments: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    skipStrings: {\n                        type: \"boolean\",\n                        default: true\n                    },\n                    skipTemplates: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    skipRegExps: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            noIrregularWhitespace: \"Irregular whitespace not allowed.\"\n        }\n    },\n\n    create(context) {\n\n        // Module store of errors that we have found\n        let errors = [];\n\n        // Lookup the `skipComments` option, which defaults to `false`.\n        const options = context.options[0] || {};\n        const skipComments = !!options.skipComments;\n        const skipStrings = options.skipStrings !== false;\n        const skipRegExps = !!options.skipRegExps;\n        const skipTemplates = !!options.skipTemplates;\n\n        const sourceCode = context.getSourceCode();\n        const commentNodes = sourceCode.getAllComments();\n\n        /**\n         * Removes errors that occur inside the given node\n         * @param {ASTNode} node to check for matching errors.\n         * @returns {void}\n         * @private\n         */\n        function removeWhitespaceError(node) {\n            const locStart = node.loc.start;\n            const locEnd = node.loc.end;\n\n            errors = errors.filter(({ loc: { start: errorLocStart } }) => (\n                errorLocStart.line < locStart.line ||\n                errorLocStart.line === locStart.line && errorLocStart.column < locStart.column ||\n                errorLocStart.line === locEnd.line && errorLocStart.column >= locEnd.column ||\n                errorLocStart.line > locEnd.line\n            ));\n        }\n\n        /**\n         * Checks identifier or literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n         * @param {ASTNode} node to check for matching errors.\n         * @returns {void}\n         * @private\n         */\n        function removeInvalidNodeErrorsInIdentifierOrLiteral(node) {\n            const shouldCheckStrings = skipStrings && (typeof node.value === \"string\");\n            const shouldCheckRegExps = skipRegExps && Boolean(node.regex);\n\n            if (shouldCheckStrings || shouldCheckRegExps) {\n\n                // If we have irregular characters remove them from the errors list\n                if (ALL_IRREGULARS.test(node.raw)) {\n                    removeWhitespaceError(node);\n                }\n            }\n        }\n\n        /**\n         * Checks template string literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n         * @param {ASTNode} node to check for matching errors.\n         * @returns {void}\n         * @private\n         */\n        function removeInvalidNodeErrorsInTemplateLiteral(node) {\n            if (typeof node.value.raw === \"string\") {\n                if (ALL_IRREGULARS.test(node.value.raw)) {\n                    removeWhitespaceError(node);\n                }\n            }\n        }\n\n        /**\n         * Checks comment nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n         * @param {ASTNode} node to check for matching errors.\n         * @returns {void}\n         * @private\n         */\n        function removeInvalidNodeErrorsInComment(node) {\n            if (ALL_IRREGULARS.test(node.value)) {\n                removeWhitespaceError(node);\n            }\n        }\n\n        /**\n         * Checks the program source for irregular whitespace\n         * @param {ASTNode} node The program node\n         * @returns {void}\n         * @private\n         */\n        function checkForIrregularWhitespace(node) {\n            const sourceLines = sourceCode.lines;\n\n            sourceLines.forEach((sourceLine, lineIndex) => {\n                const lineNumber = lineIndex + 1;\n                let match;\n\n                while ((match = IRREGULAR_WHITESPACE.exec(sourceLine)) !== null) {\n                    errors.push({\n                        node,\n                        messageId: \"noIrregularWhitespace\",\n                        loc: {\n                            start: {\n                                line: lineNumber,\n                                column: match.index\n                            },\n                            end: {\n                                line: lineNumber,\n                                column: match.index + match[0].length\n                            }\n                        }\n                    });\n                }\n            });\n        }\n\n        /**\n         * Checks the program source for irregular line terminators\n         * @param {ASTNode} node The program node\n         * @returns {void}\n         * @private\n         */\n        function checkForIrregularLineTerminators(node) {\n            const source = sourceCode.getText(),\n                sourceLines = sourceCode.lines,\n                linebreaks = source.match(LINE_BREAK);\n            let lastLineIndex = -1,\n                match;\n\n            while ((match = IRREGULAR_LINE_TERMINATORS.exec(source)) !== null) {\n                const lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;\n\n                errors.push({\n                    node,\n                    messageId: \"noIrregularWhitespace\",\n                    loc: {\n                        start: {\n                            line: lineIndex + 1,\n                            column: sourceLines[lineIndex].length\n                        },\n                        end: {\n                            line: lineIndex + 2,\n                            column: 0\n                        }\n                    }\n                });\n\n                lastLineIndex = lineIndex;\n            }\n        }\n\n        /**\n         * A no-op function to act as placeholder for comment accumulation when the `skipComments` option is `false`.\n         * @returns {void}\n         * @private\n         */\n        function noop() {}\n\n        const nodes = {};\n\n        if (ALL_IRREGULARS.test(sourceCode.getText())) {\n            nodes.Program = function(node) {\n\n                /*\n                 * As we can easily fire warnings for all white space issues with\n                 * all the source its simpler to fire them here.\n                 * This means we can check all the application code without having\n                 * to worry about issues caused in the parser tokens.\n                 * When writing this code also evaluating per node was missing out\n                 * connecting tokens in some cases.\n                 * We can later filter the errors when they are found to be not an\n                 * issue in nodes we don't care about.\n                 */\n                checkForIrregularWhitespace(node);\n                checkForIrregularLineTerminators(node);\n            };\n\n            nodes.Identifier = removeInvalidNodeErrorsInIdentifierOrLiteral;\n            nodes.Literal = removeInvalidNodeErrorsInIdentifierOrLiteral;\n            nodes.TemplateElement = skipTemplates ? removeInvalidNodeErrorsInTemplateLiteral : noop;\n            nodes[\"Program:exit\"] = function() {\n                if (skipComments) {\n\n                    // First strip errors occurring in comment nodes.\n                    commentNodes.forEach(removeInvalidNodeErrorsInComment);\n                }\n\n                // If we have any errors remaining report on them\n                errors.forEach(error => context.report(error));\n            };\n        } else {\n            nodes.Program = noop;\n        }\n\n        return nodes;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}