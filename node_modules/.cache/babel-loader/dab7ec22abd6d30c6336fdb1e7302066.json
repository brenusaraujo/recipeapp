{"ast":null,"code":"/**\n * @fileoverview Rule to disallow uses of await inside of loops.\n * @author Nat Mote (nmote)\n */\n\"use strict\";\n/**\n * Check whether it should stop traversing ancestors at the given node.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if it should stop traversing.\n */\n\nfunction isBoundary(node) {\n  const t = node.type;\n  return t === \"FunctionDeclaration\" || t === \"FunctionExpression\" || t === \"ArrowFunctionExpression\" ||\n  /*\n   * Don't report the await expressions on for-await-of loop since it's\n   * asynchronous iteration intentionally.\n   */\n  t === \"ForOfStatement\" && node.await === true;\n}\n/**\n * Check whether the given node is in loop.\n * @param {ASTNode} node A node to check.\n * @param {ASTNode} parent A parent node to check.\n * @returns {boolean} `true` if the node is in loop.\n */\n\n\nfunction isLooped(node, parent) {\n  switch (parent.type) {\n    case \"ForStatement\":\n      return node === parent.test || node === parent.update || node === parent.body;\n\n    case \"ForOfStatement\":\n    case \"ForInStatement\":\n      return node === parent.body;\n\n    case \"WhileStatement\":\n    case \"DoWhileStatement\":\n      return node === parent.test || node === parent.body;\n\n    default:\n      return false;\n  }\n}\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow `await` inside of loops\",\n      category: \"Possible Errors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-await-in-loop\"\n    },\n    schema: [],\n    messages: {\n      unexpectedAwait: \"Unexpected `await` inside a loop.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Validate an await expression.\n     * @param {ASTNode} awaitNode An AwaitExpression or ForOfStatement node to validate.\n     * @returns {void}\n     */\n    function validate(awaitNode) {\n      if (awaitNode.type === \"ForOfStatement\" && !awaitNode.await) {\n        return;\n      }\n\n      let node = awaitNode;\n      let parent = node.parent;\n\n      while (parent && !isBoundary(parent)) {\n        if (isLooped(node, parent)) {\n          context.report({\n            node: awaitNode,\n            messageId: \"unexpectedAwait\"\n          });\n          return;\n        }\n\n        node = parent;\n        parent = parent.parent;\n      }\n    }\n\n    return {\n      AwaitExpression: validate,\n      ForOfStatement: validate\n    };\n  }\n\n};","map":{"version":3,"names":["isBoundary","node","t","type","await","isLooped","parent","test","update","body","module","exports","meta","docs","description","category","recommended","url","schema","messages","unexpectedAwait","create","context","validate","awaitNode","report","messageId","AwaitExpression","ForOfStatement"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-await-in-loop.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow uses of await inside of loops.\n * @author Nat Mote (nmote)\n */\n\"use strict\";\n\n/**\n * Check whether it should stop traversing ancestors at the given node.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} `true` if it should stop traversing.\n */\nfunction isBoundary(node) {\n    const t = node.type;\n\n    return (\n        t === \"FunctionDeclaration\" ||\n        t === \"FunctionExpression\" ||\n        t === \"ArrowFunctionExpression\" ||\n\n        /*\n         * Don't report the await expressions on for-await-of loop since it's\n         * asynchronous iteration intentionally.\n         */\n        (t === \"ForOfStatement\" && node.await === true)\n    );\n}\n\n/**\n * Check whether the given node is in loop.\n * @param {ASTNode} node A node to check.\n * @param {ASTNode} parent A parent node to check.\n * @returns {boolean} `true` if the node is in loop.\n */\nfunction isLooped(node, parent) {\n    switch (parent.type) {\n        case \"ForStatement\":\n            return (\n                node === parent.test ||\n                node === parent.update ||\n                node === parent.body\n            );\n\n        case \"ForOfStatement\":\n        case \"ForInStatement\":\n            return node === parent.body;\n\n        case \"WhileStatement\":\n        case \"DoWhileStatement\":\n            return node === parent.test || node === parent.body;\n\n        default:\n            return false;\n    }\n}\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow `await` inside of loops\",\n            category: \"Possible Errors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-await-in-loop\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedAwait: \"Unexpected `await` inside a loop.\"\n        }\n    },\n    create(context) {\n\n        /**\n         * Validate an await expression.\n         * @param {ASTNode} awaitNode An AwaitExpression or ForOfStatement node to validate.\n         * @returns {void}\n         */\n        function validate(awaitNode) {\n            if (awaitNode.type === \"ForOfStatement\" && !awaitNode.await) {\n                return;\n            }\n\n            let node = awaitNode;\n            let parent = node.parent;\n\n            while (parent && !isBoundary(parent)) {\n                if (isLooped(node, parent)) {\n                    context.report({\n                        node: awaitNode,\n                        messageId: \"unexpectedAwait\"\n                    });\n                    return;\n                }\n                node = parent;\n                parent = parent.parent;\n            }\n        }\n\n        return {\n            AwaitExpression: validate,\n            ForOfStatement: validate\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,UAAT,CAAoBC,IAApB,EAA0B;EACtB,MAAMC,CAAC,GAAGD,IAAI,CAACE,IAAf;EAEA,OACID,CAAC,KAAK,qBAAN,IACAA,CAAC,KAAK,oBADN,IAEAA,CAAC,KAAK,yBAFN;EAIA;AACR;AACA;AACA;EACSA,CAAC,KAAK,gBAAN,IAA0BD,IAAI,CAACG,KAAL,KAAe,IAT9C;AAWH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBJ,IAAlB,EAAwBK,MAAxB,EAAgC;EAC5B,QAAQA,MAAM,CAACH,IAAf;IACI,KAAK,cAAL;MACI,OACIF,IAAI,KAAKK,MAAM,CAACC,IAAhB,IACAN,IAAI,KAAKK,MAAM,CAACE,MADhB,IAEAP,IAAI,KAAKK,MAAM,CAACG,IAHpB;;IAMJ,KAAK,gBAAL;IACA,KAAK,gBAAL;MACI,OAAOR,IAAI,KAAKK,MAAM,CAACG,IAAvB;;IAEJ,KAAK,gBAAL;IACA,KAAK,kBAAL;MACI,OAAOR,IAAI,KAAKK,MAAM,CAACC,IAAhB,IAAwBN,IAAI,KAAKK,MAAM,CAACG,IAA/C;;IAEJ;MACI,OAAO,KAAP;EAjBR;AAmBH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFT,IAAI,EAAE,SADJ;IAGFU,IAAI,EAAE;MACFC,WAAW,EAAE,kCADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,eAAe,EAAE;IADX;EAZR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;MACzB,IAAIA,SAAS,CAACrB,IAAV,KAAmB,gBAAnB,IAAuC,CAACqB,SAAS,CAACpB,KAAtD,EAA6D;QACzD;MACH;;MAED,IAAIH,IAAI,GAAGuB,SAAX;MACA,IAAIlB,MAAM,GAAGL,IAAI,CAACK,MAAlB;;MAEA,OAAOA,MAAM,IAAI,CAACN,UAAU,CAACM,MAAD,CAA5B,EAAsC;QAClC,IAAID,QAAQ,CAACJ,IAAD,EAAOK,MAAP,CAAZ,EAA4B;UACxBgB,OAAO,CAACG,MAAR,CAAe;YACXxB,IAAI,EAAEuB,SADK;YAEXE,SAAS,EAAE;UAFA,CAAf;UAIA;QACH;;QACDzB,IAAI,GAAGK,MAAP;QACAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;MACH;IACJ;;IAED,OAAO;MACHqB,eAAe,EAAEJ,QADd;MAEHK,cAAc,EAAEL;IAFb,CAAP;EAIH;;AAjDY,CAAjB"},"metadata":{},"sourceType":"script"}