{"ast":null,"code":"/**\n * @fileoverview Rule to flag consistent return values\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given code path segment is unreachable.\n * @param {CodePathSegment} segment A CodePathSegment to check.\n * @returns {boolean} `true` if the segment is unreachable.\n */\n\n\nfunction isUnreachable(segment) {\n  return !segment.reachable;\n}\n/**\n * Checks whether a given node is a `constructor` method in an ES6 class\n * @param {ASTNode} node A node to check\n * @returns {boolean} `true` if the node is a `constructor` method\n */\n\n\nfunction isClassConstructor(node) {\n  return node.type === \"FunctionExpression\" && node.parent && node.parent.type === \"MethodDefinition\" && node.parent.kind === \"constructor\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `return` statements to either always or never specify values\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/consistent-return\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        treatUndefinedAsUnspecified: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingReturn: \"Expected to return a value at the end of {{name}}.\",\n      missingReturnValue: \"{{name}} expected a return value.\",\n      unexpectedReturnValue: \"{{name}} expected no return value.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const treatUndefinedAsUnspecified = options.treatUndefinedAsUnspecified === true;\n    let funcInfo = null;\n    /**\n     * Checks whether of not the implicit returning is consistent if the last\n     * code path segment is reachable.\n     * @param {ASTNode} node A program/function node to check.\n     * @returns {void}\n     */\n\n    function checkLastSegment(node) {\n      let loc, name;\n      /*\n       * Skip if it expected no return value or unreachable.\n       * When unreachable, all paths are returned or thrown.\n       */\n\n      if (!funcInfo.hasReturnValue || funcInfo.codePath.currentSegments.every(isUnreachable) || astUtils.isES5Constructor(node) || isClassConstructor(node)) {\n        return;\n      } // Adjust a location and a message.\n\n\n      if (node.type === \"Program\") {\n        // The head of program.\n        loc = {\n          line: 1,\n          column: 0\n        };\n        name = \"program\";\n      } else if (node.type === \"ArrowFunctionExpression\") {\n        // `=>` token\n        loc = context.getSourceCode().getTokenBefore(node.body, astUtils.isArrowToken).loc;\n      } else if (node.parent.type === \"MethodDefinition\" || node.parent.type === \"Property\" && node.parent.method) {\n        // Method name.\n        loc = node.parent.key.loc;\n      } else {\n        // Function name or `function` keyword.\n        loc = (node.id || context.getSourceCode().getFirstToken(node)).loc;\n      }\n\n      if (!name) {\n        name = astUtils.getFunctionNameWithKind(node);\n      } // Reports.\n\n\n      context.report({\n        node,\n        loc,\n        messageId: \"missingReturn\",\n        data: {\n          name\n        }\n      });\n    }\n\n    return {\n      // Initializes/Disposes state of each code path.\n      onCodePathStart(codePath, node) {\n        funcInfo = {\n          upper: funcInfo,\n          codePath,\n          hasReturn: false,\n          hasReturnValue: false,\n          messageId: \"\",\n          node\n        };\n      },\n\n      onCodePathEnd() {\n        funcInfo = funcInfo.upper;\n      },\n\n      // Reports a given return statement if it's inconsistent.\n      ReturnStatement(node) {\n        const argument = node.argument;\n        let hasReturnValue = Boolean(argument);\n\n        if (treatUndefinedAsUnspecified && hasReturnValue) {\n          hasReturnValue = !astUtils.isSpecificId(argument, \"undefined\") && argument.operator !== \"void\";\n        }\n\n        if (!funcInfo.hasReturn) {\n          funcInfo.hasReturn = true;\n          funcInfo.hasReturnValue = hasReturnValue;\n          funcInfo.messageId = hasReturnValue ? \"missingReturnValue\" : \"unexpectedReturnValue\";\n          funcInfo.data = {\n            name: funcInfo.node.type === \"Program\" ? \"Program\" : upperCaseFirst(astUtils.getFunctionNameWithKind(funcInfo.node))\n          };\n        } else if (funcInfo.hasReturnValue !== hasReturnValue) {\n          context.report({\n            node,\n            messageId: funcInfo.messageId,\n            data: funcInfo.data\n          });\n        }\n      },\n\n      // Reports a given program/function if the implicit returning is not consistent.\n      \"Program:exit\": checkLastSegment,\n      \"FunctionDeclaration:exit\": checkLastSegment,\n      \"FunctionExpression:exit\": checkLastSegment,\n      \"ArrowFunctionExpression:exit\": checkLastSegment\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","upperCaseFirst","isUnreachable","segment","reachable","isClassConstructor","node","type","parent","kind","module","exports","meta","docs","description","category","recommended","url","schema","properties","treatUndefinedAsUnspecified","default","additionalProperties","messages","missingReturn","missingReturnValue","unexpectedReturnValue","create","context","options","funcInfo","checkLastSegment","loc","name","hasReturnValue","codePath","currentSegments","every","isES5Constructor","line","column","getSourceCode","getTokenBefore","body","isArrowToken","method","key","id","getFirstToken","getFunctionNameWithKind","report","messageId","data","onCodePathStart","upper","hasReturn","onCodePathEnd","ReturnStatement","argument","Boolean","isSpecificId","operator"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/consistent-return.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag consistent return values\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given code path segment is unreachable.\n * @param {CodePathSegment} segment A CodePathSegment to check.\n * @returns {boolean} `true` if the segment is unreachable.\n */\nfunction isUnreachable(segment) {\n    return !segment.reachable;\n}\n\n/**\n * Checks whether a given node is a `constructor` method in an ES6 class\n * @param {ASTNode} node A node to check\n * @returns {boolean} `true` if the node is a `constructor` method\n */\nfunction isClassConstructor(node) {\n    return node.type === \"FunctionExpression\" &&\n        node.parent &&\n        node.parent.type === \"MethodDefinition\" &&\n        node.parent.kind === \"constructor\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `return` statements to either always or never specify values\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/consistent-return\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                treatUndefinedAsUnspecified: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingReturn: \"Expected to return a value at the end of {{name}}.\",\n            missingReturnValue: \"{{name}} expected a return value.\",\n            unexpectedReturnValue: \"{{name}} expected no return value.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const treatUndefinedAsUnspecified = options.treatUndefinedAsUnspecified === true;\n        let funcInfo = null;\n\n        /**\n         * Checks whether of not the implicit returning is consistent if the last\n         * code path segment is reachable.\n         * @param {ASTNode} node A program/function node to check.\n         * @returns {void}\n         */\n        function checkLastSegment(node) {\n            let loc, name;\n\n            /*\n             * Skip if it expected no return value or unreachable.\n             * When unreachable, all paths are returned or thrown.\n             */\n            if (!funcInfo.hasReturnValue ||\n                funcInfo.codePath.currentSegments.every(isUnreachable) ||\n                astUtils.isES5Constructor(node) ||\n                isClassConstructor(node)\n            ) {\n                return;\n            }\n\n            // Adjust a location and a message.\n            if (node.type === \"Program\") {\n\n                // The head of program.\n                loc = { line: 1, column: 0 };\n                name = \"program\";\n            } else if (node.type === \"ArrowFunctionExpression\") {\n\n                // `=>` token\n                loc = context.getSourceCode().getTokenBefore(node.body, astUtils.isArrowToken).loc;\n            } else if (\n                node.parent.type === \"MethodDefinition\" ||\n                (node.parent.type === \"Property\" && node.parent.method)\n            ) {\n\n                // Method name.\n                loc = node.parent.key.loc;\n            } else {\n\n                // Function name or `function` keyword.\n                loc = (node.id || context.getSourceCode().getFirstToken(node)).loc;\n            }\n\n            if (!name) {\n                name = astUtils.getFunctionNameWithKind(node);\n            }\n\n            // Reports.\n            context.report({\n                node,\n                loc,\n                messageId: \"missingReturn\",\n                data: { name }\n            });\n        }\n\n        return {\n\n            // Initializes/Disposes state of each code path.\n            onCodePathStart(codePath, node) {\n                funcInfo = {\n                    upper: funcInfo,\n                    codePath,\n                    hasReturn: false,\n                    hasReturnValue: false,\n                    messageId: \"\",\n                    node\n                };\n            },\n            onCodePathEnd() {\n                funcInfo = funcInfo.upper;\n            },\n\n            // Reports a given return statement if it's inconsistent.\n            ReturnStatement(node) {\n                const argument = node.argument;\n                let hasReturnValue = Boolean(argument);\n\n                if (treatUndefinedAsUnspecified && hasReturnValue) {\n                    hasReturnValue = !astUtils.isSpecificId(argument, \"undefined\") && argument.operator !== \"void\";\n                }\n\n                if (!funcInfo.hasReturn) {\n                    funcInfo.hasReturn = true;\n                    funcInfo.hasReturnValue = hasReturnValue;\n                    funcInfo.messageId = hasReturnValue ? \"missingReturnValue\" : \"unexpectedReturnValue\";\n                    funcInfo.data = {\n                        name: funcInfo.node.type === \"Program\"\n                            ? \"Program\"\n                            : upperCaseFirst(astUtils.getFunctionNameWithKind(funcInfo.node))\n                    };\n                } else if (funcInfo.hasReturnValue !== hasReturnValue) {\n                    context.report({\n                        node,\n                        messageId: funcInfo.messageId,\n                        data: funcInfo.data\n                    });\n                }\n            },\n\n            // Reports a given program/function if the implicit returning is not consistent.\n            \"Program:exit\": checkLastSegment,\n            \"FunctionDeclaration:exit\": checkLastSegment,\n            \"FunctionExpression:exit\": checkLastSegment,\n            \"ArrowFunctionExpression:exit\": checkLastSegment\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}