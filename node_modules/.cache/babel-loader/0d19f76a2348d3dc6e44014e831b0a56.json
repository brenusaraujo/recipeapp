{"ast":null,"code":"/**\n * @fileoverview Disallows unnecessary `return await`\n * @author Jordan Harband\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary `return await`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-return-await\"\n    },\n    fixable: null,\n    schema: [],\n    messages: {\n      redundantUseOfAwait: \"Redundant use of `await` on a return value.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Reports a found unnecessary `await` expression.\n     * @param {ASTNode} node The node representing the `await` expression to report\n     * @returns {void}\n     */\n    function reportUnnecessaryAwait(node) {\n      context.report({\n        node: context.getSourceCode().getFirstToken(node),\n        loc: node.loc,\n        messageId: \"redundantUseOfAwait\"\n      });\n    }\n    /**\n     * Determines whether a thrown error from this node will be caught/handled within this function rather than immediately halting\n     * this function. For example, a statement in a `try` block will always have an error handler. A statement in\n     * a `catch` block will only have an error handler if there is also a `finally` block.\n     * @param {ASTNode} node A node representing a location where an could be thrown\n     * @returns {boolean} `true` if a thrown error will be caught/handled in this function\n     */\n\n\n    function hasErrorHandler(node) {\n      let ancestor = node;\n\n      while (!astUtils.isFunction(ancestor) && ancestor.type !== \"Program\") {\n        if (ancestor.parent.type === \"TryStatement\" && (ancestor === ancestor.parent.block || ancestor === ancestor.parent.handler && ancestor.parent.finalizer)) {\n          return true;\n        }\n\n        ancestor = ancestor.parent;\n      }\n\n      return false;\n    }\n    /**\n     * Checks if a node is placed in tail call position. Once `return` arguments (or arrow function expressions) can be a complex expression,\n     * an `await` expression could or could not be unnecessary by the definition of this rule. So we're looking for `await` expressions that are in tail position.\n     * @param {ASTNode} node A node representing the `await` expression to check\n     * @returns {boolean} The checking result\n     */\n\n\n    function isInTailCallPosition(node) {\n      if (node.parent.type === \"ArrowFunctionExpression\") {\n        return true;\n      }\n\n      if (node.parent.type === \"ReturnStatement\") {\n        return !hasErrorHandler(node.parent);\n      }\n\n      if (node.parent.type === \"ConditionalExpression\" && (node === node.parent.consequent || node === node.parent.alternate)) {\n        return isInTailCallPosition(node.parent);\n      }\n\n      if (node.parent.type === \"LogicalExpression\" && node === node.parent.right) {\n        return isInTailCallPosition(node.parent);\n      }\n\n      if (node.parent.type === \"SequenceExpression\" && node === node.parent.expressions[node.parent.expressions.length - 1]) {\n        return isInTailCallPosition(node.parent);\n      }\n\n      return false;\n    }\n\n    return {\n      AwaitExpression(node) {\n        if (isInTailCallPosition(node) && !hasErrorHandler(node)) {\n          reportUnnecessaryAwait(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","redundantUseOfAwait","create","context","reportUnnecessaryAwait","node","report","getSourceCode","getFirstToken","loc","messageId","hasErrorHandler","ancestor","isFunction","parent","block","handler","finalizer","isInTailCallPosition","consequent","alternate","right","expressions","length","AwaitExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-return-await.js"],"sourcesContent":["/**\n * @fileoverview Disallows unnecessary `return await`\n * @author Jordan Harband\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary `return await`\",\n            category: \"Best Practices\",\n\n            recommended: false,\n\n            url: \"https://eslint.org/docs/rules/no-return-await\"\n        },\n\n        fixable: null,\n\n        schema: [\n        ],\n\n        messages: {\n            redundantUseOfAwait: \"Redundant use of `await` on a return value.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Reports a found unnecessary `await` expression.\n         * @param {ASTNode} node The node representing the `await` expression to report\n         * @returns {void}\n         */\n        function reportUnnecessaryAwait(node) {\n            context.report({\n                node: context.getSourceCode().getFirstToken(node),\n                loc: node.loc,\n                messageId: \"redundantUseOfAwait\"\n            });\n        }\n\n        /**\n         * Determines whether a thrown error from this node will be caught/handled within this function rather than immediately halting\n         * this function. For example, a statement in a `try` block will always have an error handler. A statement in\n         * a `catch` block will only have an error handler if there is also a `finally` block.\n         * @param {ASTNode} node A node representing a location where an could be thrown\n         * @returns {boolean} `true` if a thrown error will be caught/handled in this function\n         */\n        function hasErrorHandler(node) {\n            let ancestor = node;\n\n            while (!astUtils.isFunction(ancestor) && ancestor.type !== \"Program\") {\n                if (ancestor.parent.type === \"TryStatement\" && (ancestor === ancestor.parent.block || ancestor === ancestor.parent.handler && ancestor.parent.finalizer)) {\n                    return true;\n                }\n                ancestor = ancestor.parent;\n            }\n            return false;\n        }\n\n        /**\n         * Checks if a node is placed in tail call position. Once `return` arguments (or arrow function expressions) can be a complex expression,\n         * an `await` expression could or could not be unnecessary by the definition of this rule. So we're looking for `await` expressions that are in tail position.\n         * @param {ASTNode} node A node representing the `await` expression to check\n         * @returns {boolean} The checking result\n         */\n        function isInTailCallPosition(node) {\n            if (node.parent.type === \"ArrowFunctionExpression\") {\n                return true;\n            }\n            if (node.parent.type === \"ReturnStatement\") {\n                return !hasErrorHandler(node.parent);\n            }\n            if (node.parent.type === \"ConditionalExpression\" && (node === node.parent.consequent || node === node.parent.alternate)) {\n                return isInTailCallPosition(node.parent);\n            }\n            if (node.parent.type === \"LogicalExpression\" && node === node.parent.right) {\n                return isInTailCallPosition(node.parent);\n            }\n            if (node.parent.type === \"SequenceExpression\" && node === node.parent.expressions[node.parent.expressions.length - 1]) {\n                return isInTailCallPosition(node.parent);\n            }\n            return false;\n        }\n\n        return {\n            AwaitExpression(node) {\n                if (isInTailCallPosition(node) && !hasErrorHandler(node)) {\n                    reportUnnecessaryAwait(node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}