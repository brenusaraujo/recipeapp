{"ast":null,"code":"/**\n * @fileoverview Rule to enforce the position of line comments\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce position of line comments\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/line-comment-position\"\n    },\n    schema: [{\n      oneOf: [{\n        enum: [\"above\", \"beside\"]\n      }, {\n        type: \"object\",\n        properties: {\n          position: {\n            enum: [\"above\", \"beside\"]\n          },\n          ignorePattern: {\n            type: \"string\"\n          },\n          applyDefaultPatterns: {\n            type: \"boolean\"\n          },\n          applyDefaultIgnorePatterns: {\n            type: \"boolean\"\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      above: \"Expected comment to be above code.\",\n      beside: \"Expected comment to be beside code.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0];\n    let above,\n        ignorePattern,\n        applyDefaultIgnorePatterns = true;\n\n    if (!options || typeof options === \"string\") {\n      above = !options || options === \"above\";\n    } else {\n      above = !options.position || options.position === \"above\";\n      ignorePattern = options.ignorePattern;\n\n      if (Object.prototype.hasOwnProperty.call(options, \"applyDefaultIgnorePatterns\")) {\n        applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;\n      } else {\n        applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;\n      }\n    }\n\n    const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n    const fallThroughRegExp = /^\\s*falls?\\s?through/u;\n    const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n    return {\n      Program() {\n        const comments = sourceCode.getAllComments();\n        comments.filter(token => token.type === \"Line\").forEach(node => {\n          if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {\n            return;\n          }\n\n          if (ignorePattern && customIgnoreRegExp.test(node.value)) {\n            return;\n          }\n\n          const previous = sourceCode.getTokenBefore(node, {\n            includeComments: true\n          });\n          const isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;\n\n          if (above) {\n            if (isOnSameLine) {\n              context.report({\n                node,\n                messageId: \"above\"\n              });\n            }\n          } else {\n            if (!isOnSameLine) {\n              context.report({\n                node,\n                messageId: \"beside\"\n              });\n            }\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","enum","properties","position","ignorePattern","applyDefaultPatterns","applyDefaultIgnorePatterns","additionalProperties","messages","above","beside","create","context","options","Object","prototype","hasOwnProperty","call","defaultIgnoreRegExp","COMMENTS_IGNORE_PATTERN","fallThroughRegExp","customIgnoreRegExp","RegExp","sourceCode","getSourceCode","Program","comments","getAllComments","filter","token","forEach","node","test","value","previous","getTokenBefore","includeComments","isOnSameLine","loc","end","line","start","report","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/line-comment-position.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce the position of line comments\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce position of line comments\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/line-comment-position\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"above\", \"beside\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            position: {\n                                enum: [\"above\", \"beside\"]\n                            },\n                            ignorePattern: {\n                                type: \"string\"\n                            },\n                            applyDefaultPatterns: {\n                                type: \"boolean\"\n                            },\n                            applyDefaultIgnorePatterns: {\n                                type: \"boolean\"\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n        messages: {\n            above: \"Expected comment to be above code.\",\n            beside: \"Expected comment to be beside code.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0];\n\n        let above,\n            ignorePattern,\n            applyDefaultIgnorePatterns = true;\n\n        if (!options || typeof options === \"string\") {\n            above = !options || options === \"above\";\n\n        } else {\n            above = !options.position || options.position === \"above\";\n            ignorePattern = options.ignorePattern;\n\n            if (Object.prototype.hasOwnProperty.call(options, \"applyDefaultIgnorePatterns\")) {\n                applyDefaultIgnorePatterns = options.applyDefaultIgnorePatterns;\n            } else {\n                applyDefaultIgnorePatterns = options.applyDefaultPatterns !== false;\n            }\n        }\n\n        const defaultIgnoreRegExp = astUtils.COMMENTS_IGNORE_PATTERN;\n        const fallThroughRegExp = /^\\s*falls?\\s?through/u;\n        const customIgnoreRegExp = new RegExp(ignorePattern, \"u\");\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program() {\n                const comments = sourceCode.getAllComments();\n\n                comments.filter(token => token.type === \"Line\").forEach(node => {\n                    if (applyDefaultIgnorePatterns && (defaultIgnoreRegExp.test(node.value) || fallThroughRegExp.test(node.value))) {\n                        return;\n                    }\n\n                    if (ignorePattern && customIgnoreRegExp.test(node.value)) {\n                        return;\n                    }\n\n                    const previous = sourceCode.getTokenBefore(node, { includeComments: true });\n                    const isOnSameLine = previous && previous.loc.end.line === node.loc.start.line;\n\n                    if (above) {\n                        if (isOnSameLine) {\n                            context.report({\n                                node,\n                                messageId: \"above\"\n                            });\n                        }\n                    } else {\n                        if (!isOnSameLine) {\n                            context.report({\n                                node,\n                                messageId: \"beside\"\n                            });\n                        }\n                    }\n                });\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}