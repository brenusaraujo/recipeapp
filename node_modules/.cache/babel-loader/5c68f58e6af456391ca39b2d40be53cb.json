{"ast":null,"code":"/**\n * @fileoverview Rule to flag duplicate arguments\n * @author Jamund Ferguson\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate arguments in `function` definitions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-dupe-args\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate param '{{name}}'.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Checks whether or not a given definition is a parameter's.\n     * @param {eslint-scope.DefEntry} def A definition to check.\n     * @returns {boolean} `true` if the definition is a parameter's.\n     */\n    function isParameter(def) {\n      return def.type === \"Parameter\";\n    }\n    /**\n     * Determines if a given node has duplicate parameters.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkParams(node) {\n      const variables = context.getDeclaredVariables(node);\n\n      for (let i = 0; i < variables.length; ++i) {\n        const variable = variables[i]; // Checks and reports duplications.\n\n        const defs = variable.defs.filter(isParameter);\n\n        if (defs.length >= 2) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              name: variable.name\n            }\n          });\n        }\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      FunctionDeclaration: checkParams,\n      FunctionExpression: checkParams\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","isParameter","def","checkParams","node","variables","getDeclaredVariables","i","length","variable","defs","filter","report","messageId","data","name","FunctionDeclaration","FunctionExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-dupe-args.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag duplicate arguments\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow duplicate arguments in `function` definitions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-dupe-args\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate param '{{name}}'.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Checks whether or not a given definition is a parameter's.\n         * @param {eslint-scope.DefEntry} def A definition to check.\n         * @returns {boolean} `true` if the definition is a parameter's.\n         */\n        function isParameter(def) {\n            return def.type === \"Parameter\";\n        }\n\n        /**\n         * Determines if a given node has duplicate parameters.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         * @private\n         */\n        function checkParams(node) {\n            const variables = context.getDeclaredVariables(node);\n\n            for (let i = 0; i < variables.length; ++i) {\n                const variable = variables[i];\n\n                // Checks and reports duplications.\n                const defs = variable.defs.filter(isParameter);\n\n                if (defs.length >= 2) {\n                    context.report({\n                        node,\n                        messageId: \"unexpected\",\n                        data: { name: variable.name }\n                    });\n                }\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: checkParams,\n            FunctionExpression: checkParams\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,wDADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,WAAT,CAAqBC,GAArB,EAA0B;MACtB,OAAOA,GAAG,CAACZ,IAAJ,KAAa,WAApB;IACH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASa,WAAT,CAAqBC,IAArB,EAA2B;MACvB,MAAMC,SAAS,GAAGL,OAAO,CAACM,oBAAR,CAA6BF,IAA7B,CAAlB;;MAEA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,MAA9B,EAAsC,EAAED,CAAxC,EAA2C;QACvC,MAAME,QAAQ,GAAGJ,SAAS,CAACE,CAAD,CAA1B,CADuC,CAGvC;;QACA,MAAMG,IAAI,GAAGD,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBV,WAArB,CAAb;;QAEA,IAAIS,IAAI,CAACF,MAAL,IAAe,CAAnB,EAAsB;UAClBR,OAAO,CAACY,MAAR,CAAe;YACXR,IADW;YAEXS,SAAS,EAAE,YAFA;YAGXC,IAAI,EAAE;cAAEC,IAAI,EAAEN,QAAQ,CAACM;YAAjB;UAHK,CAAf;QAKH;MACJ;IACJ,CAtCW,CAwCZ;IACA;IACA;;;IAEA,OAAO;MACHC,mBAAmB,EAAEb,WADlB;MAEHc,kBAAkB,EAAEd;IAFjB,CAAP;EAKH;;AAnEY,CAAjB"},"metadata":{},"sourceType":"script"}