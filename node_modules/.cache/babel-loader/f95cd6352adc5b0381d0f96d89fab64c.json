{"ast":null,"code":"/**\n * @fileoverview A collection of methods for processing Espree's options.\n * @author Kai Cataldo\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_ECMA_VERSION = 5;\nconst SUPPORTED_VERSIONS = [3, 5, 6, 7, 8, 9, 10, 11, 12];\n/**\n * Normalize ECMAScript version from the initial config\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @throws {Error} throws an error if the ecmaVersion is invalid.\n * @returns {number} normalized ECMAScript version\n */\n\nfunction normalizeEcmaVersion() {\n  let ecmaVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_ECMA_VERSION;\n\n  if (typeof ecmaVersion !== \"number\") {\n    throw new Error(`ecmaVersion must be a number. Received value of type ${typeof ecmaVersion} instead.`);\n  }\n\n  let version = ecmaVersion; // Calculate ECMAScript edition number from official year version starting with\n  // ES2015, which corresponds with ES6 (or a difference of 2009).\n\n  if (version >= 2015) {\n    version -= 2009;\n  }\n\n  if (!SUPPORTED_VERSIONS.includes(version)) {\n    throw new Error(\"Invalid ecmaVersion.\");\n  }\n\n  return version;\n}\n/**\n * Normalize sourceType from the initial config\n * @param {string} sourceType to normalize\n * @throws {Error} throw an error if sourceType is invalid\n * @returns {string} normalized sourceType\n */\n\n\nfunction normalizeSourceType() {\n  let sourceType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"script\";\n\n  if (sourceType === \"script\" || sourceType === \"module\") {\n    return sourceType;\n  }\n\n  throw new Error(\"Invalid sourceType.\");\n}\n/**\n * Normalize parserOptions\n * @param {Object} options the parser options to normalize\n * @throws {Error} throw an error if found invalid option.\n * @returns {Object} normalized options\n */\n\n\nfunction normalizeOptions(options) {\n  const ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);\n  const sourceType = normalizeSourceType(options.sourceType);\n  const ranges = options.range === true;\n  const locations = options.loc === true;\n\n  if (sourceType === \"module\" && ecmaVersion < 6) {\n    throw new Error(\"sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.\");\n  }\n\n  return Object.assign({}, options, {\n    ecmaVersion,\n    sourceType,\n    ranges,\n    locations\n  });\n}\n/**\n * Get the latest ECMAScript version supported by Espree.\n * @returns {number} The latest ECMAScript version.\n */\n\n\nfunction getLatestEcmaVersion() {\n  return SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];\n}\n/**\n * Get the list of ECMAScript versions supported by Espree.\n * @returns {number[]} An array containing the supported ECMAScript versions.\n */\n\n\nfunction getSupportedEcmaVersions() {\n  return [...SUPPORTED_VERSIONS];\n} //------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  normalizeOptions,\n  getLatestEcmaVersion,\n  getSupportedEcmaVersions\n};","map":{"version":3,"names":["DEFAULT_ECMA_VERSION","SUPPORTED_VERSIONS","normalizeEcmaVersion","ecmaVersion","Error","version","includes","normalizeSourceType","sourceType","normalizeOptions","options","ranges","range","locations","loc","Object","assign","getLatestEcmaVersion","length","getSupportedEcmaVersions","module","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/espree/lib/options.js"],"sourcesContent":["/**\n * @fileoverview A collection of methods for processing Espree's options.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_ECMA_VERSION = 5;\nconst SUPPORTED_VERSIONS = [\n    3,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12\n];\n\n/**\n * Normalize ECMAScript version from the initial config\n * @param {number} ecmaVersion ECMAScript version from the initial config\n * @throws {Error} throws an error if the ecmaVersion is invalid.\n * @returns {number} normalized ECMAScript version\n */\nfunction normalizeEcmaVersion(ecmaVersion = DEFAULT_ECMA_VERSION) {\n    if (typeof ecmaVersion !== \"number\") {\n        throw new Error(`ecmaVersion must be a number. Received value of type ${typeof ecmaVersion} instead.`);\n    }\n\n    let version = ecmaVersion;\n\n    // Calculate ECMAScript edition number from official year version starting with\n    // ES2015, which corresponds with ES6 (or a difference of 2009).\n    if (version >= 2015) {\n        version -= 2009;\n    }\n\n    if (!SUPPORTED_VERSIONS.includes(version)) {\n        throw new Error(\"Invalid ecmaVersion.\");\n    }\n\n    return version;\n}\n\n/**\n * Normalize sourceType from the initial config\n * @param {string} sourceType to normalize\n * @throws {Error} throw an error if sourceType is invalid\n * @returns {string} normalized sourceType\n */\nfunction normalizeSourceType(sourceType = \"script\") {\n    if (sourceType === \"script\" || sourceType === \"module\") {\n        return sourceType;\n    }\n    throw new Error(\"Invalid sourceType.\");\n}\n\n/**\n * Normalize parserOptions\n * @param {Object} options the parser options to normalize\n * @throws {Error} throw an error if found invalid option.\n * @returns {Object} normalized options\n */\nfunction normalizeOptions(options) {\n    const ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);\n    const sourceType = normalizeSourceType(options.sourceType);\n    const ranges = options.range === true;\n    const locations = options.loc === true;\n\n    if (sourceType === \"module\" && ecmaVersion < 6) {\n        throw new Error(\"sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.\");\n    }\n    return Object.assign({}, options, { ecmaVersion, sourceType, ranges, locations });\n}\n\n/**\n * Get the latest ECMAScript version supported by Espree.\n * @returns {number} The latest ECMAScript version.\n */\nfunction getLatestEcmaVersion() {\n    return SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];\n}\n\n/**\n * Get the list of ECMAScript versions supported by Espree.\n * @returns {number[]} An array containing the supported ECMAScript versions.\n */\nfunction getSupportedEcmaVersions() {\n    return [...SUPPORTED_VERSIONS];\n}\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    normalizeOptions,\n    getLatestEcmaVersion,\n    getSupportedEcmaVersions\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,oBAAoB,GAAG,CAA7B;AACA,MAAMC,kBAAkB,GAAG,CACvB,CADuB,EAEvB,CAFuB,EAGvB,CAHuB,EAIvB,CAJuB,EAKvB,CALuB,EAMvB,CANuB,EAOvB,EAPuB,EAQvB,EARuB,EASvB,EATuB,CAA3B;AAYA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,GAAkE;EAAA,IAApCC,WAAoC,uEAAtBH,oBAAsB;;EAC9D,IAAI,OAAOG,WAAP,KAAuB,QAA3B,EAAqC;IACjC,MAAM,IAAIC,KAAJ,CAAW,wDAAuD,OAAOD,WAAY,WAArF,CAAN;EACH;;EAED,IAAIE,OAAO,GAAGF,WAAd,CAL8D,CAO9D;EACA;;EACA,IAAIE,OAAO,IAAI,IAAf,EAAqB;IACjBA,OAAO,IAAI,IAAX;EACH;;EAED,IAAI,CAACJ,kBAAkB,CAACK,QAAnB,CAA4BD,OAA5B,CAAL,EAA2C;IACvC,MAAM,IAAID,KAAJ,CAAU,sBAAV,CAAN;EACH;;EAED,OAAOC,OAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,mBAAT,GAAoD;EAAA,IAAvBC,UAAuB,uEAAV,QAAU;;EAChD,IAAIA,UAAU,KAAK,QAAf,IAA2BA,UAAU,KAAK,QAA9C,EAAwD;IACpD,OAAOA,UAAP;EACH;;EACD,MAAM,IAAIJ,KAAJ,CAAU,qBAAV,CAAN;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,gBAAT,CAA0BC,OAA1B,EAAmC;EAC/B,MAAMP,WAAW,GAAGD,oBAAoB,CAACQ,OAAO,CAACP,WAAT,CAAxC;EACA,MAAMK,UAAU,GAAGD,mBAAmB,CAACG,OAAO,CAACF,UAAT,CAAtC;EACA,MAAMG,MAAM,GAAGD,OAAO,CAACE,KAAR,KAAkB,IAAjC;EACA,MAAMC,SAAS,GAAGH,OAAO,CAACI,GAAR,KAAgB,IAAlC;;EAEA,IAAIN,UAAU,KAAK,QAAf,IAA2BL,WAAW,GAAG,CAA7C,EAAgD;IAC5C,MAAM,IAAIC,KAAJ,CAAU,8HAAV,CAAN;EACH;;EACD,OAAOW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,OAAlB,EAA2B;IAAEP,WAAF;IAAeK,UAAf;IAA2BG,MAA3B;IAAmCE;EAAnC,CAA3B,CAAP;AACH;AAED;AACA;AACA;AACA;;;AACA,SAASI,oBAAT,GAAgC;EAC5B,OAAOhB,kBAAkB,CAACA,kBAAkB,CAACiB,MAAnB,GAA4B,CAA7B,CAAzB;AACH;AAED;AACA;AACA;AACA;;;AACA,SAASC,wBAAT,GAAoC;EAChC,OAAO,CAAC,GAAGlB,kBAAJ,CAAP;AACH,C,CAED;AACA;AACA;;;AAEAmB,MAAM,CAACC,OAAP,GAAiB;EACbZ,gBADa;EAEbQ,oBAFa;EAGbE;AAHa,CAAjB"},"metadata":{},"sourceType":"script"}