{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of unary increment and decrement operators.\n * @author Ian Christian Myers\n * @author Brody McKee (github.com/mrmckeb)\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given node is the update node of a `ForStatement`.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is `ForStatement` update.\n */\n\nfunction isForStatementUpdate(node) {\n  const parent = node.parent;\n  return parent.type === \"ForStatement\" && parent.update === node;\n}\n/**\n * Determines whether the given node is considered to be a for loop \"afterthought\" by the logic of this rule.\n * In particular, it returns `true` if the given node is either:\n *   - The update node of a `ForStatement`: for (;; i++) {}\n *   - An operand of a sequence expression that is the update node: for (;; foo(), i++) {}\n *   - An operand of a sequence expression that is child of another sequence expression, etc.,\n *     up to the sequence expression that is the update node: for (;; foo(), (bar(), (baz(), i++))) {}\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a for loop afterthought.\n */\n\n\nfunction isForLoopAfterthought(node) {\n  const parent = node.parent;\n\n  if (parent.type === \"SequenceExpression\") {\n    return isForLoopAfterthought(parent);\n  }\n\n  return isForStatementUpdate(node);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the unary operators `++` and `--`\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-plusplus\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowForLoopAfterthoughts: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedUnaryOp: \"Unary operator '{{operator}}' used.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0];\n    let allowForLoopAfterthoughts = false;\n\n    if (typeof config === \"object\") {\n      allowForLoopAfterthoughts = config.allowForLoopAfterthoughts === true;\n    }\n\n    return {\n      UpdateExpression(node) {\n        if (allowForLoopAfterthoughts && isForLoopAfterthought(node)) {\n          return;\n        }\n\n        context.report({\n          node,\n          messageId: \"unexpectedUnaryOp\",\n          data: {\n            operator: node.operator\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["isForStatementUpdate","node","parent","type","update","isForLoopAfterthought","module","exports","meta","docs","description","category","recommended","url","schema","properties","allowForLoopAfterthoughts","default","additionalProperties","messages","unexpectedUnaryOp","create","context","config","options","UpdateExpression","report","messageId","data","operator"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-plusplus.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of unary increment and decrement operators.\n * @author Ian Christian Myers\n * @author Brody McKee (github.com/mrmckeb)\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given node is the update node of a `ForStatement`.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is `ForStatement` update.\n */\nfunction isForStatementUpdate(node) {\n    const parent = node.parent;\n\n    return parent.type === \"ForStatement\" && parent.update === node;\n}\n\n/**\n * Determines whether the given node is considered to be a for loop \"afterthought\" by the logic of this rule.\n * In particular, it returns `true` if the given node is either:\n *   - The update node of a `ForStatement`: for (;; i++) {}\n *   - An operand of a sequence expression that is the update node: for (;; foo(), i++) {}\n *   - An operand of a sequence expression that is child of another sequence expression, etc.,\n *     up to the sequence expression that is the update node: for (;; foo(), (bar(), (baz(), i++))) {}\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is a for loop afterthought.\n */\nfunction isForLoopAfterthought(node) {\n    const parent = node.parent;\n\n    if (parent.type === \"SequenceExpression\") {\n        return isForLoopAfterthought(parent);\n    }\n\n    return isForStatementUpdate(node);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow the unary operators `++` and `--`\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-plusplus\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowForLoopAfterthoughts: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedUnaryOp: \"Unary operator '{{operator}}' used.\"\n        }\n    },\n\n    create(context) {\n\n        const config = context.options[0];\n        let allowForLoopAfterthoughts = false;\n\n        if (typeof config === \"object\") {\n            allowForLoopAfterthoughts = config.allowForLoopAfterthoughts === true;\n        }\n\n        return {\n\n            UpdateExpression(node) {\n                if (allowForLoopAfterthoughts && isForLoopAfterthought(node)) {\n                    return;\n                }\n\n                context.report({\n                    node,\n                    messageId: \"unexpectedUnaryOp\",\n                    data: {\n                        operator: node.operator\n                    }\n                });\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;EAChC,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;EAEA,OAAOA,MAAM,CAACC,IAAP,KAAgB,cAAhB,IAAkCD,MAAM,CAACE,MAAP,KAAkBH,IAA3D;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,qBAAT,CAA+BJ,IAA/B,EAAqC;EACjC,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;EAEA,IAAIA,MAAM,CAACC,IAAP,KAAgB,oBAApB,EAA0C;IACtC,OAAOE,qBAAqB,CAACH,MAAD,CAA5B;EACH;;EAED,OAAOF,oBAAoB,CAACC,IAAD,CAA3B;AACH,C,CAED;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFL,IAAI,EAAE,YADJ;IAGFM,IAAI,EAAE;MACFC,WAAW,EAAE,4CADX;MAEFC,QAAQ,EAAE,kBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CACJ;MACIX,IAAI,EAAE,QADV;MAEIY,UAAU,EAAE;QACRC,yBAAyB,EAAE;UACvBb,IAAI,EAAE,SADiB;UAEvBc,OAAO,EAAE;QAFc;MADnB,CAFhB;MAQIC,oBAAoB,EAAE;IAR1B,CADI,CAVN;IAuBFC,QAAQ,EAAE;MACNC,iBAAiB,EAAE;IADb;EAvBR,CADO;;EA6BbC,MAAM,CAACC,OAAD,EAAU;IAEZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAf;IACA,IAAIR,yBAAyB,GAAG,KAAhC;;IAEA,IAAI,OAAOO,MAAP,KAAkB,QAAtB,EAAgC;MAC5BP,yBAAyB,GAAGO,MAAM,CAACP,yBAAP,KAAqC,IAAjE;IACH;;IAED,OAAO;MAEHS,gBAAgB,CAACxB,IAAD,EAAO;QACnB,IAAIe,yBAAyB,IAAIX,qBAAqB,CAACJ,IAAD,CAAtD,EAA8D;UAC1D;QACH;;QAEDqB,OAAO,CAACI,MAAR,CAAe;UACXzB,IADW;UAEX0B,SAAS,EAAE,mBAFA;UAGXC,IAAI,EAAE;YACFC,QAAQ,EAAE5B,IAAI,CAAC4B;UADb;QAHK,CAAf;MAOH;;IAdE,CAAP;EAkBH;;AAxDY,CAAjB"},"metadata":{},"sourceType":"script"}