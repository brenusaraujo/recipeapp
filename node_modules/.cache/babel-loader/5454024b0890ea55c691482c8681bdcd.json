{"ast":null,"code":"/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, while, try, switch/case,\n * @author Patrick Brosset\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum cyclomatic complexity allowed in a program\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/complexity\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n    }\n  },\n\n  create(context) {\n    const option = context.options[0];\n    let THRESHOLD = 20;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      THRESHOLD = option.maximum || option.max;\n    } else if (typeof option === \"number\") {\n      THRESHOLD = option;\n    } //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    // Using a stack to store complexity (handling nested functions)\n\n\n    const fns = [];\n    /**\n     * When parsing a new function, store it in our function stack\n     * @returns {void}\n     * @private\n     */\n\n    function startFunction() {\n      fns.push(1);\n    }\n    /**\n     * Evaluate the node at the end of function\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function endFunction(node) {\n      const name = upperCaseFirst(astUtils.getFunctionNameWithKind(node));\n      const complexity = fns.pop();\n\n      if (complexity > THRESHOLD) {\n        context.report({\n          node,\n          messageId: \"complex\",\n          data: {\n            name,\n            complexity,\n            max: THRESHOLD\n          }\n        });\n      }\n    }\n    /**\n     * Increase the complexity of the function in context\n     * @returns {void}\n     * @private\n     */\n\n\n    function increaseComplexity() {\n      if (fns.length) {\n        fns[fns.length - 1]++;\n      }\n    }\n    /**\n     * Increase the switch complexity in context\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function increaseSwitchComplexity(node) {\n      // Avoiding `default`\n      if (node.test) {\n        increaseComplexity();\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      FunctionDeclaration: startFunction,\n      FunctionExpression: startFunction,\n      ArrowFunctionExpression: startFunction,\n      \"FunctionDeclaration:exit\": endFunction,\n      \"FunctionExpression:exit\": endFunction,\n      \"ArrowFunctionExpression:exit\": endFunction,\n      CatchClause: increaseComplexity,\n      ConditionalExpression: increaseComplexity,\n      LogicalExpression: increaseComplexity,\n      ForStatement: increaseComplexity,\n      ForInStatement: increaseComplexity,\n      ForOfStatement: increaseComplexity,\n      IfStatement: increaseComplexity,\n      SwitchCase: increaseSwitchComplexity,\n      WhileStatement: increaseComplexity,\n      DoWhileStatement: increaseComplexity,\n\n      AssignmentExpression(node) {\n        if (astUtils.isLogicalAssignmentOperator(node.operator)) {\n          increaseComplexity();\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","upperCaseFirst","module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","messages","complex","create","context","option","options","THRESHOLD","Object","prototype","hasOwnProperty","call","fns","startFunction","push","endFunction","node","name","getFunctionNameWithKind","complexity","pop","report","messageId","data","increaseComplexity","length","increaseSwitchComplexity","test","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","CatchClause","ConditionalExpression","LogicalExpression","ForStatement","ForInStatement","ForOfStatement","IfStatement","SwitchCase","WhileStatement","DoWhileStatement","AssignmentExpression","isLogicalAssignmentOperator","operator"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/complexity.js"],"sourcesContent":["/**\n * @fileoverview Counts the cyclomatic complexity of each function of the script. See http://en.wikipedia.org/wiki/Cyclomatic_complexity.\n * Counts the number of if, conditional, for, while, try, switch/case,\n * @author Patrick Brosset\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum cyclomatic complexity allowed in a program\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/complexity\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            complex: \"{{name}} has a complexity of {{complexity}}. Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n        const option = context.options[0];\n        let THRESHOLD = 20;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            THRESHOLD = option.maximum || option.max;\n        } else if (typeof option === \"number\") {\n            THRESHOLD = option;\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // Using a stack to store complexity (handling nested functions)\n        const fns = [];\n\n        /**\n         * When parsing a new function, store it in our function stack\n         * @returns {void}\n         * @private\n         */\n        function startFunction() {\n            fns.push(1);\n        }\n\n        /**\n         * Evaluate the node at the end of function\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function endFunction(node) {\n            const name = upperCaseFirst(astUtils.getFunctionNameWithKind(node));\n            const complexity = fns.pop();\n\n            if (complexity > THRESHOLD) {\n                context.report({\n                    node,\n                    messageId: \"complex\",\n                    data: { name, complexity, max: THRESHOLD }\n                });\n            }\n        }\n\n        /**\n         * Increase the complexity of the function in context\n         * @returns {void}\n         * @private\n         */\n        function increaseComplexity() {\n            if (fns.length) {\n                fns[fns.length - 1]++;\n            }\n        }\n\n        /**\n         * Increase the switch complexity in context\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function increaseSwitchComplexity(node) {\n\n            // Avoiding `default`\n            if (node.test) {\n                increaseComplexity();\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: startFunction,\n            FunctionExpression: startFunction,\n            ArrowFunctionExpression: startFunction,\n            \"FunctionDeclaration:exit\": endFunction,\n            \"FunctionExpression:exit\": endFunction,\n            \"ArrowFunctionExpression:exit\": endFunction,\n\n            CatchClause: increaseComplexity,\n            ConditionalExpression: increaseComplexity,\n            LogicalExpression: increaseComplexity,\n            ForStatement: increaseComplexity,\n            ForInStatement: increaseComplexity,\n            ForOfStatement: increaseComplexity,\n            IfStatement: increaseComplexity,\n            SwitchCase: increaseSwitchComplexity,\n            WhileStatement: increaseComplexity,\n            DoWhileStatement: increaseComplexity,\n\n            AssignmentExpression(node) {\n                if (astUtils.isLogicalAssignmentOperator(node.operator)) {\n                    increaseComplexity();\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}