{"ast":null,"code":"/**\n * @fileoverview This rule sets a specific indentation style and width for your code\n *\n * @author Teddy Katz\n * @author Vitaly Puzrin\n * @author Gyandeep Singh\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst createTree = require(\"functional-red-black-tree\");\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nconst KNOWN_NODES = new Set([\"AssignmentExpression\", \"AssignmentPattern\", \"ArrayExpression\", \"ArrayPattern\", \"ArrowFunctionExpression\", \"AwaitExpression\", \"BlockStatement\", \"BinaryExpression\", \"BreakStatement\", \"CallExpression\", \"CatchClause\", \"ChainExpression\", \"ClassBody\", \"ClassDeclaration\", \"ClassExpression\", \"ConditionalExpression\", \"ContinueStatement\", \"DoWhileStatement\", \"DebuggerStatement\", \"EmptyStatement\", \"ExperimentalRestProperty\", \"ExperimentalSpreadProperty\", \"ExpressionStatement\", \"ForStatement\", \"ForInStatement\", \"ForOfStatement\", \"FunctionDeclaration\", \"FunctionExpression\", \"Identifier\", \"IfStatement\", \"Literal\", \"LabeledStatement\", \"LogicalExpression\", \"MemberExpression\", \"MetaProperty\", \"MethodDefinition\", \"NewExpression\", \"ObjectExpression\", \"ObjectPattern\", \"Program\", \"Property\", \"RestElement\", \"ReturnStatement\", \"SequenceExpression\", \"SpreadElement\", \"Super\", \"SwitchCase\", \"SwitchStatement\", \"TaggedTemplateExpression\", \"TemplateElement\", \"TemplateLiteral\", \"ThisExpression\", \"ThrowStatement\", \"TryStatement\", \"UnaryExpression\", \"UpdateExpression\", \"VariableDeclaration\", \"VariableDeclarator\", \"WhileStatement\", \"WithStatement\", \"YieldExpression\", \"JSXFragment\", \"JSXOpeningFragment\", \"JSXClosingFragment\", \"JSXIdentifier\", \"JSXNamespacedName\", \"JSXMemberExpression\", \"JSXEmptyExpression\", \"JSXExpressionContainer\", \"JSXElement\", \"JSXClosingElement\", \"JSXOpeningElement\", \"JSXAttribute\", \"JSXSpreadAttribute\", \"JSXText\", \"ExportDefaultDeclaration\", \"ExportNamedDeclaration\", \"ExportAllDeclaration\", \"ExportSpecifier\", \"ImportDeclaration\", \"ImportSpecifier\", \"ImportDefaultSpecifier\", \"ImportNamespaceSpecifier\", \"ImportExpression\"]);\n/*\n * General rule strategy:\n * 1. An OffsetStorage instance stores a map of desired offsets, where each token has a specified offset from another\n *    specified token or to the first column.\n * 2. As the AST is traversed, modify the desired offsets of tokens accordingly. For example, when entering a\n *    BlockStatement, offset all of the tokens in the BlockStatement by 1 indent level from the opening curly\n *    brace of the BlockStatement.\n * 3. After traversing the AST, calculate the expected indentation levels of every token according to the\n *    OffsetStorage container.\n * 4. For each line, compare the expected indentation of the first token to the actual indentation in the file,\n *    and report the token if the two values are not equal.\n */\n\n/**\n * A mutable balanced binary search tree that stores (key, value) pairs. The keys are numeric, and must be unique.\n * This is intended to be a generic wrapper around a balanced binary search tree library, so that the underlying implementation\n * can easily be swapped out.\n */\n\nclass BinarySearchTree {\n  /**\n   * Creates an empty tree\n   */\n  constructor() {\n    this._rbTree = createTree();\n  }\n  /**\n   * Inserts an entry into the tree.\n   * @param {number} key The entry's key\n   * @param {*} value The entry's value\n   * @returns {void}\n   */\n\n\n  insert(key, value) {\n    const iterator = this._rbTree.find(key);\n\n    if (iterator.valid) {\n      this._rbTree = iterator.update(value);\n    } else {\n      this._rbTree = this._rbTree.insert(key, value);\n    }\n  }\n  /**\n   * Finds the entry with the largest key less than or equal to the provided key\n   * @param {number} key The provided key\n   * @returns {{key: number, value: *}|null} The found entry, or null if no such entry exists.\n   */\n\n\n  findLe(key) {\n    const iterator = this._rbTree.le(key);\n\n    return iterator && {\n      key: iterator.key,\n      value: iterator.value\n    };\n  }\n  /**\n   * Deletes all of the keys in the interval [start, end)\n   * @param {number} start The start of the range\n   * @param {number} end The end of the range\n   * @returns {void}\n   */\n\n\n  deleteRange(start, end) {\n    // Exit without traversing the tree if the range has zero size.\n    if (start === end) {\n      return;\n    }\n\n    const iterator = this._rbTree.ge(start);\n\n    while (iterator.valid && iterator.key < end) {\n      this._rbTree = this._rbTree.remove(iterator.key);\n      iterator.next();\n    }\n  }\n\n}\n/**\n * A helper class to get token-based info related to indentation\n */\n\n\nclass TokenInfo {\n  // eslint-disable-next-line jsdoc/require-description\n\n  /**\n   * @param {SourceCode} sourceCode A SourceCode object\n   */\n  constructor(sourceCode) {\n    this.sourceCode = sourceCode;\n    this.firstTokensByLineNumber = sourceCode.tokensAndComments.reduce((map, token) => {\n      if (!map.has(token.loc.start.line)) {\n        map.set(token.loc.start.line, token);\n      }\n\n      if (!map.has(token.loc.end.line) && sourceCode.text.slice(token.range[1] - token.loc.end.column, token.range[1]).trim()) {\n        map.set(token.loc.end.line, token);\n      }\n\n      return map;\n    }, new Map());\n  }\n  /**\n   * Gets the first token on a given token's line\n   * @param {Token|ASTNode} token a node or token\n   * @returns {Token} The first token on the given line\n   */\n\n\n  getFirstTokenOfLine(token) {\n    return this.firstTokensByLineNumber.get(token.loc.start.line);\n  }\n  /**\n   * Determines whether a token is the first token in its line\n   * @param {Token} token The token\n   * @returns {boolean} `true` if the token is the first on its line\n   */\n\n\n  isFirstTokenOfLine(token) {\n    return this.getFirstTokenOfLine(token) === token;\n  }\n  /**\n   * Get the actual indent of a token\n   * @param {Token} token Token to examine. This should be the first token on its line.\n   * @returns {string} The indentation characters that precede the token\n   */\n\n\n  getTokenIndent(token) {\n    return this.sourceCode.text.slice(token.range[0] - token.loc.start.column, token.range[0]);\n  }\n\n}\n/**\n * A class to store information on desired offsets of tokens from each other\n */\n\n\nclass OffsetStorage {\n  // eslint-disable-next-line jsdoc/require-description\n\n  /**\n   * @param {TokenInfo} tokenInfo a TokenInfo instance\n   * @param {number} indentSize The desired size of each indentation level\n   * @param {string} indentType The indentation character\n   */\n  constructor(tokenInfo, indentSize, indentType) {\n    this._tokenInfo = tokenInfo;\n    this._indentSize = indentSize;\n    this._indentType = indentType;\n    this._tree = new BinarySearchTree();\n\n    this._tree.insert(0, {\n      offset: 0,\n      from: null,\n      force: false\n    });\n\n    this._lockedFirstTokens = new WeakMap();\n    this._desiredIndentCache = new WeakMap();\n    this._ignoredTokens = new WeakSet();\n  }\n\n  _getOffsetDescriptor(token) {\n    return this._tree.findLe(token.range[0]).value;\n  }\n  /**\n   * Sets the offset column of token B to match the offset column of token A.\n   * **WARNING**: This matches a *column*, even if baseToken is not the first token on its line. In\n   * most cases, `setDesiredOffset` should be used instead.\n   * @param {Token} baseToken The first token\n   * @param {Token} offsetToken The second token, whose offset should be matched to the first token\n   * @returns {void}\n   */\n\n\n  matchOffsetOf(baseToken, offsetToken) {\n    /*\n     * lockedFirstTokens is a map from a token whose indentation is controlled by the \"first\" option to\n     * the token that it depends on. For example, with the `ArrayExpression: first` option, the first\n     * token of each element in the array after the first will be mapped to the first token of the first\n     * element. The desired indentation of each of these tokens is computed based on the desired indentation\n     * of the \"first\" element, rather than through the normal offset mechanism.\n     */\n    this._lockedFirstTokens.set(offsetToken, baseToken);\n  }\n  /**\n   * Sets the desired offset of a token.\n   *\n   * This uses a line-based offset collapsing behavior to handle tokens on the same line.\n   * For example, consider the following two cases:\n   *\n   * (\n   *     [\n   *         bar\n   *     ]\n   * )\n   *\n   * ([\n   *     bar\n   * ])\n   *\n   * Based on the first case, it's clear that the `bar` token needs to have an offset of 1 indent level (4 spaces) from\n   * the `[` token, and the `[` token has to have an offset of 1 indent level from the `(` token. Since the `(` token is\n   * the first on its line (with an indent of 0 spaces), the `bar` token needs to be offset by 2 indent levels (8 spaces)\n   * from the start of its line.\n   *\n   * However, in the second case `bar` should only be indented by 4 spaces. This is because the offset of 1 indent level\n   * between the `(` and the `[` tokens gets \"collapsed\" because the two tokens are on the same line. As a result, the\n   * `(` token is mapped to the `[` token with an offset of 0, and the rule correctly decides that `bar` should be indented\n   * by 1 indent level from the start of the line.\n   *\n   * This is useful because rule listeners can usually just call `setDesiredOffset` for all the tokens in the node,\n   * without needing to check which lines those tokens are on.\n   *\n   * Note that since collapsing only occurs when two tokens are on the same line, there are a few cases where non-intuitive\n   * behavior can occur. For example, consider the following cases:\n   *\n   * foo(\n   * ).\n   *     bar(\n   *         baz\n   *     )\n   *\n   * foo(\n   * ).bar(\n   *     baz\n   * )\n   *\n   * Based on the first example, it would seem that `bar` should be offset by 1 indent level from `foo`, and `baz`\n   * should be offset by 1 indent level from `bar`. However, this is not correct, because it would result in `baz`\n   * being indented by 2 indent levels in the second case (since `foo`, `bar`, and `baz` are all on separate lines, no\n   * collapsing would occur).\n   *\n   * Instead, the correct way would be to offset `baz` by 1 level from `bar`, offset `bar` by 1 level from the `)`, and\n   * offset the `)` by 0 levels from `foo`. This ensures that the offset between `bar` and the `)` are correctly collapsed\n   * in the second case.\n   * @param {Token} token The token\n   * @param {Token} fromToken The token that `token` should be offset from\n   * @param {number} offset The desired indent level\n   * @returns {void}\n   */\n\n\n  setDesiredOffset(token, fromToken, offset) {\n    return this.setDesiredOffsets(token.range, fromToken, offset);\n  }\n  /**\n   * Sets the desired offset of all tokens in a range\n   * It's common for node listeners in this file to need to apply the same offset to a large, contiguous range of tokens.\n   * Moreover, the offset of any given token is usually updated multiple times (roughly once for each node that contains\n   * it). This means that the offset of each token is updated O(AST depth) times.\n   * It would not be performant to store and update the offsets for each token independently, because the rule would end\n   * up having a time complexity of O(number of tokens * AST depth), which is quite slow for large files.\n   *\n   * Instead, the offset tree is represented as a collection of contiguous offset ranges in a file. For example, the following\n   * list could represent the state of the offset tree at a given point:\n   *\n   * * Tokens starting in the interval [0, 15) are aligned with the beginning of the file\n   * * Tokens starting in the interval [15, 30) are offset by 1 indent level from the `bar` token\n   * * Tokens starting in the interval [30, 43) are offset by 1 indent level from the `foo` token\n   * * Tokens starting in the interval [43, 820) are offset by 2 indent levels from the `bar` token\n   * * Tokens starting in the interval [820, ∞) are offset by 1 indent level from the `baz` token\n   *\n   * The `setDesiredOffsets` methods inserts ranges like the ones above. The third line above would be inserted by using:\n   * `setDesiredOffsets([30, 43], fooToken, 1);`\n   * @param {[number, number]} range A [start, end] pair. All tokens with range[0] <= token.start < range[1] will have the offset applied.\n   * @param {Token} fromToken The token that this is offset from\n   * @param {number} offset The desired indent level\n   * @param {boolean} force `true` if this offset should not use the normal collapsing behavior. This should almost always be false.\n   * @returns {void}\n   */\n\n\n  setDesiredOffsets(range, fromToken, offset, force) {\n    /*\n     * Offset ranges are stored as a collection of nodes, where each node maps a numeric key to an offset\n     * descriptor. The tree for the example above would have the following nodes:\n     *\n     * * key: 0, value: { offset: 0, from: null }\n     * * key: 15, value: { offset: 1, from: barToken }\n     * * key: 30, value: { offset: 1, from: fooToken }\n     * * key: 43, value: { offset: 2, from: barToken }\n     * * key: 820, value: { offset: 1, from: bazToken }\n     *\n     * To find the offset descriptor for any given token, one needs to find the node with the largest key\n     * which is <= token.start. To make this operation fast, the nodes are stored in a balanced binary\n     * search tree indexed by key.\n     */\n    const descriptorToInsert = {\n      offset,\n      from: fromToken,\n      force\n    };\n\n    const descriptorAfterRange = this._tree.findLe(range[1]).value;\n\n    const fromTokenIsInRange = fromToken && fromToken.range[0] >= range[0] && fromToken.range[1] <= range[1];\n\n    const fromTokenDescriptor = fromTokenIsInRange && this._getOffsetDescriptor(fromToken); // First, remove any existing nodes in the range from the tree.\n\n\n    this._tree.deleteRange(range[0] + 1, range[1]); // Insert a new node into the tree for this range\n\n\n    this._tree.insert(range[0], descriptorToInsert);\n    /*\n     * To avoid circular offset dependencies, keep the `fromToken` token mapped to whatever it was mapped to previously,\n     * even if it's in the current range.\n     */\n\n\n    if (fromTokenIsInRange) {\n      this._tree.insert(fromToken.range[0], fromTokenDescriptor);\n\n      this._tree.insert(fromToken.range[1], descriptorToInsert);\n    }\n    /*\n     * To avoid modifying the offset of tokens after the range, insert another node to keep the offset of the following\n     * tokens the same as it was before.\n     */\n\n\n    this._tree.insert(range[1], descriptorAfterRange);\n  }\n  /**\n   * Gets the desired indent of a token\n   * @param {Token} token The token\n   * @returns {string} The desired indent of the token\n   */\n\n\n  getDesiredIndent(token) {\n    if (!this._desiredIndentCache.has(token)) {\n      if (this._ignoredTokens.has(token)) {\n        /*\n         * If the token is ignored, use the actual indent of the token as the desired indent.\n         * This ensures that no errors are reported for this token.\n         */\n        this._desiredIndentCache.set(token, this._tokenInfo.getTokenIndent(token));\n      } else if (this._lockedFirstTokens.has(token)) {\n        const firstToken = this._lockedFirstTokens.get(token);\n\n        this._desiredIndentCache.set(token, // (indentation for the first element's line)\n        this.getDesiredIndent(this._tokenInfo.getFirstTokenOfLine(firstToken)) + // (space between the start of the first element's line and the first element)\n        this._indentType.repeat(firstToken.loc.start.column - this._tokenInfo.getFirstTokenOfLine(firstToken).loc.start.column));\n      } else {\n        const offsetInfo = this._getOffsetDescriptor(token);\n\n        const offset = offsetInfo.from && offsetInfo.from.loc.start.line === token.loc.start.line && !/^\\s*?\\n/u.test(token.value) && !offsetInfo.force ? 0 : offsetInfo.offset * this._indentSize;\n\n        this._desiredIndentCache.set(token, (offsetInfo.from ? this.getDesiredIndent(offsetInfo.from) : \"\") + this._indentType.repeat(offset));\n      }\n    }\n\n    return this._desiredIndentCache.get(token);\n  }\n  /**\n   * Ignores a token, preventing it from being reported.\n   * @param {Token} token The token\n   * @returns {void}\n   */\n\n\n  ignoreToken(token) {\n    if (this._tokenInfo.isFirstTokenOfLine(token)) {\n      this._ignoredTokens.add(token);\n    }\n  }\n  /**\n   * Gets the first token that the given token's indentation is dependent on\n   * @param {Token} token The token\n   * @returns {Token} The token that the given token depends on, or `null` if the given token is at the top level\n   */\n\n\n  getFirstDependency(token) {\n    return this._getOffsetDescriptor(token).from;\n  }\n\n}\n\nconst ELEMENT_LIST_SCHEMA = {\n  oneOf: [{\n    type: \"integer\",\n    minimum: 0\n  }, {\n    enum: [\"first\", \"off\"]\n  }]\n};\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent indentation\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/indent\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      oneOf: [{\n        enum: [\"tab\"]\n      }, {\n        type: \"integer\",\n        minimum: 0\n      }]\n    }, {\n      type: \"object\",\n      properties: {\n        SwitchCase: {\n          type: \"integer\",\n          minimum: 0,\n          default: 0\n        },\n        VariableDeclarator: {\n          oneOf: [ELEMENT_LIST_SCHEMA, {\n            type: \"object\",\n            properties: {\n              var: ELEMENT_LIST_SCHEMA,\n              let: ELEMENT_LIST_SCHEMA,\n              const: ELEMENT_LIST_SCHEMA\n            },\n            additionalProperties: false\n          }]\n        },\n        outerIIFEBody: {\n          oneOf: [{\n            type: \"integer\",\n            minimum: 0\n          }, {\n            enum: [\"off\"]\n          }]\n        },\n        MemberExpression: {\n          oneOf: [{\n            type: \"integer\",\n            minimum: 0\n          }, {\n            enum: [\"off\"]\n          }]\n        },\n        FunctionDeclaration: {\n          type: \"object\",\n          properties: {\n            parameters: ELEMENT_LIST_SCHEMA,\n            body: {\n              type: \"integer\",\n              minimum: 0\n            }\n          },\n          additionalProperties: false\n        },\n        FunctionExpression: {\n          type: \"object\",\n          properties: {\n            parameters: ELEMENT_LIST_SCHEMA,\n            body: {\n              type: \"integer\",\n              minimum: 0\n            }\n          },\n          additionalProperties: false\n        },\n        CallExpression: {\n          type: \"object\",\n          properties: {\n            arguments: ELEMENT_LIST_SCHEMA\n          },\n          additionalProperties: false\n        },\n        ArrayExpression: ELEMENT_LIST_SCHEMA,\n        ObjectExpression: ELEMENT_LIST_SCHEMA,\n        ImportDeclaration: ELEMENT_LIST_SCHEMA,\n        flatTernaryExpressions: {\n          type: \"boolean\",\n          default: false\n        },\n        offsetTernaryExpressions: {\n          type: \"boolean\",\n          default: false\n        },\n        ignoredNodes: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n            not: {\n              pattern: \":exit$\"\n            }\n          }\n        },\n        ignoreComments: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      wrongIndentation: \"Expected indentation of {{expected}} but found {{actual}}.\"\n    }\n  },\n\n  create(context) {\n    const DEFAULT_VARIABLE_INDENT = 1;\n    const DEFAULT_PARAMETER_INDENT = 1;\n    const DEFAULT_FUNCTION_BODY_INDENT = 1;\n    let indentType = \"space\";\n    let indentSize = 4;\n    const options = {\n      SwitchCase: 0,\n      VariableDeclarator: {\n        var: DEFAULT_VARIABLE_INDENT,\n        let: DEFAULT_VARIABLE_INDENT,\n        const: DEFAULT_VARIABLE_INDENT\n      },\n      outerIIFEBody: 1,\n      FunctionDeclaration: {\n        parameters: DEFAULT_PARAMETER_INDENT,\n        body: DEFAULT_FUNCTION_BODY_INDENT\n      },\n      FunctionExpression: {\n        parameters: DEFAULT_PARAMETER_INDENT,\n        body: DEFAULT_FUNCTION_BODY_INDENT\n      },\n      CallExpression: {\n        arguments: DEFAULT_PARAMETER_INDENT\n      },\n      MemberExpression: 1,\n      ArrayExpression: 1,\n      ObjectExpression: 1,\n      ImportDeclaration: 1,\n      flatTernaryExpressions: false,\n      ignoredNodes: [],\n      ignoreComments: false\n    };\n\n    if (context.options.length) {\n      if (context.options[0] === \"tab\") {\n        indentSize = 1;\n        indentType = \"tab\";\n      } else {\n        indentSize = context.options[0];\n        indentType = \"space\";\n      }\n\n      if (context.options[1]) {\n        Object.assign(options, context.options[1]);\n\n        if (typeof options.VariableDeclarator === \"number\" || options.VariableDeclarator === \"first\") {\n          options.VariableDeclarator = {\n            var: options.VariableDeclarator,\n            let: options.VariableDeclarator,\n            const: options.VariableDeclarator\n          };\n        }\n      }\n    }\n\n    const sourceCode = context.getSourceCode();\n    const tokenInfo = new TokenInfo(sourceCode);\n    const offsets = new OffsetStorage(tokenInfo, indentSize, indentType === \"space\" ? \" \" : \"\\t\");\n    const parameterParens = new WeakSet();\n    /**\n     * Creates an error message for a line, given the expected/actual indentation.\n     * @param {int} expectedAmount The expected amount of indentation characters for this line\n     * @param {int} actualSpaces The actual number of indentation spaces that were found on this line\n     * @param {int} actualTabs The actual number of indentation tabs that were found on this line\n     * @returns {string} An error message for this line\n     */\n\n    function createErrorMessageData(expectedAmount, actualSpaces, actualTabs) {\n      const expectedStatement = `${expectedAmount} ${indentType}${expectedAmount === 1 ? \"\" : \"s\"}`; // e.g. \"2 tabs\"\n\n      const foundSpacesWord = `space${actualSpaces === 1 ? \"\" : \"s\"}`; // e.g. \"space\"\n\n      const foundTabsWord = `tab${actualTabs === 1 ? \"\" : \"s\"}`; // e.g. \"tabs\"\n\n      let foundStatement;\n\n      if (actualSpaces > 0) {\n        /*\n         * Abbreviate the message if the expected indentation is also spaces.\n         * e.g. 'Expected 4 spaces but found 2' rather than 'Expected 4 spaces but found 2 spaces'\n         */\n        foundStatement = indentType === \"space\" ? actualSpaces : `${actualSpaces} ${foundSpacesWord}`;\n      } else if (actualTabs > 0) {\n        foundStatement = indentType === \"tab\" ? actualTabs : `${actualTabs} ${foundTabsWord}`;\n      } else {\n        foundStatement = \"0\";\n      }\n\n      return {\n        expected: expectedStatement,\n        actual: foundStatement\n      };\n    }\n    /**\n     * Reports a given indent violation\n     * @param {Token} token Token violating the indent rule\n     * @param {string} neededIndent Expected indentation string\n     * @returns {void}\n     */\n\n\n    function report(token, neededIndent) {\n      const actualIndent = Array.from(tokenInfo.getTokenIndent(token));\n      const numSpaces = actualIndent.filter(char => char === \" \").length;\n      const numTabs = actualIndent.filter(char => char === \"\\t\").length;\n      context.report({\n        node: token,\n        messageId: \"wrongIndentation\",\n        data: createErrorMessageData(neededIndent.length, numSpaces, numTabs),\n        loc: {\n          start: {\n            line: token.loc.start.line,\n            column: 0\n          },\n          end: {\n            line: token.loc.start.line,\n            column: token.loc.start.column\n          }\n        },\n\n        fix(fixer) {\n          const range = [token.range[0] - token.loc.start.column, token.range[0]];\n          const newText = neededIndent;\n          return fixer.replaceTextRange(range, newText);\n        }\n\n      });\n    }\n    /**\n     * Checks if a token's indentation is correct\n     * @param {Token} token Token to examine\n     * @param {string} desiredIndent Desired indentation of the string\n     * @returns {boolean} `true` if the token's indentation is correct\n     */\n\n\n    function validateTokenIndent(token, desiredIndent) {\n      const indentation = tokenInfo.getTokenIndent(token);\n      return indentation === desiredIndent || // To avoid conflicts with no-mixed-spaces-and-tabs, don't report mixed spaces and tabs.\n      indentation.includes(\" \") && indentation.includes(\"\\t\");\n    }\n    /**\n     * Check to see if the node is a file level IIFE\n     * @param {ASTNode} node The function node to check.\n     * @returns {boolean} True if the node is the outer IIFE\n     */\n\n\n    function isOuterIIFE(node) {\n      /*\n       * Verify that the node is an IIFE\n       */\n      if (!node.parent || node.parent.type !== \"CallExpression\" || node.parent.callee !== node) {\n        return false;\n      }\n      /*\n       * Navigate legal ancestors to determine whether this IIFE is outer.\n       * A \"legal ancestor\" is an expression or statement that causes the function to get executed immediately.\n       * For example, `!(function(){})()` is an outer IIFE even though it is preceded by a ! operator.\n       */\n\n\n      let statement = node.parent && node.parent.parent;\n\n      while (statement.type === \"UnaryExpression\" && [\"!\", \"~\", \"+\", \"-\"].indexOf(statement.operator) > -1 || statement.type === \"AssignmentExpression\" || statement.type === \"LogicalExpression\" || statement.type === \"SequenceExpression\" || statement.type === \"VariableDeclarator\") {\n        statement = statement.parent;\n      }\n\n      return (statement.type === \"ExpressionStatement\" || statement.type === \"VariableDeclaration\") && statement.parent.type === \"Program\";\n    }\n    /**\n     * Counts the number of linebreaks that follow the last non-whitespace character in a string\n     * @param {string} string The string to check\n     * @returns {number} The number of JavaScript linebreaks that follow the last non-whitespace character,\n     * or the total number of linebreaks if the string is all whitespace.\n     */\n\n\n    function countTrailingLinebreaks(string) {\n      const trailingWhitespace = string.match(/\\s*$/u)[0];\n      const linebreakMatches = trailingWhitespace.match(astUtils.createGlobalLinebreakMatcher());\n      return linebreakMatches === null ? 0 : linebreakMatches.length;\n    }\n    /**\n     * Check indentation for lists of elements (arrays, objects, function params)\n     * @param {ASTNode[]} elements List of elements that should be offset\n     * @param {Token} startToken The start token of the list that element should be aligned against, e.g. '['\n     * @param {Token} endToken The end token of the list, e.g. ']'\n     * @param {number|string} offset The amount that the elements should be offset\n     * @returns {void}\n     */\n\n\n    function addElementListIndent(elements, startToken, endToken, offset) {\n      /**\n       * Gets the first token of a given element, including surrounding parentheses.\n       * @param {ASTNode} element A node in the `elements` list\n       * @returns {Token} The first token of this element\n       */\n      function getFirstToken(element) {\n        let token = sourceCode.getTokenBefore(element);\n\n        while (astUtils.isOpeningParenToken(token) && token !== startToken) {\n          token = sourceCode.getTokenBefore(token);\n        }\n\n        return sourceCode.getTokenAfter(token);\n      } // Run through all the tokens in the list, and offset them by one indent level (mainly for comments, other things will end up overridden)\n\n\n      offsets.setDesiredOffsets([startToken.range[1], endToken.range[0]], startToken, typeof offset === \"number\" ? offset : 1);\n      offsets.setDesiredOffset(endToken, startToken, 0); // If the preference is \"first\" but there is no first element (e.g. sparse arrays w/ empty first slot), fall back to 1 level.\n\n      if (offset === \"first\" && elements.length && !elements[0]) {\n        return;\n      }\n\n      elements.forEach((element, index) => {\n        if (!element) {\n          // Skip holes in arrays\n          return;\n        }\n\n        if (offset === \"off\") {\n          // Ignore the first token of every element if the \"off\" option is used\n          offsets.ignoreToken(getFirstToken(element));\n        } // Offset the following elements correctly relative to the first element\n\n\n        if (index === 0) {\n          return;\n        }\n\n        if (offset === \"first\" && tokenInfo.isFirstTokenOfLine(getFirstToken(element))) {\n          offsets.matchOffsetOf(getFirstToken(elements[0]), getFirstToken(element));\n        } else {\n          const previousElement = elements[index - 1];\n          const firstTokenOfPreviousElement = previousElement && getFirstToken(previousElement);\n          const previousElementLastToken = previousElement && sourceCode.getLastToken(previousElement);\n\n          if (previousElement && previousElementLastToken.loc.end.line - countTrailingLinebreaks(previousElementLastToken.value) > startToken.loc.end.line) {\n            offsets.setDesiredOffsets([previousElement.range[1], element.range[1]], firstTokenOfPreviousElement, 0);\n          }\n        }\n      });\n    }\n    /**\n     * Check and decide whether to check for indentation for blockless nodes\n     * Scenarios are for or while statements without braces around them\n     * @param {ASTNode} node node to examine\n     * @returns {void}\n     */\n\n\n    function addBlocklessNodeIndent(node) {\n      if (node.type !== \"BlockStatement\") {\n        const lastParentToken = sourceCode.getTokenBefore(node, astUtils.isNotOpeningParenToken);\n        let firstBodyToken = sourceCode.getFirstToken(node);\n        let lastBodyToken = sourceCode.getLastToken(node);\n\n        while (astUtils.isOpeningParenToken(sourceCode.getTokenBefore(firstBodyToken)) && astUtils.isClosingParenToken(sourceCode.getTokenAfter(lastBodyToken))) {\n          firstBodyToken = sourceCode.getTokenBefore(firstBodyToken);\n          lastBodyToken = sourceCode.getTokenAfter(lastBodyToken);\n        }\n\n        offsets.setDesiredOffsets([firstBodyToken.range[0], lastBodyToken.range[1]], lastParentToken, 1);\n        /*\n         * For blockless nodes with semicolon-first style, don't indent the semicolon.\n         * e.g.\n         * if (foo) bar()\n         * ; [1, 2, 3].map(foo)\n         */\n\n        const lastToken = sourceCode.getLastToken(node);\n\n        if (node.type !== \"EmptyStatement\" && astUtils.isSemicolonToken(lastToken)) {\n          offsets.setDesiredOffset(lastToken, lastParentToken, 0);\n        }\n      }\n    }\n    /**\n     * Checks the indentation for nodes that are like function calls (`CallExpression` and `NewExpression`)\n     * @param {ASTNode} node A CallExpression or NewExpression node\n     * @returns {void}\n     */\n\n\n    function addFunctionCallIndent(node) {\n      let openingParen;\n\n      if (node.arguments.length) {\n        openingParen = sourceCode.getFirstTokenBetween(node.callee, node.arguments[0], astUtils.isOpeningParenToken);\n      } else {\n        openingParen = sourceCode.getLastToken(node, 1);\n      }\n\n      const closingParen = sourceCode.getLastToken(node);\n      parameterParens.add(openingParen);\n      parameterParens.add(closingParen);\n      /*\n       * If `?.` token exists, set desired offset for that.\n       * This logic is copied from `MemberExpression`'s.\n       */\n\n      if (node.optional) {\n        const dotToken = sourceCode.getTokenAfter(node.callee, astUtils.isQuestionDotToken);\n        const calleeParenCount = sourceCode.getTokensBetween(node.callee, dotToken, {\n          filter: astUtils.isClosingParenToken\n        }).length;\n        const firstTokenOfCallee = calleeParenCount ? sourceCode.getTokenBefore(node.callee, {\n          skip: calleeParenCount - 1\n        }) : sourceCode.getFirstToken(node.callee);\n        const lastTokenOfCallee = sourceCode.getTokenBefore(dotToken);\n        const offsetBase = lastTokenOfCallee.loc.end.line === openingParen.loc.start.line ? lastTokenOfCallee : firstTokenOfCallee;\n        offsets.setDesiredOffset(dotToken, offsetBase, 1);\n      }\n\n      const offsetAfterToken = node.callee.type === \"TaggedTemplateExpression\" ? sourceCode.getFirstToken(node.callee.quasi) : openingParen;\n      const offsetToken = sourceCode.getTokenBefore(offsetAfterToken);\n      offsets.setDesiredOffset(openingParen, offsetToken, 0);\n      addElementListIndent(node.arguments, openingParen, closingParen, options.CallExpression.arguments);\n    }\n    /**\n     * Checks the indentation of parenthesized values, given a list of tokens in a program\n     * @param {Token[]} tokens A list of tokens\n     * @returns {void}\n     */\n\n\n    function addParensIndent(tokens) {\n      const parenStack = [];\n      const parenPairs = [];\n      tokens.forEach(nextToken => {\n        // Accumulate a list of parenthesis pairs\n        if (astUtils.isOpeningParenToken(nextToken)) {\n          parenStack.push(nextToken);\n        } else if (astUtils.isClosingParenToken(nextToken)) {\n          parenPairs.unshift({\n            left: parenStack.pop(),\n            right: nextToken\n          });\n        }\n      });\n      parenPairs.forEach(pair => {\n        const leftParen = pair.left;\n        const rightParen = pair.right; // We only want to handle parens around expressions, so exclude parentheses that are in function parameters and function call arguments.\n\n        if (!parameterParens.has(leftParen) && !parameterParens.has(rightParen)) {\n          const parenthesizedTokens = new Set(sourceCode.getTokensBetween(leftParen, rightParen));\n          parenthesizedTokens.forEach(token => {\n            if (!parenthesizedTokens.has(offsets.getFirstDependency(token))) {\n              offsets.setDesiredOffset(token, leftParen, 1);\n            }\n          });\n        }\n\n        offsets.setDesiredOffset(rightParen, leftParen, 0);\n      });\n    }\n    /**\n     * Ignore all tokens within an unknown node whose offset do not depend\n     * on another token's offset within the unknown node\n     * @param {ASTNode} node Unknown Node\n     * @returns {void}\n     */\n\n\n    function ignoreNode(node) {\n      const unknownNodeTokens = new Set(sourceCode.getTokens(node, {\n        includeComments: true\n      }));\n      unknownNodeTokens.forEach(token => {\n        if (!unknownNodeTokens.has(offsets.getFirstDependency(token))) {\n          const firstTokenOfLine = tokenInfo.getFirstTokenOfLine(token);\n\n          if (token === firstTokenOfLine) {\n            offsets.ignoreToken(token);\n          } else {\n            offsets.setDesiredOffset(token, firstTokenOfLine, 0);\n          }\n        }\n      });\n    }\n    /**\n     * Check whether the given token is on the first line of a statement.\n     * @param {Token} token The token to check.\n     * @param {ASTNode} leafNode The expression node that the token belongs directly.\n     * @returns {boolean} `true` if the token is on the first line of a statement.\n     */\n\n\n    function isOnFirstLineOfStatement(token, leafNode) {\n      let node = leafNode;\n\n      while (node.parent && !node.parent.type.endsWith(\"Statement\") && !node.parent.type.endsWith(\"Declaration\")) {\n        node = node.parent;\n      }\n\n      node = node.parent;\n      return !node || node.loc.start.line === token.loc.start.line;\n    }\n    /**\n     * Check whether there are any blank (whitespace-only) lines between\n     * two tokens on separate lines.\n     * @param {Token} firstToken The first token.\n     * @param {Token} secondToken The second token.\n     * @returns {boolean} `true` if the tokens are on separate lines and\n     *   there exists a blank line between them, `false` otherwise.\n     */\n\n\n    function hasBlankLinesBetween(firstToken, secondToken) {\n      const firstTokenLine = firstToken.loc.end.line;\n      const secondTokenLine = secondToken.loc.start.line;\n\n      if (firstTokenLine === secondTokenLine || firstTokenLine === secondTokenLine - 1) {\n        return false;\n      }\n\n      for (let line = firstTokenLine + 1; line < secondTokenLine; ++line) {\n        if (!tokenInfo.firstTokensByLineNumber.has(line)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    const ignoredNodeFirstTokens = new Set();\n    const baseOffsetListeners = {\n      \"ArrayExpression, ArrayPattern\"(node) {\n        const openingBracket = sourceCode.getFirstToken(node);\n        const closingBracket = sourceCode.getTokenAfter([...node.elements].reverse().find(_ => _) || openingBracket, astUtils.isClosingBracketToken);\n        addElementListIndent(node.elements, openingBracket, closingBracket, options.ArrayExpression);\n      },\n\n      \"ObjectExpression, ObjectPattern\"(node) {\n        const openingCurly = sourceCode.getFirstToken(node);\n        const closingCurly = sourceCode.getTokenAfter(node.properties.length ? node.properties[node.properties.length - 1] : openingCurly, astUtils.isClosingBraceToken);\n        addElementListIndent(node.properties, openingCurly, closingCurly, options.ObjectExpression);\n      },\n\n      ArrowFunctionExpression(node) {\n        const maybeOpeningParen = sourceCode.getFirstToken(node, {\n          skip: node.async ? 1 : 0\n        });\n\n        if (astUtils.isOpeningParenToken(maybeOpeningParen)) {\n          const openingParen = maybeOpeningParen;\n          const closingParen = sourceCode.getTokenBefore(node.body, astUtils.isClosingParenToken);\n          parameterParens.add(openingParen);\n          parameterParens.add(closingParen);\n          addElementListIndent(node.params, openingParen, closingParen, options.FunctionExpression.parameters);\n        }\n\n        addBlocklessNodeIndent(node.body);\n      },\n\n      AssignmentExpression(node) {\n        const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n        offsets.setDesiredOffsets([operator.range[0], node.range[1]], sourceCode.getLastToken(node.left), 1);\n        offsets.ignoreToken(operator);\n        offsets.ignoreToken(sourceCode.getTokenAfter(operator));\n      },\n\n      \"BinaryExpression, LogicalExpression\"(node) {\n        const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n        /*\n         * For backwards compatibility, don't check BinaryExpression indents, e.g.\n         * var foo = bar &&\n         *                   baz;\n         */\n\n        const tokenAfterOperator = sourceCode.getTokenAfter(operator);\n        offsets.ignoreToken(operator);\n        offsets.ignoreToken(tokenAfterOperator);\n        offsets.setDesiredOffset(tokenAfterOperator, operator, 0);\n      },\n\n      \"BlockStatement, ClassBody\"(node) {\n        let blockIndentLevel;\n\n        if (node.parent && isOuterIIFE(node.parent)) {\n          blockIndentLevel = options.outerIIFEBody;\n        } else if (node.parent && (node.parent.type === \"FunctionExpression\" || node.parent.type === \"ArrowFunctionExpression\")) {\n          blockIndentLevel = options.FunctionExpression.body;\n        } else if (node.parent && node.parent.type === \"FunctionDeclaration\") {\n          blockIndentLevel = options.FunctionDeclaration.body;\n        } else {\n          blockIndentLevel = 1;\n        }\n        /*\n         * For blocks that aren't lone statements, ensure that the opening curly brace\n         * is aligned with the parent.\n         */\n\n\n        if (!astUtils.STATEMENT_LIST_PARENTS.has(node.parent.type)) {\n          offsets.setDesiredOffset(sourceCode.getFirstToken(node), sourceCode.getFirstToken(node.parent), 0);\n        }\n\n        addElementListIndent(node.body, sourceCode.getFirstToken(node), sourceCode.getLastToken(node), blockIndentLevel);\n      },\n\n      CallExpression: addFunctionCallIndent,\n\n      \"ClassDeclaration[superClass], ClassExpression[superClass]\"(node) {\n        const classToken = sourceCode.getFirstToken(node);\n        const extendsToken = sourceCode.getTokenBefore(node.superClass, astUtils.isNotOpeningParenToken);\n        offsets.setDesiredOffsets([extendsToken.range[0], node.body.range[0]], classToken, 1);\n      },\n\n      ConditionalExpression(node) {\n        const firstToken = sourceCode.getFirstToken(node); // `flatTernaryExpressions` option is for the following style:\n        // var a =\n        //     foo > 0 ? bar :\n        //     foo < 0 ? baz :\n        //     /*else*/ qiz ;\n\n        if (!options.flatTernaryExpressions || !astUtils.isTokenOnSameLine(node.test, node.consequent) || isOnFirstLineOfStatement(firstToken, node)) {\n          const questionMarkToken = sourceCode.getFirstTokenBetween(node.test, node.consequent, token => token.type === \"Punctuator\" && token.value === \"?\");\n          const colonToken = sourceCode.getFirstTokenBetween(node.consequent, node.alternate, token => token.type === \"Punctuator\" && token.value === \":\");\n          const firstConsequentToken = sourceCode.getTokenAfter(questionMarkToken);\n          const lastConsequentToken = sourceCode.getTokenBefore(colonToken);\n          const firstAlternateToken = sourceCode.getTokenAfter(colonToken);\n          offsets.setDesiredOffset(questionMarkToken, firstToken, 1);\n          offsets.setDesiredOffset(colonToken, firstToken, 1);\n          offsets.setDesiredOffset(firstConsequentToken, firstToken, firstConsequentToken.type === \"Punctuator\" && options.offsetTernaryExpressions ? 2 : 1);\n          /*\n           * The alternate and the consequent should usually have the same indentation.\n           * If they share part of a line, align the alternate against the first token of the consequent.\n           * This allows the alternate to be indented correctly in cases like this:\n           * foo ? (\n           *   bar\n           * ) : ( // this '(' is aligned with the '(' above, so it's considered to be aligned with `foo`\n           *   baz // as a result, `baz` is offset by 1 rather than 2\n           * )\n           */\n\n          if (lastConsequentToken.loc.end.line === firstAlternateToken.loc.start.line) {\n            offsets.setDesiredOffset(firstAlternateToken, firstConsequentToken, 0);\n          } else {\n            /**\n             * If the alternate and consequent do not share part of a line, offset the alternate from the first\n             * token of the conditional expression. For example:\n             * foo ? bar\n             *   : baz\n             *\n             * If `baz` were aligned with `bar` rather than being offset by 1 from `foo`, `baz` would end up\n             * having no expected indentation.\n             */\n            offsets.setDesiredOffset(firstAlternateToken, firstToken, firstAlternateToken.type === \"Punctuator\" && options.offsetTernaryExpressions ? 2 : 1);\n          }\n        }\n      },\n\n      \"DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement\": node => addBlocklessNodeIndent(node.body),\n\n      ExportNamedDeclaration(node) {\n        if (node.declaration === null) {\n          const closingCurly = sourceCode.getLastToken(node, astUtils.isClosingBraceToken); // Indent the specifiers in `export {foo, bar, baz}`\n\n          addElementListIndent(node.specifiers, sourceCode.getFirstToken(node, {\n            skip: 1\n          }), closingCurly, 1);\n\n          if (node.source) {\n            // Indent everything after and including the `from` token in `export {foo, bar, baz} from 'qux'`\n            offsets.setDesiredOffsets([closingCurly.range[1], node.range[1]], sourceCode.getFirstToken(node), 1);\n          }\n        }\n      },\n\n      ForStatement(node) {\n        const forOpeningParen = sourceCode.getFirstToken(node, 1);\n\n        if (node.init) {\n          offsets.setDesiredOffsets(node.init.range, forOpeningParen, 1);\n        }\n\n        if (node.test) {\n          offsets.setDesiredOffsets(node.test.range, forOpeningParen, 1);\n        }\n\n        if (node.update) {\n          offsets.setDesiredOffsets(node.update.range, forOpeningParen, 1);\n        }\n\n        addBlocklessNodeIndent(node.body);\n      },\n\n      \"FunctionDeclaration, FunctionExpression\"(node) {\n        const closingParen = sourceCode.getTokenBefore(node.body);\n        const openingParen = sourceCode.getTokenBefore(node.params.length ? node.params[0] : closingParen);\n        parameterParens.add(openingParen);\n        parameterParens.add(closingParen);\n        addElementListIndent(node.params, openingParen, closingParen, options[node.type].parameters);\n      },\n\n      IfStatement(node) {\n        addBlocklessNodeIndent(node.consequent);\n\n        if (node.alternate && node.alternate.type !== \"IfStatement\") {\n          addBlocklessNodeIndent(node.alternate);\n        }\n      },\n\n      ImportDeclaration(node) {\n        if (node.specifiers.some(specifier => specifier.type === \"ImportSpecifier\")) {\n          const openingCurly = sourceCode.getFirstToken(node, astUtils.isOpeningBraceToken);\n          const closingCurly = sourceCode.getLastToken(node, astUtils.isClosingBraceToken);\n          addElementListIndent(node.specifiers.filter(specifier => specifier.type === \"ImportSpecifier\"), openingCurly, closingCurly, options.ImportDeclaration);\n        }\n\n        const fromToken = sourceCode.getLastToken(node, token => token.type === \"Identifier\" && token.value === \"from\");\n        const sourceToken = sourceCode.getLastToken(node, token => token.type === \"String\");\n        const semiToken = sourceCode.getLastToken(node, token => token.type === \"Punctuator\" && token.value === \";\");\n\n        if (fromToken) {\n          const end = semiToken && semiToken.range[1] === sourceToken.range[1] ? node.range[1] : sourceToken.range[1];\n          offsets.setDesiredOffsets([fromToken.range[0], end], sourceCode.getFirstToken(node), 1);\n        }\n      },\n\n      ImportExpression(node) {\n        const openingParen = sourceCode.getFirstToken(node, 1);\n        const closingParen = sourceCode.getLastToken(node);\n        parameterParens.add(openingParen);\n        parameterParens.add(closingParen);\n        offsets.setDesiredOffset(openingParen, sourceCode.getTokenBefore(openingParen), 0);\n        addElementListIndent([node.source], openingParen, closingParen, options.CallExpression.arguments);\n      },\n\n      \"MemberExpression, JSXMemberExpression, MetaProperty\"(node) {\n        const object = node.type === \"MetaProperty\" ? node.meta : node.object;\n        const firstNonObjectToken = sourceCode.getFirstTokenBetween(object, node.property, astUtils.isNotClosingParenToken);\n        const secondNonObjectToken = sourceCode.getTokenAfter(firstNonObjectToken);\n        const objectParenCount = sourceCode.getTokensBetween(object, node.property, {\n          filter: astUtils.isClosingParenToken\n        }).length;\n        const firstObjectToken = objectParenCount ? sourceCode.getTokenBefore(object, {\n          skip: objectParenCount - 1\n        }) : sourceCode.getFirstToken(object);\n        const lastObjectToken = sourceCode.getTokenBefore(firstNonObjectToken);\n        const firstPropertyToken = node.computed ? firstNonObjectToken : secondNonObjectToken;\n\n        if (node.computed) {\n          // For computed MemberExpressions, match the closing bracket with the opening bracket.\n          offsets.setDesiredOffset(sourceCode.getLastToken(node), firstNonObjectToken, 0);\n          offsets.setDesiredOffsets(node.property.range, firstNonObjectToken, 1);\n        }\n        /*\n         * If the object ends on the same line that the property starts, match against the last token\n         * of the object, to ensure that the MemberExpression is not indented.\n         *\n         * Otherwise, match against the first token of the object, e.g.\n         * foo\n         *   .bar\n         *   .baz // <-- offset by 1 from `foo`\n         */\n\n\n        const offsetBase = lastObjectToken.loc.end.line === firstPropertyToken.loc.start.line ? lastObjectToken : firstObjectToken;\n\n        if (typeof options.MemberExpression === \"number\") {\n          // Match the dot (for non-computed properties) or the opening bracket (for computed properties) against the object.\n          offsets.setDesiredOffset(firstNonObjectToken, offsetBase, options.MemberExpression);\n          /*\n           * For computed MemberExpressions, match the first token of the property against the opening bracket.\n           * Otherwise, match the first token of the property against the object.\n           */\n\n          offsets.setDesiredOffset(secondNonObjectToken, node.computed ? firstNonObjectToken : offsetBase, options.MemberExpression);\n        } else {\n          // If the MemberExpression option is off, ignore the dot and the first token of the property.\n          offsets.ignoreToken(firstNonObjectToken);\n          offsets.ignoreToken(secondNonObjectToken); // To ignore the property indentation, ensure that the property tokens depend on the ignored tokens.\n\n          offsets.setDesiredOffset(firstNonObjectToken, offsetBase, 0);\n          offsets.setDesiredOffset(secondNonObjectToken, firstNonObjectToken, 0);\n        }\n      },\n\n      NewExpression(node) {\n        // Only indent the arguments if the NewExpression has parens (e.g. `new Foo(bar)` or `new Foo()`, but not `new Foo`\n        if (node.arguments.length > 0 || astUtils.isClosingParenToken(sourceCode.getLastToken(node)) && astUtils.isOpeningParenToken(sourceCode.getLastToken(node, 1))) {\n          addFunctionCallIndent(node);\n        }\n      },\n\n      Property(node) {\n        if (!node.shorthand && !node.method && node.kind === \"init\") {\n          const colon = sourceCode.getFirstTokenBetween(node.key, node.value, astUtils.isColonToken);\n          offsets.ignoreToken(sourceCode.getTokenAfter(colon));\n        }\n      },\n\n      SwitchStatement(node) {\n        const openingCurly = sourceCode.getTokenAfter(node.discriminant, astUtils.isOpeningBraceToken);\n        const closingCurly = sourceCode.getLastToken(node);\n        offsets.setDesiredOffsets([openingCurly.range[1], closingCurly.range[0]], openingCurly, options.SwitchCase);\n\n        if (node.cases.length) {\n          sourceCode.getTokensBetween(node.cases[node.cases.length - 1], closingCurly, {\n            includeComments: true,\n            filter: astUtils.isCommentToken\n          }).forEach(token => offsets.ignoreToken(token));\n        }\n      },\n\n      SwitchCase(node) {\n        if (!(node.consequent.length === 1 && node.consequent[0].type === \"BlockStatement\")) {\n          const caseKeyword = sourceCode.getFirstToken(node);\n          const tokenAfterCurrentCase = sourceCode.getTokenAfter(node);\n          offsets.setDesiredOffsets([caseKeyword.range[1], tokenAfterCurrentCase.range[0]], caseKeyword, 1);\n        }\n      },\n\n      TemplateLiteral(node) {\n        node.expressions.forEach((expression, index) => {\n          const previousQuasi = node.quasis[index];\n          const nextQuasi = node.quasis[index + 1];\n          const tokenToAlignFrom = previousQuasi.loc.start.line === previousQuasi.loc.end.line ? sourceCode.getFirstToken(previousQuasi) : null;\n          offsets.setDesiredOffsets([previousQuasi.range[1], nextQuasi.range[0]], tokenToAlignFrom, 1);\n          offsets.setDesiredOffset(sourceCode.getFirstToken(nextQuasi), tokenToAlignFrom, 0);\n        });\n      },\n\n      VariableDeclaration(node) {\n        let variableIndent = Object.prototype.hasOwnProperty.call(options.VariableDeclarator, node.kind) ? options.VariableDeclarator[node.kind] : DEFAULT_VARIABLE_INDENT;\n        const firstToken = sourceCode.getFirstToken(node),\n              lastToken = sourceCode.getLastToken(node);\n\n        if (options.VariableDeclarator[node.kind] === \"first\") {\n          if (node.declarations.length > 1) {\n            addElementListIndent(node.declarations, firstToken, lastToken, \"first\");\n            return;\n          }\n\n          variableIndent = DEFAULT_VARIABLE_INDENT;\n        }\n\n        if (node.declarations[node.declarations.length - 1].loc.start.line > node.loc.start.line) {\n          /*\n           * VariableDeclarator indentation is a bit different from other forms of indentation, in that the\n           * indentation of an opening bracket sometimes won't match that of a closing bracket. For example,\n           * the following indentations are correct:\n           *\n           * var foo = {\n           *   ok: true\n           * };\n           *\n           * var foo = {\n           *     ok: true,\n           *   },\n           *   bar = 1;\n           *\n           * Account for when exiting the AST (after indentations have already been set for the nodes in\n           * the declaration) by manually increasing the indentation level of the tokens in this declarator\n           * on the same line as the start of the declaration, provided that there are declarators that\n           * follow this one.\n           */\n          offsets.setDesiredOffsets(node.range, firstToken, variableIndent, true);\n        } else {\n          offsets.setDesiredOffsets(node.range, firstToken, variableIndent);\n        }\n\n        if (astUtils.isSemicolonToken(lastToken)) {\n          offsets.ignoreToken(lastToken);\n        }\n      },\n\n      VariableDeclarator(node) {\n        if (node.init) {\n          const equalOperator = sourceCode.getTokenBefore(node.init, astUtils.isNotOpeningParenToken);\n          const tokenAfterOperator = sourceCode.getTokenAfter(equalOperator);\n          offsets.ignoreToken(equalOperator);\n          offsets.ignoreToken(tokenAfterOperator);\n          offsets.setDesiredOffsets([tokenAfterOperator.range[0], node.range[1]], equalOperator, 1);\n          offsets.setDesiredOffset(equalOperator, sourceCode.getLastToken(node.id), 0);\n        }\n      },\n\n      \"JSXAttribute[value]\"(node) {\n        const equalsToken = sourceCode.getFirstTokenBetween(node.name, node.value, token => token.type === \"Punctuator\" && token.value === \"=\");\n        offsets.setDesiredOffsets([equalsToken.range[0], node.value.range[1]], sourceCode.getFirstToken(node.name), 1);\n      },\n\n      JSXElement(node) {\n        if (node.closingElement) {\n          addElementListIndent(node.children, sourceCode.getFirstToken(node.openingElement), sourceCode.getFirstToken(node.closingElement), 1);\n        }\n      },\n\n      JSXOpeningElement(node) {\n        const firstToken = sourceCode.getFirstToken(node);\n        let closingToken;\n\n        if (node.selfClosing) {\n          closingToken = sourceCode.getLastToken(node, {\n            skip: 1\n          });\n          offsets.setDesiredOffset(sourceCode.getLastToken(node), closingToken, 0);\n        } else {\n          closingToken = sourceCode.getLastToken(node);\n        }\n\n        offsets.setDesiredOffsets(node.name.range, sourceCode.getFirstToken(node));\n        addElementListIndent(node.attributes, firstToken, closingToken, 1);\n      },\n\n      JSXClosingElement(node) {\n        const firstToken = sourceCode.getFirstToken(node);\n        offsets.setDesiredOffsets(node.name.range, firstToken, 1);\n      },\n\n      JSXFragment(node) {\n        const firstOpeningToken = sourceCode.getFirstToken(node.openingFragment);\n        const firstClosingToken = sourceCode.getFirstToken(node.closingFragment);\n        addElementListIndent(node.children, firstOpeningToken, firstClosingToken, 1);\n      },\n\n      JSXOpeningFragment(node) {\n        const firstToken = sourceCode.getFirstToken(node);\n        const closingToken = sourceCode.getLastToken(node);\n        offsets.setDesiredOffsets(node.range, firstToken, 1);\n        offsets.matchOffsetOf(firstToken, closingToken);\n      },\n\n      JSXClosingFragment(node) {\n        const firstToken = sourceCode.getFirstToken(node);\n        const slashToken = sourceCode.getLastToken(node, {\n          skip: 1\n        });\n        const closingToken = sourceCode.getLastToken(node);\n        const tokenToMatch = astUtils.isTokenOnSameLine(slashToken, closingToken) ? slashToken : closingToken;\n        offsets.setDesiredOffsets(node.range, firstToken, 1);\n        offsets.matchOffsetOf(firstToken, tokenToMatch);\n      },\n\n      JSXExpressionContainer(node) {\n        const openingCurly = sourceCode.getFirstToken(node);\n        const closingCurly = sourceCode.getLastToken(node);\n        offsets.setDesiredOffsets([openingCurly.range[1], closingCurly.range[0]], openingCurly, 1);\n      },\n\n      JSXSpreadAttribute(node) {\n        const openingCurly = sourceCode.getFirstToken(node);\n        const closingCurly = sourceCode.getLastToken(node);\n        offsets.setDesiredOffsets([openingCurly.range[1], closingCurly.range[0]], openingCurly, 1);\n      },\n\n      \"*\"(node) {\n        const firstToken = sourceCode.getFirstToken(node); // Ensure that the children of every node are indented at least as much as the first token.\n\n        if (firstToken && !ignoredNodeFirstTokens.has(firstToken)) {\n          offsets.setDesiredOffsets(node.range, firstToken, 0);\n        }\n      }\n\n    };\n    const listenerCallQueue = [];\n    /*\n     * To ignore the indentation of a node:\n     * 1. Don't call the node's listener when entering it (if it has a listener)\n     * 2. Don't set any offsets against the first token of the node.\n     * 3. Call `ignoreNode` on the node sometime after exiting it and before validating offsets.\n     */\n\n    const offsetListeners = {};\n\n    for (const [selector, listener] of Object.entries(baseOffsetListeners)) {\n      /*\n       * Offset listener calls are deferred until traversal is finished, and are called as\n       * part of the final `Program:exit` listener. This is necessary because a node might\n       * be matched by multiple selectors.\n       *\n       * Example: Suppose there is an offset listener for `Identifier`, and the user has\n       * specified in configuration that `MemberExpression > Identifier` should be ignored.\n       * Due to selector specificity rules, the `Identifier` listener will get called first. However,\n       * if a given Identifier node is supposed to be ignored, then the `Identifier` offset listener\n       * should not have been called at all. Without doing extra selector matching, we don't know\n       * whether the Identifier matches the `MemberExpression > Identifier` selector until the\n       * `MemberExpression > Identifier` listener is called.\n       *\n       * To avoid this, the `Identifier` listener isn't called until traversal finishes and all\n       * ignored nodes are known.\n       */\n      offsetListeners[selector] = node => listenerCallQueue.push({\n        listener,\n        node\n      });\n    } // For each ignored node selector, set up a listener to collect it into the `ignoredNodes` set.\n\n\n    const ignoredNodes = new Set();\n    /**\n     * Ignores a node\n     * @param {ASTNode} node The node to ignore\n     * @returns {void}\n     */\n\n    function addToIgnoredNodes(node) {\n      ignoredNodes.add(node);\n      ignoredNodeFirstTokens.add(sourceCode.getFirstToken(node));\n    }\n\n    const ignoredNodeListeners = options.ignoredNodes.reduce((listeners, ignoredSelector) => Object.assign(listeners, {\n      [ignoredSelector]: addToIgnoredNodes\n    }), {});\n    /*\n     * Join the listeners, and add a listener to verify that all tokens actually have the correct indentation\n     * at the end.\n     *\n     * Using Object.assign will cause some offset listeners to be overwritten if the same selector also appears\n     * in `ignoredNodeListeners`. This isn't a problem because all of the matching nodes will be ignored,\n     * so those listeners wouldn't be called anyway.\n     */\n\n    return Object.assign(offsetListeners, ignoredNodeListeners, {\n      \"*:exit\"(node) {\n        // If a node's type is nonstandard, we can't tell how its children should be offset, so ignore it.\n        if (!KNOWN_NODES.has(node.type)) {\n          addToIgnoredNodes(node);\n        }\n      },\n\n      \"Program:exit\"() {\n        // If ignoreComments option is enabled, ignore all comment tokens.\n        if (options.ignoreComments) {\n          sourceCode.getAllComments().forEach(comment => offsets.ignoreToken(comment));\n        } // Invoke the queued offset listeners for the nodes that aren't ignored.\n\n\n        listenerCallQueue.filter(nodeInfo => !ignoredNodes.has(nodeInfo.node)).forEach(nodeInfo => nodeInfo.listener(nodeInfo.node)); // Update the offsets for ignored nodes to prevent their child tokens from being reported.\n\n        ignoredNodes.forEach(ignoreNode);\n        addParensIndent(sourceCode.ast.tokens);\n        /*\n         * Create a Map from (tokenOrComment) => (precedingToken).\n         * This is necessary because sourceCode.getTokenBefore does not handle a comment as an argument correctly.\n         */\n\n        const precedingTokens = sourceCode.ast.comments.reduce((commentMap, comment) => {\n          const tokenOrCommentBefore = sourceCode.getTokenBefore(comment, {\n            includeComments: true\n          });\n          return commentMap.set(comment, commentMap.has(tokenOrCommentBefore) ? commentMap.get(tokenOrCommentBefore) : tokenOrCommentBefore);\n        }, new WeakMap());\n        sourceCode.lines.forEach((line, lineIndex) => {\n          const lineNumber = lineIndex + 1;\n\n          if (!tokenInfo.firstTokensByLineNumber.has(lineNumber)) {\n            // Don't check indentation on blank lines\n            return;\n          }\n\n          const firstTokenOfLine = tokenInfo.firstTokensByLineNumber.get(lineNumber);\n\n          if (firstTokenOfLine.loc.start.line !== lineNumber) {\n            // Don't check the indentation of multi-line tokens (e.g. template literals or block comments) twice.\n            return;\n          }\n\n          if (astUtils.isCommentToken(firstTokenOfLine)) {\n            const tokenBefore = precedingTokens.get(firstTokenOfLine);\n            const tokenAfter = tokenBefore ? sourceCode.getTokenAfter(tokenBefore) : sourceCode.ast.tokens[0];\n            const mayAlignWithBefore = tokenBefore && !hasBlankLinesBetween(tokenBefore, firstTokenOfLine);\n            const mayAlignWithAfter = tokenAfter && !hasBlankLinesBetween(firstTokenOfLine, tokenAfter);\n            /*\n             * If a comment precedes a line that begins with a semicolon token, align to that token, i.e.\n             *\n             * let foo\n             * // comment\n             * ;(async () => {})()\n             */\n\n            if (tokenAfter && astUtils.isSemicolonToken(tokenAfter) && !astUtils.isTokenOnSameLine(firstTokenOfLine, tokenAfter)) {\n              offsets.setDesiredOffset(firstTokenOfLine, tokenAfter, 0);\n            } // If a comment matches the expected indentation of the token immediately before or after, don't report it.\n\n\n            if (mayAlignWithBefore && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenBefore)) || mayAlignWithAfter && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenAfter))) {\n              return;\n            }\n          } // If the token matches the expected indentation, don't report it.\n\n\n          if (validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine))) {\n            return;\n          } // Otherwise, report the token/comment.\n\n\n          report(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine));\n        });\n      }\n\n    });\n  }\n\n};","map":{"version":3,"names":["createTree","require","astUtils","KNOWN_NODES","Set","BinarySearchTree","constructor","_rbTree","insert","key","value","iterator","find","valid","update","findLe","le","deleteRange","start","end","ge","remove","next","TokenInfo","sourceCode","firstTokensByLineNumber","tokensAndComments","reduce","map","token","has","loc","line","set","text","slice","range","column","trim","Map","getFirstTokenOfLine","get","isFirstTokenOfLine","getTokenIndent","OffsetStorage","tokenInfo","indentSize","indentType","_tokenInfo","_indentSize","_indentType","_tree","offset","from","force","_lockedFirstTokens","WeakMap","_desiredIndentCache","_ignoredTokens","WeakSet","_getOffsetDescriptor","matchOffsetOf","baseToken","offsetToken","setDesiredOffset","fromToken","setDesiredOffsets","descriptorToInsert","descriptorAfterRange","fromTokenIsInRange","fromTokenDescriptor","getDesiredIndent","firstToken","repeat","offsetInfo","test","ignoreToken","add","getFirstDependency","ELEMENT_LIST_SCHEMA","oneOf","type","minimum","enum","module","exports","meta","docs","description","category","recommended","url","fixable","schema","properties","SwitchCase","default","VariableDeclarator","var","let","const","additionalProperties","outerIIFEBody","MemberExpression","FunctionDeclaration","parameters","body","FunctionExpression","CallExpression","arguments","ArrayExpression","ObjectExpression","ImportDeclaration","flatTernaryExpressions","offsetTernaryExpressions","ignoredNodes","items","not","pattern","ignoreComments","messages","wrongIndentation","create","context","DEFAULT_VARIABLE_INDENT","DEFAULT_PARAMETER_INDENT","DEFAULT_FUNCTION_BODY_INDENT","options","length","Object","assign","getSourceCode","offsets","parameterParens","createErrorMessageData","expectedAmount","actualSpaces","actualTabs","expectedStatement","foundSpacesWord","foundTabsWord","foundStatement","expected","actual","report","neededIndent","actualIndent","Array","numSpaces","filter","char","numTabs","node","messageId","data","fix","fixer","newText","replaceTextRange","validateTokenIndent","desiredIndent","indentation","includes","isOuterIIFE","parent","callee","statement","indexOf","operator","countTrailingLinebreaks","string","trailingWhitespace","match","linebreakMatches","createGlobalLinebreakMatcher","addElementListIndent","elements","startToken","endToken","getFirstToken","element","getTokenBefore","isOpeningParenToken","getTokenAfter","forEach","index","previousElement","firstTokenOfPreviousElement","previousElementLastToken","getLastToken","addBlocklessNodeIndent","lastParentToken","isNotOpeningParenToken","firstBodyToken","lastBodyToken","isClosingParenToken","lastToken","isSemicolonToken","addFunctionCallIndent","openingParen","getFirstTokenBetween","closingParen","optional","dotToken","isQuestionDotToken","calleeParenCount","getTokensBetween","firstTokenOfCallee","skip","lastTokenOfCallee","offsetBase","offsetAfterToken","quasi","addParensIndent","tokens","parenStack","parenPairs","nextToken","push","unshift","left","pop","right","pair","leftParen","rightParen","parenthesizedTokens","ignoreNode","unknownNodeTokens","getTokens","includeComments","firstTokenOfLine","isOnFirstLineOfStatement","leafNode","endsWith","hasBlankLinesBetween","secondToken","firstTokenLine","secondTokenLine","ignoredNodeFirstTokens","baseOffsetListeners","openingBracket","closingBracket","reverse","_","isClosingBracketToken","openingCurly","closingCurly","isClosingBraceToken","ArrowFunctionExpression","maybeOpeningParen","async","params","AssignmentExpression","tokenAfterOperator","blockIndentLevel","STATEMENT_LIST_PARENTS","classToken","extendsToken","superClass","ConditionalExpression","isTokenOnSameLine","consequent","questionMarkToken","colonToken","alternate","firstConsequentToken","lastConsequentToken","firstAlternateToken","ExportNamedDeclaration","declaration","specifiers","source","ForStatement","forOpeningParen","init","IfStatement","some","specifier","isOpeningBraceToken","sourceToken","semiToken","ImportExpression","object","firstNonObjectToken","property","isNotClosingParenToken","secondNonObjectToken","objectParenCount","firstObjectToken","lastObjectToken","firstPropertyToken","computed","NewExpression","Property","shorthand","method","kind","colon","isColonToken","SwitchStatement","discriminant","cases","isCommentToken","caseKeyword","tokenAfterCurrentCase","TemplateLiteral","expressions","expression","previousQuasi","quasis","nextQuasi","tokenToAlignFrom","VariableDeclaration","variableIndent","prototype","hasOwnProperty","call","declarations","equalOperator","id","equalsToken","name","JSXElement","closingElement","children","openingElement","JSXOpeningElement","closingToken","selfClosing","attributes","JSXClosingElement","JSXFragment","firstOpeningToken","openingFragment","firstClosingToken","closingFragment","JSXOpeningFragment","JSXClosingFragment","slashToken","tokenToMatch","JSXExpressionContainer","JSXSpreadAttribute","listenerCallQueue","offsetListeners","selector","listener","entries","addToIgnoredNodes","ignoredNodeListeners","listeners","ignoredSelector","getAllComments","comment","nodeInfo","ast","precedingTokens","comments","commentMap","tokenOrCommentBefore","lines","lineIndex","lineNumber","tokenBefore","tokenAfter","mayAlignWithBefore","mayAlignWithAfter"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/indent.js"],"sourcesContent":["/**\n * @fileoverview This rule sets a specific indentation style and width for your code\n *\n * @author Teddy Katz\n * @author Vitaly Puzrin\n * @author Gyandeep Singh\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst createTree = require(\"functional-red-black-tree\");\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst KNOWN_NODES = new Set([\n    \"AssignmentExpression\",\n    \"AssignmentPattern\",\n    \"ArrayExpression\",\n    \"ArrayPattern\",\n    \"ArrowFunctionExpression\",\n    \"AwaitExpression\",\n    \"BlockStatement\",\n    \"BinaryExpression\",\n    \"BreakStatement\",\n    \"CallExpression\",\n    \"CatchClause\",\n    \"ChainExpression\",\n    \"ClassBody\",\n    \"ClassDeclaration\",\n    \"ClassExpression\",\n    \"ConditionalExpression\",\n    \"ContinueStatement\",\n    \"DoWhileStatement\",\n    \"DebuggerStatement\",\n    \"EmptyStatement\",\n    \"ExperimentalRestProperty\",\n    \"ExperimentalSpreadProperty\",\n    \"ExpressionStatement\",\n    \"ForStatement\",\n    \"ForInStatement\",\n    \"ForOfStatement\",\n    \"FunctionDeclaration\",\n    \"FunctionExpression\",\n    \"Identifier\",\n    \"IfStatement\",\n    \"Literal\",\n    \"LabeledStatement\",\n    \"LogicalExpression\",\n    \"MemberExpression\",\n    \"MetaProperty\",\n    \"MethodDefinition\",\n    \"NewExpression\",\n    \"ObjectExpression\",\n    \"ObjectPattern\",\n    \"Program\",\n    \"Property\",\n    \"RestElement\",\n    \"ReturnStatement\",\n    \"SequenceExpression\",\n    \"SpreadElement\",\n    \"Super\",\n    \"SwitchCase\",\n    \"SwitchStatement\",\n    \"TaggedTemplateExpression\",\n    \"TemplateElement\",\n    \"TemplateLiteral\",\n    \"ThisExpression\",\n    \"ThrowStatement\",\n    \"TryStatement\",\n    \"UnaryExpression\",\n    \"UpdateExpression\",\n    \"VariableDeclaration\",\n    \"VariableDeclarator\",\n    \"WhileStatement\",\n    \"WithStatement\",\n    \"YieldExpression\",\n    \"JSXFragment\",\n    \"JSXOpeningFragment\",\n    \"JSXClosingFragment\",\n    \"JSXIdentifier\",\n    \"JSXNamespacedName\",\n    \"JSXMemberExpression\",\n    \"JSXEmptyExpression\",\n    \"JSXExpressionContainer\",\n    \"JSXElement\",\n    \"JSXClosingElement\",\n    \"JSXOpeningElement\",\n    \"JSXAttribute\",\n    \"JSXSpreadAttribute\",\n    \"JSXText\",\n    \"ExportDefaultDeclaration\",\n    \"ExportNamedDeclaration\",\n    \"ExportAllDeclaration\",\n    \"ExportSpecifier\",\n    \"ImportDeclaration\",\n    \"ImportSpecifier\",\n    \"ImportDefaultSpecifier\",\n    \"ImportNamespaceSpecifier\",\n    \"ImportExpression\"\n]);\n\n/*\n * General rule strategy:\n * 1. An OffsetStorage instance stores a map of desired offsets, where each token has a specified offset from another\n *    specified token or to the first column.\n * 2. As the AST is traversed, modify the desired offsets of tokens accordingly. For example, when entering a\n *    BlockStatement, offset all of the tokens in the BlockStatement by 1 indent level from the opening curly\n *    brace of the BlockStatement.\n * 3. After traversing the AST, calculate the expected indentation levels of every token according to the\n *    OffsetStorage container.\n * 4. For each line, compare the expected indentation of the first token to the actual indentation in the file,\n *    and report the token if the two values are not equal.\n */\n\n\n/**\n * A mutable balanced binary search tree that stores (key, value) pairs. The keys are numeric, and must be unique.\n * This is intended to be a generic wrapper around a balanced binary search tree library, so that the underlying implementation\n * can easily be swapped out.\n */\nclass BinarySearchTree {\n\n    /**\n     * Creates an empty tree\n     */\n    constructor() {\n        this._rbTree = createTree();\n    }\n\n    /**\n     * Inserts an entry into the tree.\n     * @param {number} key The entry's key\n     * @param {*} value The entry's value\n     * @returns {void}\n     */\n    insert(key, value) {\n        const iterator = this._rbTree.find(key);\n\n        if (iterator.valid) {\n            this._rbTree = iterator.update(value);\n        } else {\n            this._rbTree = this._rbTree.insert(key, value);\n        }\n    }\n\n    /**\n     * Finds the entry with the largest key less than or equal to the provided key\n     * @param {number} key The provided key\n     * @returns {{key: number, value: *}|null} The found entry, or null if no such entry exists.\n     */\n    findLe(key) {\n        const iterator = this._rbTree.le(key);\n\n        return iterator && { key: iterator.key, value: iterator.value };\n    }\n\n    /**\n     * Deletes all of the keys in the interval [start, end)\n     * @param {number} start The start of the range\n     * @param {number} end The end of the range\n     * @returns {void}\n     */\n    deleteRange(start, end) {\n\n        // Exit without traversing the tree if the range has zero size.\n        if (start === end) {\n            return;\n        }\n        const iterator = this._rbTree.ge(start);\n\n        while (iterator.valid && iterator.key < end) {\n            this._rbTree = this._rbTree.remove(iterator.key);\n            iterator.next();\n        }\n    }\n}\n\n/**\n * A helper class to get token-based info related to indentation\n */\nclass TokenInfo {\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {SourceCode} sourceCode A SourceCode object\n     */\n    constructor(sourceCode) {\n        this.sourceCode = sourceCode;\n        this.firstTokensByLineNumber = sourceCode.tokensAndComments.reduce((map, token) => {\n            if (!map.has(token.loc.start.line)) {\n                map.set(token.loc.start.line, token);\n            }\n            if (!map.has(token.loc.end.line) && sourceCode.text.slice(token.range[1] - token.loc.end.column, token.range[1]).trim()) {\n                map.set(token.loc.end.line, token);\n            }\n            return map;\n        }, new Map());\n    }\n\n    /**\n     * Gets the first token on a given token's line\n     * @param {Token|ASTNode} token a node or token\n     * @returns {Token} The first token on the given line\n     */\n    getFirstTokenOfLine(token) {\n        return this.firstTokensByLineNumber.get(token.loc.start.line);\n    }\n\n    /**\n     * Determines whether a token is the first token in its line\n     * @param {Token} token The token\n     * @returns {boolean} `true` if the token is the first on its line\n     */\n    isFirstTokenOfLine(token) {\n        return this.getFirstTokenOfLine(token) === token;\n    }\n\n    /**\n     * Get the actual indent of a token\n     * @param {Token} token Token to examine. This should be the first token on its line.\n     * @returns {string} The indentation characters that precede the token\n     */\n    getTokenIndent(token) {\n        return this.sourceCode.text.slice(token.range[0] - token.loc.start.column, token.range[0]);\n    }\n}\n\n/**\n * A class to store information on desired offsets of tokens from each other\n */\nclass OffsetStorage {\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {TokenInfo} tokenInfo a TokenInfo instance\n     * @param {number} indentSize The desired size of each indentation level\n     * @param {string} indentType The indentation character\n     */\n    constructor(tokenInfo, indentSize, indentType) {\n        this._tokenInfo = tokenInfo;\n        this._indentSize = indentSize;\n        this._indentType = indentType;\n\n        this._tree = new BinarySearchTree();\n        this._tree.insert(0, { offset: 0, from: null, force: false });\n\n        this._lockedFirstTokens = new WeakMap();\n        this._desiredIndentCache = new WeakMap();\n        this._ignoredTokens = new WeakSet();\n    }\n\n    _getOffsetDescriptor(token) {\n        return this._tree.findLe(token.range[0]).value;\n    }\n\n    /**\n     * Sets the offset column of token B to match the offset column of token A.\n     * **WARNING**: This matches a *column*, even if baseToken is not the first token on its line. In\n     * most cases, `setDesiredOffset` should be used instead.\n     * @param {Token} baseToken The first token\n     * @param {Token} offsetToken The second token, whose offset should be matched to the first token\n     * @returns {void}\n     */\n    matchOffsetOf(baseToken, offsetToken) {\n\n        /*\n         * lockedFirstTokens is a map from a token whose indentation is controlled by the \"first\" option to\n         * the token that it depends on. For example, with the `ArrayExpression: first` option, the first\n         * token of each element in the array after the first will be mapped to the first token of the first\n         * element. The desired indentation of each of these tokens is computed based on the desired indentation\n         * of the \"first\" element, rather than through the normal offset mechanism.\n         */\n        this._lockedFirstTokens.set(offsetToken, baseToken);\n    }\n\n    /**\n     * Sets the desired offset of a token.\n     *\n     * This uses a line-based offset collapsing behavior to handle tokens on the same line.\n     * For example, consider the following two cases:\n     *\n     * (\n     *     [\n     *         bar\n     *     ]\n     * )\n     *\n     * ([\n     *     bar\n     * ])\n     *\n     * Based on the first case, it's clear that the `bar` token needs to have an offset of 1 indent level (4 spaces) from\n     * the `[` token, and the `[` token has to have an offset of 1 indent level from the `(` token. Since the `(` token is\n     * the first on its line (with an indent of 0 spaces), the `bar` token needs to be offset by 2 indent levels (8 spaces)\n     * from the start of its line.\n     *\n     * However, in the second case `bar` should only be indented by 4 spaces. This is because the offset of 1 indent level\n     * between the `(` and the `[` tokens gets \"collapsed\" because the two tokens are on the same line. As a result, the\n     * `(` token is mapped to the `[` token with an offset of 0, and the rule correctly decides that `bar` should be indented\n     * by 1 indent level from the start of the line.\n     *\n     * This is useful because rule listeners can usually just call `setDesiredOffset` for all the tokens in the node,\n     * without needing to check which lines those tokens are on.\n     *\n     * Note that since collapsing only occurs when two tokens are on the same line, there are a few cases where non-intuitive\n     * behavior can occur. For example, consider the following cases:\n     *\n     * foo(\n     * ).\n     *     bar(\n     *         baz\n     *     )\n     *\n     * foo(\n     * ).bar(\n     *     baz\n     * )\n     *\n     * Based on the first example, it would seem that `bar` should be offset by 1 indent level from `foo`, and `baz`\n     * should be offset by 1 indent level from `bar`. However, this is not correct, because it would result in `baz`\n     * being indented by 2 indent levels in the second case (since `foo`, `bar`, and `baz` are all on separate lines, no\n     * collapsing would occur).\n     *\n     * Instead, the correct way would be to offset `baz` by 1 level from `bar`, offset `bar` by 1 level from the `)`, and\n     * offset the `)` by 0 levels from `foo`. This ensures that the offset between `bar` and the `)` are correctly collapsed\n     * in the second case.\n     * @param {Token} token The token\n     * @param {Token} fromToken The token that `token` should be offset from\n     * @param {number} offset The desired indent level\n     * @returns {void}\n     */\n    setDesiredOffset(token, fromToken, offset) {\n        return this.setDesiredOffsets(token.range, fromToken, offset);\n    }\n\n    /**\n     * Sets the desired offset of all tokens in a range\n     * It's common for node listeners in this file to need to apply the same offset to a large, contiguous range of tokens.\n     * Moreover, the offset of any given token is usually updated multiple times (roughly once for each node that contains\n     * it). This means that the offset of each token is updated O(AST depth) times.\n     * It would not be performant to store and update the offsets for each token independently, because the rule would end\n     * up having a time complexity of O(number of tokens * AST depth), which is quite slow for large files.\n     *\n     * Instead, the offset tree is represented as a collection of contiguous offset ranges in a file. For example, the following\n     * list could represent the state of the offset tree at a given point:\n     *\n     * * Tokens starting in the interval [0, 15) are aligned with the beginning of the file\n     * * Tokens starting in the interval [15, 30) are offset by 1 indent level from the `bar` token\n     * * Tokens starting in the interval [30, 43) are offset by 1 indent level from the `foo` token\n     * * Tokens starting in the interval [43, 820) are offset by 2 indent levels from the `bar` token\n     * * Tokens starting in the interval [820, ∞) are offset by 1 indent level from the `baz` token\n     *\n     * The `setDesiredOffsets` methods inserts ranges like the ones above. The third line above would be inserted by using:\n     * `setDesiredOffsets([30, 43], fooToken, 1);`\n     * @param {[number, number]} range A [start, end] pair. All tokens with range[0] <= token.start < range[1] will have the offset applied.\n     * @param {Token} fromToken The token that this is offset from\n     * @param {number} offset The desired indent level\n     * @param {boolean} force `true` if this offset should not use the normal collapsing behavior. This should almost always be false.\n     * @returns {void}\n     */\n    setDesiredOffsets(range, fromToken, offset, force) {\n\n        /*\n         * Offset ranges are stored as a collection of nodes, where each node maps a numeric key to an offset\n         * descriptor. The tree for the example above would have the following nodes:\n         *\n         * * key: 0, value: { offset: 0, from: null }\n         * * key: 15, value: { offset: 1, from: barToken }\n         * * key: 30, value: { offset: 1, from: fooToken }\n         * * key: 43, value: { offset: 2, from: barToken }\n         * * key: 820, value: { offset: 1, from: bazToken }\n         *\n         * To find the offset descriptor for any given token, one needs to find the node with the largest key\n         * which is <= token.start. To make this operation fast, the nodes are stored in a balanced binary\n         * search tree indexed by key.\n         */\n\n        const descriptorToInsert = { offset, from: fromToken, force };\n\n        const descriptorAfterRange = this._tree.findLe(range[1]).value;\n\n        const fromTokenIsInRange = fromToken && fromToken.range[0] >= range[0] && fromToken.range[1] <= range[1];\n        const fromTokenDescriptor = fromTokenIsInRange && this._getOffsetDescriptor(fromToken);\n\n        // First, remove any existing nodes in the range from the tree.\n        this._tree.deleteRange(range[0] + 1, range[1]);\n\n        // Insert a new node into the tree for this range\n        this._tree.insert(range[0], descriptorToInsert);\n\n        /*\n         * To avoid circular offset dependencies, keep the `fromToken` token mapped to whatever it was mapped to previously,\n         * even if it's in the current range.\n         */\n        if (fromTokenIsInRange) {\n            this._tree.insert(fromToken.range[0], fromTokenDescriptor);\n            this._tree.insert(fromToken.range[1], descriptorToInsert);\n        }\n\n        /*\n         * To avoid modifying the offset of tokens after the range, insert another node to keep the offset of the following\n         * tokens the same as it was before.\n         */\n        this._tree.insert(range[1], descriptorAfterRange);\n    }\n\n    /**\n     * Gets the desired indent of a token\n     * @param {Token} token The token\n     * @returns {string} The desired indent of the token\n     */\n    getDesiredIndent(token) {\n        if (!this._desiredIndentCache.has(token)) {\n\n            if (this._ignoredTokens.has(token)) {\n\n                /*\n                 * If the token is ignored, use the actual indent of the token as the desired indent.\n                 * This ensures that no errors are reported for this token.\n                 */\n                this._desiredIndentCache.set(\n                    token,\n                    this._tokenInfo.getTokenIndent(token)\n                );\n            } else if (this._lockedFirstTokens.has(token)) {\n                const firstToken = this._lockedFirstTokens.get(token);\n\n                this._desiredIndentCache.set(\n                    token,\n\n                    // (indentation for the first element's line)\n                    this.getDesiredIndent(this._tokenInfo.getFirstTokenOfLine(firstToken)) +\n\n                        // (space between the start of the first element's line and the first element)\n                        this._indentType.repeat(firstToken.loc.start.column - this._tokenInfo.getFirstTokenOfLine(firstToken).loc.start.column)\n                );\n            } else {\n                const offsetInfo = this._getOffsetDescriptor(token);\n                const offset = (\n                    offsetInfo.from &&\n                    offsetInfo.from.loc.start.line === token.loc.start.line &&\n                    !/^\\s*?\\n/u.test(token.value) &&\n                    !offsetInfo.force\n                ) ? 0 : offsetInfo.offset * this._indentSize;\n\n                this._desiredIndentCache.set(\n                    token,\n                    (offsetInfo.from ? this.getDesiredIndent(offsetInfo.from) : \"\") + this._indentType.repeat(offset)\n                );\n            }\n        }\n        return this._desiredIndentCache.get(token);\n    }\n\n    /**\n     * Ignores a token, preventing it from being reported.\n     * @param {Token} token The token\n     * @returns {void}\n     */\n    ignoreToken(token) {\n        if (this._tokenInfo.isFirstTokenOfLine(token)) {\n            this._ignoredTokens.add(token);\n        }\n    }\n\n    /**\n     * Gets the first token that the given token's indentation is dependent on\n     * @param {Token} token The token\n     * @returns {Token} The token that the given token depends on, or `null` if the given token is at the top level\n     */\n    getFirstDependency(token) {\n        return this._getOffsetDescriptor(token).from;\n    }\n}\n\nconst ELEMENT_LIST_SCHEMA = {\n    oneOf: [\n        {\n            type: \"integer\",\n            minimum: 0\n        },\n        {\n            enum: [\"first\", \"off\"]\n        }\n    ]\n};\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent indentation\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/indent\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"tab\"]\n                    },\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    }\n                ]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    SwitchCase: {\n                        type: \"integer\",\n                        minimum: 0,\n                        default: 0\n                    },\n                    VariableDeclarator: {\n                        oneOf: [\n                            ELEMENT_LIST_SCHEMA,\n                            {\n                                type: \"object\",\n                                properties: {\n                                    var: ELEMENT_LIST_SCHEMA,\n                                    let: ELEMENT_LIST_SCHEMA,\n                                    const: ELEMENT_LIST_SCHEMA\n                                },\n                                additionalProperties: false\n                            }\n                        ]\n                    },\n                    outerIIFEBody: {\n                        oneOf: [\n                            {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            {\n                                enum: [\"off\"]\n                            }\n                        ]\n                    },\n                    MemberExpression: {\n                        oneOf: [\n                            {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            {\n                                enum: [\"off\"]\n                            }\n                        ]\n                    },\n                    FunctionDeclaration: {\n                        type: \"object\",\n                        properties: {\n                            parameters: ELEMENT_LIST_SCHEMA,\n                            body: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    },\n                    FunctionExpression: {\n                        type: \"object\",\n                        properties: {\n                            parameters: ELEMENT_LIST_SCHEMA,\n                            body: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    },\n                    CallExpression: {\n                        type: \"object\",\n                        properties: {\n                            arguments: ELEMENT_LIST_SCHEMA\n                        },\n                        additionalProperties: false\n                    },\n                    ArrayExpression: ELEMENT_LIST_SCHEMA,\n                    ObjectExpression: ELEMENT_LIST_SCHEMA,\n                    ImportDeclaration: ELEMENT_LIST_SCHEMA,\n                    flatTernaryExpressions: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    offsetTernaryExpressions: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    ignoredNodes: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\",\n                            not: {\n                                pattern: \":exit$\"\n                            }\n                        }\n                    },\n                    ignoreComments: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            wrongIndentation: \"Expected indentation of {{expected}} but found {{actual}}.\"\n        }\n    },\n\n    create(context) {\n        const DEFAULT_VARIABLE_INDENT = 1;\n        const DEFAULT_PARAMETER_INDENT = 1;\n        const DEFAULT_FUNCTION_BODY_INDENT = 1;\n\n        let indentType = \"space\";\n        let indentSize = 4;\n        const options = {\n            SwitchCase: 0,\n            VariableDeclarator: {\n                var: DEFAULT_VARIABLE_INDENT,\n                let: DEFAULT_VARIABLE_INDENT,\n                const: DEFAULT_VARIABLE_INDENT\n            },\n            outerIIFEBody: 1,\n            FunctionDeclaration: {\n                parameters: DEFAULT_PARAMETER_INDENT,\n                body: DEFAULT_FUNCTION_BODY_INDENT\n            },\n            FunctionExpression: {\n                parameters: DEFAULT_PARAMETER_INDENT,\n                body: DEFAULT_FUNCTION_BODY_INDENT\n            },\n            CallExpression: {\n                arguments: DEFAULT_PARAMETER_INDENT\n            },\n            MemberExpression: 1,\n            ArrayExpression: 1,\n            ObjectExpression: 1,\n            ImportDeclaration: 1,\n            flatTernaryExpressions: false,\n            ignoredNodes: [],\n            ignoreComments: false\n        };\n\n        if (context.options.length) {\n            if (context.options[0] === \"tab\") {\n                indentSize = 1;\n                indentType = \"tab\";\n            } else {\n                indentSize = context.options[0];\n                indentType = \"space\";\n            }\n\n            if (context.options[1]) {\n                Object.assign(options, context.options[1]);\n\n                if (typeof options.VariableDeclarator === \"number\" || options.VariableDeclarator === \"first\") {\n                    options.VariableDeclarator = {\n                        var: options.VariableDeclarator,\n                        let: options.VariableDeclarator,\n                        const: options.VariableDeclarator\n                    };\n                }\n            }\n        }\n\n        const sourceCode = context.getSourceCode();\n        const tokenInfo = new TokenInfo(sourceCode);\n        const offsets = new OffsetStorage(tokenInfo, indentSize, indentType === \"space\" ? \" \" : \"\\t\");\n        const parameterParens = new WeakSet();\n\n        /**\n         * Creates an error message for a line, given the expected/actual indentation.\n         * @param {int} expectedAmount The expected amount of indentation characters for this line\n         * @param {int} actualSpaces The actual number of indentation spaces that were found on this line\n         * @param {int} actualTabs The actual number of indentation tabs that were found on this line\n         * @returns {string} An error message for this line\n         */\n        function createErrorMessageData(expectedAmount, actualSpaces, actualTabs) {\n            const expectedStatement = `${expectedAmount} ${indentType}${expectedAmount === 1 ? \"\" : \"s\"}`; // e.g. \"2 tabs\"\n            const foundSpacesWord = `space${actualSpaces === 1 ? \"\" : \"s\"}`; // e.g. \"space\"\n            const foundTabsWord = `tab${actualTabs === 1 ? \"\" : \"s\"}`; // e.g. \"tabs\"\n            let foundStatement;\n\n            if (actualSpaces > 0) {\n\n                /*\n                 * Abbreviate the message if the expected indentation is also spaces.\n                 * e.g. 'Expected 4 spaces but found 2' rather than 'Expected 4 spaces but found 2 spaces'\n                 */\n                foundStatement = indentType === \"space\" ? actualSpaces : `${actualSpaces} ${foundSpacesWord}`;\n            } else if (actualTabs > 0) {\n                foundStatement = indentType === \"tab\" ? actualTabs : `${actualTabs} ${foundTabsWord}`;\n            } else {\n                foundStatement = \"0\";\n            }\n            return {\n                expected: expectedStatement,\n                actual: foundStatement\n            };\n        }\n\n        /**\n         * Reports a given indent violation\n         * @param {Token} token Token violating the indent rule\n         * @param {string} neededIndent Expected indentation string\n         * @returns {void}\n         */\n        function report(token, neededIndent) {\n            const actualIndent = Array.from(tokenInfo.getTokenIndent(token));\n            const numSpaces = actualIndent.filter(char => char === \" \").length;\n            const numTabs = actualIndent.filter(char => char === \"\\t\").length;\n\n            context.report({\n                node: token,\n                messageId: \"wrongIndentation\",\n                data: createErrorMessageData(neededIndent.length, numSpaces, numTabs),\n                loc: {\n                    start: { line: token.loc.start.line, column: 0 },\n                    end: { line: token.loc.start.line, column: token.loc.start.column }\n                },\n                fix(fixer) {\n                    const range = [token.range[0] - token.loc.start.column, token.range[0]];\n                    const newText = neededIndent;\n\n                    return fixer.replaceTextRange(range, newText);\n                }\n            });\n        }\n\n        /**\n         * Checks if a token's indentation is correct\n         * @param {Token} token Token to examine\n         * @param {string} desiredIndent Desired indentation of the string\n         * @returns {boolean} `true` if the token's indentation is correct\n         */\n        function validateTokenIndent(token, desiredIndent) {\n            const indentation = tokenInfo.getTokenIndent(token);\n\n            return indentation === desiredIndent ||\n\n                // To avoid conflicts with no-mixed-spaces-and-tabs, don't report mixed spaces and tabs.\n                indentation.includes(\" \") && indentation.includes(\"\\t\");\n        }\n\n        /**\n         * Check to see if the node is a file level IIFE\n         * @param {ASTNode} node The function node to check.\n         * @returns {boolean} True if the node is the outer IIFE\n         */\n        function isOuterIIFE(node) {\n\n            /*\n             * Verify that the node is an IIFE\n             */\n            if (!node.parent || node.parent.type !== \"CallExpression\" || node.parent.callee !== node) {\n                return false;\n            }\n\n            /*\n             * Navigate legal ancestors to determine whether this IIFE is outer.\n             * A \"legal ancestor\" is an expression or statement that causes the function to get executed immediately.\n             * For example, `!(function(){})()` is an outer IIFE even though it is preceded by a ! operator.\n             */\n            let statement = node.parent && node.parent.parent;\n\n            while (\n                statement.type === \"UnaryExpression\" && [\"!\", \"~\", \"+\", \"-\"].indexOf(statement.operator) > -1 ||\n                statement.type === \"AssignmentExpression\" ||\n                statement.type === \"LogicalExpression\" ||\n                statement.type === \"SequenceExpression\" ||\n                statement.type === \"VariableDeclarator\"\n            ) {\n                statement = statement.parent;\n            }\n\n            return (statement.type === \"ExpressionStatement\" || statement.type === \"VariableDeclaration\") && statement.parent.type === \"Program\";\n        }\n\n        /**\n         * Counts the number of linebreaks that follow the last non-whitespace character in a string\n         * @param {string} string The string to check\n         * @returns {number} The number of JavaScript linebreaks that follow the last non-whitespace character,\n         * or the total number of linebreaks if the string is all whitespace.\n         */\n        function countTrailingLinebreaks(string) {\n            const trailingWhitespace = string.match(/\\s*$/u)[0];\n            const linebreakMatches = trailingWhitespace.match(astUtils.createGlobalLinebreakMatcher());\n\n            return linebreakMatches === null ? 0 : linebreakMatches.length;\n        }\n\n        /**\n         * Check indentation for lists of elements (arrays, objects, function params)\n         * @param {ASTNode[]} elements List of elements that should be offset\n         * @param {Token} startToken The start token of the list that element should be aligned against, e.g. '['\n         * @param {Token} endToken The end token of the list, e.g. ']'\n         * @param {number|string} offset The amount that the elements should be offset\n         * @returns {void}\n         */\n        function addElementListIndent(elements, startToken, endToken, offset) {\n\n            /**\n             * Gets the first token of a given element, including surrounding parentheses.\n             * @param {ASTNode} element A node in the `elements` list\n             * @returns {Token} The first token of this element\n             */\n            function getFirstToken(element) {\n                let token = sourceCode.getTokenBefore(element);\n\n                while (astUtils.isOpeningParenToken(token) && token !== startToken) {\n                    token = sourceCode.getTokenBefore(token);\n                }\n                return sourceCode.getTokenAfter(token);\n            }\n\n            // Run through all the tokens in the list, and offset them by one indent level (mainly for comments, other things will end up overridden)\n            offsets.setDesiredOffsets(\n                [startToken.range[1], endToken.range[0]],\n                startToken,\n                typeof offset === \"number\" ? offset : 1\n            );\n            offsets.setDesiredOffset(endToken, startToken, 0);\n\n            // If the preference is \"first\" but there is no first element (e.g. sparse arrays w/ empty first slot), fall back to 1 level.\n            if (offset === \"first\" && elements.length && !elements[0]) {\n                return;\n            }\n            elements.forEach((element, index) => {\n                if (!element) {\n\n                    // Skip holes in arrays\n                    return;\n                }\n                if (offset === \"off\") {\n\n                    // Ignore the first token of every element if the \"off\" option is used\n                    offsets.ignoreToken(getFirstToken(element));\n                }\n\n                // Offset the following elements correctly relative to the first element\n                if (index === 0) {\n                    return;\n                }\n                if (offset === \"first\" && tokenInfo.isFirstTokenOfLine(getFirstToken(element))) {\n                    offsets.matchOffsetOf(getFirstToken(elements[0]), getFirstToken(element));\n                } else {\n                    const previousElement = elements[index - 1];\n                    const firstTokenOfPreviousElement = previousElement && getFirstToken(previousElement);\n                    const previousElementLastToken = previousElement && sourceCode.getLastToken(previousElement);\n\n                    if (\n                        previousElement &&\n                        previousElementLastToken.loc.end.line - countTrailingLinebreaks(previousElementLastToken.value) > startToken.loc.end.line\n                    ) {\n                        offsets.setDesiredOffsets(\n                            [previousElement.range[1], element.range[1]],\n                            firstTokenOfPreviousElement,\n                            0\n                        );\n                    }\n                }\n            });\n        }\n\n        /**\n         * Check and decide whether to check for indentation for blockless nodes\n         * Scenarios are for or while statements without braces around them\n         * @param {ASTNode} node node to examine\n         * @returns {void}\n         */\n        function addBlocklessNodeIndent(node) {\n            if (node.type !== \"BlockStatement\") {\n                const lastParentToken = sourceCode.getTokenBefore(node, astUtils.isNotOpeningParenToken);\n\n                let firstBodyToken = sourceCode.getFirstToken(node);\n                let lastBodyToken = sourceCode.getLastToken(node);\n\n                while (\n                    astUtils.isOpeningParenToken(sourceCode.getTokenBefore(firstBodyToken)) &&\n                    astUtils.isClosingParenToken(sourceCode.getTokenAfter(lastBodyToken))\n                ) {\n                    firstBodyToken = sourceCode.getTokenBefore(firstBodyToken);\n                    lastBodyToken = sourceCode.getTokenAfter(lastBodyToken);\n                }\n\n                offsets.setDesiredOffsets([firstBodyToken.range[0], lastBodyToken.range[1]], lastParentToken, 1);\n\n                /*\n                 * For blockless nodes with semicolon-first style, don't indent the semicolon.\n                 * e.g.\n                 * if (foo) bar()\n                 * ; [1, 2, 3].map(foo)\n                 */\n                const lastToken = sourceCode.getLastToken(node);\n\n                if (node.type !== \"EmptyStatement\" && astUtils.isSemicolonToken(lastToken)) {\n                    offsets.setDesiredOffset(lastToken, lastParentToken, 0);\n                }\n            }\n        }\n\n        /**\n         * Checks the indentation for nodes that are like function calls (`CallExpression` and `NewExpression`)\n         * @param {ASTNode} node A CallExpression or NewExpression node\n         * @returns {void}\n         */\n        function addFunctionCallIndent(node) {\n            let openingParen;\n\n            if (node.arguments.length) {\n                openingParen = sourceCode.getFirstTokenBetween(node.callee, node.arguments[0], astUtils.isOpeningParenToken);\n            } else {\n                openingParen = sourceCode.getLastToken(node, 1);\n            }\n            const closingParen = sourceCode.getLastToken(node);\n\n            parameterParens.add(openingParen);\n            parameterParens.add(closingParen);\n\n            /*\n             * If `?.` token exists, set desired offset for that.\n             * This logic is copied from `MemberExpression`'s.\n             */\n            if (node.optional) {\n                const dotToken = sourceCode.getTokenAfter(node.callee, astUtils.isQuestionDotToken);\n                const calleeParenCount = sourceCode.getTokensBetween(node.callee, dotToken, { filter: astUtils.isClosingParenToken }).length;\n                const firstTokenOfCallee = calleeParenCount\n                    ? sourceCode.getTokenBefore(node.callee, { skip: calleeParenCount - 1 })\n                    : sourceCode.getFirstToken(node.callee);\n                const lastTokenOfCallee = sourceCode.getTokenBefore(dotToken);\n                const offsetBase = lastTokenOfCallee.loc.end.line === openingParen.loc.start.line\n                    ? lastTokenOfCallee\n                    : firstTokenOfCallee;\n\n                offsets.setDesiredOffset(dotToken, offsetBase, 1);\n            }\n\n            const offsetAfterToken = node.callee.type === \"TaggedTemplateExpression\" ? sourceCode.getFirstToken(node.callee.quasi) : openingParen;\n            const offsetToken = sourceCode.getTokenBefore(offsetAfterToken);\n\n            offsets.setDesiredOffset(openingParen, offsetToken, 0);\n\n            addElementListIndent(node.arguments, openingParen, closingParen, options.CallExpression.arguments);\n        }\n\n        /**\n         * Checks the indentation of parenthesized values, given a list of tokens in a program\n         * @param {Token[]} tokens A list of tokens\n         * @returns {void}\n         */\n        function addParensIndent(tokens) {\n            const parenStack = [];\n            const parenPairs = [];\n\n            tokens.forEach(nextToken => {\n\n                // Accumulate a list of parenthesis pairs\n                if (astUtils.isOpeningParenToken(nextToken)) {\n                    parenStack.push(nextToken);\n                } else if (astUtils.isClosingParenToken(nextToken)) {\n                    parenPairs.unshift({ left: parenStack.pop(), right: nextToken });\n                }\n            });\n\n            parenPairs.forEach(pair => {\n                const leftParen = pair.left;\n                const rightParen = pair.right;\n\n                // We only want to handle parens around expressions, so exclude parentheses that are in function parameters and function call arguments.\n                if (!parameterParens.has(leftParen) && !parameterParens.has(rightParen)) {\n                    const parenthesizedTokens = new Set(sourceCode.getTokensBetween(leftParen, rightParen));\n\n                    parenthesizedTokens.forEach(token => {\n                        if (!parenthesizedTokens.has(offsets.getFirstDependency(token))) {\n                            offsets.setDesiredOffset(token, leftParen, 1);\n                        }\n                    });\n                }\n\n                offsets.setDesiredOffset(rightParen, leftParen, 0);\n            });\n        }\n\n        /**\n         * Ignore all tokens within an unknown node whose offset do not depend\n         * on another token's offset within the unknown node\n         * @param {ASTNode} node Unknown Node\n         * @returns {void}\n         */\n        function ignoreNode(node) {\n            const unknownNodeTokens = new Set(sourceCode.getTokens(node, { includeComments: true }));\n\n            unknownNodeTokens.forEach(token => {\n                if (!unknownNodeTokens.has(offsets.getFirstDependency(token))) {\n                    const firstTokenOfLine = tokenInfo.getFirstTokenOfLine(token);\n\n                    if (token === firstTokenOfLine) {\n                        offsets.ignoreToken(token);\n                    } else {\n                        offsets.setDesiredOffset(token, firstTokenOfLine, 0);\n                    }\n                }\n            });\n        }\n\n        /**\n         * Check whether the given token is on the first line of a statement.\n         * @param {Token} token The token to check.\n         * @param {ASTNode} leafNode The expression node that the token belongs directly.\n         * @returns {boolean} `true` if the token is on the first line of a statement.\n         */\n        function isOnFirstLineOfStatement(token, leafNode) {\n            let node = leafNode;\n\n            while (node.parent && !node.parent.type.endsWith(\"Statement\") && !node.parent.type.endsWith(\"Declaration\")) {\n                node = node.parent;\n            }\n            node = node.parent;\n\n            return !node || node.loc.start.line === token.loc.start.line;\n        }\n\n        /**\n         * Check whether there are any blank (whitespace-only) lines between\n         * two tokens on separate lines.\n         * @param {Token} firstToken The first token.\n         * @param {Token} secondToken The second token.\n         * @returns {boolean} `true` if the tokens are on separate lines and\n         *   there exists a blank line between them, `false` otherwise.\n         */\n        function hasBlankLinesBetween(firstToken, secondToken) {\n            const firstTokenLine = firstToken.loc.end.line;\n            const secondTokenLine = secondToken.loc.start.line;\n\n            if (firstTokenLine === secondTokenLine || firstTokenLine === secondTokenLine - 1) {\n                return false;\n            }\n\n            for (let line = firstTokenLine + 1; line < secondTokenLine; ++line) {\n                if (!tokenInfo.firstTokensByLineNumber.has(line)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        const ignoredNodeFirstTokens = new Set();\n\n        const baseOffsetListeners = {\n            \"ArrayExpression, ArrayPattern\"(node) {\n                const openingBracket = sourceCode.getFirstToken(node);\n                const closingBracket = sourceCode.getTokenAfter([...node.elements].reverse().find(_ => _) || openingBracket, astUtils.isClosingBracketToken);\n\n                addElementListIndent(node.elements, openingBracket, closingBracket, options.ArrayExpression);\n            },\n\n            \"ObjectExpression, ObjectPattern\"(node) {\n                const openingCurly = sourceCode.getFirstToken(node);\n                const closingCurly = sourceCode.getTokenAfter(\n                    node.properties.length ? node.properties[node.properties.length - 1] : openingCurly,\n                    astUtils.isClosingBraceToken\n                );\n\n                addElementListIndent(node.properties, openingCurly, closingCurly, options.ObjectExpression);\n            },\n\n            ArrowFunctionExpression(node) {\n                const maybeOpeningParen = sourceCode.getFirstToken(node, { skip: node.async ? 1 : 0 });\n\n                if (astUtils.isOpeningParenToken(maybeOpeningParen)) {\n                    const openingParen = maybeOpeningParen;\n                    const closingParen = sourceCode.getTokenBefore(node.body, astUtils.isClosingParenToken);\n\n                    parameterParens.add(openingParen);\n                    parameterParens.add(closingParen);\n                    addElementListIndent(node.params, openingParen, closingParen, options.FunctionExpression.parameters);\n                }\n\n                addBlocklessNodeIndent(node.body);\n            },\n\n            AssignmentExpression(node) {\n                const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n\n                offsets.setDesiredOffsets([operator.range[0], node.range[1]], sourceCode.getLastToken(node.left), 1);\n                offsets.ignoreToken(operator);\n                offsets.ignoreToken(sourceCode.getTokenAfter(operator));\n            },\n\n            \"BinaryExpression, LogicalExpression\"(node) {\n                const operator = sourceCode.getFirstTokenBetween(node.left, node.right, token => token.value === node.operator);\n\n                /*\n                 * For backwards compatibility, don't check BinaryExpression indents, e.g.\n                 * var foo = bar &&\n                 *                   baz;\n                 */\n\n                const tokenAfterOperator = sourceCode.getTokenAfter(operator);\n\n                offsets.ignoreToken(operator);\n                offsets.ignoreToken(tokenAfterOperator);\n                offsets.setDesiredOffset(tokenAfterOperator, operator, 0);\n            },\n\n            \"BlockStatement, ClassBody\"(node) {\n                let blockIndentLevel;\n\n                if (node.parent && isOuterIIFE(node.parent)) {\n                    blockIndentLevel = options.outerIIFEBody;\n                } else if (node.parent && (node.parent.type === \"FunctionExpression\" || node.parent.type === \"ArrowFunctionExpression\")) {\n                    blockIndentLevel = options.FunctionExpression.body;\n                } else if (node.parent && node.parent.type === \"FunctionDeclaration\") {\n                    blockIndentLevel = options.FunctionDeclaration.body;\n                } else {\n                    blockIndentLevel = 1;\n                }\n\n                /*\n                 * For blocks that aren't lone statements, ensure that the opening curly brace\n                 * is aligned with the parent.\n                 */\n                if (!astUtils.STATEMENT_LIST_PARENTS.has(node.parent.type)) {\n                    offsets.setDesiredOffset(sourceCode.getFirstToken(node), sourceCode.getFirstToken(node.parent), 0);\n                }\n\n                addElementListIndent(node.body, sourceCode.getFirstToken(node), sourceCode.getLastToken(node), blockIndentLevel);\n            },\n\n            CallExpression: addFunctionCallIndent,\n\n            \"ClassDeclaration[superClass], ClassExpression[superClass]\"(node) {\n                const classToken = sourceCode.getFirstToken(node);\n                const extendsToken = sourceCode.getTokenBefore(node.superClass, astUtils.isNotOpeningParenToken);\n\n                offsets.setDesiredOffsets([extendsToken.range[0], node.body.range[0]], classToken, 1);\n            },\n\n            ConditionalExpression(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n\n                // `flatTernaryExpressions` option is for the following style:\n                // var a =\n                //     foo > 0 ? bar :\n                //     foo < 0 ? baz :\n                //     /*else*/ qiz ;\n                if (!options.flatTernaryExpressions ||\n                    !astUtils.isTokenOnSameLine(node.test, node.consequent) ||\n                    isOnFirstLineOfStatement(firstToken, node)\n                ) {\n                    const questionMarkToken = sourceCode.getFirstTokenBetween(node.test, node.consequent, token => token.type === \"Punctuator\" && token.value === \"?\");\n                    const colonToken = sourceCode.getFirstTokenBetween(node.consequent, node.alternate, token => token.type === \"Punctuator\" && token.value === \":\");\n\n                    const firstConsequentToken = sourceCode.getTokenAfter(questionMarkToken);\n                    const lastConsequentToken = sourceCode.getTokenBefore(colonToken);\n                    const firstAlternateToken = sourceCode.getTokenAfter(colonToken);\n\n                    offsets.setDesiredOffset(questionMarkToken, firstToken, 1);\n                    offsets.setDesiredOffset(colonToken, firstToken, 1);\n\n                    offsets.setDesiredOffset(firstConsequentToken, firstToken, firstConsequentToken.type === \"Punctuator\" &&\n                        options.offsetTernaryExpressions ? 2 : 1);\n\n                    /*\n                     * The alternate and the consequent should usually have the same indentation.\n                     * If they share part of a line, align the alternate against the first token of the consequent.\n                     * This allows the alternate to be indented correctly in cases like this:\n                     * foo ? (\n                     *   bar\n                     * ) : ( // this '(' is aligned with the '(' above, so it's considered to be aligned with `foo`\n                     *   baz // as a result, `baz` is offset by 1 rather than 2\n                     * )\n                     */\n                    if (lastConsequentToken.loc.end.line === firstAlternateToken.loc.start.line) {\n                        offsets.setDesiredOffset(firstAlternateToken, firstConsequentToken, 0);\n                    } else {\n\n                        /**\n                         * If the alternate and consequent do not share part of a line, offset the alternate from the first\n                         * token of the conditional expression. For example:\n                         * foo ? bar\n                         *   : baz\n                         *\n                         * If `baz` were aligned with `bar` rather than being offset by 1 from `foo`, `baz` would end up\n                         * having no expected indentation.\n                         */\n                        offsets.setDesiredOffset(firstAlternateToken, firstToken, firstAlternateToken.type === \"Punctuator\" &&\n                            options.offsetTernaryExpressions ? 2 : 1);\n                    }\n                }\n            },\n\n            \"DoWhileStatement, WhileStatement, ForInStatement, ForOfStatement\": node => addBlocklessNodeIndent(node.body),\n\n            ExportNamedDeclaration(node) {\n                if (node.declaration === null) {\n                    const closingCurly = sourceCode.getLastToken(node, astUtils.isClosingBraceToken);\n\n                    // Indent the specifiers in `export {foo, bar, baz}`\n                    addElementListIndent(node.specifiers, sourceCode.getFirstToken(node, { skip: 1 }), closingCurly, 1);\n\n                    if (node.source) {\n\n                        // Indent everything after and including the `from` token in `export {foo, bar, baz} from 'qux'`\n                        offsets.setDesiredOffsets([closingCurly.range[1], node.range[1]], sourceCode.getFirstToken(node), 1);\n                    }\n                }\n            },\n\n            ForStatement(node) {\n                const forOpeningParen = sourceCode.getFirstToken(node, 1);\n\n                if (node.init) {\n                    offsets.setDesiredOffsets(node.init.range, forOpeningParen, 1);\n                }\n                if (node.test) {\n                    offsets.setDesiredOffsets(node.test.range, forOpeningParen, 1);\n                }\n                if (node.update) {\n                    offsets.setDesiredOffsets(node.update.range, forOpeningParen, 1);\n                }\n                addBlocklessNodeIndent(node.body);\n            },\n\n            \"FunctionDeclaration, FunctionExpression\"(node) {\n                const closingParen = sourceCode.getTokenBefore(node.body);\n                const openingParen = sourceCode.getTokenBefore(node.params.length ? node.params[0] : closingParen);\n\n                parameterParens.add(openingParen);\n                parameterParens.add(closingParen);\n                addElementListIndent(node.params, openingParen, closingParen, options[node.type].parameters);\n            },\n\n            IfStatement(node) {\n                addBlocklessNodeIndent(node.consequent);\n                if (node.alternate && node.alternate.type !== \"IfStatement\") {\n                    addBlocklessNodeIndent(node.alternate);\n                }\n            },\n\n            ImportDeclaration(node) {\n                if (node.specifiers.some(specifier => specifier.type === \"ImportSpecifier\")) {\n                    const openingCurly = sourceCode.getFirstToken(node, astUtils.isOpeningBraceToken);\n                    const closingCurly = sourceCode.getLastToken(node, astUtils.isClosingBraceToken);\n\n                    addElementListIndent(node.specifiers.filter(specifier => specifier.type === \"ImportSpecifier\"), openingCurly, closingCurly, options.ImportDeclaration);\n                }\n\n                const fromToken = sourceCode.getLastToken(node, token => token.type === \"Identifier\" && token.value === \"from\");\n                const sourceToken = sourceCode.getLastToken(node, token => token.type === \"String\");\n                const semiToken = sourceCode.getLastToken(node, token => token.type === \"Punctuator\" && token.value === \";\");\n\n                if (fromToken) {\n                    const end = semiToken && semiToken.range[1] === sourceToken.range[1] ? node.range[1] : sourceToken.range[1];\n\n                    offsets.setDesiredOffsets([fromToken.range[0], end], sourceCode.getFirstToken(node), 1);\n                }\n            },\n\n            ImportExpression(node) {\n                const openingParen = sourceCode.getFirstToken(node, 1);\n                const closingParen = sourceCode.getLastToken(node);\n\n                parameterParens.add(openingParen);\n                parameterParens.add(closingParen);\n                offsets.setDesiredOffset(openingParen, sourceCode.getTokenBefore(openingParen), 0);\n\n                addElementListIndent([node.source], openingParen, closingParen, options.CallExpression.arguments);\n            },\n\n            \"MemberExpression, JSXMemberExpression, MetaProperty\"(node) {\n                const object = node.type === \"MetaProperty\" ? node.meta : node.object;\n                const firstNonObjectToken = sourceCode.getFirstTokenBetween(object, node.property, astUtils.isNotClosingParenToken);\n                const secondNonObjectToken = sourceCode.getTokenAfter(firstNonObjectToken);\n\n                const objectParenCount = sourceCode.getTokensBetween(object, node.property, { filter: astUtils.isClosingParenToken }).length;\n                const firstObjectToken = objectParenCount\n                    ? sourceCode.getTokenBefore(object, { skip: objectParenCount - 1 })\n                    : sourceCode.getFirstToken(object);\n                const lastObjectToken = sourceCode.getTokenBefore(firstNonObjectToken);\n                const firstPropertyToken = node.computed ? firstNonObjectToken : secondNonObjectToken;\n\n                if (node.computed) {\n\n                    // For computed MemberExpressions, match the closing bracket with the opening bracket.\n                    offsets.setDesiredOffset(sourceCode.getLastToken(node), firstNonObjectToken, 0);\n                    offsets.setDesiredOffsets(node.property.range, firstNonObjectToken, 1);\n                }\n\n                /*\n                 * If the object ends on the same line that the property starts, match against the last token\n                 * of the object, to ensure that the MemberExpression is not indented.\n                 *\n                 * Otherwise, match against the first token of the object, e.g.\n                 * foo\n                 *   .bar\n                 *   .baz // <-- offset by 1 from `foo`\n                 */\n                const offsetBase = lastObjectToken.loc.end.line === firstPropertyToken.loc.start.line\n                    ? lastObjectToken\n                    : firstObjectToken;\n\n                if (typeof options.MemberExpression === \"number\") {\n\n                    // Match the dot (for non-computed properties) or the opening bracket (for computed properties) against the object.\n                    offsets.setDesiredOffset(firstNonObjectToken, offsetBase, options.MemberExpression);\n\n                    /*\n                     * For computed MemberExpressions, match the first token of the property against the opening bracket.\n                     * Otherwise, match the first token of the property against the object.\n                     */\n                    offsets.setDesiredOffset(secondNonObjectToken, node.computed ? firstNonObjectToken : offsetBase, options.MemberExpression);\n                } else {\n\n                    // If the MemberExpression option is off, ignore the dot and the first token of the property.\n                    offsets.ignoreToken(firstNonObjectToken);\n                    offsets.ignoreToken(secondNonObjectToken);\n\n                    // To ignore the property indentation, ensure that the property tokens depend on the ignored tokens.\n                    offsets.setDesiredOffset(firstNonObjectToken, offsetBase, 0);\n                    offsets.setDesiredOffset(secondNonObjectToken, firstNonObjectToken, 0);\n                }\n            },\n\n            NewExpression(node) {\n\n                // Only indent the arguments if the NewExpression has parens (e.g. `new Foo(bar)` or `new Foo()`, but not `new Foo`\n                if (node.arguments.length > 0 ||\n                        astUtils.isClosingParenToken(sourceCode.getLastToken(node)) &&\n                        astUtils.isOpeningParenToken(sourceCode.getLastToken(node, 1))) {\n                    addFunctionCallIndent(node);\n                }\n            },\n\n            Property(node) {\n                if (!node.shorthand && !node.method && node.kind === \"init\") {\n                    const colon = sourceCode.getFirstTokenBetween(node.key, node.value, astUtils.isColonToken);\n\n                    offsets.ignoreToken(sourceCode.getTokenAfter(colon));\n                }\n            },\n\n            SwitchStatement(node) {\n                const openingCurly = sourceCode.getTokenAfter(node.discriminant, astUtils.isOpeningBraceToken);\n                const closingCurly = sourceCode.getLastToken(node);\n\n                offsets.setDesiredOffsets([openingCurly.range[1], closingCurly.range[0]], openingCurly, options.SwitchCase);\n\n                if (node.cases.length) {\n                    sourceCode.getTokensBetween(\n                        node.cases[node.cases.length - 1],\n                        closingCurly,\n                        { includeComments: true, filter: astUtils.isCommentToken }\n                    ).forEach(token => offsets.ignoreToken(token));\n                }\n            },\n\n            SwitchCase(node) {\n                if (!(node.consequent.length === 1 && node.consequent[0].type === \"BlockStatement\")) {\n                    const caseKeyword = sourceCode.getFirstToken(node);\n                    const tokenAfterCurrentCase = sourceCode.getTokenAfter(node);\n\n                    offsets.setDesiredOffsets([caseKeyword.range[1], tokenAfterCurrentCase.range[0]], caseKeyword, 1);\n                }\n            },\n\n            TemplateLiteral(node) {\n                node.expressions.forEach((expression, index) => {\n                    const previousQuasi = node.quasis[index];\n                    const nextQuasi = node.quasis[index + 1];\n                    const tokenToAlignFrom = previousQuasi.loc.start.line === previousQuasi.loc.end.line\n                        ? sourceCode.getFirstToken(previousQuasi)\n                        : null;\n\n                    offsets.setDesiredOffsets([previousQuasi.range[1], nextQuasi.range[0]], tokenToAlignFrom, 1);\n                    offsets.setDesiredOffset(sourceCode.getFirstToken(nextQuasi), tokenToAlignFrom, 0);\n                });\n            },\n\n            VariableDeclaration(node) {\n                let variableIndent = Object.prototype.hasOwnProperty.call(options.VariableDeclarator, node.kind)\n                    ? options.VariableDeclarator[node.kind]\n                    : DEFAULT_VARIABLE_INDENT;\n\n                const firstToken = sourceCode.getFirstToken(node),\n                    lastToken = sourceCode.getLastToken(node);\n\n                if (options.VariableDeclarator[node.kind] === \"first\") {\n                    if (node.declarations.length > 1) {\n                        addElementListIndent(\n                            node.declarations,\n                            firstToken,\n                            lastToken,\n                            \"first\"\n                        );\n                        return;\n                    }\n\n                    variableIndent = DEFAULT_VARIABLE_INDENT;\n                }\n\n                if (node.declarations[node.declarations.length - 1].loc.start.line > node.loc.start.line) {\n\n                    /*\n                     * VariableDeclarator indentation is a bit different from other forms of indentation, in that the\n                     * indentation of an opening bracket sometimes won't match that of a closing bracket. For example,\n                     * the following indentations are correct:\n                     *\n                     * var foo = {\n                     *   ok: true\n                     * };\n                     *\n                     * var foo = {\n                     *     ok: true,\n                     *   },\n                     *   bar = 1;\n                     *\n                     * Account for when exiting the AST (after indentations have already been set for the nodes in\n                     * the declaration) by manually increasing the indentation level of the tokens in this declarator\n                     * on the same line as the start of the declaration, provided that there are declarators that\n                     * follow this one.\n                     */\n                    offsets.setDesiredOffsets(node.range, firstToken, variableIndent, true);\n                } else {\n                    offsets.setDesiredOffsets(node.range, firstToken, variableIndent);\n                }\n\n                if (astUtils.isSemicolonToken(lastToken)) {\n                    offsets.ignoreToken(lastToken);\n                }\n            },\n\n            VariableDeclarator(node) {\n                if (node.init) {\n                    const equalOperator = sourceCode.getTokenBefore(node.init, astUtils.isNotOpeningParenToken);\n                    const tokenAfterOperator = sourceCode.getTokenAfter(equalOperator);\n\n                    offsets.ignoreToken(equalOperator);\n                    offsets.ignoreToken(tokenAfterOperator);\n                    offsets.setDesiredOffsets([tokenAfterOperator.range[0], node.range[1]], equalOperator, 1);\n                    offsets.setDesiredOffset(equalOperator, sourceCode.getLastToken(node.id), 0);\n                }\n            },\n\n            \"JSXAttribute[value]\"(node) {\n                const equalsToken = sourceCode.getFirstTokenBetween(node.name, node.value, token => token.type === \"Punctuator\" && token.value === \"=\");\n\n                offsets.setDesiredOffsets([equalsToken.range[0], node.value.range[1]], sourceCode.getFirstToken(node.name), 1);\n            },\n\n            JSXElement(node) {\n                if (node.closingElement) {\n                    addElementListIndent(node.children, sourceCode.getFirstToken(node.openingElement), sourceCode.getFirstToken(node.closingElement), 1);\n                }\n            },\n\n            JSXOpeningElement(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n                let closingToken;\n\n                if (node.selfClosing) {\n                    closingToken = sourceCode.getLastToken(node, { skip: 1 });\n                    offsets.setDesiredOffset(sourceCode.getLastToken(node), closingToken, 0);\n                } else {\n                    closingToken = sourceCode.getLastToken(node);\n                }\n                offsets.setDesiredOffsets(node.name.range, sourceCode.getFirstToken(node));\n                addElementListIndent(node.attributes, firstToken, closingToken, 1);\n            },\n\n            JSXClosingElement(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n\n                offsets.setDesiredOffsets(node.name.range, firstToken, 1);\n            },\n\n            JSXFragment(node) {\n                const firstOpeningToken = sourceCode.getFirstToken(node.openingFragment);\n                const firstClosingToken = sourceCode.getFirstToken(node.closingFragment);\n\n                addElementListIndent(node.children, firstOpeningToken, firstClosingToken, 1);\n            },\n\n            JSXOpeningFragment(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n                const closingToken = sourceCode.getLastToken(node);\n\n                offsets.setDesiredOffsets(node.range, firstToken, 1);\n                offsets.matchOffsetOf(firstToken, closingToken);\n            },\n\n            JSXClosingFragment(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n                const slashToken = sourceCode.getLastToken(node, { skip: 1 });\n                const closingToken = sourceCode.getLastToken(node);\n                const tokenToMatch = astUtils.isTokenOnSameLine(slashToken, closingToken) ? slashToken : closingToken;\n\n                offsets.setDesiredOffsets(node.range, firstToken, 1);\n                offsets.matchOffsetOf(firstToken, tokenToMatch);\n            },\n\n            JSXExpressionContainer(node) {\n                const openingCurly = sourceCode.getFirstToken(node);\n                const closingCurly = sourceCode.getLastToken(node);\n\n                offsets.setDesiredOffsets(\n                    [openingCurly.range[1], closingCurly.range[0]],\n                    openingCurly,\n                    1\n                );\n            },\n\n            JSXSpreadAttribute(node) {\n                const openingCurly = sourceCode.getFirstToken(node);\n                const closingCurly = sourceCode.getLastToken(node);\n\n                offsets.setDesiredOffsets(\n                    [openingCurly.range[1], closingCurly.range[0]],\n                    openingCurly,\n                    1\n                );\n            },\n\n            \"*\"(node) {\n                const firstToken = sourceCode.getFirstToken(node);\n\n                // Ensure that the children of every node are indented at least as much as the first token.\n                if (firstToken && !ignoredNodeFirstTokens.has(firstToken)) {\n                    offsets.setDesiredOffsets(node.range, firstToken, 0);\n                }\n            }\n        };\n\n        const listenerCallQueue = [];\n\n        /*\n         * To ignore the indentation of a node:\n         * 1. Don't call the node's listener when entering it (if it has a listener)\n         * 2. Don't set any offsets against the first token of the node.\n         * 3. Call `ignoreNode` on the node sometime after exiting it and before validating offsets.\n         */\n        const offsetListeners = {};\n\n        for (const [selector, listener] of Object.entries(baseOffsetListeners)) {\n\n            /*\n             * Offset listener calls are deferred until traversal is finished, and are called as\n             * part of the final `Program:exit` listener. This is necessary because a node might\n             * be matched by multiple selectors.\n             *\n             * Example: Suppose there is an offset listener for `Identifier`, and the user has\n             * specified in configuration that `MemberExpression > Identifier` should be ignored.\n             * Due to selector specificity rules, the `Identifier` listener will get called first. However,\n             * if a given Identifier node is supposed to be ignored, then the `Identifier` offset listener\n             * should not have been called at all. Without doing extra selector matching, we don't know\n             * whether the Identifier matches the `MemberExpression > Identifier` selector until the\n             * `MemberExpression > Identifier` listener is called.\n             *\n             * To avoid this, the `Identifier` listener isn't called until traversal finishes and all\n             * ignored nodes are known.\n             */\n            offsetListeners[selector] = node => listenerCallQueue.push({ listener, node });\n        }\n\n        // For each ignored node selector, set up a listener to collect it into the `ignoredNodes` set.\n        const ignoredNodes = new Set();\n\n        /**\n         * Ignores a node\n         * @param {ASTNode} node The node to ignore\n         * @returns {void}\n         */\n        function addToIgnoredNodes(node) {\n            ignoredNodes.add(node);\n            ignoredNodeFirstTokens.add(sourceCode.getFirstToken(node));\n        }\n\n        const ignoredNodeListeners = options.ignoredNodes.reduce(\n            (listeners, ignoredSelector) => Object.assign(listeners, { [ignoredSelector]: addToIgnoredNodes }),\n            {}\n        );\n\n        /*\n         * Join the listeners, and add a listener to verify that all tokens actually have the correct indentation\n         * at the end.\n         *\n         * Using Object.assign will cause some offset listeners to be overwritten if the same selector also appears\n         * in `ignoredNodeListeners`. This isn't a problem because all of the matching nodes will be ignored,\n         * so those listeners wouldn't be called anyway.\n         */\n        return Object.assign(\n            offsetListeners,\n            ignoredNodeListeners,\n            {\n                \"*:exit\"(node) {\n\n                    // If a node's type is nonstandard, we can't tell how its children should be offset, so ignore it.\n                    if (!KNOWN_NODES.has(node.type)) {\n                        addToIgnoredNodes(node);\n                    }\n                },\n                \"Program:exit\"() {\n\n                    // If ignoreComments option is enabled, ignore all comment tokens.\n                    if (options.ignoreComments) {\n                        sourceCode.getAllComments()\n                            .forEach(comment => offsets.ignoreToken(comment));\n                    }\n\n                    // Invoke the queued offset listeners for the nodes that aren't ignored.\n                    listenerCallQueue\n                        .filter(nodeInfo => !ignoredNodes.has(nodeInfo.node))\n                        .forEach(nodeInfo => nodeInfo.listener(nodeInfo.node));\n\n                    // Update the offsets for ignored nodes to prevent their child tokens from being reported.\n                    ignoredNodes.forEach(ignoreNode);\n\n                    addParensIndent(sourceCode.ast.tokens);\n\n                    /*\n                     * Create a Map from (tokenOrComment) => (precedingToken).\n                     * This is necessary because sourceCode.getTokenBefore does not handle a comment as an argument correctly.\n                     */\n                    const precedingTokens = sourceCode.ast.comments.reduce((commentMap, comment) => {\n                        const tokenOrCommentBefore = sourceCode.getTokenBefore(comment, { includeComments: true });\n\n                        return commentMap.set(comment, commentMap.has(tokenOrCommentBefore) ? commentMap.get(tokenOrCommentBefore) : tokenOrCommentBefore);\n                    }, new WeakMap());\n\n                    sourceCode.lines.forEach((line, lineIndex) => {\n                        const lineNumber = lineIndex + 1;\n\n                        if (!tokenInfo.firstTokensByLineNumber.has(lineNumber)) {\n\n                            // Don't check indentation on blank lines\n                            return;\n                        }\n\n                        const firstTokenOfLine = tokenInfo.firstTokensByLineNumber.get(lineNumber);\n\n                        if (firstTokenOfLine.loc.start.line !== lineNumber) {\n\n                            // Don't check the indentation of multi-line tokens (e.g. template literals or block comments) twice.\n                            return;\n                        }\n\n                        if (astUtils.isCommentToken(firstTokenOfLine)) {\n                            const tokenBefore = precedingTokens.get(firstTokenOfLine);\n                            const tokenAfter = tokenBefore ? sourceCode.getTokenAfter(tokenBefore) : sourceCode.ast.tokens[0];\n                            const mayAlignWithBefore = tokenBefore && !hasBlankLinesBetween(tokenBefore, firstTokenOfLine);\n                            const mayAlignWithAfter = tokenAfter && !hasBlankLinesBetween(firstTokenOfLine, tokenAfter);\n\n                            /*\n                             * If a comment precedes a line that begins with a semicolon token, align to that token, i.e.\n                             *\n                             * let foo\n                             * // comment\n                             * ;(async () => {})()\n                             */\n                            if (tokenAfter && astUtils.isSemicolonToken(tokenAfter) && !astUtils.isTokenOnSameLine(firstTokenOfLine, tokenAfter)) {\n                                offsets.setDesiredOffset(firstTokenOfLine, tokenAfter, 0);\n                            }\n\n                            // If a comment matches the expected indentation of the token immediately before or after, don't report it.\n                            if (\n                                mayAlignWithBefore && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenBefore)) ||\n                                mayAlignWithAfter && validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(tokenAfter))\n                            ) {\n                                return;\n                            }\n                        }\n\n                        // If the token matches the expected indentation, don't report it.\n                        if (validateTokenIndent(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine))) {\n                            return;\n                        }\n\n                        // Otherwise, report the token/comment.\n                        report(firstTokenOfLine, offsets.getDesiredIndent(firstTokenOfLine));\n                    });\n                }\n            }\n        );\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}