{"ast":null,"code":"/**\n * @fileoverview A class of the code path.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst CodePathState = require(\"./code-path-state\");\n\nconst IdGenerator = require(\"./id-generator\"); //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * A code path.\n */\n\n\nclass CodePath {\n  // eslint-disable-next-line jsdoc/require-description\n\n  /**\n   * @param {string} id An identifier.\n   * @param {CodePath|null} upper The code path of the upper function scope.\n   * @param {Function} onLooped A callback function to notify looping.\n   */\n  constructor(id, upper, onLooped) {\n    /**\n     * The identifier of this code path.\n     * Rules use it to store additional information of each rule.\n     * @type {string}\n     */\n    this.id = id;\n    /**\n     * The code path of the upper function scope.\n     * @type {CodePath|null}\n     */\n\n    this.upper = upper;\n    /**\n     * The code paths of nested function scopes.\n     * @type {CodePath[]}\n     */\n\n    this.childCodePaths = []; // Initializes internal state.\n\n    Object.defineProperty(this, \"internal\", {\n      value: new CodePathState(new IdGenerator(`${id}_`), onLooped)\n    }); // Adds this into `childCodePaths` of `upper`.\n\n    if (upper) {\n      upper.childCodePaths.push(this);\n    }\n  }\n  /**\n   * Gets the state of a given code path.\n   * @param {CodePath} codePath A code path to get.\n   * @returns {CodePathState} The state of the code path.\n   */\n\n\n  static getState(codePath) {\n    return codePath.internal;\n  }\n  /**\n   * The initial code path segment.\n   * @type {CodePathSegment}\n   */\n\n\n  get initialSegment() {\n    return this.internal.initialSegment;\n  }\n  /**\n   * Final code path segments.\n   * This array is a mix of `returnedSegments` and `thrownSegments`.\n   * @type {CodePathSegment[]}\n   */\n\n\n  get finalSegments() {\n    return this.internal.finalSegments;\n  }\n  /**\n   * Final code path segments which is with `return` statements.\n   * This array contains the last path segment if it's reachable.\n   * Since the reachable last path returns `undefined`.\n   * @type {CodePathSegment[]}\n   */\n\n\n  get returnedSegments() {\n    return this.internal.returnedForkContext;\n  }\n  /**\n   * Final code path segments which is with `throw` statements.\n   * @type {CodePathSegment[]}\n   */\n\n\n  get thrownSegments() {\n    return this.internal.thrownForkContext;\n  }\n  /**\n   * Current code path segments.\n   * @type {CodePathSegment[]}\n   */\n\n\n  get currentSegments() {\n    return this.internal.currentSegments;\n  }\n  /**\n   * Traverses all segments in this code path.\n   *\n   *     codePath.traverseSegments(function(segment, controller) {\n   *         // do something.\n   *     });\n   *\n   * This method enumerates segments in order from the head.\n   *\n   * The `controller` object has two methods.\n   *\n   * - `controller.skip()` - Skip the following segments in this branch.\n   * - `controller.break()` - Skip all following segments.\n   * @param {Object} [options] Omittable.\n   * @param {CodePathSegment} [options.first] The first segment to traverse.\n   * @param {CodePathSegment} [options.last] The last segment to traverse.\n   * @param {Function} callback A callback function.\n   * @returns {void}\n   */\n\n\n  traverseSegments(options, callback) {\n    let resolvedOptions;\n    let resolvedCallback;\n\n    if (typeof options === \"function\") {\n      resolvedCallback = options;\n      resolvedOptions = {};\n    } else {\n      resolvedOptions = options || {};\n      resolvedCallback = callback;\n    }\n\n    const startSegment = resolvedOptions.first || this.internal.initialSegment;\n    const lastSegment = resolvedOptions.last;\n    let item = null;\n    let index = 0;\n    let end = 0;\n    let segment = null;\n    const visited = Object.create(null);\n    const stack = [[startSegment, 0]];\n    let skippedSegment = null;\n    let broken = false;\n    const controller = {\n      skip() {\n        if (stack.length <= 1) {\n          broken = true;\n        } else {\n          skippedSegment = stack[stack.length - 2][0];\n        }\n      },\n\n      break() {\n        broken = true;\n      }\n\n    };\n    /**\n     * Checks a given previous segment has been visited.\n     * @param {CodePathSegment} prevSegment A previous segment to check.\n     * @returns {boolean} `true` if the segment has been visited.\n     */\n\n    function isVisited(prevSegment) {\n      return visited[prevSegment.id] || segment.isLoopedPrevSegment(prevSegment);\n    }\n\n    while (stack.length > 0) {\n      item = stack[stack.length - 1];\n      segment = item[0];\n      index = item[1];\n\n      if (index === 0) {\n        // Skip if this segment has been visited already.\n        if (visited[segment.id]) {\n          stack.pop();\n          continue;\n        } // Skip if all previous segments have not been visited.\n\n\n        if (segment !== startSegment && segment.prevSegments.length > 0 && !segment.prevSegments.every(isVisited)) {\n          stack.pop();\n          continue;\n        } // Reset the flag of skipping if all branches have been skipped.\n\n\n        if (skippedSegment && segment.prevSegments.indexOf(skippedSegment) !== -1) {\n          skippedSegment = null;\n        }\n\n        visited[segment.id] = true; // Call the callback when the first time.\n\n        if (!skippedSegment) {\n          resolvedCallback.call(this, segment, controller);\n\n          if (segment === lastSegment) {\n            controller.skip();\n          }\n\n          if (broken) {\n            break;\n          }\n        }\n      } // Update the stack.\n\n\n      end = segment.nextSegments.length - 1;\n\n      if (index < end) {\n        item[1] += 1;\n        stack.push([segment.nextSegments[index], 0]);\n      } else if (index === end) {\n        item[0] = segment.nextSegments[index];\n        item[1] = 0;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n\n}\n\nmodule.exports = CodePath;","map":{"version":3,"names":["CodePathState","require","IdGenerator","CodePath","constructor","id","upper","onLooped","childCodePaths","Object","defineProperty","value","push","getState","codePath","internal","initialSegment","finalSegments","returnedSegments","returnedForkContext","thrownSegments","thrownForkContext","currentSegments","traverseSegments","options","callback","resolvedOptions","resolvedCallback","startSegment","first","lastSegment","last","item","index","end","segment","visited","create","stack","skippedSegment","broken","controller","skip","length","break","isVisited","prevSegment","isLoopedPrevSegment","pop","prevSegments","every","indexOf","call","nextSegments","module","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/linter/code-path-analysis/code-path.js"],"sourcesContent":["/**\n * @fileoverview A class of the code path.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst CodePathState = require(\"./code-path-state\");\nconst IdGenerator = require(\"./id-generator\");\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * A code path.\n */\nclass CodePath {\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {string} id An identifier.\n     * @param {CodePath|null} upper The code path of the upper function scope.\n     * @param {Function} onLooped A callback function to notify looping.\n     */\n    constructor(id, upper, onLooped) {\n\n        /**\n         * The identifier of this code path.\n         * Rules use it to store additional information of each rule.\n         * @type {string}\n         */\n        this.id = id;\n\n        /**\n         * The code path of the upper function scope.\n         * @type {CodePath|null}\n         */\n        this.upper = upper;\n\n        /**\n         * The code paths of nested function scopes.\n         * @type {CodePath[]}\n         */\n        this.childCodePaths = [];\n\n        // Initializes internal state.\n        Object.defineProperty(\n            this,\n            \"internal\",\n            { value: new CodePathState(new IdGenerator(`${id}_`), onLooped) }\n        );\n\n        // Adds this into `childCodePaths` of `upper`.\n        if (upper) {\n            upper.childCodePaths.push(this);\n        }\n    }\n\n    /**\n     * Gets the state of a given code path.\n     * @param {CodePath} codePath A code path to get.\n     * @returns {CodePathState} The state of the code path.\n     */\n    static getState(codePath) {\n        return codePath.internal;\n    }\n\n    /**\n     * The initial code path segment.\n     * @type {CodePathSegment}\n     */\n    get initialSegment() {\n        return this.internal.initialSegment;\n    }\n\n    /**\n     * Final code path segments.\n     * This array is a mix of `returnedSegments` and `thrownSegments`.\n     * @type {CodePathSegment[]}\n     */\n    get finalSegments() {\n        return this.internal.finalSegments;\n    }\n\n    /**\n     * Final code path segments which is with `return` statements.\n     * This array contains the last path segment if it's reachable.\n     * Since the reachable last path returns `undefined`.\n     * @type {CodePathSegment[]}\n     */\n    get returnedSegments() {\n        return this.internal.returnedForkContext;\n    }\n\n    /**\n     * Final code path segments which is with `throw` statements.\n     * @type {CodePathSegment[]}\n     */\n    get thrownSegments() {\n        return this.internal.thrownForkContext;\n    }\n\n    /**\n     * Current code path segments.\n     * @type {CodePathSegment[]}\n     */\n    get currentSegments() {\n        return this.internal.currentSegments;\n    }\n\n    /**\n     * Traverses all segments in this code path.\n     *\n     *     codePath.traverseSegments(function(segment, controller) {\n     *         // do something.\n     *     });\n     *\n     * This method enumerates segments in order from the head.\n     *\n     * The `controller` object has two methods.\n     *\n     * - `controller.skip()` - Skip the following segments in this branch.\n     * - `controller.break()` - Skip all following segments.\n     * @param {Object} [options] Omittable.\n     * @param {CodePathSegment} [options.first] The first segment to traverse.\n     * @param {CodePathSegment} [options.last] The last segment to traverse.\n     * @param {Function} callback A callback function.\n     * @returns {void}\n     */\n    traverseSegments(options, callback) {\n        let resolvedOptions;\n        let resolvedCallback;\n\n        if (typeof options === \"function\") {\n            resolvedCallback = options;\n            resolvedOptions = {};\n        } else {\n            resolvedOptions = options || {};\n            resolvedCallback = callback;\n        }\n\n        const startSegment = resolvedOptions.first || this.internal.initialSegment;\n        const lastSegment = resolvedOptions.last;\n\n        let item = null;\n        let index = 0;\n        let end = 0;\n        let segment = null;\n        const visited = Object.create(null);\n        const stack = [[startSegment, 0]];\n        let skippedSegment = null;\n        let broken = false;\n        const controller = {\n            skip() {\n                if (stack.length <= 1) {\n                    broken = true;\n                } else {\n                    skippedSegment = stack[stack.length - 2][0];\n                }\n            },\n            break() {\n                broken = true;\n            }\n        };\n\n        /**\n         * Checks a given previous segment has been visited.\n         * @param {CodePathSegment} prevSegment A previous segment to check.\n         * @returns {boolean} `true` if the segment has been visited.\n         */\n        function isVisited(prevSegment) {\n            return (\n                visited[prevSegment.id] ||\n                segment.isLoopedPrevSegment(prevSegment)\n            );\n        }\n\n        while (stack.length > 0) {\n            item = stack[stack.length - 1];\n            segment = item[0];\n            index = item[1];\n\n            if (index === 0) {\n\n                // Skip if this segment has been visited already.\n                if (visited[segment.id]) {\n                    stack.pop();\n                    continue;\n                }\n\n                // Skip if all previous segments have not been visited.\n                if (segment !== startSegment &&\n                    segment.prevSegments.length > 0 &&\n                    !segment.prevSegments.every(isVisited)\n                ) {\n                    stack.pop();\n                    continue;\n                }\n\n                // Reset the flag of skipping if all branches have been skipped.\n                if (skippedSegment && segment.prevSegments.indexOf(skippedSegment) !== -1) {\n                    skippedSegment = null;\n                }\n                visited[segment.id] = true;\n\n                // Call the callback when the first time.\n                if (!skippedSegment) {\n                    resolvedCallback.call(this, segment, controller);\n                    if (segment === lastSegment) {\n                        controller.skip();\n                    }\n                    if (broken) {\n                        break;\n                    }\n                }\n            }\n\n            // Update the stack.\n            end = segment.nextSegments.length - 1;\n            if (index < end) {\n                item[1] += 1;\n                stack.push([segment.nextSegments[index], 0]);\n            } else if (index === end) {\n                item[0] = segment.nextSegments[index];\n                item[1] = 0;\n            } else {\n                stack.pop();\n            }\n        }\n    }\n}\n\nmodule.exports = CodePath;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}