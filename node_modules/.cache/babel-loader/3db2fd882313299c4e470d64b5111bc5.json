{"ast":null,"code":"/**\n * @fileoverview A rule to set the maximum number of statements in a function.\n * @author Ian Christian Myers\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst {\n  upperCaseFirst\n} = require(\"../shared/string-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce a maximum number of statements allowed in function blocks\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-statements\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"integer\",\n        minimum: 0\n      }, {\n        type: \"object\",\n        properties: {\n          maximum: {\n            type: \"integer\",\n            minimum: 0\n          },\n          max: {\n            type: \"integer\",\n            minimum: 0\n          }\n        },\n        additionalProperties: false\n      }]\n    }, {\n      type: \"object\",\n      properties: {\n        ignoreTopLevelFunctions: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      exceed: \"{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    const functionStack = [],\n          option = context.options[0],\n          ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false,\n          topLevelFunctions = [];\n    let maxStatements = 10;\n\n    if (typeof option === \"object\" && (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))) {\n      maxStatements = option.maximum || option.max;\n    } else if (typeof option === \"number\") {\n      maxStatements = option;\n    }\n    /**\n     * Reports a node if it has too many statements\n     * @param {ASTNode} node node to evaluate\n     * @param {int} count Number of statements in node\n     * @param {int} max Maximum number of statements allowed\n     * @returns {void}\n     * @private\n     */\n\n\n    function reportIfTooManyStatements(node, count, max) {\n      if (count > max) {\n        const name = upperCaseFirst(astUtils.getFunctionNameWithKind(node));\n        context.report({\n          node,\n          messageId: \"exceed\",\n          data: {\n            name,\n            count,\n            max\n          }\n        });\n      }\n    }\n    /**\n     * When parsing a new function, store it in our function stack\n     * @returns {void}\n     * @private\n     */\n\n\n    function startFunction() {\n      functionStack.push(0);\n    }\n    /**\n     * Evaluate the node at the end of function\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function endFunction(node) {\n      const count = functionStack.pop();\n\n      if (ignoreTopLevelFunctions && functionStack.length === 0) {\n        topLevelFunctions.push({\n          node,\n          count\n        });\n      } else {\n        reportIfTooManyStatements(node, count, maxStatements);\n      }\n    }\n    /**\n     * Increment the count of the functions\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function countStatements(node) {\n      functionStack[functionStack.length - 1] += node.body.length;\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      FunctionDeclaration: startFunction,\n      FunctionExpression: startFunction,\n      ArrowFunctionExpression: startFunction,\n      BlockStatement: countStatements,\n      \"FunctionDeclaration:exit\": endFunction,\n      \"FunctionExpression:exit\": endFunction,\n      \"ArrowFunctionExpression:exit\": endFunction,\n\n      \"Program:exit\"() {\n        if (topLevelFunctions.length === 1) {\n          return;\n        }\n\n        topLevelFunctions.forEach(element => {\n          const count = element.count;\n          const node = element.node;\n          reportIfTooManyStatements(node, count, maxStatements);\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","upperCaseFirst","module","exports","meta","type","docs","description","category","recommended","url","schema","oneOf","minimum","properties","maximum","max","additionalProperties","ignoreTopLevelFunctions","messages","exceed","create","context","functionStack","option","options","topLevelFunctions","maxStatements","Object","prototype","hasOwnProperty","call","reportIfTooManyStatements","node","count","name","getFunctionNameWithKind","report","messageId","data","startFunction","push","endFunction","pop","length","countStatements","body","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","BlockStatement","forEach","element"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/max-statements.js"],"sourcesContent":["/**\n * @fileoverview A rule to set the maximum number of statements in a function.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { upperCaseFirst } = require(\"../shared/string-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce a maximum number of statements allowed in function blocks\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-statements\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"integer\",\n                        minimum: 0\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            maximum: {\n                                type: \"integer\",\n                                minimum: 0\n                            },\n                            max: {\n                                type: \"integer\",\n                                minimum: 0\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    ignoreTopLevelFunctions: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            exceed: \"{{name}} has too many statements ({{count}}). Maximum allowed is {{max}}.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        const functionStack = [],\n            option = context.options[0],\n            ignoreTopLevelFunctions = context.options[1] && context.options[1].ignoreTopLevelFunctions || false,\n            topLevelFunctions = [];\n        let maxStatements = 10;\n\n        if (\n            typeof option === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(option, \"maximum\") || Object.prototype.hasOwnProperty.call(option, \"max\"))\n        ) {\n            maxStatements = option.maximum || option.max;\n        } else if (typeof option === \"number\") {\n            maxStatements = option;\n        }\n\n        /**\n         * Reports a node if it has too many statements\n         * @param {ASTNode} node node to evaluate\n         * @param {int} count Number of statements in node\n         * @param {int} max Maximum number of statements allowed\n         * @returns {void}\n         * @private\n         */\n        function reportIfTooManyStatements(node, count, max) {\n            if (count > max) {\n                const name = upperCaseFirst(astUtils.getFunctionNameWithKind(node));\n\n                context.report({\n                    node,\n                    messageId: \"exceed\",\n                    data: { name, count, max }\n                });\n            }\n        }\n\n        /**\n         * When parsing a new function, store it in our function stack\n         * @returns {void}\n         * @private\n         */\n        function startFunction() {\n            functionStack.push(0);\n        }\n\n        /**\n         * Evaluate the node at the end of function\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function endFunction(node) {\n            const count = functionStack.pop();\n\n            if (ignoreTopLevelFunctions && functionStack.length === 0) {\n                topLevelFunctions.push({ node, count });\n            } else {\n                reportIfTooManyStatements(node, count, maxStatements);\n            }\n        }\n\n        /**\n         * Increment the count of the functions\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function countStatements(node) {\n            functionStack[functionStack.length - 1] += node.body.length;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            FunctionDeclaration: startFunction,\n            FunctionExpression: startFunction,\n            ArrowFunctionExpression: startFunction,\n\n            BlockStatement: countStatements,\n\n            \"FunctionDeclaration:exit\": endFunction,\n            \"FunctionExpression:exit\": endFunction,\n            \"ArrowFunctionExpression:exit\": endFunction,\n\n            \"Program:exit\"() {\n                if (topLevelFunctions.length === 1) {\n                    return;\n                }\n\n                topLevelFunctions.forEach(element => {\n                    const count = element.count;\n                    const node = element.node;\n\n                    reportIfTooManyStatements(node, count, maxStatements);\n                });\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}