{"ast":null,"code":"/**\n * @fileoverview Rule to enforce declarations in program or function body root.\n * @author Brandon Mills\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nconst validParent = new Set([\"Program\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow variable or `function` declarations in nested blocks\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-inner-declarations\"\n    },\n    schema: [{\n      enum: [\"functions\", \"both\"]\n    }],\n    messages: {\n      moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Ensure that a given node is at a program or function body's root.\n     * @param {ASTNode} node Declaration node to check.\n     * @returns {void}\n     */\n    function check(node) {\n      const parent = node.parent;\n\n      if (parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)) {\n        return;\n      }\n\n      if (validParent.has(parent.type)) {\n        return;\n      }\n\n      const upperFunction = astUtils.getUpperFunction(parent);\n      context.report({\n        node,\n        messageId: \"moveDeclToRoot\",\n        data: {\n          type: node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\",\n          body: upperFunction === null ? \"program\" : \"function body\"\n        }\n      });\n    }\n\n    return {\n      FunctionDeclaration: check,\n\n      VariableDeclaration(node) {\n        if (context.options[0] === \"both\" && node.kind === \"var\") {\n          check(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","validParent","Set","validBlockStatementParent","module","exports","meta","type","docs","description","category","recommended","url","schema","enum","messages","moveDeclToRoot","create","context","check","node","parent","has","upperFunction","getUpperFunction","report","messageId","data","body","FunctionDeclaration","VariableDeclaration","options","kind"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-inner-declarations.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce declarations in program or function body root.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst validParent = new Set([\"Program\", \"ExportNamedDeclaration\", \"ExportDefaultDeclaration\"]);\nconst validBlockStatementParent = new Set([\"FunctionDeclaration\", \"FunctionExpression\", \"ArrowFunctionExpression\"]);\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow variable or `function` declarations in nested blocks\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-inner-declarations\"\n        },\n\n        schema: [\n            {\n                enum: [\"functions\", \"both\"]\n            }\n        ],\n\n        messages: {\n            moveDeclToRoot: \"Move {{type}} declaration to {{body}} root.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Ensure that a given node is at a program or function body's root.\n         * @param {ASTNode} node Declaration node to check.\n         * @returns {void}\n         */\n        function check(node) {\n            const parent = node.parent;\n\n            if (\n                parent.type === \"BlockStatement\" && validBlockStatementParent.has(parent.parent.type)\n            ) {\n                return;\n            }\n\n            if (validParent.has(parent.type)) {\n                return;\n            }\n\n            const upperFunction = astUtils.getUpperFunction(parent);\n\n            context.report({\n                node,\n                messageId: \"moveDeclToRoot\",\n                data: {\n                    type: (node.type === \"FunctionDeclaration\" ? \"function\" : \"variable\"),\n                    body: (upperFunction === null ? \"program\" : \"function body\")\n                }\n            });\n        }\n\n\n        return {\n\n            FunctionDeclaration: check,\n            VariableDeclaration(node) {\n                if (context.options[0] === \"both\" && node.kind === \"var\") {\n                    check(node);\n                }\n            }\n\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,CAAQ,CAAC,SAAD,EAAY,wBAAZ,EAAsC,0BAAtC,CAAR,CAApB;AACA,MAAMC,yBAAyB,GAAG,IAAID,GAAJ,CAAQ,CAAC,qBAAD,EAAwB,oBAAxB,EAA8C,yBAA9C,CAAR,CAAlC;AAEAE,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,+DADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,WAAD,EAAc,MAAd;IADV,CADI,CAVN;IAgBFC,QAAQ,EAAE;MACNC,cAAc,EAAE;IADV;EAhBR,CADO;;EAsBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,KAAT,CAAeC,IAAf,EAAqB;MACjB,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;;MAEA,IACIA,MAAM,CAACd,IAAP,KAAgB,gBAAhB,IAAoCJ,yBAAyB,CAACmB,GAA1B,CAA8BD,MAAM,CAACA,MAAP,CAAcd,IAA5C,CADxC,EAEE;QACE;MACH;;MAED,IAAIN,WAAW,CAACqB,GAAZ,CAAgBD,MAAM,CAACd,IAAvB,CAAJ,EAAkC;QAC9B;MACH;;MAED,MAAMgB,aAAa,GAAGxB,QAAQ,CAACyB,gBAAT,CAA0BH,MAA1B,CAAtB;MAEAH,OAAO,CAACO,MAAR,CAAe;QACXL,IADW;QAEXM,SAAS,EAAE,gBAFA;QAGXC,IAAI,EAAE;UACFpB,IAAI,EAAGa,IAAI,CAACb,IAAL,KAAc,qBAAd,GAAsC,UAAtC,GAAmD,UADxD;UAEFqB,IAAI,EAAGL,aAAa,KAAK,IAAlB,GAAyB,SAAzB,GAAqC;QAF1C;MAHK,CAAf;IAQH;;IAGD,OAAO;MAEHM,mBAAmB,EAAEV,KAFlB;;MAGHW,mBAAmB,CAACV,IAAD,EAAO;QACtB,IAAIF,OAAO,CAACa,OAAR,CAAgB,CAAhB,MAAuB,MAAvB,IAAiCX,IAAI,CAACY,IAAL,KAAc,KAAnD,EAA0D;UACtDb,KAAK,CAACC,IAAD,CAAL;QACH;MACJ;;IAPE,CAAP;EAWH;;AAlEY,CAAjB"},"metadata":{},"sourceType":"script"}