{"ast":null,"code":"/**\n * @fileoverview Validates spacing before and after semicolon\n * @author Mathias Schreck\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing before and after semicolons\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/semi-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        before: {\n          type: \"boolean\",\n          default: false\n        },\n        after: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedWhitespaceBefore: \"Unexpected whitespace before semicolon.\",\n      unexpectedWhitespaceAfter: \"Unexpected whitespace after semicolon.\",\n      missingWhitespaceBefore: \"Missing whitespace before semicolon.\",\n      missingWhitespaceAfter: \"Missing whitespace after semicolon.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0],\n          sourceCode = context.getSourceCode();\n    let requireSpaceBefore = false,\n        requireSpaceAfter = true;\n\n    if (typeof config === \"object\") {\n      requireSpaceBefore = config.before;\n      requireSpaceAfter = config.after;\n    }\n    /**\n     * Checks if a given token has leading whitespace.\n     * @param {Object} token The token to check.\n     * @returns {boolean} True if the given token has leading space, false if not.\n     */\n\n\n    function hasLeadingSpace(token) {\n      const tokenBefore = sourceCode.getTokenBefore(token);\n      return tokenBefore && astUtils.isTokenOnSameLine(tokenBefore, token) && sourceCode.isSpaceBetweenTokens(tokenBefore, token);\n    }\n    /**\n     * Checks if a given token has trailing whitespace.\n     * @param {Object} token The token to check.\n     * @returns {boolean} True if the given token has trailing space, false if not.\n     */\n\n\n    function hasTrailingSpace(token) {\n      const tokenAfter = sourceCode.getTokenAfter(token);\n      return tokenAfter && astUtils.isTokenOnSameLine(token, tokenAfter) && sourceCode.isSpaceBetweenTokens(token, tokenAfter);\n    }\n    /**\n     * Checks if the given token is the last token in its line.\n     * @param {Token} token The token to check.\n     * @returns {boolean} Whether or not the token is the last in its line.\n     */\n\n\n    function isLastTokenInCurrentLine(token) {\n      const tokenAfter = sourceCode.getTokenAfter(token);\n      return !(tokenAfter && astUtils.isTokenOnSameLine(token, tokenAfter));\n    }\n    /**\n     * Checks if the given token is the first token in its line\n     * @param {Token} token The token to check.\n     * @returns {boolean} Whether or not the token is the first in its line.\n     */\n\n\n    function isFirstTokenInCurrentLine(token) {\n      const tokenBefore = sourceCode.getTokenBefore(token);\n      return !(tokenBefore && astUtils.isTokenOnSameLine(token, tokenBefore));\n    }\n    /**\n     * Checks if the next token of a given token is a closing parenthesis.\n     * @param {Token} token The token to check.\n     * @returns {boolean} Whether or not the next token of a given token is a closing parenthesis.\n     */\n\n\n    function isBeforeClosingParen(token) {\n      const nextToken = sourceCode.getTokenAfter(token);\n      return nextToken && astUtils.isClosingBraceToken(nextToken) || astUtils.isClosingParenToken(nextToken);\n    }\n    /**\n     * Report location example :\n     *\n     * for unexpected space `before`\n     *\n     * var a = 'b'   ;\n     *            ^^^\n     *\n     * for unexpected space `after`\n     *\n     * var a = 'b';  c = 10;\n     *             ^^\n     *\n     * Reports if the given token has invalid spacing.\n     * @param {Token} token The semicolon token to check.\n     * @param {ASTNode} node The corresponding node of the token.\n     * @returns {void}\n     */\n\n\n    function checkSemicolonSpacing(token, node) {\n      if (astUtils.isSemicolonToken(token)) {\n        if (hasLeadingSpace(token)) {\n          if (!requireSpaceBefore) {\n            const tokenBefore = sourceCode.getTokenBefore(token);\n            const loc = {\n              start: tokenBefore.loc.end,\n              end: token.loc.start\n            };\n            context.report({\n              node,\n              loc,\n              messageId: \"unexpectedWhitespaceBefore\",\n\n              fix(fixer) {\n                return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n              }\n\n            });\n          }\n        } else {\n          if (requireSpaceBefore) {\n            const loc = token.loc;\n            context.report({\n              node,\n              loc,\n              messageId: \"missingWhitespaceBefore\",\n\n              fix(fixer) {\n                return fixer.insertTextBefore(token, \" \");\n              }\n\n            });\n          }\n        }\n\n        if (!isFirstTokenInCurrentLine(token) && !isLastTokenInCurrentLine(token) && !isBeforeClosingParen(token)) {\n          if (hasTrailingSpace(token)) {\n            if (!requireSpaceAfter) {\n              const tokenAfter = sourceCode.getTokenAfter(token);\n              const loc = {\n                start: token.loc.end,\n                end: tokenAfter.loc.start\n              };\n              context.report({\n                node,\n                loc,\n                messageId: \"unexpectedWhitespaceAfter\",\n\n                fix(fixer) {\n                  return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n                }\n\n              });\n            }\n          } else {\n            if (requireSpaceAfter) {\n              const loc = token.loc;\n              context.report({\n                node,\n                loc,\n                messageId: \"missingWhitespaceAfter\",\n\n                fix(fixer) {\n                  return fixer.insertTextAfter(token, \" \");\n                }\n\n              });\n            }\n          }\n        }\n      }\n    }\n    /**\n     * Checks the spacing of the semicolon with the assumption that the last token is the semicolon.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n\n\n    function checkNode(node) {\n      const token = sourceCode.getLastToken(node);\n      checkSemicolonSpacing(token, node);\n    }\n\n    return {\n      VariableDeclaration: checkNode,\n      ExpressionStatement: checkNode,\n      BreakStatement: checkNode,\n      ContinueStatement: checkNode,\n      DebuggerStatement: checkNode,\n      DoWhileStatement: checkNode,\n      ReturnStatement: checkNode,\n      ThrowStatement: checkNode,\n      ImportDeclaration: checkNode,\n      ExportNamedDeclaration: checkNode,\n      ExportAllDeclaration: checkNode,\n      ExportDefaultDeclaration: checkNode,\n\n      ForStatement(node) {\n        if (node.init) {\n          checkSemicolonSpacing(sourceCode.getTokenAfter(node.init), node);\n        }\n\n        if (node.test) {\n          checkSemicolonSpacing(sourceCode.getTokenAfter(node.test), node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","before","default","after","additionalProperties","messages","unexpectedWhitespaceBefore","unexpectedWhitespaceAfter","missingWhitespaceBefore","missingWhitespaceAfter","create","context","config","options","sourceCode","getSourceCode","requireSpaceBefore","requireSpaceAfter","hasLeadingSpace","token","tokenBefore","getTokenBefore","isTokenOnSameLine","isSpaceBetweenTokens","hasTrailingSpace","tokenAfter","getTokenAfter","isLastTokenInCurrentLine","isFirstTokenInCurrentLine","isBeforeClosingParen","nextToken","isClosingBraceToken","isClosingParenToken","checkSemicolonSpacing","node","isSemicolonToken","loc","start","end","report","messageId","fix","fixer","removeRange","range","insertTextBefore","insertTextAfter","checkNode","getLastToken","VariableDeclaration","ExpressionStatement","BreakStatement","ContinueStatement","DebuggerStatement","DoWhileStatement","ReturnStatement","ThrowStatement","ImportDeclaration","ExportNamedDeclaration","ExportAllDeclaration","ExportDefaultDeclaration","ForStatement","init","test"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/semi-spacing.js"],"sourcesContent":["/**\n * @fileoverview Validates spacing before and after semicolon\n * @author Mathias Schreck\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing before and after semicolons\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/semi-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    before: {\n                        type: \"boolean\",\n                        default: false\n                    },\n                    after: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedWhitespaceBefore: \"Unexpected whitespace before semicolon.\",\n            unexpectedWhitespaceAfter: \"Unexpected whitespace after semicolon.\",\n            missingWhitespaceBefore: \"Missing whitespace before semicolon.\",\n            missingWhitespaceAfter: \"Missing whitespace after semicolon.\"\n        }\n    },\n\n    create(context) {\n\n        const config = context.options[0],\n            sourceCode = context.getSourceCode();\n        let requireSpaceBefore = false,\n            requireSpaceAfter = true;\n\n        if (typeof config === \"object\") {\n            requireSpaceBefore = config.before;\n            requireSpaceAfter = config.after;\n        }\n\n        /**\n         * Checks if a given token has leading whitespace.\n         * @param {Object} token The token to check.\n         * @returns {boolean} True if the given token has leading space, false if not.\n         */\n        function hasLeadingSpace(token) {\n            const tokenBefore = sourceCode.getTokenBefore(token);\n\n            return tokenBefore && astUtils.isTokenOnSameLine(tokenBefore, token) && sourceCode.isSpaceBetweenTokens(tokenBefore, token);\n        }\n\n        /**\n         * Checks if a given token has trailing whitespace.\n         * @param {Object} token The token to check.\n         * @returns {boolean} True if the given token has trailing space, false if not.\n         */\n        function hasTrailingSpace(token) {\n            const tokenAfter = sourceCode.getTokenAfter(token);\n\n            return tokenAfter && astUtils.isTokenOnSameLine(token, tokenAfter) && sourceCode.isSpaceBetweenTokens(token, tokenAfter);\n        }\n\n        /**\n         * Checks if the given token is the last token in its line.\n         * @param {Token} token The token to check.\n         * @returns {boolean} Whether or not the token is the last in its line.\n         */\n        function isLastTokenInCurrentLine(token) {\n            const tokenAfter = sourceCode.getTokenAfter(token);\n\n            return !(tokenAfter && astUtils.isTokenOnSameLine(token, tokenAfter));\n        }\n\n        /**\n         * Checks if the given token is the first token in its line\n         * @param {Token} token The token to check.\n         * @returns {boolean} Whether or not the token is the first in its line.\n         */\n        function isFirstTokenInCurrentLine(token) {\n            const tokenBefore = sourceCode.getTokenBefore(token);\n\n            return !(tokenBefore && astUtils.isTokenOnSameLine(token, tokenBefore));\n        }\n\n        /**\n         * Checks if the next token of a given token is a closing parenthesis.\n         * @param {Token} token The token to check.\n         * @returns {boolean} Whether or not the next token of a given token is a closing parenthesis.\n         */\n        function isBeforeClosingParen(token) {\n            const nextToken = sourceCode.getTokenAfter(token);\n\n            return (nextToken && astUtils.isClosingBraceToken(nextToken) || astUtils.isClosingParenToken(nextToken));\n        }\n\n        /**\n         * Report location example :\n         *\n         * for unexpected space `before`\n         *\n         * var a = 'b'   ;\n         *            ^^^\n         *\n         * for unexpected space `after`\n         *\n         * var a = 'b';  c = 10;\n         *             ^^\n         *\n         * Reports if the given token has invalid spacing.\n         * @param {Token} token The semicolon token to check.\n         * @param {ASTNode} node The corresponding node of the token.\n         * @returns {void}\n         */\n        function checkSemicolonSpacing(token, node) {\n            if (astUtils.isSemicolonToken(token)) {\n                if (hasLeadingSpace(token)) {\n                    if (!requireSpaceBefore) {\n                        const tokenBefore = sourceCode.getTokenBefore(token);\n                        const loc = {\n                            start: tokenBefore.loc.end,\n                            end: token.loc.start\n                        };\n\n                        context.report({\n                            node,\n                            loc,\n                            messageId: \"unexpectedWhitespaceBefore\",\n                            fix(fixer) {\n\n                                return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n                            }\n                        });\n                    }\n                } else {\n                    if (requireSpaceBefore) {\n                        const loc = token.loc;\n\n                        context.report({\n                            node,\n                            loc,\n                            messageId: \"missingWhitespaceBefore\",\n                            fix(fixer) {\n                                return fixer.insertTextBefore(token, \" \");\n                            }\n                        });\n                    }\n                }\n\n                if (!isFirstTokenInCurrentLine(token) && !isLastTokenInCurrentLine(token) && !isBeforeClosingParen(token)) {\n                    if (hasTrailingSpace(token)) {\n                        if (!requireSpaceAfter) {\n                            const tokenAfter = sourceCode.getTokenAfter(token);\n                            const loc = {\n                                start: token.loc.end,\n                                end: tokenAfter.loc.start\n                            };\n\n                            context.report({\n                                node,\n                                loc,\n                                messageId: \"unexpectedWhitespaceAfter\",\n                                fix(fixer) {\n\n                                    return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n                                }\n                            });\n                        }\n                    } else {\n                        if (requireSpaceAfter) {\n                            const loc = token.loc;\n\n                            context.report({\n                                node,\n                                loc,\n                                messageId: \"missingWhitespaceAfter\",\n                                fix(fixer) {\n                                    return fixer.insertTextAfter(token, \" \");\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * Checks the spacing of the semicolon with the assumption that the last token is the semicolon.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkNode(node) {\n            const token = sourceCode.getLastToken(node);\n\n            checkSemicolonSpacing(token, node);\n        }\n\n        return {\n            VariableDeclaration: checkNode,\n            ExpressionStatement: checkNode,\n            BreakStatement: checkNode,\n            ContinueStatement: checkNode,\n            DebuggerStatement: checkNode,\n            DoWhileStatement: checkNode,\n            ReturnStatement: checkNode,\n            ThrowStatement: checkNode,\n            ImportDeclaration: checkNode,\n            ExportNamedDeclaration: checkNode,\n            ExportAllDeclaration: checkNode,\n            ExportDefaultDeclaration: checkNode,\n            ForStatement(node) {\n                if (node.init) {\n                    checkSemicolonSpacing(sourceCode.getTokenAfter(node.init), node);\n                }\n\n                if (node.test) {\n                    checkSemicolonSpacing(sourceCode.getTokenAfter(node.test), node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}