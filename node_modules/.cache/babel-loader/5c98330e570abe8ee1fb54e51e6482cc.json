{"ast":null,"code":"/**\n * @fileoverview Rule to enforce grouped require statements for Node.JS\n * @author Raphael Pigulla\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `require` calls to be mixed with regular variable declarations\",\n      category: \"Node.js and CommonJS\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-mixed-requires\"\n    },\n    schema: [{\n      oneOf: [{\n        type: \"boolean\"\n      }, {\n        type: \"object\",\n        properties: {\n          grouping: {\n            type: \"boolean\"\n          },\n          allowCall: {\n            type: \"boolean\"\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      noMixRequire: \"Do not mix 'require' and other declarations.\",\n      noMixCoreModuleFileComputed: \"Do not mix core, module, file and computed requires.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0];\n    let grouping = false,\n        allowCall = false;\n\n    if (typeof options === \"object\") {\n      grouping = options.grouping;\n      allowCall = options.allowCall;\n    } else {\n      grouping = !!options;\n    }\n    /**\n     * Returns the list of built-in modules.\n     * @returns {string[]} An array of built-in Node.js modules.\n     */\n\n\n    function getBuiltinModules() {\n      /*\n       * This list is generated using:\n       * `require(\"repl\")._builtinLibs.concat('repl').sort()`\n       * This particular list is as per nodejs v0.12.2 and iojs v0.7.1\n       */\n      return [\"assert\", \"buffer\", \"child_process\", \"cluster\", \"crypto\", \"dgram\", \"dns\", \"domain\", \"events\", \"fs\", \"http\", \"https\", \"net\", \"os\", \"path\", \"punycode\", \"querystring\", \"readline\", \"repl\", \"smalloc\", \"stream\", \"string_decoder\", \"tls\", \"tty\", \"url\", \"util\", \"v8\", \"vm\", \"zlib\"];\n    }\n\n    const BUILTIN_MODULES = getBuiltinModules();\n    const DECL_REQUIRE = \"require\",\n          DECL_UNINITIALIZED = \"uninitialized\",\n          DECL_OTHER = \"other\";\n    const REQ_CORE = \"core\",\n          REQ_FILE = \"file\",\n          REQ_MODULE = \"module\",\n          REQ_COMPUTED = \"computed\";\n    /**\n     * Determines the type of a declaration statement.\n     * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n     * @returns {string} The type of declaration represented by the expression.\n     */\n\n    function getDeclarationType(initExpression) {\n      if (!initExpression) {\n        // \"var x;\"\n        return DECL_UNINITIALIZED;\n      }\n\n      if (initExpression.type === \"CallExpression\" && initExpression.callee.type === \"Identifier\" && initExpression.callee.name === \"require\") {\n        // \"var x = require('util');\"\n        return DECL_REQUIRE;\n      }\n\n      if (allowCall && initExpression.type === \"CallExpression\" && initExpression.callee.type === \"CallExpression\") {\n        // \"var x = require('diagnose')('sub-module');\"\n        return getDeclarationType(initExpression.callee);\n      }\n\n      if (initExpression.type === \"MemberExpression\") {\n        // \"var x = require('glob').Glob;\"\n        return getDeclarationType(initExpression.object);\n      } // \"var x = 42;\"\n\n\n      return DECL_OTHER;\n    }\n    /**\n     * Determines the type of module that is loaded via require.\n     * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n     * @returns {string} The module type.\n     */\n\n\n    function inferModuleType(initExpression) {\n      if (initExpression.type === \"MemberExpression\") {\n        // \"var x = require('glob').Glob;\"\n        return inferModuleType(initExpression.object);\n      }\n\n      if (initExpression.arguments.length === 0) {\n        // \"var x = require();\"\n        return REQ_COMPUTED;\n      }\n\n      const arg = initExpression.arguments[0];\n\n      if (arg.type !== \"Literal\" || typeof arg.value !== \"string\") {\n        // \"var x = require(42);\"\n        return REQ_COMPUTED;\n      }\n\n      if (BUILTIN_MODULES.indexOf(arg.value) !== -1) {\n        // \"var fs = require('fs');\"\n        return REQ_CORE;\n      }\n\n      if (/^\\.{0,2}\\//u.test(arg.value)) {\n        // \"var utils = require('./utils');\"\n        return REQ_FILE;\n      } // \"var async = require('async');\"\n\n\n      return REQ_MODULE;\n    }\n    /**\n     * Check if the list of variable declarations is mixed, i.e. whether it\n     * contains both require and other declarations.\n     * @param {ASTNode} declarations The list of VariableDeclarators.\n     * @returns {boolean} True if the declarations are mixed, false if not.\n     */\n\n\n    function isMixed(declarations) {\n      const contains = {};\n      declarations.forEach(declaration => {\n        const type = getDeclarationType(declaration.init);\n        contains[type] = true;\n      });\n      return !!(contains[DECL_REQUIRE] && (contains[DECL_UNINITIALIZED] || contains[DECL_OTHER]));\n    }\n    /**\n     * Check if all require declarations in the given list are of the same\n     * type.\n     * @param {ASTNode} declarations The list of VariableDeclarators.\n     * @returns {boolean} True if the declarations are grouped, false if not.\n     */\n\n\n    function isGrouped(declarations) {\n      const found = {};\n      declarations.forEach(declaration => {\n        if (getDeclarationType(declaration.init) === DECL_REQUIRE) {\n          found[inferModuleType(declaration.init)] = true;\n        }\n      });\n      return Object.keys(found).length <= 1;\n    }\n\n    return {\n      VariableDeclaration(node) {\n        if (isMixed(node.declarations)) {\n          context.report({\n            node,\n            messageId: \"noMixRequire\"\n          });\n        } else if (grouping && !isGrouped(node.declarations)) {\n          context.report({\n            node,\n            messageId: \"noMixCoreModuleFileComputed\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","deprecated","replacedBy","type","docs","description","category","recommended","url","schema","oneOf","properties","grouping","allowCall","additionalProperties","messages","noMixRequire","noMixCoreModuleFileComputed","create","context","options","getBuiltinModules","BUILTIN_MODULES","DECL_REQUIRE","DECL_UNINITIALIZED","DECL_OTHER","REQ_CORE","REQ_FILE","REQ_MODULE","REQ_COMPUTED","getDeclarationType","initExpression","callee","name","object","inferModuleType","arguments","length","arg","value","indexOf","test","isMixed","declarations","contains","forEach","declaration","init","isGrouped","found","Object","keys","VariableDeclaration","node","report","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-mixed-requires.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce grouped require statements for Node.JS\n * @author Raphael Pigulla\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        deprecated: true,\n\n        replacedBy: [],\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `require` calls to be mixed with regular variable declarations\",\n            category: \"Node.js and CommonJS\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-mixed-requires\"\n        },\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        type: \"boolean\"\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            grouping: {\n                                type: \"boolean\"\n                            },\n                            allowCall: {\n                                type: \"boolean\"\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            noMixRequire: \"Do not mix 'require' and other declarations.\",\n            noMixCoreModuleFileComputed: \"Do not mix core, module, file and computed requires.\"\n        }\n    },\n\n    create(context) {\n\n        const options = context.options[0];\n        let grouping = false,\n            allowCall = false;\n\n        if (typeof options === \"object\") {\n            grouping = options.grouping;\n            allowCall = options.allowCall;\n        } else {\n            grouping = !!options;\n        }\n\n        /**\n         * Returns the list of built-in modules.\n         * @returns {string[]} An array of built-in Node.js modules.\n         */\n        function getBuiltinModules() {\n\n            /*\n             * This list is generated using:\n             * `require(\"repl\")._builtinLibs.concat('repl').sort()`\n             * This particular list is as per nodejs v0.12.2 and iojs v0.7.1\n             */\n            return [\n                \"assert\", \"buffer\", \"child_process\", \"cluster\", \"crypto\",\n                \"dgram\", \"dns\", \"domain\", \"events\", \"fs\", \"http\", \"https\",\n                \"net\", \"os\", \"path\", \"punycode\", \"querystring\", \"readline\",\n                \"repl\", \"smalloc\", \"stream\", \"string_decoder\", \"tls\", \"tty\",\n                \"url\", \"util\", \"v8\", \"vm\", \"zlib\"\n            ];\n        }\n\n        const BUILTIN_MODULES = getBuiltinModules();\n\n        const DECL_REQUIRE = \"require\",\n            DECL_UNINITIALIZED = \"uninitialized\",\n            DECL_OTHER = \"other\";\n\n        const REQ_CORE = \"core\",\n            REQ_FILE = \"file\",\n            REQ_MODULE = \"module\",\n            REQ_COMPUTED = \"computed\";\n\n        /**\n         * Determines the type of a declaration statement.\n         * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n         * @returns {string} The type of declaration represented by the expression.\n         */\n        function getDeclarationType(initExpression) {\n            if (!initExpression) {\n\n                // \"var x;\"\n                return DECL_UNINITIALIZED;\n            }\n\n            if (initExpression.type === \"CallExpression\" &&\n                initExpression.callee.type === \"Identifier\" &&\n                initExpression.callee.name === \"require\"\n            ) {\n\n                // \"var x = require('util');\"\n                return DECL_REQUIRE;\n            }\n            if (allowCall &&\n                initExpression.type === \"CallExpression\" &&\n                initExpression.callee.type === \"CallExpression\"\n            ) {\n\n                // \"var x = require('diagnose')('sub-module');\"\n                return getDeclarationType(initExpression.callee);\n            }\n            if (initExpression.type === \"MemberExpression\") {\n\n                // \"var x = require('glob').Glob;\"\n                return getDeclarationType(initExpression.object);\n            }\n\n            // \"var x = 42;\"\n            return DECL_OTHER;\n        }\n\n        /**\n         * Determines the type of module that is loaded via require.\n         * @param {ASTNode} initExpression The init node of the VariableDeclarator.\n         * @returns {string} The module type.\n         */\n        function inferModuleType(initExpression) {\n            if (initExpression.type === \"MemberExpression\") {\n\n                // \"var x = require('glob').Glob;\"\n                return inferModuleType(initExpression.object);\n            }\n            if (initExpression.arguments.length === 0) {\n\n                // \"var x = require();\"\n                return REQ_COMPUTED;\n            }\n\n            const arg = initExpression.arguments[0];\n\n            if (arg.type !== \"Literal\" || typeof arg.value !== \"string\") {\n\n                // \"var x = require(42);\"\n                return REQ_COMPUTED;\n            }\n\n            if (BUILTIN_MODULES.indexOf(arg.value) !== -1) {\n\n                // \"var fs = require('fs');\"\n                return REQ_CORE;\n            }\n            if (/^\\.{0,2}\\//u.test(arg.value)) {\n\n                // \"var utils = require('./utils');\"\n                return REQ_FILE;\n            }\n\n            // \"var async = require('async');\"\n            return REQ_MODULE;\n\n        }\n\n        /**\n         * Check if the list of variable declarations is mixed, i.e. whether it\n         * contains both require and other declarations.\n         * @param {ASTNode} declarations The list of VariableDeclarators.\n         * @returns {boolean} True if the declarations are mixed, false if not.\n         */\n        function isMixed(declarations) {\n            const contains = {};\n\n            declarations.forEach(declaration => {\n                const type = getDeclarationType(declaration.init);\n\n                contains[type] = true;\n            });\n\n            return !!(\n                contains[DECL_REQUIRE] &&\n                (contains[DECL_UNINITIALIZED] || contains[DECL_OTHER])\n            );\n        }\n\n        /**\n         * Check if all require declarations in the given list are of the same\n         * type.\n         * @param {ASTNode} declarations The list of VariableDeclarators.\n         * @returns {boolean} True if the declarations are grouped, false if not.\n         */\n        function isGrouped(declarations) {\n            const found = {};\n\n            declarations.forEach(declaration => {\n                if (getDeclarationType(declaration.init) === DECL_REQUIRE) {\n                    found[inferModuleType(declaration.init)] = true;\n                }\n            });\n\n            return Object.keys(found).length <= 1;\n        }\n\n\n        return {\n\n            VariableDeclaration(node) {\n\n                if (isMixed(node.declarations)) {\n                    context.report({\n                        node,\n                        messageId: \"noMixRequire\"\n                    });\n                } else if (grouping && !isGrouped(node.declarations)) {\n                    context.report({\n                        node,\n                        messageId: \"noMixCoreModuleFileComputed\"\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}