{"ast":null,"code":"/**\n * @fileoverview Rule to disallow returning values from setters\n * @author Milos Djermanovic\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst {\n  findVariable\n} = require(\"eslint-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\n\n\nfunction isGlobalReference(node, scope) {\n  const variable = findVariable(scope, node);\n  return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n/**\n * Determines whether the given node is an argument of the specified global method call, at the given `index` position.\n * E.g., for given `index === 1`, this function checks for `objectName.methodName(foo, node)`, where objectName is a global variable.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @param {string} objectName Name of the global object.\n * @param {string} methodName Name of the method.\n * @param {number} index The given position.\n * @returns {boolean} `true` if the node is argument at the given position.\n */\n\n\nfunction isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {\n  const callNode = node.parent;\n  return callNode.type === \"CallExpression\" && callNode.arguments[index] === node && astUtils.isSpecificMemberAccess(callNode.callee, objectName, methodName) && isGlobalReference(astUtils.skipChainExpression(callNode.callee).object, scope);\n}\n/**\n * Determines whether the given node is used as a property descriptor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\n\n\nfunction isPropertyDescriptor(node, scope) {\n  if (isArgumentOfGlobalMethodCall(node, scope, \"Object\", \"defineProperty\", 2) || isArgumentOfGlobalMethodCall(node, scope, \"Reflect\", \"defineProperty\", 2)) {\n    return true;\n  }\n\n  const parent = node.parent;\n\n  if (parent.type === \"Property\" && parent.value === node) {\n    const grandparent = parent.parent;\n\n    if (grandparent.type === \"ObjectExpression\" && (isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"create\", 1) || isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"defineProperties\", 1))) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Determines whether the given function node is used as a setter function.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a setter.\n */\n\n\nfunction isSetter(node, scope) {\n  const parent = node.parent;\n\n  if (parent.kind === \"set\" && parent.value === node) {\n    // Setter in an object literal or in a class\n    return true;\n  }\n\n  if (parent.type === \"Property\" && parent.value === node && astUtils.getStaticPropertyName(parent) === \"set\" && parent.parent.type === \"ObjectExpression\" && isPropertyDescriptor(parent.parent, scope)) {\n    // Setter in a property descriptor\n    return true;\n  }\n\n  return false;\n}\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\n\n\nfunction getOuterScope(scope) {\n  const upper = scope.upper;\n\n  if (upper.type === \"function-expression-name\") {\n    return upper.upper;\n  }\n\n  return upper;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow returning values from setters\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-setter-return\"\n    },\n    schema: [],\n    messages: {\n      returnsValue: \"Setter cannot return a value.\"\n    }\n  },\n\n  create(context) {\n    let funcInfo = null;\n    /**\n     * Creates and pushes to the stack a function info object for the given function node.\n     * @param {ASTNode} node The function node.\n     * @returns {void}\n     */\n\n    function enterFunction(node) {\n      const outerScope = getOuterScope(context.getScope());\n      funcInfo = {\n        upper: funcInfo,\n        isSetter: isSetter(node, outerScope)\n      };\n    }\n    /**\n     * Pops the current function info object from the stack.\n     * @returns {void}\n     */\n\n\n    function exitFunction() {\n      funcInfo = funcInfo.upper;\n    }\n    /**\n     * Reports the given node.\n     * @param {ASTNode} node Node to report.\n     * @returns {void}\n     */\n\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"returnsValue\"\n      });\n    }\n\n    return {\n      /*\n       * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid\n       * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.\n       *\n       * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,\n       * but that's out of scope for this rule.\n       */\n      FunctionDeclaration: enterFunction,\n      FunctionExpression: enterFunction,\n\n      ArrowFunctionExpression(node) {\n        enterFunction(node);\n\n        if (funcInfo.isSetter && node.expression) {\n          // { set: foo => bar } property descriptor. Report implicit return 'bar' as the equivalent for a return statement.\n          report(node.body);\n        }\n      },\n\n      \"FunctionDeclaration:exit\": exitFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      \"ArrowFunctionExpression:exit\": exitFunction,\n\n      ReturnStatement(node) {\n        // Global returns (e.g., at the top level of a Node module) don't have `funcInfo`.\n        if (funcInfo && funcInfo.isSetter && node.argument) {\n          report(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","findVariable","isGlobalReference","node","scope","variable","type","defs","length","isArgumentOfGlobalMethodCall","objectName","methodName","index","callNode","parent","arguments","isSpecificMemberAccess","callee","skipChainExpression","object","isPropertyDescriptor","value","grandparent","isSetter","kind","getStaticPropertyName","getOuterScope","upper","module","exports","meta","docs","description","category","recommended","url","schema","messages","returnsValue","create","context","funcInfo","enterFunction","outerScope","getScope","exitFunction","report","messageId","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","expression","body","ReturnStatement","argument"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-setter-return.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow returning values from setters\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst { findVariable } = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\nfunction isGlobalReference(node, scope) {\n    const variable = findVariable(scope, node);\n\n    return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n\n/**\n * Determines whether the given node is an argument of the specified global method call, at the given `index` position.\n * E.g., for given `index === 1`, this function checks for `objectName.methodName(foo, node)`, where objectName is a global variable.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @param {string} objectName Name of the global object.\n * @param {string} methodName Name of the method.\n * @param {number} index The given position.\n * @returns {boolean} `true` if the node is argument at the given position.\n */\nfunction isArgumentOfGlobalMethodCall(node, scope, objectName, methodName, index) {\n    const callNode = node.parent;\n\n    return callNode.type === \"CallExpression\" &&\n        callNode.arguments[index] === node &&\n        astUtils.isSpecificMemberAccess(callNode.callee, objectName, methodName) &&\n        isGlobalReference(astUtils.skipChainExpression(callNode.callee).object, scope);\n}\n\n/**\n * Determines whether the given node is used as a property descriptor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a property descriptor.\n */\nfunction isPropertyDescriptor(node, scope) {\n    if (\n        isArgumentOfGlobalMethodCall(node, scope, \"Object\", \"defineProperty\", 2) ||\n        isArgumentOfGlobalMethodCall(node, scope, \"Reflect\", \"defineProperty\", 2)\n    ) {\n        return true;\n    }\n\n    const parent = node.parent;\n\n    if (\n        parent.type === \"Property\" &&\n        parent.value === node\n    ) {\n        const grandparent = parent.parent;\n\n        if (\n            grandparent.type === \"ObjectExpression\" &&\n            (\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"create\", 1) ||\n                isArgumentOfGlobalMethodCall(grandparent, scope, \"Object\", \"defineProperties\", 1)\n            )\n        ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Determines whether the given function node is used as a setter function.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} `true` if the node is a setter.\n */\nfunction isSetter(node, scope) {\n    const parent = node.parent;\n\n    if (\n        parent.kind === \"set\" &&\n        parent.value === node\n    ) {\n\n        // Setter in an object literal or in a class\n        return true;\n    }\n\n    if (\n        parent.type === \"Property\" &&\n        parent.value === node &&\n        astUtils.getStaticPropertyName(parent) === \"set\" &&\n        parent.parent.type === \"ObjectExpression\" &&\n        isPropertyDescriptor(parent.parent, scope)\n    ) {\n\n        // Setter in a property descriptor\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\nfunction getOuterScope(scope) {\n    const upper = scope.upper;\n\n    if (upper.type === \"function-expression-name\") {\n        return upper.upper;\n    }\n\n    return upper;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow returning values from setters\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-setter-return\"\n        },\n\n        schema: [],\n\n        messages: {\n            returnsValue: \"Setter cannot return a value.\"\n        }\n    },\n\n    create(context) {\n        let funcInfo = null;\n\n        /**\n         * Creates and pushes to the stack a function info object for the given function node.\n         * @param {ASTNode} node The function node.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n            const outerScope = getOuterScope(context.getScope());\n\n            funcInfo = {\n                upper: funcInfo,\n                isSetter: isSetter(node, outerScope)\n            };\n        }\n\n        /**\n         * Pops the current function info object from the stack.\n         * @returns {void}\n         */\n        function exitFunction() {\n            funcInfo = funcInfo.upper;\n        }\n\n        /**\n         * Reports the given node.\n         * @param {ASTNode} node Node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"returnsValue\" });\n        }\n\n        return {\n\n            /*\n             * Function declarations cannot be setters, but we still have to track them in the `funcInfo` stack to avoid\n             * false positives, because a ReturnStatement node can belong to a function declaration inside a setter.\n             *\n             * Note: A previously declared function can be referenced and actually used as a setter in a property descriptor,\n             * but that's out of scope for this rule.\n             */\n            FunctionDeclaration: enterFunction,\n            FunctionExpression: enterFunction,\n            ArrowFunctionExpression(node) {\n                enterFunction(node);\n\n                if (funcInfo.isSetter && node.expression) {\n\n                    // { set: foo => bar } property descriptor. Report implicit return 'bar' as the equivalent for a return statement.\n                    report(node.body);\n                }\n            },\n\n            \"FunctionDeclaration:exit\": exitFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            \"ArrowFunctionExpression:exit\": exitFunction,\n\n            ReturnStatement(node) {\n\n                // Global returns (e.g., at the top level of a Node module) don't have `funcInfo`.\n                if (funcInfo && funcInfo.isSetter && node.argument) {\n                    report(node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}