{"ast":null,"code":"/**\n * @fileoverview A rule to disallow using `this`/`super` before `super()`.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a constructor.\n * @param {ASTNode} node A node to check. This node type is one of\n *   `Program`, `FunctionDeclaration`, `FunctionExpression`, and\n *   `ArrowFunctionExpression`.\n * @returns {boolean} `true` if the node is a constructor.\n */\n\n\nfunction isConstructorFunction(node) {\n  return node.type === \"FunctionExpression\" && node.parent.type === \"MethodDefinition\" && node.parent.kind === \"constructor\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow `this`/`super` before calling `super()` in constructors\",\n      category: \"ECMAScript 6\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-this-before-super\"\n    },\n    schema: [],\n    messages: {\n      noBeforeSuper: \"'{{kind}}' is not allowed before 'super()'.\"\n    }\n  },\n\n  create(context) {\n    /*\n     * Information for each constructor.\n     * - upper:      Information of the upper constructor.\n     * - hasExtends: A flag which shows whether the owner class has a valid\n     *   `extends` part.\n     * - scope:      The scope of the owner class.\n     * - codePath:   The code path of this constructor.\n     */\n    let funcInfo = null;\n    /*\n     * Information for each code path segment.\n     * Each key is the id of a code path segment.\n     * Each value is an object:\n     * - superCalled:  The flag which shows `super()` called in all code paths.\n     * - invalidNodes: The array of invalid ThisExpression and Super nodes.\n     */\n\n    let segInfoMap = Object.create(null);\n    /**\n     * Gets whether or not `super()` is called in a given code path segment.\n     * @param {CodePathSegment} segment A code path segment to get.\n     * @returns {boolean} `true` if `super()` is called.\n     */\n\n    function isCalled(segment) {\n      return !segment.reachable || segInfoMap[segment.id].superCalled;\n    }\n    /**\n     * Checks whether or not this is in a constructor.\n     * @returns {boolean} `true` if this is in a constructor.\n     */\n\n\n    function isInConstructorOfDerivedClass() {\n      return Boolean(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends);\n    }\n    /**\n     * Checks whether or not this is before `super()` is called.\n     * @returns {boolean} `true` if this is before `super()` is called.\n     */\n\n\n    function isBeforeCallOfSuper() {\n      return isInConstructorOfDerivedClass() && !funcInfo.codePath.currentSegments.every(isCalled);\n    }\n    /**\n     * Sets a given node as invalid.\n     * @param {ASTNode} node A node to set as invalid. This is one of\n     *      a ThisExpression and a Super.\n     * @returns {void}\n     */\n\n\n    function setInvalid(node) {\n      const segments = funcInfo.codePath.currentSegments;\n\n      for (let i = 0; i < segments.length; ++i) {\n        const segment = segments[i];\n\n        if (segment.reachable) {\n          segInfoMap[segment.id].invalidNodes.push(node);\n        }\n      }\n    }\n    /**\n     * Sets the current segment as `super` was called.\n     * @returns {void}\n     */\n\n\n    function setSuperCalled() {\n      const segments = funcInfo.codePath.currentSegments;\n\n      for (let i = 0; i < segments.length; ++i) {\n        const segment = segments[i];\n\n        if (segment.reachable) {\n          segInfoMap[segment.id].superCalled = true;\n        }\n      }\n    }\n\n    return {\n      /**\n       * Adds information of a constructor into the stack.\n       * @param {CodePath} codePath A code path which was started.\n       * @param {ASTNode} node The current node.\n       * @returns {void}\n       */\n      onCodePathStart(codePath, node) {\n        if (isConstructorFunction(node)) {\n          // Class > ClassBody > MethodDefinition > FunctionExpression\n          const classNode = node.parent.parent.parent;\n          funcInfo = {\n            upper: funcInfo,\n            isConstructor: true,\n            hasExtends: Boolean(classNode.superClass && !astUtils.isNullOrUndefined(classNode.superClass)),\n            codePath\n          };\n        } else {\n          funcInfo = {\n            upper: funcInfo,\n            isConstructor: false,\n            hasExtends: false,\n            codePath\n          };\n        }\n      },\n\n      /**\n       * Removes the top of stack item.\n       *\n       * And this traverses all segments of this code path then reports every\n       * invalid node.\n       * @param {CodePath} codePath A code path which was ended.\n       * @returns {void}\n       */\n      onCodePathEnd(codePath) {\n        const isDerivedClass = funcInfo.hasExtends;\n        funcInfo = funcInfo.upper;\n\n        if (!isDerivedClass) {\n          return;\n        }\n\n        codePath.traverseSegments((segment, controller) => {\n          const info = segInfoMap[segment.id];\n\n          for (let i = 0; i < info.invalidNodes.length; ++i) {\n            const invalidNode = info.invalidNodes[i];\n            context.report({\n              messageId: \"noBeforeSuper\",\n              node: invalidNode,\n              data: {\n                kind: invalidNode.type === \"Super\" ? \"super\" : \"this\"\n              }\n            });\n          }\n\n          if (info.superCalled) {\n            controller.skip();\n          }\n        });\n      },\n\n      /**\n       * Initialize information of a given code path segment.\n       * @param {CodePathSegment} segment A code path segment to initialize.\n       * @returns {void}\n       */\n      onCodePathSegmentStart(segment) {\n        if (!isInConstructorOfDerivedClass()) {\n          return;\n        } // Initialize info.\n\n\n        segInfoMap[segment.id] = {\n          superCalled: segment.prevSegments.length > 0 && segment.prevSegments.every(isCalled),\n          invalidNodes: []\n        };\n      },\n\n      /**\n       * Update information of the code path segment when a code path was\n       * looped.\n       * @param {CodePathSegment} fromSegment The code path segment of the\n       *      end of a loop.\n       * @param {CodePathSegment} toSegment A code path segment of the head\n       *      of a loop.\n       * @returns {void}\n       */\n      onCodePathSegmentLoop(fromSegment, toSegment) {\n        if (!isInConstructorOfDerivedClass()) {\n          return;\n        } // Update information inside of the loop.\n\n\n        funcInfo.codePath.traverseSegments({\n          first: toSegment,\n          last: fromSegment\n        }, (segment, controller) => {\n          const info = segInfoMap[segment.id];\n\n          if (info.superCalled) {\n            info.invalidNodes = [];\n            controller.skip();\n          } else if (segment.prevSegments.length > 0 && segment.prevSegments.every(isCalled)) {\n            info.superCalled = true;\n            info.invalidNodes = [];\n          }\n        });\n      },\n\n      /**\n       * Reports if this is before `super()`.\n       * @param {ASTNode} node A target node.\n       * @returns {void}\n       */\n      ThisExpression(node) {\n        if (isBeforeCallOfSuper()) {\n          setInvalid(node);\n        }\n      },\n\n      /**\n       * Reports if this is before `super()`.\n       * @param {ASTNode} node A target node.\n       * @returns {void}\n       */\n      Super(node) {\n        if (!astUtils.isCallee(node) && isBeforeCallOfSuper()) {\n          setInvalid(node);\n        }\n      },\n\n      /**\n       * Marks `super()` called.\n       * @param {ASTNode} node A target node.\n       * @returns {void}\n       */\n      \"CallExpression:exit\"(node) {\n        if (node.callee.type === \"Super\" && isBeforeCallOfSuper()) {\n          setSuperCalled();\n        }\n      },\n\n      /**\n       * Resets state.\n       * @returns {void}\n       */\n      \"Program:exit\"() {\n        segInfoMap = Object.create(null);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","isConstructorFunction","node","type","parent","kind","module","exports","meta","docs","description","category","recommended","url","schema","messages","noBeforeSuper","create","context","funcInfo","segInfoMap","Object","isCalled","segment","reachable","id","superCalled","isInConstructorOfDerivedClass","Boolean","isConstructor","hasExtends","isBeforeCallOfSuper","codePath","currentSegments","every","setInvalid","segments","i","length","invalidNodes","push","setSuperCalled","onCodePathStart","classNode","upper","superClass","isNullOrUndefined","onCodePathEnd","isDerivedClass","traverseSegments","controller","info","invalidNode","report","messageId","data","skip","onCodePathSegmentStart","prevSegments","onCodePathSegmentLoop","fromSegment","toSegment","first","last","ThisExpression","Super","isCallee","callee"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-this-before-super.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow using `this`/`super` before `super()`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a constructor.\n * @param {ASTNode} node A node to check. This node type is one of\n *   `Program`, `FunctionDeclaration`, `FunctionExpression`, and\n *   `ArrowFunctionExpression`.\n * @returns {boolean} `true` if the node is a constructor.\n */\nfunction isConstructorFunction(node) {\n    return (\n        node.type === \"FunctionExpression\" &&\n        node.parent.type === \"MethodDefinition\" &&\n        node.parent.kind === \"constructor\"\n    );\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow `this`/`super` before calling `super()` in constructors\",\n            category: \"ECMAScript 6\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-this-before-super\"\n        },\n\n        schema: [],\n\n        messages: {\n            noBeforeSuper: \"'{{kind}}' is not allowed before 'super()'.\"\n        }\n    },\n\n    create(context) {\n\n        /*\n         * Information for each constructor.\n         * - upper:      Information of the upper constructor.\n         * - hasExtends: A flag which shows whether the owner class has a valid\n         *   `extends` part.\n         * - scope:      The scope of the owner class.\n         * - codePath:   The code path of this constructor.\n         */\n        let funcInfo = null;\n\n        /*\n         * Information for each code path segment.\n         * Each key is the id of a code path segment.\n         * Each value is an object:\n         * - superCalled:  The flag which shows `super()` called in all code paths.\n         * - invalidNodes: The array of invalid ThisExpression and Super nodes.\n         */\n        let segInfoMap = Object.create(null);\n\n        /**\n         * Gets whether or not `super()` is called in a given code path segment.\n         * @param {CodePathSegment} segment A code path segment to get.\n         * @returns {boolean} `true` if `super()` is called.\n         */\n        function isCalled(segment) {\n            return !segment.reachable || segInfoMap[segment.id].superCalled;\n        }\n\n        /**\n         * Checks whether or not this is in a constructor.\n         * @returns {boolean} `true` if this is in a constructor.\n         */\n        function isInConstructorOfDerivedClass() {\n            return Boolean(funcInfo && funcInfo.isConstructor && funcInfo.hasExtends);\n        }\n\n        /**\n         * Checks whether or not this is before `super()` is called.\n         * @returns {boolean} `true` if this is before `super()` is called.\n         */\n        function isBeforeCallOfSuper() {\n            return (\n                isInConstructorOfDerivedClass() &&\n                !funcInfo.codePath.currentSegments.every(isCalled)\n            );\n        }\n\n        /**\n         * Sets a given node as invalid.\n         * @param {ASTNode} node A node to set as invalid. This is one of\n         *      a ThisExpression and a Super.\n         * @returns {void}\n         */\n        function setInvalid(node) {\n            const segments = funcInfo.codePath.currentSegments;\n\n            for (let i = 0; i < segments.length; ++i) {\n                const segment = segments[i];\n\n                if (segment.reachable) {\n                    segInfoMap[segment.id].invalidNodes.push(node);\n                }\n            }\n        }\n\n        /**\n         * Sets the current segment as `super` was called.\n         * @returns {void}\n         */\n        function setSuperCalled() {\n            const segments = funcInfo.codePath.currentSegments;\n\n            for (let i = 0; i < segments.length; ++i) {\n                const segment = segments[i];\n\n                if (segment.reachable) {\n                    segInfoMap[segment.id].superCalled = true;\n                }\n            }\n        }\n\n        return {\n\n            /**\n             * Adds information of a constructor into the stack.\n             * @param {CodePath} codePath A code path which was started.\n             * @param {ASTNode} node The current node.\n             * @returns {void}\n             */\n            onCodePathStart(codePath, node) {\n                if (isConstructorFunction(node)) {\n\n                    // Class > ClassBody > MethodDefinition > FunctionExpression\n                    const classNode = node.parent.parent.parent;\n\n                    funcInfo = {\n                        upper: funcInfo,\n                        isConstructor: true,\n                        hasExtends: Boolean(\n                            classNode.superClass &&\n                            !astUtils.isNullOrUndefined(classNode.superClass)\n                        ),\n                        codePath\n                    };\n                } else {\n                    funcInfo = {\n                        upper: funcInfo,\n                        isConstructor: false,\n                        hasExtends: false,\n                        codePath\n                    };\n                }\n            },\n\n            /**\n             * Removes the top of stack item.\n             *\n             * And this traverses all segments of this code path then reports every\n             * invalid node.\n             * @param {CodePath} codePath A code path which was ended.\n             * @returns {void}\n             */\n            onCodePathEnd(codePath) {\n                const isDerivedClass = funcInfo.hasExtends;\n\n                funcInfo = funcInfo.upper;\n                if (!isDerivedClass) {\n                    return;\n                }\n\n                codePath.traverseSegments((segment, controller) => {\n                    const info = segInfoMap[segment.id];\n\n                    for (let i = 0; i < info.invalidNodes.length; ++i) {\n                        const invalidNode = info.invalidNodes[i];\n\n                        context.report({\n                            messageId: \"noBeforeSuper\",\n                            node: invalidNode,\n                            data: {\n                                kind: invalidNode.type === \"Super\" ? \"super\" : \"this\"\n                            }\n                        });\n                    }\n\n                    if (info.superCalled) {\n                        controller.skip();\n                    }\n                });\n            },\n\n            /**\n             * Initialize information of a given code path segment.\n             * @param {CodePathSegment} segment A code path segment to initialize.\n             * @returns {void}\n             */\n            onCodePathSegmentStart(segment) {\n                if (!isInConstructorOfDerivedClass()) {\n                    return;\n                }\n\n                // Initialize info.\n                segInfoMap[segment.id] = {\n                    superCalled: (\n                        segment.prevSegments.length > 0 &&\n                        segment.prevSegments.every(isCalled)\n                    ),\n                    invalidNodes: []\n                };\n            },\n\n            /**\n             * Update information of the code path segment when a code path was\n             * looped.\n             * @param {CodePathSegment} fromSegment The code path segment of the\n             *      end of a loop.\n             * @param {CodePathSegment} toSegment A code path segment of the head\n             *      of a loop.\n             * @returns {void}\n             */\n            onCodePathSegmentLoop(fromSegment, toSegment) {\n                if (!isInConstructorOfDerivedClass()) {\n                    return;\n                }\n\n                // Update information inside of the loop.\n                funcInfo.codePath.traverseSegments(\n                    { first: toSegment, last: fromSegment },\n                    (segment, controller) => {\n                        const info = segInfoMap[segment.id];\n\n                        if (info.superCalled) {\n                            info.invalidNodes = [];\n                            controller.skip();\n                        } else if (\n                            segment.prevSegments.length > 0 &&\n                            segment.prevSegments.every(isCalled)\n                        ) {\n                            info.superCalled = true;\n                            info.invalidNodes = [];\n                        }\n                    }\n                );\n            },\n\n            /**\n             * Reports if this is before `super()`.\n             * @param {ASTNode} node A target node.\n             * @returns {void}\n             */\n            ThisExpression(node) {\n                if (isBeforeCallOfSuper()) {\n                    setInvalid(node);\n                }\n            },\n\n            /**\n             * Reports if this is before `super()`.\n             * @param {ASTNode} node A target node.\n             * @returns {void}\n             */\n            Super(node) {\n                if (!astUtils.isCallee(node) && isBeforeCallOfSuper()) {\n                    setInvalid(node);\n                }\n            },\n\n            /**\n             * Marks `super()` called.\n             * @param {ASTNode} node A target node.\n             * @returns {void}\n             */\n            \"CallExpression:exit\"(node) {\n                if (node.callee.type === \"Super\" && isBeforeCallOfSuper()) {\n                    setSuperCalled();\n                }\n            },\n\n            /**\n             * Resets state.\n             * @returns {void}\n             */\n            \"Program:exit\"() {\n                segInfoMap = Object.create(null);\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}