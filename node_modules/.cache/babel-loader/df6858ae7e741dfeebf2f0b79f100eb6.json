{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function\n * @author James Allardice\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker\n} = require(\"eslint-utils\");\n\nconst getPropertyName = require(\"./utils/ast-utils\").getStaticPropertyName; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst nonCallableGlobals = [\"Atomics\", \"JSON\", \"Math\", \"Reflect\"];\n/**\n * Returns the name of the node to report\n * @param {ASTNode} node A node to report\n * @returns {string} name to report\n */\n\nfunction getReportNodeName(node) {\n  if (node.type === \"ChainExpression\") {\n    return getReportNodeName(node.expression);\n  }\n\n  if (node.type === \"MemberExpression\") {\n    return getPropertyName(node);\n  }\n\n  return node.name;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow calling global object properties as functions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-obj-calls\"\n    },\n    schema: [],\n    messages: {\n      unexpectedCall: \"'{{name}}' is not a function.\",\n      unexpectedRefCall: \"'{{name}}' is reference to '{{ref}}', which is not a function.\"\n    }\n  },\n\n  create(context) {\n    return {\n      Program() {\n        const scope = context.getScope();\n        const tracker = new ReferenceTracker(scope);\n        const traceMap = {};\n\n        for (const g of nonCallableGlobals) {\n          traceMap[g] = {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          };\n        }\n\n        for (const {\n          node,\n          path\n        } of tracker.iterateGlobalReferences(traceMap)) {\n          const name = getReportNodeName(node.callee);\n          const ref = path[0];\n          const messageId = name === ref ? \"unexpectedCall\" : \"unexpectedRefCall\";\n          context.report({\n            node,\n            messageId,\n            data: {\n              name,\n              ref\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["CALL","CONSTRUCT","ReferenceTracker","require","getPropertyName","getStaticPropertyName","nonCallableGlobals","getReportNodeName","node","type","expression","name","module","exports","meta","docs","description","category","recommended","url","schema","messages","unexpectedCall","unexpectedRefCall","create","context","Program","scope","getScope","tracker","traceMap","g","path","iterateGlobalReferences","callee","ref","messageId","report","data"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-obj-calls.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of an object property of the global object (Math and JSON) as a function\n * @author James Allardice\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst { CALL, CONSTRUCT, ReferenceTracker } = require(\"eslint-utils\");\nconst getPropertyName = require(\"./utils/ast-utils\").getStaticPropertyName;\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst nonCallableGlobals = [\"Atomics\", \"JSON\", \"Math\", \"Reflect\"];\n\n/**\n * Returns the name of the node to report\n * @param {ASTNode} node A node to report\n * @returns {string} name to report\n */\nfunction getReportNodeName(node) {\n    if (node.type === \"ChainExpression\") {\n        return getReportNodeName(node.expression);\n    }\n    if (node.type === \"MemberExpression\") {\n        return getPropertyName(node);\n    }\n    return node.name;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow calling global object properties as functions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-obj-calls\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedCall: \"'{{name}}' is not a function.\",\n            unexpectedRefCall: \"'{{name}}' is reference to '{{ref}}', which is not a function.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n            Program() {\n                const scope = context.getScope();\n                const tracker = new ReferenceTracker(scope);\n                const traceMap = {};\n\n                for (const g of nonCallableGlobals) {\n                    traceMap[g] = {\n                        [CALL]: true,\n                        [CONSTRUCT]: true\n                    };\n                }\n\n                for (const { node, path } of tracker.iterateGlobalReferences(traceMap)) {\n                    const name = getReportNodeName(node.callee);\n                    const ref = path[0];\n                    const messageId = name === ref ? \"unexpectedCall\" : \"unexpectedRefCall\";\n\n                    context.report({ node, messageId, data: { name, ref } });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAM;EAAEA,IAAF;EAAQC,SAAR;EAAmBC;AAAnB,IAAwCC,OAAO,CAAC,cAAD,CAArD;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,mBAAD,CAAP,CAA6BE,qBAArD,C,CAEA;AACA;AACA;;;AAEA,MAAMC,kBAAkB,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,MAApB,EAA4B,SAA5B,CAA3B;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;EAC7B,IAAIA,IAAI,CAACC,IAAL,KAAc,iBAAlB,EAAqC;IACjC,OAAOF,iBAAiB,CAACC,IAAI,CAACE,UAAN,CAAxB;EACH;;EACD,IAAIF,IAAI,CAACC,IAAL,KAAc,kBAAlB,EAAsC;IAClC,OAAOL,eAAe,CAACI,IAAD,CAAtB;EACH;;EACD,OAAOA,IAAI,CAACG,IAAZ;AACH,C,CAED;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFL,IAAI,EAAE,SADJ;IAGFM,IAAI,EAAE;MACFC,WAAW,EAAE,wDADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,cAAc,EAAE,+BADV;MAENC,iBAAiB,EAAE;IAFb;EAZR,CADO;;EAmBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,OAAO;MACHC,OAAO,GAAG;QACN,MAAMC,KAAK,GAAGF,OAAO,CAACG,QAAR,EAAd;QACA,MAAMC,OAAO,GAAG,IAAI3B,gBAAJ,CAAqByB,KAArB,CAAhB;QACA,MAAMG,QAAQ,GAAG,EAAjB;;QAEA,KAAK,MAAMC,CAAX,IAAgBzB,kBAAhB,EAAoC;UAChCwB,QAAQ,CAACC,CAAD,CAAR,GAAc;YACV,CAAC/B,IAAD,GAAQ,IADE;YAEV,CAACC,SAAD,GAAa;UAFH,CAAd;QAIH;;QAED,KAAK,MAAM;UAAEO,IAAF;UAAQwB;QAAR,CAAX,IAA6BH,OAAO,CAACI,uBAAR,CAAgCH,QAAhC,CAA7B,EAAwE;UACpE,MAAMnB,IAAI,GAAGJ,iBAAiB,CAACC,IAAI,CAAC0B,MAAN,CAA9B;UACA,MAAMC,GAAG,GAAGH,IAAI,CAAC,CAAD,CAAhB;UACA,MAAMI,SAAS,GAAGzB,IAAI,KAAKwB,GAAT,GAAe,gBAAf,GAAkC,mBAApD;UAEAV,OAAO,CAACY,MAAR,CAAe;YAAE7B,IAAF;YAAQ4B,SAAR;YAAmBE,IAAI,EAAE;cAAE3B,IAAF;cAAQwB;YAAR;UAAzB,CAAf;QACH;MACJ;;IApBE,CAAP;EAsBH;;AA3CY,CAAjB"},"metadata":{},"sourceType":"script"}