{"ast":null,"code":"/**\n * @fileoverview Rule to flag on declaring variables already declared in the outer scope\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow variable declarations from shadowing variables declared in the outer scope\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-shadow\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        builtinGlobals: {\n          type: \"boolean\",\n          default: false\n        },\n        hoist: {\n          enum: [\"all\", \"functions\", \"never\"],\n          default: \"functions\"\n        },\n        allow: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      noShadow: \"'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.\",\n      noShadowGlobal: \"'{{name}}' is already a global variable.\"\n    }\n  },\n\n  create(context) {\n    const options = {\n      builtinGlobals: context.options[0] && context.options[0].builtinGlobals,\n      hoist: context.options[0] && context.options[0].hoist || \"functions\",\n      allow: context.options[0] && context.options[0].allow || []\n    };\n    /**\n     * Check if variable name is allowed.\n     * @param  {ASTNode} variable The variable to check.\n     * @returns {boolean} Whether or not the variable name is allowed.\n     */\n\n    function isAllowed(variable) {\n      return options.allow.indexOf(variable.name) !== -1;\n    }\n    /**\n     * Checks if a variable of the class name in the class scope of ClassDeclaration.\n     *\n     * ClassDeclaration creates two variables of its name into its outer scope and its class scope.\n     * So we should ignore the variable in the class scope.\n     * @param {Object} variable The variable to check.\n     * @returns {boolean} Whether or not the variable of the class name in the class scope of ClassDeclaration.\n     */\n\n\n    function isDuplicatedClassNameVariable(variable) {\n      const block = variable.scope.block;\n      return block.type === \"ClassDeclaration\" && block.id === variable.identifiers[0];\n    }\n    /**\n     * Checks if a variable is inside the initializer of scopeVar.\n     *\n     * To avoid reporting at declarations such as `var a = function a() {};`.\n     * But it should report `var a = function(a) {};` or `var a = function() { function a() {} };`.\n     * @param {Object} variable The variable to check.\n     * @param {Object} scopeVar The scope variable to look for.\n     * @returns {boolean} Whether or not the variable is inside initializer of scopeVar.\n     */\n\n\n    function isOnInitializer(variable, scopeVar) {\n      const outerScope = scopeVar.scope;\n      const outerDef = scopeVar.defs[0];\n      const outer = outerDef && outerDef.parent && outerDef.parent.range;\n      const innerScope = variable.scope;\n      const innerDef = variable.defs[0];\n      const inner = innerDef && innerDef.name.range;\n      return outer && inner && outer[0] < inner[0] && inner[1] < outer[1] && (innerDef.type === \"FunctionName\" && innerDef.node.type === \"FunctionExpression\" || innerDef.node.type === \"ClassExpression\") && outerScope === innerScope.upper;\n    }\n    /**\n     * Get a range of a variable's identifier node.\n     * @param {Object} variable The variable to get.\n     * @returns {Array|undefined} The range of the variable's identifier node.\n     */\n\n\n    function getNameRange(variable) {\n      const def = variable.defs[0];\n      return def && def.name.range;\n    }\n    /**\n     * Get declared line and column of a variable.\n     * @param {eslint-scope.Variable} variable The variable to get.\n     * @returns {Object} The declared line and column of the variable.\n     */\n\n\n    function getDeclaredLocation(variable) {\n      const identifier = variable.identifiers[0];\n      let obj;\n\n      if (identifier) {\n        obj = {\n          global: false,\n          line: identifier.loc.start.line,\n          column: identifier.loc.start.column + 1\n        };\n      } else {\n        obj = {\n          global: true\n        };\n      }\n\n      return obj;\n    }\n    /**\n     * Checks if a variable is in TDZ of scopeVar.\n     * @param {Object} variable The variable to check.\n     * @param {Object} scopeVar The variable of TDZ.\n     * @returns {boolean} Whether or not the variable is in TDZ of scopeVar.\n     */\n\n\n    function isInTdz(variable, scopeVar) {\n      const outerDef = scopeVar.defs[0];\n      const inner = getNameRange(variable);\n      const outer = getNameRange(scopeVar);\n      return inner && outer && inner[1] < outer[0] && ( // Excepts FunctionDeclaration if is {\"hoist\":\"function\"}.\n      options.hoist !== \"functions\" || !outerDef || outerDef.node.type !== \"FunctionDeclaration\");\n    }\n    /**\n     * Checks the current context for shadowed variables.\n     * @param {Scope} scope Fixme\n     * @returns {void}\n     */\n\n\n    function checkForShadows(scope) {\n      const variables = scope.variables;\n\n      for (let i = 0; i < variables.length; ++i) {\n        const variable = variables[i]; // Skips \"arguments\" or variables of a class name in the class scope of ClassDeclaration.\n\n        if (variable.identifiers.length === 0 || isDuplicatedClassNameVariable(variable) || isAllowed(variable)) {\n          continue;\n        } // Gets shadowed variable.\n\n\n        const shadowed = astUtils.getVariableByName(scope.upper, variable.name);\n\n        if (shadowed && (shadowed.identifiers.length > 0 || options.builtinGlobals && \"writeable\" in shadowed) && !isOnInitializer(variable, shadowed) && !(options.hoist !== \"all\" && isInTdz(variable, shadowed))) {\n          const location = getDeclaredLocation(shadowed);\n          const messageId = location.global ? \"noShadowGlobal\" : \"noShadow\";\n          const data = {\n            name: variable.name\n          };\n\n          if (!location.global) {\n            data.shadowedLine = location.line;\n            data.shadowedColumn = location.column;\n          }\n\n          context.report({\n            node: variable.identifiers[0],\n            messageId,\n            data\n          });\n        }\n      }\n    }\n\n    return {\n      \"Program:exit\"() {\n        const globalScope = context.getScope();\n        const stack = globalScope.childScopes.slice();\n\n        while (stack.length) {\n          const scope = stack.pop();\n          stack.push(...scope.childScopes);\n          checkForShadows(scope);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","builtinGlobals","default","hoist","enum","allow","items","additionalProperties","messages","noShadow","noShadowGlobal","create","context","options","isAllowed","variable","indexOf","name","isDuplicatedClassNameVariable","block","scope","id","identifiers","isOnInitializer","scopeVar","outerScope","outerDef","defs","outer","parent","range","innerScope","innerDef","inner","node","upper","getNameRange","def","getDeclaredLocation","identifier","obj","global","line","loc","start","column","isInTdz","checkForShadows","variables","i","length","shadowed","getVariableByName","location","messageId","data","shadowedLine","shadowedColumn","report","globalScope","getScope","stack","childScopes","slice","pop","push"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-shadow.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag on declaring variables already declared in the outer scope\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow variable declarations from shadowing variables declared in the outer scope\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-shadow\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    builtinGlobals: { type: \"boolean\", default: false },\n                    hoist: { enum: [\"all\", \"functions\", \"never\"], default: \"functions\" },\n                    allow: {\n                        type: \"array\",\n                        items: {\n                            type: \"string\"\n                        }\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            noShadow: \"'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.\",\n            noShadowGlobal: \"'{{name}}' is already a global variable.\"\n        }\n    },\n\n    create(context) {\n\n        const options = {\n            builtinGlobals: context.options[0] && context.options[0].builtinGlobals,\n            hoist: (context.options[0] && context.options[0].hoist) || \"functions\",\n            allow: (context.options[0] && context.options[0].allow) || []\n        };\n\n        /**\n         * Check if variable name is allowed.\n         * @param  {ASTNode} variable The variable to check.\n         * @returns {boolean} Whether or not the variable name is allowed.\n         */\n        function isAllowed(variable) {\n            return options.allow.indexOf(variable.name) !== -1;\n        }\n\n        /**\n         * Checks if a variable of the class name in the class scope of ClassDeclaration.\n         *\n         * ClassDeclaration creates two variables of its name into its outer scope and its class scope.\n         * So we should ignore the variable in the class scope.\n         * @param {Object} variable The variable to check.\n         * @returns {boolean} Whether or not the variable of the class name in the class scope of ClassDeclaration.\n         */\n        function isDuplicatedClassNameVariable(variable) {\n            const block = variable.scope.block;\n\n            return block.type === \"ClassDeclaration\" && block.id === variable.identifiers[0];\n        }\n\n        /**\n         * Checks if a variable is inside the initializer of scopeVar.\n         *\n         * To avoid reporting at declarations such as `var a = function a() {};`.\n         * But it should report `var a = function(a) {};` or `var a = function() { function a() {} };`.\n         * @param {Object} variable The variable to check.\n         * @param {Object} scopeVar The scope variable to look for.\n         * @returns {boolean} Whether or not the variable is inside initializer of scopeVar.\n         */\n        function isOnInitializer(variable, scopeVar) {\n            const outerScope = scopeVar.scope;\n            const outerDef = scopeVar.defs[0];\n            const outer = outerDef && outerDef.parent && outerDef.parent.range;\n            const innerScope = variable.scope;\n            const innerDef = variable.defs[0];\n            const inner = innerDef && innerDef.name.range;\n\n            return (\n                outer &&\n                inner &&\n                outer[0] < inner[0] &&\n                inner[1] < outer[1] &&\n                ((innerDef.type === \"FunctionName\" && innerDef.node.type === \"FunctionExpression\") || innerDef.node.type === \"ClassExpression\") &&\n                outerScope === innerScope.upper\n            );\n        }\n\n        /**\n         * Get a range of a variable's identifier node.\n         * @param {Object} variable The variable to get.\n         * @returns {Array|undefined} The range of the variable's identifier node.\n         */\n        function getNameRange(variable) {\n            const def = variable.defs[0];\n\n            return def && def.name.range;\n        }\n\n        /**\n         * Get declared line and column of a variable.\n         * @param {eslint-scope.Variable} variable The variable to get.\n         * @returns {Object} The declared line and column of the variable.\n         */\n        function getDeclaredLocation(variable) {\n            const identifier = variable.identifiers[0];\n            let obj;\n\n            if (identifier) {\n                obj = {\n                    global: false,\n                    line: identifier.loc.start.line,\n                    column: identifier.loc.start.column + 1\n                };\n            } else {\n                obj = {\n                    global: true\n                };\n            }\n            return obj;\n        }\n\n        /**\n         * Checks if a variable is in TDZ of scopeVar.\n         * @param {Object} variable The variable to check.\n         * @param {Object} scopeVar The variable of TDZ.\n         * @returns {boolean} Whether or not the variable is in TDZ of scopeVar.\n         */\n        function isInTdz(variable, scopeVar) {\n            const outerDef = scopeVar.defs[0];\n            const inner = getNameRange(variable);\n            const outer = getNameRange(scopeVar);\n\n            return (\n                inner &&\n                outer &&\n                inner[1] < outer[0] &&\n\n                // Excepts FunctionDeclaration if is {\"hoist\":\"function\"}.\n                (options.hoist !== \"functions\" || !outerDef || outerDef.node.type !== \"FunctionDeclaration\")\n            );\n        }\n\n        /**\n         * Checks the current context for shadowed variables.\n         * @param {Scope} scope Fixme\n         * @returns {void}\n         */\n        function checkForShadows(scope) {\n            const variables = scope.variables;\n\n            for (let i = 0; i < variables.length; ++i) {\n                const variable = variables[i];\n\n                // Skips \"arguments\" or variables of a class name in the class scope of ClassDeclaration.\n                if (variable.identifiers.length === 0 ||\n                    isDuplicatedClassNameVariable(variable) ||\n                    isAllowed(variable)\n                ) {\n                    continue;\n                }\n\n                // Gets shadowed variable.\n                const shadowed = astUtils.getVariableByName(scope.upper, variable.name);\n\n                if (shadowed &&\n                    (shadowed.identifiers.length > 0 || (options.builtinGlobals && \"writeable\" in shadowed)) &&\n                    !isOnInitializer(variable, shadowed) &&\n                    !(options.hoist !== \"all\" && isInTdz(variable, shadowed))\n                ) {\n                    const location = getDeclaredLocation(shadowed);\n                    const messageId = location.global ? \"noShadowGlobal\" : \"noShadow\";\n                    const data = { name: variable.name };\n\n                    if (!location.global) {\n                        data.shadowedLine = location.line;\n                        data.shadowedColumn = location.column;\n                    }\n                    context.report({\n                        node: variable.identifiers[0],\n                        messageId,\n                        data\n                    });\n                }\n            }\n        }\n\n        return {\n            \"Program:exit\"() {\n                const globalScope = context.getScope();\n                const stack = globalScope.childScopes.slice();\n\n                while (stack.length) {\n                    const scope = stack.pop();\n\n                    stack.push(...scope.childScopes);\n                    checkForShadows(scope);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}