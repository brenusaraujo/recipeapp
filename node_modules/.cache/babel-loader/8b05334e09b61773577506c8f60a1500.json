{"ast":null,"code":"/**\n * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not.\n * @author Glen Mailer\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow confusing multiline expressions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-unexpected-multiline\"\n    },\n    schema: [],\n    messages: {\n      function: \"Unexpected newline between function and ( of function call.\",\n      property: \"Unexpected newline between object and [ of property access.\",\n      taggedTemplate: \"Unexpected newline between template tag and template literal.\",\n      division: \"Unexpected newline between numerator and division operator.\"\n    }\n  },\n\n  create(context) {\n    const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;\n    const sourceCode = context.getSourceCode();\n    /**\n     * Check to see if there is a newline between the node and the following open bracket\n     * line's expression\n     * @param {ASTNode} node The node to check.\n     * @param {string} messageId The error messageId to use.\n     * @returns {void}\n     * @private\n     */\n\n    function checkForBreakAfter(node, messageId) {\n      const openParen = sourceCode.getTokenAfter(node, astUtils.isNotClosingParenToken);\n      const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);\n\n      if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {\n        context.report({\n          node,\n          loc: openParen.loc,\n          messageId\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      MemberExpression(node) {\n        if (!node.computed || node.optional) {\n          return;\n        }\n\n        checkForBreakAfter(node.object, \"property\");\n      },\n\n      TaggedTemplateExpression(node) {\n        const {\n          quasi\n        } = node; // handles common tags, parenthesized tags, and typescript's generic type arguments\n\n        const tokenBefore = sourceCode.getTokenBefore(quasi);\n\n        if (tokenBefore.loc.end.line !== quasi.loc.start.line) {\n          context.report({\n            node,\n            loc: {\n              start: quasi.loc.start,\n              end: {\n                line: quasi.loc.start.line,\n                column: quasi.loc.start.column + 1\n              }\n            },\n            messageId: \"taggedTemplate\"\n          });\n        }\n      },\n\n      CallExpression(node) {\n        if (node.arguments.length === 0 || node.optional) {\n          return;\n        }\n\n        checkForBreakAfter(node.callee, \"function\");\n      },\n\n      \"BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left\"(node) {\n        const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\n        const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\n\n        if (tokenAfterOperator.type === \"Identifier\" && REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) && secondSlash.range[1] === tokenAfterOperator.range[0]) {\n          checkForBreakAfter(node.left, \"division\");\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","function","property","taggedTemplate","division","create","context","REGEX_FLAG_MATCHER","sourceCode","getSourceCode","checkForBreakAfter","node","messageId","openParen","getTokenAfter","isNotClosingParenToken","nodeExpressionEnd","getTokenBefore","loc","start","line","end","report","MemberExpression","computed","optional","object","TaggedTemplateExpression","quasi","tokenBefore","column","CallExpression","arguments","length","callee","secondSlash","token","value","tokenAfterOperator","test","range","left"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-unexpected-multiline.js"],"sourcesContent":["/**\n * @fileoverview Rule to spot scenarios where a newline looks like it is ending a statement, but is not.\n * @author Glen Mailer\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow confusing multiline expressions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-unexpected-multiline\"\n        },\n\n        schema: [],\n        messages: {\n            function: \"Unexpected newline between function and ( of function call.\",\n            property: \"Unexpected newline between object and [ of property access.\",\n            taggedTemplate: \"Unexpected newline between template tag and template literal.\",\n            division: \"Unexpected newline between numerator and division operator.\"\n        }\n    },\n\n    create(context) {\n\n        const REGEX_FLAG_MATCHER = /^[gimsuy]+$/u;\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Check to see if there is a newline between the node and the following open bracket\n         * line's expression\n         * @param {ASTNode} node The node to check.\n         * @param {string} messageId The error messageId to use.\n         * @returns {void}\n         * @private\n         */\n        function checkForBreakAfter(node, messageId) {\n            const openParen = sourceCode.getTokenAfter(node, astUtils.isNotClosingParenToken);\n            const nodeExpressionEnd = sourceCode.getTokenBefore(openParen);\n\n            if (openParen.loc.start.line !== nodeExpressionEnd.loc.end.line) {\n                context.report({\n                    node,\n                    loc: openParen.loc,\n                    messageId\n                });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n\n            MemberExpression(node) {\n                if (!node.computed || node.optional) {\n                    return;\n                }\n                checkForBreakAfter(node.object, \"property\");\n            },\n\n            TaggedTemplateExpression(node) {\n                const { quasi } = node;\n\n                // handles common tags, parenthesized tags, and typescript's generic type arguments\n                const tokenBefore = sourceCode.getTokenBefore(quasi);\n\n                if (tokenBefore.loc.end.line !== quasi.loc.start.line) {\n                    context.report({\n                        node,\n                        loc: {\n                            start: quasi.loc.start,\n                            end: {\n                                line: quasi.loc.start.line,\n                                column: quasi.loc.start.column + 1\n                            }\n                        },\n                        messageId: \"taggedTemplate\"\n                    });\n                }\n            },\n\n            CallExpression(node) {\n                if (node.arguments.length === 0 || node.optional) {\n                    return;\n                }\n                checkForBreakAfter(node.callee, \"function\");\n            },\n\n            \"BinaryExpression[operator='/'] > BinaryExpression[operator='/'].left\"(node) {\n                const secondSlash = sourceCode.getTokenAfter(node, token => token.value === \"/\");\n                const tokenAfterOperator = sourceCode.getTokenAfter(secondSlash);\n\n                if (\n                    tokenAfterOperator.type === \"Identifier\" &&\n                    REGEX_FLAG_MATCHER.test(tokenAfterOperator.value) &&\n                    secondSlash.range[1] === tokenAfterOperator.range[0]\n                ) {\n                    checkForBreakAfter(node.left, \"division\");\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}