{"ast":null,"code":"/**\n * @fileoverview Config file operations. This file must be usable in the browser,\n * so no Node-specific code can be here.\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\nconst RULE_SEVERITY_STRINGS = [\"off\", \"warn\", \"error\"],\n      RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {\n  map[value] = index;\n  return map;\n}, {}),\n      VALID_SEVERITIES = [0, 1, 2, \"off\", \"warn\", \"error\"]; //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  /**\n   * Normalizes the severity value of a rule's configuration to a number\n   * @param {(number|string|[number, ...*]|[string, ...*])} ruleConfig A rule's configuration value, generally\n   * received from the user. A valid config value is either 0, 1, 2, the string \"off\" (treated the same as 0),\n   * the string \"warn\" (treated the same as 1), the string \"error\" (treated the same as 2), or an array\n   * whose first element is one of the above values. Strings are matched case-insensitively.\n   * @returns {(0|1|2)} The numeric severity value if the config value was valid, otherwise 0.\n   */\n  getRuleSeverity(ruleConfig) {\n    const severityValue = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n\n    if (severityValue === 0 || severityValue === 1 || severityValue === 2) {\n      return severityValue;\n    }\n\n    if (typeof severityValue === \"string\") {\n      return RULE_SEVERITY[severityValue.toLowerCase()] || 0;\n    }\n\n    return 0;\n  },\n\n  /**\n   * Converts old-style severity settings (0, 1, 2) into new-style\n   * severity settings (off, warn, error) for all rules. Assumption is that severity\n   * values have already been validated as correct.\n   * @param {Object} config The config object to normalize.\n   * @returns {void}\n   */\n  normalizeToStrings(config) {\n    if (config.rules) {\n      Object.keys(config.rules).forEach(ruleId => {\n        const ruleConfig = config.rules[ruleId];\n\n        if (typeof ruleConfig === \"number\") {\n          config.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];\n        } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"number\") {\n          ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];\n        }\n      });\n    }\n  },\n\n  /**\n   * Determines if the severity for the given rule configuration represents an error.\n   * @param {int|string|Array} ruleConfig The configuration for an individual rule.\n   * @returns {boolean} True if the rule represents an error, false if not.\n   */\n  isErrorSeverity(ruleConfig) {\n    return module.exports.getRuleSeverity(ruleConfig) === 2;\n  },\n\n  /**\n   * Checks whether a given config has valid severity or not.\n   * @param {number|string|Array} ruleConfig The configuration for an individual rule.\n   * @returns {boolean} `true` if the configuration has valid severity.\n   */\n  isValidSeverity(ruleConfig) {\n    let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n\n    if (typeof severity === \"string\") {\n      severity = severity.toLowerCase();\n    }\n\n    return VALID_SEVERITIES.indexOf(severity) !== -1;\n  },\n\n  /**\n   * Checks whether every rule of a given config has valid severity or not.\n   * @param {Object} config The configuration for rules.\n   * @returns {boolean} `true` if the configuration has valid severity.\n   */\n  isEverySeverityValid(config) {\n    return Object.keys(config).every(ruleId => this.isValidSeverity(config[ruleId]));\n  },\n\n  /**\n   * Normalizes a value for a global in a config\n   * @param {(boolean|string|null)} configuredValue The value given for a global in configuration or in\n   * a global directive comment\n   * @returns {(\"readable\"|\"writeable\"|\"off\")} The value normalized as a string\n   * @throws Error if global value is invalid\n   */\n  normalizeConfigGlobal(configuredValue) {\n    switch (configuredValue) {\n      case \"off\":\n        return \"off\";\n\n      case true:\n      case \"true\":\n      case \"writeable\":\n      case \"writable\":\n        return \"writable\";\n\n      case null:\n      case false:\n      case \"false\":\n      case \"readable\":\n      case \"readonly\":\n        return \"readonly\";\n\n      default:\n        throw new Error(`'${configuredValue}' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`);\n    }\n  }\n\n};","map":{"version":3,"names":["RULE_SEVERITY_STRINGS","RULE_SEVERITY","reduce","map","value","index","VALID_SEVERITIES","module","exports","getRuleSeverity","ruleConfig","severityValue","Array","isArray","toLowerCase","normalizeToStrings","config","rules","Object","keys","forEach","ruleId","isErrorSeverity","isValidSeverity","severity","indexOf","isEverySeverityValid","every","normalizeConfigGlobal","configuredValue","Error"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/@eslint/eslintrc/lib/shared/config-ops.js"],"sourcesContent":["/**\n * @fileoverview Config file operations. This file must be usable in the browser,\n * so no Node-specific code can be here.\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\nconst RULE_SEVERITY_STRINGS = [\"off\", \"warn\", \"error\"],\n    RULE_SEVERITY = RULE_SEVERITY_STRINGS.reduce((map, value, index) => {\n        map[value] = index;\n        return map;\n    }, {}),\n    VALID_SEVERITIES = [0, 1, 2, \"off\", \"warn\", \"error\"];\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n\n    /**\n     * Normalizes the severity value of a rule's configuration to a number\n     * @param {(number|string|[number, ...*]|[string, ...*])} ruleConfig A rule's configuration value, generally\n     * received from the user. A valid config value is either 0, 1, 2, the string \"off\" (treated the same as 0),\n     * the string \"warn\" (treated the same as 1), the string \"error\" (treated the same as 2), or an array\n     * whose first element is one of the above values. Strings are matched case-insensitively.\n     * @returns {(0|1|2)} The numeric severity value if the config value was valid, otherwise 0.\n     */\n    getRuleSeverity(ruleConfig) {\n        const severityValue = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n\n        if (severityValue === 0 || severityValue === 1 || severityValue === 2) {\n            return severityValue;\n        }\n\n        if (typeof severityValue === \"string\") {\n            return RULE_SEVERITY[severityValue.toLowerCase()] || 0;\n        }\n\n        return 0;\n    },\n\n    /**\n     * Converts old-style severity settings (0, 1, 2) into new-style\n     * severity settings (off, warn, error) for all rules. Assumption is that severity\n     * values have already been validated as correct.\n     * @param {Object} config The config object to normalize.\n     * @returns {void}\n     */\n    normalizeToStrings(config) {\n\n        if (config.rules) {\n            Object.keys(config.rules).forEach(ruleId => {\n                const ruleConfig = config.rules[ruleId];\n\n                if (typeof ruleConfig === \"number\") {\n                    config.rules[ruleId] = RULE_SEVERITY_STRINGS[ruleConfig] || RULE_SEVERITY_STRINGS[0];\n                } else if (Array.isArray(ruleConfig) && typeof ruleConfig[0] === \"number\") {\n                    ruleConfig[0] = RULE_SEVERITY_STRINGS[ruleConfig[0]] || RULE_SEVERITY_STRINGS[0];\n                }\n            });\n        }\n    },\n\n    /**\n     * Determines if the severity for the given rule configuration represents an error.\n     * @param {int|string|Array} ruleConfig The configuration for an individual rule.\n     * @returns {boolean} True if the rule represents an error, false if not.\n     */\n    isErrorSeverity(ruleConfig) {\n        return module.exports.getRuleSeverity(ruleConfig) === 2;\n    },\n\n    /**\n     * Checks whether a given config has valid severity or not.\n     * @param {number|string|Array} ruleConfig The configuration for an individual rule.\n     * @returns {boolean} `true` if the configuration has valid severity.\n     */\n    isValidSeverity(ruleConfig) {\n        let severity = Array.isArray(ruleConfig) ? ruleConfig[0] : ruleConfig;\n\n        if (typeof severity === \"string\") {\n            severity = severity.toLowerCase();\n        }\n        return VALID_SEVERITIES.indexOf(severity) !== -1;\n    },\n\n    /**\n     * Checks whether every rule of a given config has valid severity or not.\n     * @param {Object} config The configuration for rules.\n     * @returns {boolean} `true` if the configuration has valid severity.\n     */\n    isEverySeverityValid(config) {\n        return Object.keys(config).every(ruleId => this.isValidSeverity(config[ruleId]));\n    },\n\n    /**\n     * Normalizes a value for a global in a config\n     * @param {(boolean|string|null)} configuredValue The value given for a global in configuration or in\n     * a global directive comment\n     * @returns {(\"readable\"|\"writeable\"|\"off\")} The value normalized as a string\n     * @throws Error if global value is invalid\n     */\n    normalizeConfigGlobal(configuredValue) {\n        switch (configuredValue) {\n            case \"off\":\n                return \"off\";\n\n            case true:\n            case \"true\":\n            case \"writeable\":\n            case \"writable\":\n                return \"writable\";\n\n            case null:\n            case false:\n            case \"false\":\n            case \"readable\":\n            case \"readonly\":\n                return \"readonly\";\n\n            default:\n                throw new Error(`'${configuredValue}' is not a valid configuration for a global (use 'readonly', 'writable', or 'off')`);\n        }\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}