{"ast":null,"code":"// A simple implementation of make-array\nfunction make_array(subject) {\n  return Array.isArray(subject) ? subject : [subject];\n}\n\nconst REGEX_BLANK_LINE = /^\\s+$/;\nconst REGEX_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/;\nconst REGEX_LEADING_EXCAPED_HASH = /^\\\\#/;\nconst SLASH = '/';\nconst KEY_IGNORE = typeof Symbol !== 'undefined' ? Symbol.for('node-ignore')\n/* istanbul ignore next */\n: 'node-ignore';\n\nconst define = (object, key, value) => Object.defineProperty(object, key, {\n  value\n});\n\nconst REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g; // Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\n\nconst sanitizeRange = range => range.replace(REGEX_REGEXP_RANGE, (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match // Invalid range (out of order) which is ok for gitignore rules but\n//   fatal for JavaScript regular expression, so eliminate it.\n: ''); // > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n// '`foo/`' should not continue with the '`..`'\n\n\nconst DEFAULT_REPLACER_PREFIX = [// > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n[// (a\\ ) -> (a )\n// (a  ) -> (a)\n// (a \\ ) -> (a  )\n/\\\\?\\s+$/, match => match.indexOf('\\\\') === 0 ? ' ' : ''], // replace (\\ ) with ' '\n[/\\\\\\s/g, () => ' '], // Escape metacharacters\n// which is written down by users but means special for regular expressions.\n// > There are 12 characters with special meanings:\n// > - the backslash \\,\n// > - the caret ^,\n// > - the dollar sign $,\n// > - the period or dot .,\n// > - the vertical bar or pipe symbol |,\n// > - the question mark ?,\n// > - the asterisk or star *,\n// > - the plus sign +,\n// > - the opening parenthesis (,\n// > - the closing parenthesis ),\n// > - and the opening square bracket [,\n// > - the opening curly brace {,\n// > These special characters are often called \"metacharacters\".\n[/[\\\\^$.|*+(){]/g, match => `\\\\${match}`], [// > [abc] matches any character inside the brackets\n// >    (in this case a, b, or c);\n/\\[([^\\]/]*)($|\\])/g, (match, p1, p2) => p2 === ']' ? `[${sanitizeRange(p1)}]` : `\\\\${match}`], [// > a question mark (?) matches a single character\n/(?!\\\\)\\?/g, () => '[^/]'], // leading slash\n[// > A leading slash matches the beginning of the pathname.\n// > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n// A leading slash matches the beginning of the pathname\n/^\\//, () => '^'], // replace special metacharacter slash after the leading slash\n[/\\//g, () => '\\\\/'], [// > A leading \"**\" followed by a slash means match in all directories.\n// > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n// > the same as pattern \"foo\".\n// > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n// >   under directory \"foo\".\n// Notice that the '*'s have been replaced as '\\\\*'\n/^\\^*\\\\\\*\\\\\\*\\\\\\//, // '**/foo' <-> 'foo'\n() => '^(?:.*\\\\/)?']];\nconst DEFAULT_REPLACER_SUFFIX = [// starting\n[// there will be no leading '/'\n//   (which has been replaced by section \"leading slash\")\n// If starts with '**', adding a '^' to the regular expression also works\n/^(?=[^^])/, function startingReplacer() {\n  return !/\\/(?!$)/.test(this) // > If the pattern does not contain a slash /,\n  // >   Git treats it as a shell glob pattern\n  // Actually, if there is only a trailing slash,\n  //   git also treats it as a shell glob pattern\n  ? '(?:^|\\\\/)' // > Otherwise, Git treats the pattern as a shell glob suitable for\n  // >   consumption by fnmatch(3)\n  : '^';\n}], // two globstars\n[// Use lookahead assertions so that we could match more than one `'/**'`\n/\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g, // Zero, one or several directories\n// should not use '*', or it will be replaced by the next replacer\n// Check if it is not the last `'/**'`\n(match, index, str) => index + 6 < str.length // case: /**/\n// > A slash followed by two consecutive asterisks then a slash matches\n// >   zero or more directories.\n// > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n// '/**/'\n? '(?:\\\\/[^\\\\/]+)*' // case: /**\n// > A trailing `\"/**\"` matches everything inside.\n// #21: everything inside but it should not include the current folder\n: '\\\\/.+'], // intermediate wildcards\n[// Never replace escaped '*'\n// ignore rule '\\*' will match the path '*'\n// 'abc.*/' -> go\n// 'abc.*'  -> skip this rule\n/(^|[^\\\\]+)\\\\\\*(?=.+)/g, // '*.js' matches '.js'\n// '*.js' doesn't match 'abc'\n(match, p1) => `${p1}[^\\\\/]*`], // trailing wildcard\n[/(\\^|\\\\\\/)?\\\\\\*$/, (match, p1) => {\n  const prefix = p1 // '\\^':\n  // '/*' does not match ''\n  // '/*' does not match everything\n  // '\\\\\\/':\n  // 'abc/*' does not match 'abc/'\n  ? `${p1}[^/]+` // 'a*' matches 'a'\n  // 'a*' matches 'aa'\n  : '[^/]*';\n  return `${prefix}(?=$|\\\\/$)`;\n}], [// unescape\n/\\\\\\\\\\\\/g, () => '\\\\']];\nconst POSITIVE_REPLACERS = [...DEFAULT_REPLACER_PREFIX, // 'f'\n// matches\n// - /f(end)\n// - /f/\n// - (start)f(end)\n// - (start)f/\n// doesn't match\n// - oof\n// - foo\n// pseudo:\n// -> (^|/)f(/|$)\n// ending\n[// 'js' will not match 'js.'\n// 'ab' will not match 'abc'\n/(?:[^*/])$/, // 'js*' will not match 'a.js'\n// 'js/' will not match 'a.js'\n// 'js' will match 'a.js' and 'a.js/'\nmatch => `${match}(?=$|\\\\/)`], ...DEFAULT_REPLACER_SUFFIX];\nconst NEGATIVE_REPLACERS = [...DEFAULT_REPLACER_PREFIX, // #24, #38\n// The MISSING rule of [gitignore docs](https://git-scm.com/docs/gitignore)\n// A negative pattern without a trailing wildcard should not\n// re-include the things inside that directory.\n// eg:\n// ['node_modules/*', '!node_modules']\n// should ignore `node_modules/a.js`\n[/(?:[^*])$/, match => `${match}(?=$|\\\\/$)`], ...DEFAULT_REPLACER_SUFFIX]; // A simple cache, because an ignore rule only has only one certain meaning\n\nconst cache = Object.create(null); // @param {pattern}\n\nconst make_regex = (pattern, negative, ignorecase) => {\n  const r = cache[pattern];\n\n  if (r) {\n    return r;\n  }\n\n  const replacers = negative ? NEGATIVE_REPLACERS : POSITIVE_REPLACERS;\n  const source = replacers.reduce((prev, current) => prev.replace(current[0], current[1].bind(pattern)), pattern);\n  return cache[pattern] = ignorecase ? new RegExp(source, 'i') : new RegExp(source);\n}; // > A blank line matches no files, so it can serve as a separator for readability.\n\n\nconst checkPattern = pattern => pattern && typeof pattern === 'string' && !REGEX_BLANK_LINE.test(pattern) // > A line starting with # serves as a comment.\n&& pattern.indexOf('#') !== 0;\n\nconst createRule = (pattern, ignorecase) => {\n  const origin = pattern;\n  let negative = false; // > An optional prefix \"!\" which negates the pattern;\n\n  if (pattern.indexOf('!') === 0) {\n    negative = true;\n    pattern = pattern.substr(1);\n  }\n\n  pattern = pattern // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n  // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n  .replace(REGEX_LEADING_EXCAPED_EXCLAMATION, '!') // > Put a backslash (\"\\\") in front of the first hash for patterns that\n  // >   begin with a hash.\n  .replace(REGEX_LEADING_EXCAPED_HASH, '#');\n  const regex = make_regex(pattern, negative, ignorecase);\n  return {\n    origin,\n    pattern,\n    negative,\n    regex\n  };\n};\n\nclass IgnoreBase {\n  constructor() {\n    let {\n      ignorecase = true\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._rules = [];\n    this._ignorecase = ignorecase;\n    define(this, KEY_IGNORE, true);\n\n    this._initCache();\n  }\n\n  _initCache() {\n    this._cache = Object.create(null);\n  } // @param {Array.<string>|string|Ignore} pattern\n\n\n  add(pattern) {\n    this._added = false;\n\n    if (typeof pattern === 'string') {\n      pattern = pattern.split(/\\r?\\n/g);\n    }\n\n    make_array(pattern).forEach(this._addPattern, this); // Some rules have just added to the ignore,\n    // making the behavior changed.\n\n    if (this._added) {\n      this._initCache();\n    }\n\n    return this;\n  } // legacy\n\n\n  addPattern(pattern) {\n    return this.add(pattern);\n  }\n\n  _addPattern(pattern) {\n    // #32\n    if (pattern && pattern[KEY_IGNORE]) {\n      this._rules = this._rules.concat(pattern._rules);\n      this._added = true;\n      return;\n    }\n\n    if (checkPattern(pattern)) {\n      const rule = createRule(pattern, this._ignorecase);\n      this._added = true;\n\n      this._rules.push(rule);\n    }\n  }\n\n  filter(paths) {\n    return make_array(paths).filter(path => this._filter(path));\n  }\n\n  createFilter() {\n    return path => this._filter(path);\n  }\n\n  ignores(path) {\n    return !this._filter(path);\n  } // @returns `Boolean` true if the `path` is NOT ignored\n\n\n  _filter(path, slices) {\n    if (!path) {\n      return false;\n    }\n\n    if (path in this._cache) {\n      return this._cache[path];\n    }\n\n    if (!slices) {\n      // path/to/a.js\n      // ['path', 'to', 'a.js']\n      slices = path.split(SLASH);\n    }\n\n    slices.pop();\n    return this._cache[path] = slices.length // > It is not possible to re-include a file if a parent directory of\n    // >   that file is excluded.\n    // If the path contains a parent directory, check the parent first\n    ? this._filter(slices.join(SLASH) + SLASH, slices) && this._test(path) // Or only test the path\n    : this._test(path);\n  } // @returns {Boolean} true if a file is NOT ignored\n\n\n  _test(path) {\n    // Explicitly define variable type by setting matched to `0`\n    let matched = 0;\n\n    this._rules.forEach(rule => {\n      // if matched = true, then we only test negative rules\n      // if matched = false, then we test non-negative rules\n      if (!(matched ^ rule.negative)) {\n        matched = rule.negative ^ rule.regex.test(path);\n      }\n    });\n\n    return !matched;\n  }\n\n} // Windows\n// --------------------------------------------------------------\n\n/* istanbul ignore if  */\n\n\nif ( // Detect `process` so that it can run in browsers.\ntypeof process !== 'undefined' && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === 'win32')) {\n  const filter = IgnoreBase.prototype._filter;\n  /* eslint no-control-regex: \"off\" */\n\n  const make_posix = str => /^\\\\\\\\\\?\\\\/.test(str) || /[^\\x00-\\x80]+/.test(str) ? str : str.replace(/\\\\/g, '/');\n\n  IgnoreBase.prototype._filter = function filterWin32(path, slices) {\n    path = make_posix(path);\n    return filter.call(this, path, slices);\n  };\n}\n\nmodule.exports = options => new IgnoreBase(options);","map":{"version":3,"names":["make_array","subject","Array","isArray","REGEX_BLANK_LINE","REGEX_LEADING_EXCAPED_EXCLAMATION","REGEX_LEADING_EXCAPED_HASH","SLASH","KEY_IGNORE","Symbol","for","define","object","key","value","Object","defineProperty","REGEX_REGEXP_RANGE","sanitizeRange","range","replace","match","from","to","charCodeAt","DEFAULT_REPLACER_PREFIX","indexOf","p1","p2","DEFAULT_REPLACER_SUFFIX","startingReplacer","test","index","str","length","prefix","POSITIVE_REPLACERS","NEGATIVE_REPLACERS","cache","create","make_regex","pattern","negative","ignorecase","r","replacers","source","reduce","prev","current","bind","RegExp","checkPattern","createRule","origin","substr","regex","IgnoreBase","constructor","_rules","_ignorecase","_initCache","_cache","add","_added","split","forEach","_addPattern","addPattern","concat","rule","push","filter","paths","path","_filter","createFilter","ignores","slices","pop","join","_test","matched","process","env","IGNORE_TEST_WIN32","platform","prototype","make_posix","filterWin32","call","module","exports","options"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/ignore/index.js"],"sourcesContent":["// A simple implementation of make-array\nfunction make_array (subject) {\n  return Array.isArray(subject)\n    ? subject\n    : [subject]\n}\n\nconst REGEX_BLANK_LINE = /^\\s+$/\nconst REGEX_LEADING_EXCAPED_EXCLAMATION = /^\\\\!/\nconst REGEX_LEADING_EXCAPED_HASH = /^\\\\#/\nconst SLASH = '/'\nconst KEY_IGNORE = typeof Symbol !== 'undefined'\n  ? Symbol.for('node-ignore')\n  /* istanbul ignore next */\n  : 'node-ignore'\n\nconst define = (object, key, value) =>\n  Object.defineProperty(object, key, {value})\n\nconst REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g\n\n// Sanitize the range of a regular expression\n// The cases are complicated, see test cases for details\nconst sanitizeRange = range => range.replace(\n  REGEX_REGEXP_RANGE,\n  (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0)\n    ? match\n    // Invalid range (out of order) which is ok for gitignore rules but\n    //   fatal for JavaScript regular expression, so eliminate it.\n    : ''\n)\n\n// > If the pattern ends with a slash,\n// > it is removed for the purpose of the following description,\n// > but it would only find a match with a directory.\n// > In other words, foo/ will match a directory foo and paths underneath it,\n// > but will not match a regular file or a symbolic link foo\n// >  (this is consistent with the way how pathspec works in general in Git).\n// '`foo/`' will not match regular file '`foo`' or symbolic link '`foo`'\n// -> ignore-rules will not deal with it, because it costs extra `fs.stat` call\n//      you could use option `mark: true` with `glob`\n\n// '`foo/`' should not continue with the '`..`'\nconst DEFAULT_REPLACER_PREFIX = [\n\n  // > Trailing spaces are ignored unless they are quoted with backslash (\"\\\")\n  [\n    // (a\\ ) -> (a )\n    // (a  ) -> (a)\n    // (a \\ ) -> (a  )\n    /\\\\?\\s+$/,\n    match => match.indexOf('\\\\') === 0\n      ? ' '\n      : ''\n  ],\n\n  // replace (\\ ) with ' '\n  [\n    /\\\\\\s/g,\n    () => ' '\n  ],\n\n  // Escape metacharacters\n  // which is written down by users but means special for regular expressions.\n\n  // > There are 12 characters with special meanings:\n  // > - the backslash \\,\n  // > - the caret ^,\n  // > - the dollar sign $,\n  // > - the period or dot .,\n  // > - the vertical bar or pipe symbol |,\n  // > - the question mark ?,\n  // > - the asterisk or star *,\n  // > - the plus sign +,\n  // > - the opening parenthesis (,\n  // > - the closing parenthesis ),\n  // > - and the opening square bracket [,\n  // > - the opening curly brace {,\n  // > These special characters are often called \"metacharacters\".\n  [\n    /[\\\\^$.|*+(){]/g,\n    match => `\\\\${match}`\n  ],\n\n  [\n    // > [abc] matches any character inside the brackets\n    // >    (in this case a, b, or c);\n    /\\[([^\\]/]*)($|\\])/g,\n    (match, p1, p2) => p2 === ']'\n      ? `[${sanitizeRange(p1)}]`\n      : `\\\\${match}`\n  ],\n\n  [\n    // > a question mark (?) matches a single character\n    /(?!\\\\)\\?/g,\n    () => '[^/]'\n  ],\n\n  // leading slash\n  [\n\n    // > A leading slash matches the beginning of the pathname.\n    // > For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".\n    // A leading slash matches the beginning of the pathname\n    /^\\//,\n    () => '^'\n  ],\n\n  // replace special metacharacter slash after the leading slash\n  [\n    /\\//g,\n    () => '\\\\/'\n  ],\n\n  [\n    // > A leading \"**\" followed by a slash means match in all directories.\n    // > For example, \"**/foo\" matches file or directory \"foo\" anywhere,\n    // > the same as pattern \"foo\".\n    // > \"**/foo/bar\" matches file or directory \"bar\" anywhere that is directly\n    // >   under directory \"foo\".\n    // Notice that the '*'s have been replaced as '\\\\*'\n    /^\\^*\\\\\\*\\\\\\*\\\\\\//,\n\n    // '**/foo' <-> 'foo'\n    () => '^(?:.*\\\\/)?'\n  ]\n]\n\nconst DEFAULT_REPLACER_SUFFIX = [\n  // starting\n  [\n    // there will be no leading '/'\n    //   (which has been replaced by section \"leading slash\")\n    // If starts with '**', adding a '^' to the regular expression also works\n    /^(?=[^^])/,\n    function startingReplacer () {\n      return !/\\/(?!$)/.test(this)\n        // > If the pattern does not contain a slash /,\n        // >   Git treats it as a shell glob pattern\n        // Actually, if there is only a trailing slash,\n        //   git also treats it as a shell glob pattern\n        ? '(?:^|\\\\/)'\n\n        // > Otherwise, Git treats the pattern as a shell glob suitable for\n        // >   consumption by fnmatch(3)\n        : '^'\n    }\n  ],\n\n  // two globstars\n  [\n    // Use lookahead assertions so that we could match more than one `'/**'`\n    /\\\\\\/\\\\\\*\\\\\\*(?=\\\\\\/|$)/g,\n\n    // Zero, one or several directories\n    // should not use '*', or it will be replaced by the next replacer\n\n    // Check if it is not the last `'/**'`\n    (match, index, str) => index + 6 < str.length\n\n      // case: /**/\n      // > A slash followed by two consecutive asterisks then a slash matches\n      // >   zero or more directories.\n      // > For example, \"a/**/b\" matches \"a/b\", \"a/x/b\", \"a/x/y/b\" and so on.\n      // '/**/'\n      ? '(?:\\\\/[^\\\\/]+)*'\n\n      // case: /**\n      // > A trailing `\"/**\"` matches everything inside.\n\n      // #21: everything inside but it should not include the current folder\n      : '\\\\/.+'\n  ],\n\n  // intermediate wildcards\n  [\n    // Never replace escaped '*'\n    // ignore rule '\\*' will match the path '*'\n\n    // 'abc.*/' -> go\n    // 'abc.*'  -> skip this rule\n    /(^|[^\\\\]+)\\\\\\*(?=.+)/g,\n\n    // '*.js' matches '.js'\n    // '*.js' doesn't match 'abc'\n    (match, p1) => `${p1}[^\\\\/]*`\n  ],\n\n  // trailing wildcard\n  [\n    /(\\^|\\\\\\/)?\\\\\\*$/,\n    (match, p1) => {\n      const prefix = p1\n        // '\\^':\n        // '/*' does not match ''\n        // '/*' does not match everything\n\n        // '\\\\\\/':\n        // 'abc/*' does not match 'abc/'\n        ? `${p1}[^/]+`\n\n        // 'a*' matches 'a'\n        // 'a*' matches 'aa'\n        : '[^/]*'\n\n      return `${prefix}(?=$|\\\\/$)`\n    }\n  ],\n\n  [\n    // unescape\n    /\\\\\\\\\\\\/g,\n    () => '\\\\'\n  ]\n]\n\nconst POSITIVE_REPLACERS = [\n  ...DEFAULT_REPLACER_PREFIX,\n\n  // 'f'\n  // matches\n  // - /f(end)\n  // - /f/\n  // - (start)f(end)\n  // - (start)f/\n  // doesn't match\n  // - oof\n  // - foo\n  // pseudo:\n  // -> (^|/)f(/|$)\n\n  // ending\n  [\n    // 'js' will not match 'js.'\n    // 'ab' will not match 'abc'\n    /(?:[^*/])$/,\n\n    // 'js*' will not match 'a.js'\n    // 'js/' will not match 'a.js'\n    // 'js' will match 'a.js' and 'a.js/'\n    match => `${match}(?=$|\\\\/)`\n  ],\n\n  ...DEFAULT_REPLACER_SUFFIX\n]\n\nconst NEGATIVE_REPLACERS = [\n  ...DEFAULT_REPLACER_PREFIX,\n\n  // #24, #38\n  // The MISSING rule of [gitignore docs](https://git-scm.com/docs/gitignore)\n  // A negative pattern without a trailing wildcard should not\n  // re-include the things inside that directory.\n\n  // eg:\n  // ['node_modules/*', '!node_modules']\n  // should ignore `node_modules/a.js`\n  [\n    /(?:[^*])$/,\n    match => `${match}(?=$|\\\\/$)`\n  ],\n\n  ...DEFAULT_REPLACER_SUFFIX\n]\n\n// A simple cache, because an ignore rule only has only one certain meaning\nconst cache = Object.create(null)\n\n// @param {pattern}\nconst make_regex = (pattern, negative, ignorecase) => {\n  const r = cache[pattern]\n  if (r) {\n    return r\n  }\n\n  const replacers = negative\n    ? NEGATIVE_REPLACERS\n    : POSITIVE_REPLACERS\n\n  const source = replacers.reduce(\n    (prev, current) => prev.replace(current[0], current[1].bind(pattern)),\n    pattern\n  )\n\n  return cache[pattern] = ignorecase\n    ? new RegExp(source, 'i')\n    : new RegExp(source)\n}\n\n// > A blank line matches no files, so it can serve as a separator for readability.\nconst checkPattern = pattern => pattern\n  && typeof pattern === 'string'\n  && !REGEX_BLANK_LINE.test(pattern)\n\n  // > A line starting with # serves as a comment.\n  && pattern.indexOf('#') !== 0\n\nconst createRule = (pattern, ignorecase) => {\n  const origin = pattern\n  let negative = false\n\n  // > An optional prefix \"!\" which negates the pattern;\n  if (pattern.indexOf('!') === 0) {\n    negative = true\n    pattern = pattern.substr(1)\n  }\n\n  pattern = pattern\n  // > Put a backslash (\"\\\") in front of the first \"!\" for patterns that\n  // >   begin with a literal \"!\", for example, `\"\\!important!.txt\"`.\n  .replace(REGEX_LEADING_EXCAPED_EXCLAMATION, '!')\n  // > Put a backslash (\"\\\") in front of the first hash for patterns that\n  // >   begin with a hash.\n  .replace(REGEX_LEADING_EXCAPED_HASH, '#')\n\n  const regex = make_regex(pattern, negative, ignorecase)\n\n  return {\n    origin,\n    pattern,\n    negative,\n    regex\n  }\n}\n\nclass IgnoreBase {\n  constructor ({\n    ignorecase = true\n  } = {}) {\n    this._rules = []\n    this._ignorecase = ignorecase\n    define(this, KEY_IGNORE, true)\n    this._initCache()\n  }\n\n  _initCache () {\n    this._cache = Object.create(null)\n  }\n\n  // @param {Array.<string>|string|Ignore} pattern\n  add (pattern) {\n    this._added = false\n\n    if (typeof pattern === 'string') {\n      pattern = pattern.split(/\\r?\\n/g)\n    }\n\n    make_array(pattern).forEach(this._addPattern, this)\n\n    // Some rules have just added to the ignore,\n    // making the behavior changed.\n    if (this._added) {\n      this._initCache()\n    }\n\n    return this\n  }\n\n  // legacy\n  addPattern (pattern) {\n    return this.add(pattern)\n  }\n\n  _addPattern (pattern) {\n    // #32\n    if (pattern && pattern[KEY_IGNORE]) {\n      this._rules = this._rules.concat(pattern._rules)\n      this._added = true\n      return\n    }\n\n    if (checkPattern(pattern)) {\n      const rule = createRule(pattern, this._ignorecase)\n      this._added = true\n      this._rules.push(rule)\n    }\n  }\n\n  filter (paths) {\n    return make_array(paths).filter(path => this._filter(path))\n  }\n\n  createFilter () {\n    return path => this._filter(path)\n  }\n\n  ignores (path) {\n    return !this._filter(path)\n  }\n\n  // @returns `Boolean` true if the `path` is NOT ignored\n  _filter (path, slices) {\n    if (!path) {\n      return false\n    }\n\n    if (path in this._cache) {\n      return this._cache[path]\n    }\n\n    if (!slices) {\n      // path/to/a.js\n      // ['path', 'to', 'a.js']\n      slices = path.split(SLASH)\n    }\n\n    slices.pop()\n\n    return this._cache[path] = slices.length\n      // > It is not possible to re-include a file if a parent directory of\n      // >   that file is excluded.\n      // If the path contains a parent directory, check the parent first\n      ? this._filter(slices.join(SLASH) + SLASH, slices)\n        && this._test(path)\n\n      // Or only test the path\n      : this._test(path)\n  }\n\n  // @returns {Boolean} true if a file is NOT ignored\n  _test (path) {\n    // Explicitly define variable type by setting matched to `0`\n    let matched = 0\n\n    this._rules.forEach(rule => {\n      // if matched = true, then we only test negative rules\n      // if matched = false, then we test non-negative rules\n      if (!(matched ^ rule.negative)) {\n        matched = rule.negative ^ rule.regex.test(path)\n      }\n    })\n\n    return !matched\n  }\n}\n\n// Windows\n// --------------------------------------------------------------\n/* istanbul ignore if  */\nif (\n  // Detect `process` so that it can run in browsers.\n  typeof process !== 'undefined'\n  && (\n    process.env && process.env.IGNORE_TEST_WIN32\n    || process.platform === 'win32'\n  )\n) {\n  const filter = IgnoreBase.prototype._filter\n\n  /* eslint no-control-regex: \"off\" */\n  const make_posix = str => /^\\\\\\\\\\?\\\\/.test(str)\n  || /[^\\x00-\\x80]+/.test(str)\n    ? str\n    : str.replace(/\\\\/g, '/')\n\n  IgnoreBase.prototype._filter = function filterWin32 (path, slices) {\n    path = make_posix(path)\n    return filter.call(this, path, slices)\n  }\n}\n\nmodule.exports = options => new IgnoreBase(options)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}