{"ast":null,"code":"/**\n * @fileoverview Rule to disallow certain object properties\n * @author Will Klein & Eli White\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow certain properties on certain objects\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-properties\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        anyOf: [// `object` and `property` are both optional, but at least one of them must be provided.\n        {\n          type: \"object\",\n          properties: {\n            object: {\n              type: \"string\"\n            },\n            property: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          additionalProperties: false,\n          required: [\"object\"]\n        }, {\n          type: \"object\",\n          properties: {\n            object: {\n              type: \"string\"\n            },\n            property: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          additionalProperties: false,\n          required: [\"property\"]\n        }]\n      },\n      uniqueItems: true\n    },\n    messages: {\n      // eslint-disable-next-line eslint-plugin/report-message-format\n      restrictedObjectProperty: \"'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}\",\n      // eslint-disable-next-line eslint-plugin/report-message-format\n      restrictedProperty: \"'{{propertyName}}' is restricted from being used.{{message}}\"\n    }\n  },\n\n  create(context) {\n    const restrictedCalls = context.options;\n\n    if (restrictedCalls.length === 0) {\n      return {};\n    }\n\n    const restrictedProperties = new Map();\n    const globallyRestrictedObjects = new Map();\n    const globallyRestrictedProperties = new Map();\n    restrictedCalls.forEach(option => {\n      const objectName = option.object;\n      const propertyName = option.property;\n\n      if (typeof objectName === \"undefined\") {\n        globallyRestrictedProperties.set(propertyName, {\n          message: option.message\n        });\n      } else if (typeof propertyName === \"undefined\") {\n        globallyRestrictedObjects.set(objectName, {\n          message: option.message\n        });\n      } else {\n        if (!restrictedProperties.has(objectName)) {\n          restrictedProperties.set(objectName, new Map());\n        }\n\n        restrictedProperties.get(objectName).set(propertyName, {\n          message: option.message\n        });\n      }\n    });\n    /**\n     * Checks to see whether a property access is restricted, and reports it if so.\n     * @param {ASTNode} node The node to report\n     * @param {string} objectName The name of the object\n     * @param {string} propertyName The name of the property\n     * @returns {undefined}\n     */\n\n    function checkPropertyAccess(node, objectName, propertyName) {\n      if (propertyName === null) {\n        return;\n      }\n\n      const matchedObject = restrictedProperties.get(objectName);\n      const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);\n      const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);\n\n      if (matchedObjectProperty) {\n        const message = matchedObjectProperty.message ? ` ${matchedObjectProperty.message}` : \"\";\n        context.report({\n          node,\n          messageId: \"restrictedObjectProperty\",\n          data: {\n            objectName,\n            propertyName,\n            message\n          }\n        });\n      } else if (globalMatchedProperty) {\n        const message = globalMatchedProperty.message ? ` ${globalMatchedProperty.message}` : \"\";\n        context.report({\n          node,\n          messageId: \"restrictedProperty\",\n          data: {\n            propertyName,\n            message\n          }\n        });\n      }\n    }\n    /**\n     * Checks property accesses in a destructuring assignment expression, e.g. `var foo; ({foo} = bar);`\n     * @param {ASTNode} node An AssignmentExpression or AssignmentPattern node\n     * @returns {undefined}\n     */\n\n\n    function checkDestructuringAssignment(node) {\n      if (node.right.type === \"Identifier\") {\n        const objectName = node.right.name;\n\n        if (node.left.type === \"ObjectPattern\") {\n          node.left.properties.forEach(property => {\n            checkPropertyAccess(node.left, objectName, astUtils.getStaticPropertyName(property));\n          });\n        }\n      }\n    }\n\n    return {\n      MemberExpression(node) {\n        checkPropertyAccess(node, node.object && node.object.name, astUtils.getStaticPropertyName(node));\n      },\n\n      VariableDeclarator(node) {\n        if (node.init && node.init.type === \"Identifier\") {\n          const objectName = node.init.name;\n\n          if (node.id.type === \"ObjectPattern\") {\n            node.id.properties.forEach(property => {\n              checkPropertyAccess(node.id, objectName, astUtils.getStaticPropertyName(property));\n            });\n          }\n        }\n      },\n\n      AssignmentExpression: checkDestructuringAssignment,\n      AssignmentPattern: checkDestructuringAssignment\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","items","anyOf","properties","object","property","message","additionalProperties","required","uniqueItems","messages","restrictedObjectProperty","restrictedProperty","create","context","restrictedCalls","options","length","restrictedProperties","Map","globallyRestrictedObjects","globallyRestrictedProperties","forEach","option","objectName","propertyName","set","has","get","checkPropertyAccess","node","matchedObject","matchedObjectProperty","globalMatchedProperty","report","messageId","data","checkDestructuringAssignment","right","name","left","getStaticPropertyName","MemberExpression","VariableDeclarator","init","id","AssignmentExpression","AssignmentPattern"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-restricted-properties.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow certain object properties\n * @author Will Klein & Eli White\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow certain properties on certain objects\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-properties\"\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                anyOf: [ // `object` and `property` are both optional, but at least one of them must be provided.\n                    {\n                        type: \"object\",\n                        properties: {\n                            object: {\n                                type: \"string\"\n                            },\n                            property: {\n                                type: \"string\"\n                            },\n                            message: {\n                                type: \"string\"\n                            }\n                        },\n                        additionalProperties: false,\n                        required: [\"object\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            object: {\n                                type: \"string\"\n                            },\n                            property: {\n                                type: \"string\"\n                            },\n                            message: {\n                                type: \"string\"\n                            }\n                        },\n                        additionalProperties: false,\n                        required: [\"property\"]\n                    }\n                ]\n            },\n            uniqueItems: true\n        },\n\n        messages: {\n            // eslint-disable-next-line eslint-plugin/report-message-format\n            restrictedObjectProperty: \"'{{objectName}}.{{propertyName}}' is restricted from being used.{{message}}\",\n            // eslint-disable-next-line eslint-plugin/report-message-format\n            restrictedProperty: \"'{{propertyName}}' is restricted from being used.{{message}}\"\n        }\n    },\n\n    create(context) {\n        const restrictedCalls = context.options;\n\n        if (restrictedCalls.length === 0) {\n            return {};\n        }\n\n        const restrictedProperties = new Map();\n        const globallyRestrictedObjects = new Map();\n        const globallyRestrictedProperties = new Map();\n\n        restrictedCalls.forEach(option => {\n            const objectName = option.object;\n            const propertyName = option.property;\n\n            if (typeof objectName === \"undefined\") {\n                globallyRestrictedProperties.set(propertyName, { message: option.message });\n            } else if (typeof propertyName === \"undefined\") {\n                globallyRestrictedObjects.set(objectName, { message: option.message });\n            } else {\n                if (!restrictedProperties.has(objectName)) {\n                    restrictedProperties.set(objectName, new Map());\n                }\n\n                restrictedProperties.get(objectName).set(propertyName, {\n                    message: option.message\n                });\n            }\n        });\n\n        /**\n         * Checks to see whether a property access is restricted, and reports it if so.\n         * @param {ASTNode} node The node to report\n         * @param {string} objectName The name of the object\n         * @param {string} propertyName The name of the property\n         * @returns {undefined}\n         */\n        function checkPropertyAccess(node, objectName, propertyName) {\n            if (propertyName === null) {\n                return;\n            }\n            const matchedObject = restrictedProperties.get(objectName);\n            const matchedObjectProperty = matchedObject ? matchedObject.get(propertyName) : globallyRestrictedObjects.get(objectName);\n            const globalMatchedProperty = globallyRestrictedProperties.get(propertyName);\n\n            if (matchedObjectProperty) {\n                const message = matchedObjectProperty.message ? ` ${matchedObjectProperty.message}` : \"\";\n\n                context.report({\n                    node,\n                    messageId: \"restrictedObjectProperty\",\n                    data: {\n                        objectName,\n                        propertyName,\n                        message\n                    }\n                });\n            } else if (globalMatchedProperty) {\n                const message = globalMatchedProperty.message ? ` ${globalMatchedProperty.message}` : \"\";\n\n                context.report({\n                    node,\n                    messageId: \"restrictedProperty\",\n                    data: {\n                        propertyName,\n                        message\n                    }\n                });\n            }\n        }\n\n        /**\n         * Checks property accesses in a destructuring assignment expression, e.g. `var foo; ({foo} = bar);`\n         * @param {ASTNode} node An AssignmentExpression or AssignmentPattern node\n         * @returns {undefined}\n         */\n        function checkDestructuringAssignment(node) {\n            if (node.right.type === \"Identifier\") {\n                const objectName = node.right.name;\n\n                if (node.left.type === \"ObjectPattern\") {\n                    node.left.properties.forEach(property => {\n                        checkPropertyAccess(node.left, objectName, astUtils.getStaticPropertyName(property));\n                    });\n                }\n            }\n        }\n\n        return {\n            MemberExpression(node) {\n                checkPropertyAccess(node, node.object && node.object.name, astUtils.getStaticPropertyName(node));\n            },\n            VariableDeclarator(node) {\n                if (node.init && node.init.type === \"Identifier\") {\n                    const objectName = node.init.name;\n\n                    if (node.id.type === \"ObjectPattern\") {\n                        node.id.properties.forEach(property => {\n                            checkPropertyAccess(node.id, objectName, astUtils.getStaticPropertyName(property));\n                        });\n                    }\n                }\n            },\n            AssignmentExpression: checkDestructuringAssignment,\n            AssignmentPattern: checkDestructuringAssignment\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}