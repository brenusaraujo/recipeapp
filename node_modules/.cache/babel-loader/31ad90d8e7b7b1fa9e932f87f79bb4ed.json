{"ast":null,"code":"/**\n * @fileoverview Rule to enforce var declarations are only at the top of a function.\n * @author Danny Fritz\n * @author Gyandeep Singh\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `var` declarations be placed at the top of their containing scope\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/vars-on-top\"\n    },\n    schema: [],\n    messages: {\n      top: \"All 'var' declarations must be at the top of the function scope.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n    // eslint-disable-next-line jsdoc/require-description\n\n    /**\n     * @param {ASTNode} node any node\n     * @returns {boolean} whether the given node structurally represents a directive\n     */\n    function looksLikeDirective(node) {\n      return node.type === \"ExpressionStatement\" && node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\n    }\n    /**\n     * Check to see if its a ES6 import declaration\n     * @param {ASTNode} node any node\n     * @returns {boolean} whether the given node represents a import declaration\n     */\n\n\n    function looksLikeImport(node) {\n      return node.type === \"ImportDeclaration\" || node.type === \"ImportSpecifier\" || node.type === \"ImportDefaultSpecifier\" || node.type === \"ImportNamespaceSpecifier\";\n    }\n    /**\n     * Checks whether a given node is a variable declaration or not.\n     * @param {ASTNode} node any node\n     * @returns {boolean} `true` if the node is a variable declaration.\n     */\n\n\n    function isVariableDeclaration(node) {\n      return node.type === \"VariableDeclaration\" || node.type === \"ExportNamedDeclaration\" && node.declaration && node.declaration.type === \"VariableDeclaration\";\n    }\n    /**\n     * Checks whether this variable is on top of the block body\n     * @param {ASTNode} node The node to check\n     * @param {ASTNode[]} statements collection of ASTNodes for the parent node block\n     * @returns {boolean} True if var is on top otherwise false\n     */\n\n\n    function isVarOnTop(node, statements) {\n      const l = statements.length;\n      let i = 0; // skip over directives\n\n      for (; i < l; ++i) {\n        if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {\n          break;\n        }\n      }\n\n      for (; i < l; ++i) {\n        if (!isVariableDeclaration(statements[i])) {\n          return false;\n        }\n\n        if (statements[i] === node) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Checks whether variable is on top at the global level\n     * @param {ASTNode} node The node to check\n     * @param {ASTNode} parent Parent of the node\n     * @returns {void}\n     */\n\n\n    function globalVarCheck(node, parent) {\n      if (!isVarOnTop(node, parent.body)) {\n        context.report({\n          node,\n          messageId: \"top\"\n        });\n      }\n    }\n    /**\n     * Checks whether variable is on top at functional block scope level\n     * @param {ASTNode} node The node to check\n     * @param {ASTNode} parent Parent of the node\n     * @param {ASTNode} grandParent Parent of the node's parent\n     * @returns {void}\n     */\n\n\n    function blockScopeVarCheck(node, parent, grandParent) {\n      if (!(/Function/u.test(grandParent.type) && parent.type === \"BlockStatement\" && isVarOnTop(node, parent.body))) {\n        context.report({\n          node,\n          messageId: \"top\"\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      \"VariableDeclaration[kind='var']\"(node) {\n        if (node.parent.type === \"ExportNamedDeclaration\") {\n          globalVarCheck(node.parent, node.parent.parent);\n        } else if (node.parent.type === \"Program\") {\n          globalVarCheck(node, node.parent);\n        } else {\n          blockScopeVarCheck(node, node.parent, node.parent.parent);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","top","create","context","looksLikeDirective","node","expression","value","looksLikeImport","isVariableDeclaration","declaration","isVarOnTop","statements","l","length","i","globalVarCheck","parent","body","report","messageId","blockScopeVarCheck","grandParent","test"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/vars-on-top.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce var declarations are only at the top of a function.\n * @author Danny Fritz\n * @author Gyandeep Singh\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `var` declarations be placed at the top of their containing scope\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/vars-on-top\"\n        },\n\n        schema: [],\n        messages: {\n            top: \"All 'var' declarations must be at the top of the function scope.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        // eslint-disable-next-line jsdoc/require-description\n        /**\n         * @param {ASTNode} node any node\n         * @returns {boolean} whether the given node structurally represents a directive\n         */\n        function looksLikeDirective(node) {\n            return node.type === \"ExpressionStatement\" &&\n                node.expression.type === \"Literal\" && typeof node.expression.value === \"string\";\n        }\n\n        /**\n         * Check to see if its a ES6 import declaration\n         * @param {ASTNode} node any node\n         * @returns {boolean} whether the given node represents a import declaration\n         */\n        function looksLikeImport(node) {\n            return node.type === \"ImportDeclaration\" || node.type === \"ImportSpecifier\" ||\n                node.type === \"ImportDefaultSpecifier\" || node.type === \"ImportNamespaceSpecifier\";\n        }\n\n        /**\n         * Checks whether a given node is a variable declaration or not.\n         * @param {ASTNode} node any node\n         * @returns {boolean} `true` if the node is a variable declaration.\n         */\n        function isVariableDeclaration(node) {\n            return (\n                node.type === \"VariableDeclaration\" ||\n                (\n                    node.type === \"ExportNamedDeclaration\" &&\n                    node.declaration &&\n                    node.declaration.type === \"VariableDeclaration\"\n                )\n            );\n        }\n\n        /**\n         * Checks whether this variable is on top of the block body\n         * @param {ASTNode} node The node to check\n         * @param {ASTNode[]} statements collection of ASTNodes for the parent node block\n         * @returns {boolean} True if var is on top otherwise false\n         */\n        function isVarOnTop(node, statements) {\n            const l = statements.length;\n            let i = 0;\n\n            // skip over directives\n            for (; i < l; ++i) {\n                if (!looksLikeDirective(statements[i]) && !looksLikeImport(statements[i])) {\n                    break;\n                }\n            }\n\n            for (; i < l; ++i) {\n                if (!isVariableDeclaration(statements[i])) {\n                    return false;\n                }\n                if (statements[i] === node) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * Checks whether variable is on top at the global level\n         * @param {ASTNode} node The node to check\n         * @param {ASTNode} parent Parent of the node\n         * @returns {void}\n         */\n        function globalVarCheck(node, parent) {\n            if (!isVarOnTop(node, parent.body)) {\n                context.report({ node, messageId: \"top\" });\n            }\n        }\n\n        /**\n         * Checks whether variable is on top at functional block scope level\n         * @param {ASTNode} node The node to check\n         * @param {ASTNode} parent Parent of the node\n         * @param {ASTNode} grandParent Parent of the node's parent\n         * @returns {void}\n         */\n        function blockScopeVarCheck(node, parent, grandParent) {\n            if (!(/Function/u.test(grandParent.type) &&\n                    parent.type === \"BlockStatement\" &&\n                    isVarOnTop(node, parent.body))) {\n                context.report({ node, messageId: \"top\" });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            \"VariableDeclaration[kind='var']\"(node) {\n                if (node.parent.type === \"ExportNamedDeclaration\") {\n                    globalVarCheck(node.parent, node.parent.parent);\n                } else if (node.parent.type === \"Program\") {\n                    globalVarCheck(node, node.parent);\n                } else {\n                    blockScopeVarCheck(node, node.parent, node.parent.parent);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,2EADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAWFC,QAAQ,EAAE;MACNC,GAAG,EAAE;IADC;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;IACA;IACA;IAEA;;IACA;AACR;AACA;AACA;IACQ,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;MAC9B,OAAOA,IAAI,CAACZ,IAAL,KAAc,qBAAd,IACHY,IAAI,CAACC,UAAL,CAAgBb,IAAhB,KAAyB,SADtB,IACmC,OAAOY,IAAI,CAACC,UAAL,CAAgBC,KAAvB,KAAiC,QAD3E;IAEH;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASC,eAAT,CAAyBH,IAAzB,EAA+B;MAC3B,OAAOA,IAAI,CAACZ,IAAL,KAAc,mBAAd,IAAqCY,IAAI,CAACZ,IAAL,KAAc,iBAAnD,IACHY,IAAI,CAACZ,IAAL,KAAc,wBADX,IACuCY,IAAI,CAACZ,IAAL,KAAc,0BAD5D;IAEH;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASgB,qBAAT,CAA+BJ,IAA/B,EAAqC;MACjC,OACIA,IAAI,CAACZ,IAAL,KAAc,qBAAd,IAEIY,IAAI,CAACZ,IAAL,KAAc,wBAAd,IACAY,IAAI,CAACK,WADL,IAEAL,IAAI,CAACK,WAAL,CAAiBjB,IAAjB,KAA0B,qBALlC;IAQH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASkB,UAAT,CAAoBN,IAApB,EAA0BO,UAA1B,EAAsC;MAClC,MAAMC,CAAC,GAAGD,UAAU,CAACE,MAArB;MACA,IAAIC,CAAC,GAAG,CAAR,CAFkC,CAIlC;;MACA,OAAOA,CAAC,GAAGF,CAAX,EAAc,EAAEE,CAAhB,EAAmB;QACf,IAAI,CAACX,kBAAkB,CAACQ,UAAU,CAACG,CAAD,CAAX,CAAnB,IAAsC,CAACP,eAAe,CAACI,UAAU,CAACG,CAAD,CAAX,CAA1D,EAA2E;UACvE;QACH;MACJ;;MAED,OAAOA,CAAC,GAAGF,CAAX,EAAc,EAAEE,CAAhB,EAAmB;QACf,IAAI,CAACN,qBAAqB,CAACG,UAAU,CAACG,CAAD,CAAX,CAA1B,EAA2C;UACvC,OAAO,KAAP;QACH;;QACD,IAAIH,UAAU,CAACG,CAAD,CAAV,KAAkBV,IAAtB,EAA4B;UACxB,OAAO,IAAP;QACH;MACJ;;MAED,OAAO,KAAP;IACH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASW,cAAT,CAAwBX,IAAxB,EAA8BY,MAA9B,EAAsC;MAClC,IAAI,CAACN,UAAU,CAACN,IAAD,EAAOY,MAAM,CAACC,IAAd,CAAf,EAAoC;QAChCf,OAAO,CAACgB,MAAR,CAAe;UAAEd,IAAF;UAAQe,SAAS,EAAE;QAAnB,CAAf;MACH;IACJ;IAED;AACR;AACA;AACA;AACA;AACA;AACA;;;IACQ,SAASC,kBAAT,CAA4BhB,IAA5B,EAAkCY,MAAlC,EAA0CK,WAA1C,EAAuD;MACnD,IAAI,EAAE,YAAYC,IAAZ,CAAiBD,WAAW,CAAC7B,IAA7B,KACEwB,MAAM,CAACxB,IAAP,KAAgB,gBADlB,IAEEkB,UAAU,CAACN,IAAD,EAAOY,MAAM,CAACC,IAAd,CAFd,CAAJ,EAEwC;QACpCf,OAAO,CAACgB,MAAR,CAAe;UAAEd,IAAF;UAAQe,SAAS,EAAE;QAAnB,CAAf;MACH;IACJ,CAhGW,CAkGZ;IACA;IACA;;;IAEA,OAAO;MACH,kCAAkCf,IAAlC,EAAwC;QACpC,IAAIA,IAAI,CAACY,MAAL,CAAYxB,IAAZ,KAAqB,wBAAzB,EAAmD;UAC/CuB,cAAc,CAACX,IAAI,CAACY,MAAN,EAAcZ,IAAI,CAACY,MAAL,CAAYA,MAA1B,CAAd;QACH,CAFD,MAEO,IAAIZ,IAAI,CAACY,MAAL,CAAYxB,IAAZ,KAAqB,SAAzB,EAAoC;UACvCuB,cAAc,CAACX,IAAD,EAAOA,IAAI,CAACY,MAAZ,CAAd;QACH,CAFM,MAEA;UACHI,kBAAkB,CAAChB,IAAD,EAAOA,IAAI,CAACY,MAAZ,EAAoBZ,IAAI,CAACY,MAAL,CAAYA,MAAhC,CAAlB;QACH;MACJ;;IATE,CAAP;EAYH;;AAnIY,CAAjB"},"metadata":{},"sourceType":"script"}