{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PagingDots = exports.getDotIndexes = exports.NextButton = exports.nextButtonDisabled = exports.PreviousButton = exports.prevButtonDisabled = void 0;\n\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\n/* eslint-disable complexity */\n\n\nconst react_1 = require(\"react\");\n\nconst types_1 = require(\"./types\");\n\nconst defaultButtonStyles = disabled => ({\n  border: 0,\n  background: 'rgba(0,0,0,0.4)',\n  color: 'white',\n  padding: 10,\n  textTransform: 'uppercase',\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? 'not-allowed' : 'pointer'\n});\n\nconst prevButtonDisabled = _ref => {\n  let {\n    currentSlide,\n    wrapAround,\n    cellAlign,\n    slidesToShow\n  } = _ref;\n\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  } // disable if displaying the leftmost slide\n\n\n  if (currentSlide === 0) {\n    return true;\n  } // remainder scroll mode\n\n\n  if (cellAlign === types_1.Alignment.Right && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.prevButtonDisabled = prevButtonDisabled;\n\nconst PreviousButton = props => {\n  const handleClick = event => {\n    event.preventDefault();\n    props === null || props === void 0 ? void 0 : props.previousSlide();\n  };\n\n  const {\n    prevButtonClassName,\n    prevButtonStyle = {},\n    prevButtonText\n  } = props.defaultControlsConfig || {};\n  const disabled = (0, exports.prevButtonDisabled)(props);\n  return (0, jsx_runtime_1.jsx)(\"button\", Object.assign({\n    className: prevButtonClassName,\n    style: Object.assign(Object.assign({}, defaultButtonStyles(disabled)), prevButtonStyle),\n    disabled: disabled,\n    onClick: handleClick,\n    \"aria-label\": \"previous\",\n    type: \"button\"\n  }, {\n    children: prevButtonText || 'Prev'\n  }));\n};\n\nexports.PreviousButton = PreviousButton;\n\nconst nextButtonDisabled = _ref2 => {\n  let {\n    currentSlide,\n    slideCount,\n    slidesToShow,\n    wrapAround,\n    cellAlign\n  } = _ref2;\n\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  } // If we are at the last possible slide without wrap, disable\n\n\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  } // remainder scroll mode\n\n\n  if (cellAlign === types_1.Alignment.Left && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.nextButtonDisabled = nextButtonDisabled;\n\nconst NextButton = props => {\n  const handleClick = event => {\n    event.preventDefault();\n    props.nextSlide();\n  };\n\n  const {\n    defaultControlsConfig\n  } = props;\n  const {\n    nextButtonClassName,\n    nextButtonStyle = {},\n    nextButtonText\n  } = defaultControlsConfig;\n  const disabled = (0, exports.nextButtonDisabled)(props);\n  return (0, jsx_runtime_1.jsx)(\"button\", Object.assign({\n    className: nextButtonClassName,\n    style: Object.assign(Object.assign({}, defaultButtonStyles(disabled)), nextButtonStyle),\n    disabled: disabled,\n    onClick: handleClick,\n    \"aria-label\": \"next\",\n    type: \"button\"\n  }, {\n    children: nextButtonText || 'Next'\n  }));\n};\n\nexports.NextButton = NextButton;\n/**\n * Calculate the indices that each dot will jump to when clicked\n */\n\nconst getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign) => {\n  const dotIndexes = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === types_1.Alignment.Center) {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === types_1.Alignment.Left) {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (scrollMode === types_1.ScrollMode.remainder) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === types_1.Alignment.Right) {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n\n    if (scrollMode === types_1.ScrollMode.remainder) {\n      for (let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides) {\n        dotIndexes.push(i);\n      }\n\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides) {\n        dotIndexes.push(i);\n      }\n\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n      dotIndexes.reverse();\n    }\n\n    return dotIndexes;\n  } // We should never reach this, because the if statements above cover all\n  // possible values of cellAlign\n\n\n  return dotIndexes;\n};\n\nexports.getDotIndexes = getDotIndexes;\n\nconst PagingDots = props => {\n  const listStyles = {\n    position: 'relative',\n    top: -10,\n    display: 'flex',\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none'\n  };\n  const getButtonStyles = (0, react_1.useCallback)(active => ({\n    cursor: 'pointer',\n    opacity: active ? 1 : 0.5,\n    background: 'transparent',\n    border: 'none',\n    fill: 'black'\n  }), []);\n  const indexes = (0, exports.getDotIndexes)(props.slideCount, props.slidesToScroll, props.scrollMode, props.slidesToShow, props.wrapAround, props.cellAlign);\n  const {\n    pagingDotsContainerClassName,\n    pagingDotsClassName,\n    pagingDotsStyle = {}\n  } = props.defaultControlsConfig;\n  return (0, jsx_runtime_1.jsx)(\"ul\", Object.assign({\n    className: pagingDotsContainerClassName,\n    style: listStyles\n  }, {\n    children: indexes.map((index, i) => {\n      let isActive = props.currentSlide === index || props.currentSlide - props.slideCount === index || props.currentSlide + props.slideCount === index; // the below condition checks and sets navigation dots active if the current slide falls in the current index range\n\n      if (props.currentSlide < index && props.currentSlide > indexes[i - 1]) {\n        isActive = true;\n      }\n\n      return (0, jsx_runtime_1.jsx)(\"li\", Object.assign({\n        className: isActive ? 'paging-item active' : 'paging-item'\n      }, {\n        children: (0, jsx_runtime_1.jsx)(\"button\", Object.assign({\n          className: pagingDotsClassName,\n          type: \"button\",\n          style: Object.assign(Object.assign({}, getButtonStyles(isActive)), pagingDotsStyle),\n          onClick: props.goToSlide.bind(null, index),\n          \"aria-label\": `slide ${index + 1} bullet`,\n          \"aria-selected\": isActive\n        }, {\n          children: (0, jsx_runtime_1.jsx)(\"svg\", Object.assign({\n            className: \"paging-dot\",\n            width: \"6\",\n            height: \"6\",\n            \"aria-hidden\": \"true\",\n            focusable: \"false\"\n          }, {\n            children: (0, jsx_runtime_1.jsx)(\"circle\", {\n              cx: \"3\",\n              cy: \"3\",\n              r: \"3\"\n            })\n          }))\n        }))\n      }), index);\n    })\n  }));\n};\n\nexports.PagingDots = PagingDots;","map":{"version":3,"sources":["../src/default-controls.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PagingDots = exports.getDotIndexes = exports.NextButton = exports.nextButtonDisabled = exports.PreviousButton = exports.prevButtonDisabled = void 0;\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\n/* eslint-disable complexity */\nconst react_1 = require(\"react\");\nconst types_1 = require(\"./types\");\nconst defaultButtonStyles = (disabled) => ({\n    border: 0,\n    background: 'rgba(0,0,0,0.4)',\n    color: 'white',\n    padding: 10,\n    textTransform: 'uppercase',\n    opacity: disabled ? 0.3 : 1,\n    cursor: disabled ? 'not-allowed' : 'pointer',\n});\nconst prevButtonDisabled = ({ currentSlide, wrapAround, cellAlign, slidesToShow, }) => {\n    // inifite carousel\n    if (wrapAround) {\n        return false;\n    }\n    // disable if displaying the leftmost slide\n    if (currentSlide === 0) {\n        return true;\n    }\n    // remainder scroll mode\n    if (cellAlign === types_1.Alignment.Right && currentSlide <= slidesToShow - 1) {\n        return true;\n    }\n    return false;\n};\nexports.prevButtonDisabled = prevButtonDisabled;\nconst PreviousButton = (props) => {\n    const handleClick = (event) => {\n        event.preventDefault();\n        props === null || props === void 0 ? void 0 : props.previousSlide();\n    };\n    const { prevButtonClassName, prevButtonStyle = {}, prevButtonText, } = props.defaultControlsConfig || {};\n    const disabled = (0, exports.prevButtonDisabled)(props);\n    return ((0, jsx_runtime_1.jsx)(\"button\", Object.assign({ className: prevButtonClassName, style: Object.assign(Object.assign({}, defaultButtonStyles(disabled)), prevButtonStyle), disabled: disabled, onClick: handleClick, \"aria-label\": \"previous\", type: \"button\" }, { children: prevButtonText || 'Prev' })));\n};\nexports.PreviousButton = PreviousButton;\nconst nextButtonDisabled = ({ currentSlide, slideCount, slidesToShow, wrapAround, cellAlign, }) => {\n    // inifite carousel\n    if (wrapAround) {\n        return false;\n    }\n    // If we are at the last possible slide without wrap, disable\n    if (currentSlide >= slideCount - 1) {\n        return true;\n    }\n    // remainder scroll mode\n    if (cellAlign === types_1.Alignment.Left &&\n        currentSlide >= slideCount - slidesToShow) {\n        return true;\n    }\n    return false;\n};\nexports.nextButtonDisabled = nextButtonDisabled;\nconst NextButton = (props) => {\n    const handleClick = (event) => {\n        event.preventDefault();\n        props.nextSlide();\n    };\n    const { defaultControlsConfig } = props;\n    const { nextButtonClassName, nextButtonStyle = {}, nextButtonText, } = defaultControlsConfig;\n    const disabled = (0, exports.nextButtonDisabled)(props);\n    return ((0, jsx_runtime_1.jsx)(\"button\", Object.assign({ className: nextButtonClassName, style: Object.assign(Object.assign({}, defaultButtonStyles(disabled)), nextButtonStyle), disabled: disabled, onClick: handleClick, \"aria-label\": \"next\", type: \"button\" }, { children: nextButtonText || 'Next' })));\n};\nexports.NextButton = NextButton;\n/**\n * Calculate the indices that each dot will jump to when clicked\n */\nconst getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign) => {\n    const dotIndexes = [];\n    const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n    if (wrapAround) {\n        for (let i = 0; i < slideCount; i += scrollSlides) {\n            dotIndexes.push(i);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === types_1.Alignment.Center) {\n        for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n            dotIndexes.push(i);\n        }\n        if (slideCount > 0) {\n            dotIndexes.push(slideCount - 1);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === types_1.Alignment.Left) {\n        if (slidesToShow >= slideCount) {\n            return [0];\n        }\n        const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n        for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n            dotIndexes.push(i);\n        }\n        if (scrollMode === types_1.ScrollMode.remainder) {\n            dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n        }\n        else {\n            dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === types_1.Alignment.Right) {\n        if (slidesToShow >= slideCount) {\n            return [slideCount - 1];\n        }\n        const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n        if (scrollMode === types_1.ScrollMode.remainder) {\n            for (let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides) {\n                dotIndexes.push(i);\n            }\n            dotIndexes.push(slideCount - 1);\n        }\n        else {\n            for (let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides) {\n                dotIndexes.push(i);\n            }\n            dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n            dotIndexes.reverse();\n        }\n        return dotIndexes;\n    }\n    // We should never reach this, because the if statements above cover all\n    // possible values of cellAlign\n    return dotIndexes;\n};\nexports.getDotIndexes = getDotIndexes;\nconst PagingDots = (props) => {\n    const listStyles = {\n        position: 'relative',\n        top: -10,\n        display: 'flex',\n        margin: 0,\n        padding: 0,\n        listStyleType: 'none',\n    };\n    const getButtonStyles = (0, react_1.useCallback)((active) => ({\n        cursor: 'pointer',\n        opacity: active ? 1 : 0.5,\n        background: 'transparent',\n        border: 'none',\n        fill: 'black',\n    }), []);\n    const indexes = (0, exports.getDotIndexes)(props.slideCount, props.slidesToScroll, props.scrollMode, props.slidesToShow, props.wrapAround, props.cellAlign);\n    const { pagingDotsContainerClassName, pagingDotsClassName, pagingDotsStyle = {}, } = props.defaultControlsConfig;\n    return ((0, jsx_runtime_1.jsx)(\"ul\", Object.assign({ className: pagingDotsContainerClassName, style: listStyles }, { children: indexes.map((index, i) => {\n            let isActive = props.currentSlide === index ||\n                props.currentSlide - props.slideCount === index ||\n                props.currentSlide + props.slideCount === index;\n            // the below condition checks and sets navigation dots active if the current slide falls in the current index range\n            if (props.currentSlide < index && props.currentSlide > indexes[i - 1]) {\n                isActive = true;\n            }\n            return ((0, jsx_runtime_1.jsx)(\"li\", Object.assign({ className: isActive ? 'paging-item active' : 'paging-item' }, { children: (0, jsx_runtime_1.jsx)(\"button\", Object.assign({ className: pagingDotsClassName, type: \"button\", style: Object.assign(Object.assign({}, getButtonStyles(isActive)), pagingDotsStyle), onClick: props.goToSlide.bind(null, index), \"aria-label\": `slide ${index + 1} bullet`, \"aria-selected\": isActive }, { children: (0, jsx_runtime_1.jsx)(\"svg\", Object.assign({ className: \"paging-dot\", width: \"6\", height: \"6\", \"aria-hidden\": \"true\", focusable: \"false\" }, { children: (0, jsx_runtime_1.jsx)(\"circle\", { cx: \"3\", cy: \"3\", r: \"3\" }) })) })) }), index));\n        }) })));\n};\nexports.PagingDots = PagingDots;\n"]},"metadata":{},"sourceType":"script"}