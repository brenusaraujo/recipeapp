{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSliderListStyles = void 0;\n\nconst default_controls_1 = require(\"./default-controls\");\n\nconst types_1 = require(\"./types\");\n\nconst getSliderListWidth = (slideCount, slidesToShow, wrapAround) => {\n  const visibleSlides = slidesToShow;\n\n  if (wrapAround) {\n    const percentage = slideCount * 100 / visibleSlides;\n    return `${3 * percentage}%`;\n  }\n\n  const percentage = slideCount * 100 / visibleSlides;\n  return `${percentage}%`;\n};\n\nconst getPercentOffsetForSlide = (slideCount, initialValue, currentSlide, cellAlign, wrapAround) => {\n  if (cellAlign === types_1.Alignment.Left) {\n    if (wrapAround) {\n      const slideTransition = 100 / (3 * slideCount);\n      const currentTransition = initialValue - slideTransition * (currentSlide - 1);\n      return currentTransition - slideTransition;\n    }\n\n    const slideTransition = 100 / slideCount * currentSlide;\n    return -(slideTransition + initialValue);\n  } else if (cellAlign === types_1.Alignment.Center) {\n    if (wrapAround) {\n      const slideTransition = 100 / (3 * slideCount);\n      const currentTransition = initialValue - slideTransition * (currentSlide - 1);\n      return currentTransition - slideTransition;\n    }\n\n    const slideTransition = 100 / slideCount * currentSlide;\n    return initialValue - slideTransition;\n  } else if (cellAlign === types_1.Alignment.Right) {\n    if (wrapAround) {\n      const slideTransition = 100 / (3 * slideCount);\n      const currentTransition = initialValue - slideTransition * (currentSlide - 1);\n      return currentTransition - slideTransition;\n    }\n\n    const slideTransition = 100 / slideCount * currentSlide;\n    return initialValue - slideTransition;\n  }\n\n  return initialValue;\n};\n\nconst getPositioning = (cellAlign, slidesToShow, slideCount, currentSlide, wrapAround, draggedOffset, clampIndices) => {\n  // When wrapAround is enabled, we show the slides 3 times\n  const totalCount = wrapAround ? 3 * slideCount : slideCount;\n  const slideSize = 100 / totalCount;\n  let initialValue = wrapAround ? -slideCount * slideSize : 0;\n\n  if (cellAlign === types_1.Alignment.Right && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    initialValue += slideSize * excessSlides;\n  }\n\n  if (cellAlign === types_1.Alignment.Center && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1; // Half of excess is on left and half is on right when centered\n\n    const excessLeftSlides = excessSlides / 2;\n    initialValue += slideSize * excessLeftSlides;\n  }\n\n  const slideBasedOffset = getPercentOffsetForSlide(slideCount, initialValue, currentSlide, cellAlign, wrapAround); // Special-case this. It's better to return undefined rather than a\n  // transform of 0 pixels since transforms can cause flickering in chrome.\n\n  if (draggedOffset === 0 && slideBasedOffset === 0) {\n    return undefined;\n  }\n\n  let clampOffsets = null;\n\n  if (clampIndices) {\n    clampOffsets = clampIndices.map(index => getPercentOffsetForSlide(slideCount, initialValue, index, cellAlign, wrapAround));\n  }\n\n  const clampedDraggedOffset = clampOffsets ? // Offsets are seemingly backwards because the rightmost slide creates\n  // the most negative translate value\n  `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)` : `${draggedOffset}px`;\n  return `translate3d(${draggedOffset ? clampedDraggedOffset : `${slideBasedOffset}%`}, 0, 0)`;\n};\n\nconst getSliderListStyles = (slideCount, currentSlide, isAnimating, slidesToShow, cellAlign, wrapAround, speed, draggedOffset, slidesToScroll, scrollMode, disableEdgeSwiping, slideAnimation) => {\n  const width = getSliderListWidth(slideCount, slidesToShow, wrapAround); // When disableEdgeSwiping=true, we recycle dot index generation to determine\n  // the leftmost and rightmost indices used, to be used in calculating the\n  // x-translation values we need to limit to.\n\n  let clampIndices = null;\n\n  if (disableEdgeSwiping && !wrapAround) {\n    const dotIndexes = (0, default_controls_1.getDotIndexes)(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);\n    clampIndices = [dotIndexes[0], dotIndexes[dotIndexes.length - 1]];\n  }\n\n  const positioning = getPositioning(cellAlign, slidesToShow, slideCount, currentSlide, wrapAround, draggedOffset, clampIndices);\n  return {\n    width,\n    textAlign: 'left',\n    userSelect: 'auto',\n    transition: draggedOffset === 0 && isAnimating && slideAnimation !== 'fade' ? `${speed}ms cubic-bezier(0.16, 1, 0.3, 1) 0s` : undefined,\n    transform: positioning,\n    display: 'flex'\n  };\n};\n\nexports.getSliderListStyles = getSliderListStyles;","map":{"version":3,"mappings":"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","names":["getSliderListWidth","slideCount","slidesToShow","wrapAround","visibleSlides","percentage","getPercentOffsetForSlide","initialValue","currentSlide","cellAlign","types_1","Left","slideTransition","currentTransition","Center","Right","getPositioning","draggedOffset","clampIndices","totalCount","slideSize","excessSlides","excessLeftSlides","slideBasedOffset","undefined","clampOffsets","map","index","clampedDraggedOffset","getSliderListStyles","isAnimating","speed","slidesToScroll","scrollMode","disableEdgeSwiping","slideAnimation","width","dotIndexes","length","positioning","textAlign","userSelect","transition","transform","display","exports"],"sources":["../src/slider-list.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}