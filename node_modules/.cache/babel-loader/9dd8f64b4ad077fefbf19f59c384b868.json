{"ast":null,"code":"/**\n * @fileoverview Rule to\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the variable object of `arguments` which is defined implicitly.\n * @param {eslint-scope.Scope} scope A scope to get.\n * @returns {eslint-scope.Variable} The found variable object.\n */\n\nfunction getVariableOfArguments(scope) {\n  const variables = scope.variables;\n\n  for (let i = 0; i < variables.length; ++i) {\n    const variable = variables[i];\n\n    if (variable.name === \"arguments\") {\n      /*\n       * If there was a parameter which is named \"arguments\", the implicit \"arguments\" is not defined.\n       * So does fast return with null.\n       */\n      return variable.identifiers.length === 0 ? variable : null;\n    }\n  }\n  /* istanbul ignore next : unreachable */\n\n\n  return null;\n}\n/**\n * Checks if the given reference is not normal member access.\n *\n * - arguments         .... true    // not member access\n * - arguments[i]      .... true    // computed member access\n * - arguments[0]      .... true    // computed member access\n * - arguments.length  .... false   // normal member access\n * @param {eslint-scope.Reference} reference The reference to check.\n * @returns {boolean} `true` if the reference is not normal member access.\n */\n\n\nfunction isNotNormalMemberAccess(reference) {\n  const id = reference.identifier;\n  const parent = id.parent;\n  return !(parent.type === \"MemberExpression\" && parent.object === id && !parent.computed);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require rest parameters instead of `arguments`\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-rest-params\"\n    },\n    schema: [],\n    messages: {\n      preferRestParams: \"Use the rest parameters instead of 'arguments'.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Reports a given reference.\n     * @param {eslint-scope.Reference} reference A reference to report.\n     * @returns {void}\n     */\n    function report(reference) {\n      context.report({\n        node: reference.identifier,\n        loc: reference.identifier.loc,\n        messageId: \"preferRestParams\"\n      });\n    }\n    /**\n     * Reports references of the implicit `arguments` variable if exist.\n     * @returns {void}\n     */\n\n\n    function checkForArguments() {\n      const argumentsVar = getVariableOfArguments(context.getScope());\n\n      if (argumentsVar) {\n        argumentsVar.references.filter(isNotNormalMemberAccess).forEach(report);\n      }\n    }\n\n    return {\n      \"FunctionDeclaration:exit\": checkForArguments,\n      \"FunctionExpression:exit\": checkForArguments\n    };\n  }\n\n};","map":{"version":3,"names":["getVariableOfArguments","scope","variables","i","length","variable","name","identifiers","isNotNormalMemberAccess","reference","id","identifier","parent","type","object","computed","module","exports","meta","docs","description","category","recommended","url","schema","messages","preferRestParams","create","context","report","node","loc","messageId","checkForArguments","argumentsVar","getScope","references","filter","forEach"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/prefer-rest-params.js"],"sourcesContent":["/**\n * @fileoverview Rule to\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets the variable object of `arguments` which is defined implicitly.\n * @param {eslint-scope.Scope} scope A scope to get.\n * @returns {eslint-scope.Variable} The found variable object.\n */\nfunction getVariableOfArguments(scope) {\n    const variables = scope.variables;\n\n    for (let i = 0; i < variables.length; ++i) {\n        const variable = variables[i];\n\n        if (variable.name === \"arguments\") {\n\n            /*\n             * If there was a parameter which is named \"arguments\", the implicit \"arguments\" is not defined.\n             * So does fast return with null.\n             */\n            return (variable.identifiers.length === 0) ? variable : null;\n        }\n    }\n\n    /* istanbul ignore next : unreachable */\n    return null;\n}\n\n/**\n * Checks if the given reference is not normal member access.\n *\n * - arguments         .... true    // not member access\n * - arguments[i]      .... true    // computed member access\n * - arguments[0]      .... true    // computed member access\n * - arguments.length  .... false   // normal member access\n * @param {eslint-scope.Reference} reference The reference to check.\n * @returns {boolean} `true` if the reference is not normal member access.\n */\nfunction isNotNormalMemberAccess(reference) {\n    const id = reference.identifier;\n    const parent = id.parent;\n\n    return !(\n        parent.type === \"MemberExpression\" &&\n        parent.object === id &&\n        !parent.computed\n    );\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require rest parameters instead of `arguments`\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/prefer-rest-params\"\n        },\n\n        schema: [],\n\n        messages: {\n            preferRestParams: \"Use the rest parameters instead of 'arguments'.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Reports a given reference.\n         * @param {eslint-scope.Reference} reference A reference to report.\n         * @returns {void}\n         */\n        function report(reference) {\n            context.report({\n                node: reference.identifier,\n                loc: reference.identifier.loc,\n                messageId: \"preferRestParams\"\n            });\n        }\n\n        /**\n         * Reports references of the implicit `arguments` variable if exist.\n         * @returns {void}\n         */\n        function checkForArguments() {\n            const argumentsVar = getVariableOfArguments(context.getScope());\n\n            if (argumentsVar) {\n                argumentsVar\n                    .references\n                    .filter(isNotNormalMemberAccess)\n                    .forEach(report);\n            }\n        }\n\n        return {\n            \"FunctionDeclaration:exit\": checkForArguments,\n            \"FunctionExpression:exit\": checkForArguments\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;EACnC,MAAMC,SAAS,GAAGD,KAAK,CAACC,SAAxB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAAS,CAACE,MAA9B,EAAsC,EAAED,CAAxC,EAA2C;IACvC,MAAME,QAAQ,GAAGH,SAAS,CAACC,CAAD,CAA1B;;IAEA,IAAIE,QAAQ,CAACC,IAAT,KAAkB,WAAtB,EAAmC;MAE/B;AACZ;AACA;AACA;MACY,OAAQD,QAAQ,CAACE,WAAT,CAAqBH,MAArB,KAAgC,CAAjC,GAAsCC,QAAtC,GAAiD,IAAxD;IACH;EACJ;EAED;;;EACA,OAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,uBAAT,CAAiCC,SAAjC,EAA4C;EACxC,MAAMC,EAAE,GAAGD,SAAS,CAACE,UAArB;EACA,MAAMC,MAAM,GAAGF,EAAE,CAACE,MAAlB;EAEA,OAAO,EACHA,MAAM,CAACC,IAAP,KAAgB,kBAAhB,IACAD,MAAM,CAACE,MAAP,KAAkBJ,EADlB,IAEA,CAACE,MAAM,CAACG,QAHL,CAAP;AAKH,C,CAED;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFL,IAAI,EAAE,YADJ;IAGFM,IAAI,EAAE;MACFC,WAAW,EAAE,gDADX;MAEFC,QAAQ,EAAE,cAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,gBAAgB,EAAE;IADZ;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,MAAT,CAAgBpB,SAAhB,EAA2B;MACvBmB,OAAO,CAACC,MAAR,CAAe;QACXC,IAAI,EAAErB,SAAS,CAACE,UADL;QAEXoB,GAAG,EAAEtB,SAAS,CAACE,UAAV,CAAqBoB,GAFf;QAGXC,SAAS,EAAE;MAHA,CAAf;IAKH;IAED;AACR;AACA;AACA;;;IACQ,SAASC,iBAAT,GAA6B;MACzB,MAAMC,YAAY,GAAGlC,sBAAsB,CAAC4B,OAAO,CAACO,QAAR,EAAD,CAA3C;;MAEA,IAAID,YAAJ,EAAkB;QACdA,YAAY,CACPE,UADL,CAEKC,MAFL,CAEY7B,uBAFZ,EAGK8B,OAHL,CAGaT,MAHb;MAIH;IACJ;;IAED,OAAO;MACH,4BAA4BI,iBADzB;MAEH,2BAA2BA;IAFxB,CAAP;EAIH;;AApDY,CAAjB"},"metadata":{},"sourceType":"script"}