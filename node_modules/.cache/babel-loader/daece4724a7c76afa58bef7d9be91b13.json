{"ast":null,"code":"/**\n * @fileoverview Rule to disallow a duplicate case label.\n * @author Dieter Oberkofler\n * @author Burak Yigit Kaya\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate case labels\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-duplicate-case\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate case label.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\n     * Determines whether the two given nodes are considered to be equal.\n     * @param {ASTNode} a First node.\n     * @param {ASTNode} b Second node.\n     * @returns {boolean} `true` if the nodes are considered to be equal.\n     */\n\n    function equal(a, b) {\n      if (a.type !== b.type) {\n        return false;\n      }\n\n      return astUtils.equalTokens(a, b, sourceCode);\n    }\n\n    return {\n      SwitchStatement(node) {\n        const previousTests = [];\n\n        for (const switchCase of node.cases) {\n          if (switchCase.test) {\n            const test = switchCase.test;\n\n            if (previousTests.some(previousTest => equal(previousTest, test))) {\n              context.report({\n                node: switchCase,\n                messageId: \"unexpected\"\n              });\n            } else {\n              previousTests.push(test);\n            }\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","sourceCode","getSourceCode","equal","a","b","equalTokens","SwitchStatement","node","previousTests","switchCase","cases","test","some","previousTest","report","messageId","push"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-duplicate-case.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow a duplicate case label.\n * @author Dieter Oberkofler\n * @author Burak Yigit Kaya\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow duplicate case labels\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-duplicate-case\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate case label.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether the two given nodes are considered to be equal.\n         * @param {ASTNode} a First node.\n         * @param {ASTNode} b Second node.\n         * @returns {boolean} `true` if the nodes are considered to be equal.\n         */\n        function equal(a, b) {\n            if (a.type !== b.type) {\n                return false;\n            }\n\n            return astUtils.equalTokens(a, b, sourceCode);\n        }\n        return {\n            SwitchStatement(node) {\n                const previousTests = [];\n\n                for (const switchCase of node.cases) {\n                    if (switchCase.test) {\n                        const test = switchCase.test;\n\n                        if (previousTests.some(previousTest => equal(previousTest, test))) {\n                            context.report({ node: switchCase, messageId: \"unexpected\" });\n                        } else {\n                            previousTests.push(test);\n                        }\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,gCADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IAEA;AACR;AACA;AACA;AACA;AACA;;IACQ,SAASC,KAAT,CAAeC,CAAf,EAAkBC,CAAlB,EAAqB;MACjB,IAAID,CAAC,CAACd,IAAF,KAAWe,CAAC,CAACf,IAAjB,EAAuB;QACnB,OAAO,KAAP;MACH;;MAED,OAAOL,QAAQ,CAACqB,WAAT,CAAqBF,CAArB,EAAwBC,CAAxB,EAA2BJ,UAA3B,CAAP;IACH;;IACD,OAAO;MACHM,eAAe,CAACC,IAAD,EAAO;QAClB,MAAMC,aAAa,GAAG,EAAtB;;QAEA,KAAK,MAAMC,UAAX,IAAyBF,IAAI,CAACG,KAA9B,EAAqC;UACjC,IAAID,UAAU,CAACE,IAAf,EAAqB;YACjB,MAAMA,IAAI,GAAGF,UAAU,CAACE,IAAxB;;YAEA,IAAIH,aAAa,CAACI,IAAd,CAAmBC,YAAY,IAAIX,KAAK,CAACW,YAAD,EAAeF,IAAf,CAAxC,CAAJ,EAAmE;cAC/DZ,OAAO,CAACe,MAAR,CAAe;gBAAEP,IAAI,EAAEE,UAAR;gBAAoBM,SAAS,EAAE;cAA/B,CAAf;YACH,CAFD,MAEO;cACHP,aAAa,CAACQ,IAAd,CAAmBL,IAAnB;YACH;UACJ;QACJ;MACJ;;IAfE,CAAP;EAiBH;;AAnDY,CAAjB"},"metadata":{},"sourceType":"script"}