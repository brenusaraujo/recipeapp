{"ast":null,"code":"'use strict';\n\nconst singleComment = Symbol('singleComment');\nconst multiComment = Symbol('multiComment');\n\nconst stripWithoutWhitespace = () => '';\n\nconst stripWithWhitespace = (string, start, end) => string.slice(start, end).replace(/\\S/g, ' ');\n\nconst isEscaped = (jsonString, quotePosition) => {\n  let index = quotePosition - 1;\n  let backslashCount = 0;\n\n  while (jsonString[index] === '\\\\') {\n    index -= 1;\n    backslashCount += 1;\n  }\n\n  return Boolean(backslashCount % 2);\n};\n\nmodule.exports = function (jsonString) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof jsonString !== 'string') {\n    throw new TypeError(`Expected argument \\`jsonString\\` to be a \\`string\\`, got \\`${typeof jsonString}\\``);\n  }\n\n  const strip = options.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;\n  let insideString = false;\n  let insideComment = false;\n  let offset = 0;\n  let result = '';\n\n  for (let i = 0; i < jsonString.length; i++) {\n    const currentCharacter = jsonString[i];\n    const nextCharacter = jsonString[i + 1];\n\n    if (!insideComment && currentCharacter === '\"') {\n      const escaped = isEscaped(jsonString, i);\n\n      if (!escaped) {\n        insideString = !insideString;\n      }\n    }\n\n    if (insideString) {\n      continue;\n    }\n\n    if (!insideComment && currentCharacter + nextCharacter === '//') {\n      result += jsonString.slice(offset, i);\n      offset = i;\n      insideComment = singleComment;\n      i++;\n    } else if (insideComment === singleComment && currentCharacter + nextCharacter === '\\r\\n') {\n      i++;\n      insideComment = false;\n      result += strip(jsonString, offset, i);\n      offset = i;\n      continue;\n    } else if (insideComment === singleComment && currentCharacter === '\\n') {\n      insideComment = false;\n      result += strip(jsonString, offset, i);\n      offset = i;\n    } else if (!insideComment && currentCharacter + nextCharacter === '/*') {\n      result += jsonString.slice(offset, i);\n      offset = i;\n      insideComment = multiComment;\n      i++;\n      continue;\n    } else if (insideComment === multiComment && currentCharacter + nextCharacter === '*/') {\n      i++;\n      insideComment = false;\n      result += strip(jsonString, offset, i + 1);\n      offset = i + 1;\n      continue;\n    }\n  }\n\n  return result + (insideComment ? strip(jsonString.slice(offset)) : jsonString.slice(offset));\n};","map":{"version":3,"names":["singleComment","Symbol","multiComment","stripWithoutWhitespace","stripWithWhitespace","string","start","end","slice","replace","isEscaped","jsonString","quotePosition","index","backslashCount","Boolean","module","exports","options","TypeError","strip","whitespace","insideString","insideComment","offset","result","i","length","currentCharacter","nextCharacter","escaped"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/strip-json-comments/index.js"],"sourcesContent":["'use strict';\nconst singleComment = Symbol('singleComment');\nconst multiComment = Symbol('multiComment');\nconst stripWithoutWhitespace = () => '';\nconst stripWithWhitespace = (string, start, end) => string.slice(start, end).replace(/\\S/g, ' ');\n\nconst isEscaped = (jsonString, quotePosition) => {\n\tlet index = quotePosition - 1;\n\tlet backslashCount = 0;\n\n\twhile (jsonString[index] === '\\\\') {\n\t\tindex -= 1;\n\t\tbackslashCount += 1;\n\t}\n\n\treturn Boolean(backslashCount % 2);\n};\n\nmodule.exports = (jsonString, options = {}) => {\n\tif (typeof jsonString !== 'string') {\n\t\tthrow new TypeError(`Expected argument \\`jsonString\\` to be a \\`string\\`, got \\`${typeof jsonString}\\``);\n\t}\n\n\tconst strip = options.whitespace === false ? stripWithoutWhitespace : stripWithWhitespace;\n\n\tlet insideString = false;\n\tlet insideComment = false;\n\tlet offset = 0;\n\tlet result = '';\n\n\tfor (let i = 0; i < jsonString.length; i++) {\n\t\tconst currentCharacter = jsonString[i];\n\t\tconst nextCharacter = jsonString[i + 1];\n\n\t\tif (!insideComment && currentCharacter === '\"') {\n\t\t\tconst escaped = isEscaped(jsonString, i);\n\t\t\tif (!escaped) {\n\t\t\t\tinsideString = !insideString;\n\t\t\t}\n\t\t}\n\n\t\tif (insideString) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!insideComment && currentCharacter + nextCharacter === '//') {\n\t\t\tresult += jsonString.slice(offset, i);\n\t\t\toffset = i;\n\t\t\tinsideComment = singleComment;\n\t\t\ti++;\n\t\t} else if (insideComment === singleComment && currentCharacter + nextCharacter === '\\r\\n') {\n\t\t\ti++;\n\t\t\tinsideComment = false;\n\t\t\tresult += strip(jsonString, offset, i);\n\t\t\toffset = i;\n\t\t\tcontinue;\n\t\t} else if (insideComment === singleComment && currentCharacter === '\\n') {\n\t\t\tinsideComment = false;\n\t\t\tresult += strip(jsonString, offset, i);\n\t\t\toffset = i;\n\t\t} else if (!insideComment && currentCharacter + nextCharacter === '/*') {\n\t\t\tresult += jsonString.slice(offset, i);\n\t\t\toffset = i;\n\t\t\tinsideComment = multiComment;\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t} else if (insideComment === multiComment && currentCharacter + nextCharacter === '*/') {\n\t\t\ti++;\n\t\t\tinsideComment = false;\n\t\t\tresult += strip(jsonString, offset, i + 1);\n\t\t\toffset = i + 1;\n\t\t\tcontinue;\n\t\t}\n\t}\n\n\treturn result + (insideComment ? strip(jsonString.slice(offset)) : jsonString.slice(offset));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}