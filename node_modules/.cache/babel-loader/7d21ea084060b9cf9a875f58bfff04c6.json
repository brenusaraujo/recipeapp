{"ast":null,"code":"/**\n * @fileoverview The AST node types produced by the parser.\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n// None!\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  AssignmentExpression: \"AssignmentExpression\",\n  AssignmentPattern: \"AssignmentPattern\",\n  ArrayExpression: \"ArrayExpression\",\n  ArrayPattern: \"ArrayPattern\",\n  ArrowFunctionExpression: \"ArrowFunctionExpression\",\n  AwaitExpression: \"AwaitExpression\",\n  BlockStatement: \"BlockStatement\",\n  BinaryExpression: \"BinaryExpression\",\n  BreakStatement: \"BreakStatement\",\n  CallExpression: \"CallExpression\",\n  CatchClause: \"CatchClause\",\n  ClassBody: \"ClassBody\",\n  ClassDeclaration: \"ClassDeclaration\",\n  ClassExpression: \"ClassExpression\",\n  ConditionalExpression: \"ConditionalExpression\",\n  ContinueStatement: \"ContinueStatement\",\n  DoWhileStatement: \"DoWhileStatement\",\n  DebuggerStatement: \"DebuggerStatement\",\n  EmptyStatement: \"EmptyStatement\",\n  ExpressionStatement: \"ExpressionStatement\",\n  ForStatement: \"ForStatement\",\n  ForInStatement: \"ForInStatement\",\n  ForOfStatement: \"ForOfStatement\",\n  FunctionDeclaration: \"FunctionDeclaration\",\n  FunctionExpression: \"FunctionExpression\",\n  Identifier: \"Identifier\",\n  IfStatement: \"IfStatement\",\n  Literal: \"Literal\",\n  LabeledStatement: \"LabeledStatement\",\n  LogicalExpression: \"LogicalExpression\",\n  MemberExpression: \"MemberExpression\",\n  MetaProperty: \"MetaProperty\",\n  MethodDefinition: \"MethodDefinition\",\n  NewExpression: \"NewExpression\",\n  ObjectExpression: \"ObjectExpression\",\n  ObjectPattern: \"ObjectPattern\",\n  Program: \"Program\",\n  Property: \"Property\",\n  RestElement: \"RestElement\",\n  ReturnStatement: \"ReturnStatement\",\n  SequenceExpression: \"SequenceExpression\",\n  SpreadElement: \"SpreadElement\",\n  Super: \"Super\",\n  SwitchCase: \"SwitchCase\",\n  SwitchStatement: \"SwitchStatement\",\n  TaggedTemplateExpression: \"TaggedTemplateExpression\",\n  TemplateElement: \"TemplateElement\",\n  TemplateLiteral: \"TemplateLiteral\",\n  ThisExpression: \"ThisExpression\",\n  ThrowStatement: \"ThrowStatement\",\n  TryStatement: \"TryStatement\",\n  UnaryExpression: \"UnaryExpression\",\n  UpdateExpression: \"UpdateExpression\",\n  VariableDeclaration: \"VariableDeclaration\",\n  VariableDeclarator: \"VariableDeclarator\",\n  WhileStatement: \"WhileStatement\",\n  WithStatement: \"WithStatement\",\n  YieldExpression: \"YieldExpression\",\n  JSXIdentifier: \"JSXIdentifier\",\n  JSXNamespacedName: \"JSXNamespacedName\",\n  JSXMemberExpression: \"JSXMemberExpression\",\n  JSXEmptyExpression: \"JSXEmptyExpression\",\n  JSXExpressionContainer: \"JSXExpressionContainer\",\n  JSXElement: \"JSXElement\",\n  JSXClosingElement: \"JSXClosingElement\",\n  JSXOpeningElement: \"JSXOpeningElement\",\n  JSXAttribute: \"JSXAttribute\",\n  JSXSpreadAttribute: \"JSXSpreadAttribute\",\n  JSXText: \"JSXText\",\n  ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n  ExportNamedDeclaration: \"ExportNamedDeclaration\",\n  ExportAllDeclaration: \"ExportAllDeclaration\",\n  ExportSpecifier: \"ExportSpecifier\",\n  ImportDeclaration: \"ImportDeclaration\",\n  ImportSpecifier: \"ImportSpecifier\",\n  ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n  ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\"\n};","map":{"version":3,"names":["module","exports","AssignmentExpression","AssignmentPattern","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AwaitExpression","BlockStatement","BinaryExpression","BreakStatement","CallExpression","CatchClause","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DoWhileStatement","DebuggerStatement","EmptyStatement","ExpressionStatement","ForStatement","ForInStatement","ForOfStatement","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","Literal","LabeledStatement","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","NewExpression","ObjectExpression","ObjectPattern","Program","Property","RestElement","ReturnStatement","SequenceExpression","SpreadElement","Super","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","JSXIdentifier","JSXNamespacedName","JSXMemberExpression","JSXEmptyExpression","JSXExpressionContainer","JSXElement","JSXClosingElement","JSXOpeningElement","JSXAttribute","JSXSpreadAttribute","JSXText","ExportDefaultDeclaration","ExportNamedDeclaration","ExportAllDeclaration","ExportSpecifier","ImportDeclaration","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/espree/lib/ast-node-types.js"],"sourcesContent":["/**\n * @fileoverview The AST node types produced by the parser.\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\n// None!\n\n//------------------------------------------------------------------------------\n// Public\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    AssignmentExpression: \"AssignmentExpression\",\n    AssignmentPattern: \"AssignmentPattern\",\n    ArrayExpression: \"ArrayExpression\",\n    ArrayPattern: \"ArrayPattern\",\n    ArrowFunctionExpression: \"ArrowFunctionExpression\",\n    AwaitExpression: \"AwaitExpression\",\n    BlockStatement: \"BlockStatement\",\n    BinaryExpression: \"BinaryExpression\",\n    BreakStatement: \"BreakStatement\",\n    CallExpression: \"CallExpression\",\n    CatchClause: \"CatchClause\",\n    ClassBody: \"ClassBody\",\n    ClassDeclaration: \"ClassDeclaration\",\n    ClassExpression: \"ClassExpression\",\n    ConditionalExpression: \"ConditionalExpression\",\n    ContinueStatement: \"ContinueStatement\",\n    DoWhileStatement: \"DoWhileStatement\",\n    DebuggerStatement: \"DebuggerStatement\",\n    EmptyStatement: \"EmptyStatement\",\n    ExpressionStatement: \"ExpressionStatement\",\n    ForStatement: \"ForStatement\",\n    ForInStatement: \"ForInStatement\",\n    ForOfStatement: \"ForOfStatement\",\n    FunctionDeclaration: \"FunctionDeclaration\",\n    FunctionExpression: \"FunctionExpression\",\n    Identifier: \"Identifier\",\n    IfStatement: \"IfStatement\",\n    Literal: \"Literal\",\n    LabeledStatement: \"LabeledStatement\",\n    LogicalExpression: \"LogicalExpression\",\n    MemberExpression: \"MemberExpression\",\n    MetaProperty: \"MetaProperty\",\n    MethodDefinition: \"MethodDefinition\",\n    NewExpression: \"NewExpression\",\n    ObjectExpression: \"ObjectExpression\",\n    ObjectPattern: \"ObjectPattern\",\n    Program: \"Program\",\n    Property: \"Property\",\n    RestElement: \"RestElement\",\n    ReturnStatement: \"ReturnStatement\",\n    SequenceExpression: \"SequenceExpression\",\n    SpreadElement: \"SpreadElement\",\n    Super: \"Super\",\n    SwitchCase: \"SwitchCase\",\n    SwitchStatement: \"SwitchStatement\",\n    TaggedTemplateExpression: \"TaggedTemplateExpression\",\n    TemplateElement: \"TemplateElement\",\n    TemplateLiteral: \"TemplateLiteral\",\n    ThisExpression: \"ThisExpression\",\n    ThrowStatement: \"ThrowStatement\",\n    TryStatement: \"TryStatement\",\n    UnaryExpression: \"UnaryExpression\",\n    UpdateExpression: \"UpdateExpression\",\n    VariableDeclaration: \"VariableDeclaration\",\n    VariableDeclarator: \"VariableDeclarator\",\n    WhileStatement: \"WhileStatement\",\n    WithStatement: \"WithStatement\",\n    YieldExpression: \"YieldExpression\",\n    JSXIdentifier: \"JSXIdentifier\",\n    JSXNamespacedName: \"JSXNamespacedName\",\n    JSXMemberExpression: \"JSXMemberExpression\",\n    JSXEmptyExpression: \"JSXEmptyExpression\",\n    JSXExpressionContainer: \"JSXExpressionContainer\",\n    JSXElement: \"JSXElement\",\n    JSXClosingElement: \"JSXClosingElement\",\n    JSXOpeningElement: \"JSXOpeningElement\",\n    JSXAttribute: \"JSXAttribute\",\n    JSXSpreadAttribute: \"JSXSpreadAttribute\",\n    JSXText: \"JSXText\",\n    ExportDefaultDeclaration: \"ExportDefaultDeclaration\",\n    ExportNamedDeclaration: \"ExportNamedDeclaration\",\n    ExportAllDeclaration: \"ExportAllDeclaration\",\n    ExportSpecifier: \"ExportSpecifier\",\n    ImportDeclaration: \"ImportDeclaration\",\n    ImportSpecifier: \"ImportSpecifier\",\n    ImportDefaultSpecifier: \"ImportDefaultSpecifier\",\n    ImportNamespaceSpecifier: \"ImportNamespaceSpecifier\"\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,oBAAoB,EAAE,sBADT;EAEbC,iBAAiB,EAAE,mBAFN;EAGbC,eAAe,EAAE,iBAHJ;EAIbC,YAAY,EAAE,cAJD;EAKbC,uBAAuB,EAAE,yBALZ;EAMbC,eAAe,EAAE,iBANJ;EAObC,cAAc,EAAE,gBAPH;EAQbC,gBAAgB,EAAE,kBARL;EASbC,cAAc,EAAE,gBATH;EAUbC,cAAc,EAAE,gBAVH;EAWbC,WAAW,EAAE,aAXA;EAYbC,SAAS,EAAE,WAZE;EAabC,gBAAgB,EAAE,kBAbL;EAcbC,eAAe,EAAE,iBAdJ;EAebC,qBAAqB,EAAE,uBAfV;EAgBbC,iBAAiB,EAAE,mBAhBN;EAiBbC,gBAAgB,EAAE,kBAjBL;EAkBbC,iBAAiB,EAAE,mBAlBN;EAmBbC,cAAc,EAAE,gBAnBH;EAoBbC,mBAAmB,EAAE,qBApBR;EAqBbC,YAAY,EAAE,cArBD;EAsBbC,cAAc,EAAE,gBAtBH;EAuBbC,cAAc,EAAE,gBAvBH;EAwBbC,mBAAmB,EAAE,qBAxBR;EAyBbC,kBAAkB,EAAE,oBAzBP;EA0BbC,UAAU,EAAE,YA1BC;EA2BbC,WAAW,EAAE,aA3BA;EA4BbC,OAAO,EAAE,SA5BI;EA6BbC,gBAAgB,EAAE,kBA7BL;EA8BbC,iBAAiB,EAAE,mBA9BN;EA+BbC,gBAAgB,EAAE,kBA/BL;EAgCbC,YAAY,EAAE,cAhCD;EAiCbC,gBAAgB,EAAE,kBAjCL;EAkCbC,aAAa,EAAE,eAlCF;EAmCbC,gBAAgB,EAAE,kBAnCL;EAoCbC,aAAa,EAAE,eApCF;EAqCbC,OAAO,EAAE,SArCI;EAsCbC,QAAQ,EAAE,UAtCG;EAuCbC,WAAW,EAAE,aAvCA;EAwCbC,eAAe,EAAE,iBAxCJ;EAyCbC,kBAAkB,EAAE,oBAzCP;EA0CbC,aAAa,EAAE,eA1CF;EA2CbC,KAAK,EAAE,OA3CM;EA4CbC,UAAU,EAAE,YA5CC;EA6CbC,eAAe,EAAE,iBA7CJ;EA8CbC,wBAAwB,EAAE,0BA9Cb;EA+CbC,eAAe,EAAE,iBA/CJ;EAgDbC,eAAe,EAAE,iBAhDJ;EAiDbC,cAAc,EAAE,gBAjDH;EAkDbC,cAAc,EAAE,gBAlDH;EAmDbC,YAAY,EAAE,cAnDD;EAoDbC,eAAe,EAAE,iBApDJ;EAqDbC,gBAAgB,EAAE,kBArDL;EAsDbC,mBAAmB,EAAE,qBAtDR;EAuDbC,kBAAkB,EAAE,oBAvDP;EAwDbC,cAAc,EAAE,gBAxDH;EAyDbC,aAAa,EAAE,eAzDF;EA0DbC,eAAe,EAAE,iBA1DJ;EA2DbC,aAAa,EAAE,eA3DF;EA4DbC,iBAAiB,EAAE,mBA5DN;EA6DbC,mBAAmB,EAAE,qBA7DR;EA8DbC,kBAAkB,EAAE,oBA9DP;EA+DbC,sBAAsB,EAAE,wBA/DX;EAgEbC,UAAU,EAAE,YAhEC;EAiEbC,iBAAiB,EAAE,mBAjEN;EAkEbC,iBAAiB,EAAE,mBAlEN;EAmEbC,YAAY,EAAE,cAnED;EAoEbC,kBAAkB,EAAE,oBApEP;EAqEbC,OAAO,EAAE,SArEI;EAsEbC,wBAAwB,EAAE,0BAtEb;EAuEbC,sBAAsB,EAAE,wBAvEX;EAwEbC,oBAAoB,EAAE,sBAxET;EAyEbC,eAAe,EAAE,iBAzEJ;EA0EbC,iBAAiB,EAAE,mBA1EN;EA2EbC,eAAe,EAAE,iBA3EJ;EA4EbC,sBAAsB,EAAE,wBA5EX;EA6EbC,wBAAwB,EAAE;AA7Eb,CAAjB"},"metadata":{},"sourceType":"script"}