{"ast":null,"code":"export const style = {\n  textDecorationLine: ''\n}; // export function handleCheckbox(estilo) {\n//   if (estilo.textDecorationLine === '') {\n//     estilo.textDecorationLine = 'line-through';\n//   } else {\n//     estilo.textDecorationLine = '';\n//   }\n// }\n\nexport const handleShare = (pathname, func) => {\n  const copyText = `http://localhost:3000${pathname}`;\n  navigator.clipboard.writeText(copyText);\n  func(true);\n};\n\nconst addFirstFavorite = type => {\n  localStorage.setItem('favoriteRecipes', JSON.stringify([{\n    id: type === 'foods' ? recipeDetail[0].idMeal : recipeDetail[0].idDrink,\n    type: type === 'foods' ? 'food' : 'drink',\n    nationality: recipeDetail[0].strArea ? recipeDetail[0].strArea : '',\n    category: recipeDetail[0].strCategory,\n    alcoholicOrNot: type === 'foods' ? '' : recipeDetail[0].strAlcoholic,\n    name: type === 'foods' ? recipeDetail[0].strMeal : recipeDetail[0].strDrink,\n    image: type === 'foods' ? recipeDetail[0].strMealThumb : recipeDetail[0].strDrinkThumb\n  }]));\n};\n\nconst addNewFavorite = (type, favoritesLocalStorage) => {\n  localStorage.setItem('favoriteRecipes', JSON.stringify([...favoritesLocalStorage, {\n    id: recipeDetail[0].idMeal ? recipeDetail[0].idMeal : recipeDetail[0].idDrink,\n    type: type === 'foods' ? 'food' : 'drink',\n    nationality: recipeDetail[0].strArea ? recipeDetail[0].strArea : '',\n    category: recipeDetail[0].strCategory,\n    alcoholicOrNot: type === 'foods' ? '' : recipeDetail[0].strAlcoholic,\n    name: type === 'foods' ? recipeDetail[0].strMeal : recipeDetail[0].strDrink,\n    image: type === 'foods' ? recipeDetail[0].strMealThumb : recipeDetail[0].strDrinkThumb\n  }]));\n}; // Requisito 34 - Função que salva no localStorage o primeiro favorito ou acrescenta mais um favorito na lista.\n\n\nexport const handleFavorite = (type, idFood, idDrink) => {\n  const favoritesLocalStorage = JSON.parse(localStorage.getItem('favoriteRecipes')); // Requisito 36 - Caso a receita já esteja favoritada, executa o setItem para deixar no localStorage todas as receitas que não forem essa. Ou seja, remove apenas a receita clicada do localStorage. E as receitas restantes são deixadas no localStorage por passarem pelo filtro.\n\n  if (favorited === true) {\n    localStorage.setItem('favoriteRecipes', JSON.stringify(favoritesLocalStorage.filter(item => item.id !== idFood ? idFood : idDrink))); // Requisito 36 - Além de remover do localStorage eu troco a imagem para o coração vazio.\n\n    setFavorited(false);\n  } // Requisito 36 - Caso a receita não esteja favoritada, colocarei ela na lista do localStorage e trocarei a foto para o coração preenchido.\n\n\n  if (favorited === false) {\n    setFavorited(true); // Se não tiver nada salvo na lista 'favoriteRecipes' vai inserir o primeiro item.\n\n    if (favoritesLocalStorage === null) {\n      addFirstFavorite(type);\n    } // Caso já tenha itens na lista 'favoriteRecipes', mantém o que já tem e acrescenta um novo.\n\n\n    if (favoritesLocalStorage !== null) {\n      addNewFavorite(type, favoritesLocalStorage);\n    }\n  }\n}; // Requisito 35 - Abaixo é feita a verificação se o ID dessa receita atual da página é encontrado na chave 'favoriteRecipes' do localStorage. Se esse ID for encontrado, o state 'favorited' será true e isso renderiza o ícone 'blackHeartIcon'. Se não for encontrado, o state se mantém false e a renderização continua sendo do 'whiteHeartIcon'.\n\nexport const getFavoriteLocalStorage = (idFood, idDrink) => {\n  const favoritesLocalStorage = JSON.parse(localStorage.getItem('favoriteRecipes'));\n\n  if (favoritesLocalStorage !== null) {\n    const boolean = favoritesLocalStorage.some(item => item.id === idFood ? idFood : idDrink);\n\n    if (boolean === true) {\n      setFavorited(true);\n    }\n  }\n};\nexport const handleDoneRecipe = (history, setDoneRecipes, doneRecipes) => {\n  setDoneRecipes(prevState => [...prevState, 'teste']);\n  console.log(doneRecipes);\n  window.localStorage.setItem('doneRecipes', JSON.stringify(doneRecipes)); // history.push('/done-recipes');\n};","map":{"version":3,"names":["style","textDecorationLine","handleShare","pathname","func","copyText","navigator","clipboard","writeText","addFirstFavorite","type","localStorage","setItem","JSON","stringify","id","recipeDetail","idMeal","idDrink","nationality","strArea","category","strCategory","alcoholicOrNot","strAlcoholic","name","strMeal","strDrink","image","strMealThumb","strDrinkThumb","addNewFavorite","favoritesLocalStorage","handleFavorite","idFood","parse","getItem","favorited","filter","item","setFavorited","getFavoriteLocalStorage","boolean","some","handleDoneRecipe","history","setDoneRecipes","doneRecipes","prevState","console","log","window"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/src/services/helpers/functions/handles.js"],"sourcesContent":["export const style = {\n  textDecorationLine: '',\n};\n\n// export function handleCheckbox(estilo) {\n//   if (estilo.textDecorationLine === '') {\n//     estilo.textDecorationLine = 'line-through';\n//   } else {\n//     estilo.textDecorationLine = '';\n//   }\n// }\n\nexport const handleShare = (pathname, func) => {\n  const copyText = `http://localhost:3000${pathname}`;\n  navigator.clipboard.writeText(copyText);\n  func(true);\n};\n\nconst addFirstFavorite = (type) => {\n  localStorage.setItem('favoriteRecipes', JSON.stringify([{\n    id: type === 'foods' ? recipeDetail[0].idMeal : recipeDetail[0].idDrink,\n    type: type === 'foods' ? 'food' : 'drink',\n    nationality: recipeDetail[0].strArea ? recipeDetail[0].strArea : '',\n    category: recipeDetail[0].strCategory,\n    alcoholicOrNot: type === 'foods' ? '' : recipeDetail[0].strAlcoholic,\n    name: type === 'foods' ? recipeDetail[0].strMeal : recipeDetail[0].strDrink,\n    image: type === 'foods' ? (\n      recipeDetail[0].strMealThumb) : (recipeDetail[0].strDrinkThumb),\n  }]));\n};\nconst addNewFavorite = (type, favoritesLocalStorage) => {\n  localStorage.setItem('favoriteRecipes', JSON.stringify([\n    ...favoritesLocalStorage,\n    { id: recipeDetail[0].idMeal ? recipeDetail[0].idMeal : recipeDetail[0].idDrink,\n      type: type === 'foods' ? 'food' : 'drink',\n      nationality: recipeDetail[0].strArea ? recipeDetail[0].strArea : '',\n      category: recipeDetail[0].strCategory,\n      alcoholicOrNot: type === 'foods' ? '' : recipeDetail[0].strAlcoholic,\n      name: type === 'foods' ? recipeDetail[0].strMeal : recipeDetail[0].strDrink,\n      image: type === 'foods' ? (\n        recipeDetail[0].strMealThumb) : (recipeDetail[0].strDrinkThumb),\n    }]));\n};\n// Requisito 34 - Função que salva no localStorage o primeiro favorito ou acrescenta mais um favorito na lista.\nexport const handleFavorite = (type, idFood, idDrink) => {\n  const favoritesLocalStorage = JSON.parse(localStorage.getItem('favoriteRecipes'));\n  // Requisito 36 - Caso a receita já esteja favoritada, executa o setItem para deixar no localStorage todas as receitas que não forem essa. Ou seja, remove apenas a receita clicada do localStorage. E as receitas restantes são deixadas no localStorage por passarem pelo filtro.\n  if (favorited === true) {\n    localStorage.setItem('favoriteRecipes', JSON.stringify(\n      favoritesLocalStorage.filter((item) => (item.id !== idFood ? idFood : idDrink)),\n    ));\n    // Requisito 36 - Além de remover do localStorage eu troco a imagem para o coração vazio.\n    setFavorited(false);\n  }\n  // Requisito 36 - Caso a receita não esteja favoritada, colocarei ela na lista do localStorage e trocarei a foto para o coração preenchido.\n  if (favorited === false) {\n    setFavorited(true);\n    // Se não tiver nada salvo na lista 'favoriteRecipes' vai inserir o primeiro item.\n    if (favoritesLocalStorage === null) { addFirstFavorite(type); }\n    // Caso já tenha itens na lista 'favoriteRecipes', mantém o que já tem e acrescenta um novo.\n    if (favoritesLocalStorage !== null) { addNewFavorite(type, favoritesLocalStorage); }\n  }\n};\n\n// Requisito 35 - Abaixo é feita a verificação se o ID dessa receita atual da página é encontrado na chave 'favoriteRecipes' do localStorage. Se esse ID for encontrado, o state 'favorited' será true e isso renderiza o ícone 'blackHeartIcon'. Se não for encontrado, o state se mantém false e a renderização continua sendo do 'whiteHeartIcon'.\nexport const getFavoriteLocalStorage = (idFood, idDrink) => {\n  const favoritesLocalStorage = JSON.parse(localStorage.getItem('favoriteRecipes'));\n  if (favoritesLocalStorage !== null) {\n    const boolean = favoritesLocalStorage\n      .some((item) => (item.id === idFood ? idFood : idDrink));\n    if (boolean === true) { setFavorited(true); }\n  }\n};\n\nexport const handleDoneRecipe = (history, setDoneRecipes, doneRecipes) => {\n  setDoneRecipes((prevState) => [...prevState, 'teste']);\n  console.log(doneRecipes);\n  window.localStorage.setItem('doneRecipes', JSON.stringify(doneRecipes));\n  // history.push('/done-recipes');\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}