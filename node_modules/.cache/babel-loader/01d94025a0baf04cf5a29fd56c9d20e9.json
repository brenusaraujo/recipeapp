{"ast":null,"code":"/**\n * @fileoverview Define utility functions for token store.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets `token.range[0]` from the given token.\n * @param {Node|Token|Comment} token The token to get.\n * @returns {number} The start location.\n * @private\n */\n\nfunction getStartLocation(token) {\n  return token.range[0];\n} //------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * Finds the index of the first token which is after the given location.\n * If it was not found, this returns `tokens.length`.\n * @param {(Token|Comment)[]} tokens It searches the token in this list.\n * @param {number} location The location to search.\n * @returns {number} The found index or `tokens.length`.\n */\n\n\nexports.search = function search(tokens, location) {\n  const index = tokens.findIndex(el => location <= getStartLocation(el));\n  return index === -1 ? tokens.length : index;\n};\n/**\n * Gets the index of the `startLoc` in `tokens`.\n * `startLoc` can be the value of `node.range[1]`, so this checks about `startLoc - 1` as well.\n * @param {(Token|Comment)[]} tokens The tokens to find an index.\n * @param {Object} indexMap The map from locations to indices.\n * @param {number} startLoc The location to get an index.\n * @returns {number} The index.\n */\n\n\nexports.getFirstIndex = function getFirstIndex(tokens, indexMap, startLoc) {\n  if (startLoc in indexMap) {\n    return indexMap[startLoc];\n  }\n\n  if (startLoc - 1 in indexMap) {\n    const index = indexMap[startLoc - 1];\n    const token = index >= 0 && index < tokens.length ? tokens[index] : null;\n    /*\n     * For the map of \"comment's location -> token's index\", it points the next token of a comment.\n     * In that case, +1 is unnecessary.\n     */\n\n    if (token && token.range[0] >= startLoc) {\n      return index;\n    }\n\n    return index + 1;\n  }\n\n  return 0;\n};\n/**\n * Gets the index of the `endLoc` in `tokens`.\n * The information of end locations are recorded at `endLoc - 1` in `indexMap`, so this checks about `endLoc - 1` as well.\n * @param {(Token|Comment)[]} tokens The tokens to find an index.\n * @param {Object} indexMap The map from locations to indices.\n * @param {number} endLoc The location to get an index.\n * @returns {number} The index.\n */\n\n\nexports.getLastIndex = function getLastIndex(tokens, indexMap, endLoc) {\n  if (endLoc in indexMap) {\n    return indexMap[endLoc] - 1;\n  }\n\n  if (endLoc - 1 in indexMap) {\n    const index = indexMap[endLoc - 1];\n    const token = index >= 0 && index < tokens.length ? tokens[index] : null;\n    /*\n     * For the map of \"comment's location -> token's index\", it points the next token of a comment.\n     * In that case, -1 is necessary.\n     */\n\n    if (token && token.range[1] > endLoc) {\n      return index - 1;\n    }\n\n    return index;\n  }\n\n  return tokens.length - 1;\n};","map":{"version":3,"names":["getStartLocation","token","range","exports","search","tokens","location","index","findIndex","el","length","getFirstIndex","indexMap","startLoc","getLastIndex","endLoc"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/source-code/token-store/utils.js"],"sourcesContent":["/**\n * @fileoverview Define utility functions for token store.\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets `token.range[0]` from the given token.\n * @param {Node|Token|Comment} token The token to get.\n * @returns {number} The start location.\n * @private\n */\nfunction getStartLocation(token) {\n    return token.range[0];\n}\n\n//------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * Finds the index of the first token which is after the given location.\n * If it was not found, this returns `tokens.length`.\n * @param {(Token|Comment)[]} tokens It searches the token in this list.\n * @param {number} location The location to search.\n * @returns {number} The found index or `tokens.length`.\n */\nexports.search = function search(tokens, location) {\n    const index = tokens.findIndex(el => location <= getStartLocation(el));\n\n    return index === -1 ? tokens.length : index;\n};\n\n/**\n * Gets the index of the `startLoc` in `tokens`.\n * `startLoc` can be the value of `node.range[1]`, so this checks about `startLoc - 1` as well.\n * @param {(Token|Comment)[]} tokens The tokens to find an index.\n * @param {Object} indexMap The map from locations to indices.\n * @param {number} startLoc The location to get an index.\n * @returns {number} The index.\n */\nexports.getFirstIndex = function getFirstIndex(tokens, indexMap, startLoc) {\n    if (startLoc in indexMap) {\n        return indexMap[startLoc];\n    }\n    if ((startLoc - 1) in indexMap) {\n        const index = indexMap[startLoc - 1];\n        const token = (index >= 0 && index < tokens.length) ? tokens[index] : null;\n\n        /*\n         * For the map of \"comment's location -> token's index\", it points the next token of a comment.\n         * In that case, +1 is unnecessary.\n         */\n        if (token && token.range[0] >= startLoc) {\n            return index;\n        }\n        return index + 1;\n    }\n    return 0;\n};\n\n/**\n * Gets the index of the `endLoc` in `tokens`.\n * The information of end locations are recorded at `endLoc - 1` in `indexMap`, so this checks about `endLoc - 1` as well.\n * @param {(Token|Comment)[]} tokens The tokens to find an index.\n * @param {Object} indexMap The map from locations to indices.\n * @param {number} endLoc The location to get an index.\n * @returns {number} The index.\n */\nexports.getLastIndex = function getLastIndex(tokens, indexMap, endLoc) {\n    if (endLoc in indexMap) {\n        return indexMap[endLoc] - 1;\n    }\n    if ((endLoc - 1) in indexMap) {\n        const index = indexMap[endLoc - 1];\n        const token = (index >= 0 && index < tokens.length) ? tokens[index] : null;\n\n        /*\n         * For the map of \"comment's location -> token's index\", it points the next token of a comment.\n         * In that case, -1 is necessary.\n         */\n        if (token && token.range[1] > endLoc) {\n            return index - 1;\n        }\n        return index;\n    }\n    return tokens.length - 1;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,gBAAT,CAA0BC,KAA1B,EAAiC;EAC7B,OAAOA,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAP;AACH,C,CAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,OAAO,CAACC,MAAR,GAAiB,SAASA,MAAT,CAAgBC,MAAhB,EAAwBC,QAAxB,EAAkC;EAC/C,MAAMC,KAAK,GAAGF,MAAM,CAACG,SAAP,CAAiBC,EAAE,IAAIH,QAAQ,IAAIN,gBAAgB,CAACS,EAAD,CAAnD,CAAd;EAEA,OAAOF,KAAK,KAAK,CAAC,CAAX,GAAeF,MAAM,CAACK,MAAtB,GAA+BH,KAAtC;AACH,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACQ,aAAR,GAAwB,SAASA,aAAT,CAAuBN,MAAvB,EAA+BO,QAA/B,EAAyCC,QAAzC,EAAmD;EACvE,IAAIA,QAAQ,IAAID,QAAhB,EAA0B;IACtB,OAAOA,QAAQ,CAACC,QAAD,CAAf;EACH;;EACD,IAAKA,QAAQ,GAAG,CAAZ,IAAkBD,QAAtB,EAAgC;IAC5B,MAAML,KAAK,GAAGK,QAAQ,CAACC,QAAQ,GAAG,CAAZ,CAAtB;IACA,MAAMZ,KAAK,GAAIM,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAGF,MAAM,CAACK,MAA9B,GAAwCL,MAAM,CAACE,KAAD,CAA9C,GAAwD,IAAtE;IAEA;AACR;AACA;AACA;;IACQ,IAAIN,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAY,CAAZ,KAAkBW,QAA/B,EAAyC;MACrC,OAAON,KAAP;IACH;;IACD,OAAOA,KAAK,GAAG,CAAf;EACH;;EACD,OAAO,CAAP;AACH,CAlBD;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACW,YAAR,GAAuB,SAASA,YAAT,CAAsBT,MAAtB,EAA8BO,QAA9B,EAAwCG,MAAxC,EAAgD;EACnE,IAAIA,MAAM,IAAIH,QAAd,EAAwB;IACpB,OAAOA,QAAQ,CAACG,MAAD,CAAR,GAAmB,CAA1B;EACH;;EACD,IAAKA,MAAM,GAAG,CAAV,IAAgBH,QAApB,EAA8B;IAC1B,MAAML,KAAK,GAAGK,QAAQ,CAACG,MAAM,GAAG,CAAV,CAAtB;IACA,MAAMd,KAAK,GAAIM,KAAK,IAAI,CAAT,IAAcA,KAAK,GAAGF,MAAM,CAACK,MAA9B,GAAwCL,MAAM,CAACE,KAAD,CAA9C,GAAwD,IAAtE;IAEA;AACR;AACA;AACA;;IACQ,IAAIN,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAY,CAAZ,IAAiBa,MAA9B,EAAsC;MAClC,OAAOR,KAAK,GAAG,CAAf;IACH;;IACD,OAAOA,KAAP;EACH;;EACD,OAAOF,MAAM,CAACK,MAAP,GAAgB,CAAvB;AACH,CAlBD"},"metadata":{},"sourceType":"script"}