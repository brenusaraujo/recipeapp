{"ast":null,"code":"/**\n * @fileoverview Rule to enforce that all class methods use 'this'.\n * @author Patrick Williams\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce that class methods utilize `this`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/class-methods-use-this\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptMethods: {\n          type: \"array\",\n          items: {\n            type: \"string\"\n          }\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingThis: \"Expected 'this' to be used by class {{name}}.\"\n    }\n  },\n\n  create(context) {\n    const config = Object.assign({}, context.options[0]);\n    const exceptMethods = new Set(config.exceptMethods || []);\n    const stack = [];\n    /**\n     * Initializes the current context to false and pushes it onto the stack.\n     * These booleans represent whether 'this' has been used in the context.\n     * @returns {void}\n     * @private\n     */\n\n    function enterFunction() {\n      stack.push(false);\n    }\n    /**\n     * Check if the node is an instance method\n     * @param {ASTNode} node node to check\n     * @returns {boolean} True if its an instance method\n     * @private\n     */\n\n\n    function isInstanceMethod(node) {\n      return !node.static && node.kind !== \"constructor\" && node.type === \"MethodDefinition\";\n    }\n    /**\n     * Check if the node is an instance method not excluded by config\n     * @param {ASTNode} node node to check\n     * @returns {boolean} True if it is an instance method, and not excluded by config\n     * @private\n     */\n\n\n    function isIncludedInstanceMethod(node) {\n      return isInstanceMethod(node) && (node.computed || !exceptMethods.has(node.key.name));\n    }\n    /**\n     * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\n     * Static methods and the constructor are exempt.\n     * Then pops the context off the stack.\n     * @param {ASTNode} node A function node that was entered.\n     * @returns {void}\n     * @private\n     */\n\n\n    function exitFunction(node) {\n      const methodUsesThis = stack.pop();\n\n      if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n        context.report({\n          node,\n          messageId: \"missingThis\",\n          data: {\n            name: astUtils.getFunctionNameWithKind(node)\n          }\n        });\n      }\n    }\n    /**\n     * Mark the current context as having used 'this'.\n     * @returns {void}\n     * @private\n     */\n\n\n    function markThisUsed() {\n      if (stack.length) {\n        stack[stack.length - 1] = true;\n      }\n    }\n\n    return {\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      ThisExpression: markThisUsed,\n      Super: markThisUsed\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","exceptMethods","items","additionalProperties","messages","missingThis","create","context","config","Object","assign","options","Set","stack","enterFunction","push","isInstanceMethod","node","static","kind","isIncludedInstanceMethod","computed","has","key","name","exitFunction","methodUsesThis","pop","parent","report","messageId","data","getFunctionNameWithKind","markThisUsed","length","FunctionDeclaration","FunctionExpression","ThisExpression","Super"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/class-methods-use-this.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce that all class methods use 'this'.\n * @author Patrick Williams\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce that class methods utilize `this`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/class-methods-use-this\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                exceptMethods: {\n                    type: \"array\",\n                    items: {\n                        type: \"string\"\n                    }\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingThis: \"Expected 'this' to be used by class {{name}}.\"\n        }\n    },\n    create(context) {\n        const config = Object.assign({}, context.options[0]);\n        const exceptMethods = new Set(config.exceptMethods || []);\n\n        const stack = [];\n\n        /**\n         * Initializes the current context to false and pushes it onto the stack.\n         * These booleans represent whether 'this' has been used in the context.\n         * @returns {void}\n         * @private\n         */\n        function enterFunction() {\n            stack.push(false);\n        }\n\n        /**\n         * Check if the node is an instance method\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if its an instance method\n         * @private\n         */\n        function isInstanceMethod(node) {\n            return !node.static && node.kind !== \"constructor\" && node.type === \"MethodDefinition\";\n        }\n\n        /**\n         * Check if the node is an instance method not excluded by config\n         * @param {ASTNode} node node to check\n         * @returns {boolean} True if it is an instance method, and not excluded by config\n         * @private\n         */\n        function isIncludedInstanceMethod(node) {\n            return isInstanceMethod(node) &&\n                (node.computed || !exceptMethods.has(node.key.name));\n        }\n\n        /**\n         * Checks if we are leaving a function that is a method, and reports if 'this' has not been used.\n         * Static methods and the constructor are exempt.\n         * Then pops the context off the stack.\n         * @param {ASTNode} node A function node that was entered.\n         * @returns {void}\n         * @private\n         */\n        function exitFunction(node) {\n            const methodUsesThis = stack.pop();\n\n            if (isIncludedInstanceMethod(node.parent) && !methodUsesThis) {\n                context.report({\n                    node,\n                    messageId: \"missingThis\",\n                    data: {\n                        name: astUtils.getFunctionNameWithKind(node)\n                    }\n                });\n            }\n        }\n\n        /**\n         * Mark the current context as having used 'this'.\n         * @returns {void}\n         * @private\n         */\n        function markThisUsed() {\n            if (stack.length) {\n                stack[stack.length - 1] = true;\n            }\n        }\n\n        return {\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            ThisExpression: markThisUsed,\n            Super: markThisUsed\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,2CADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CAAC;MACLN,IAAI,EAAE,QADD;MAELO,UAAU,EAAE;QACRC,aAAa,EAAE;UACXR,IAAI,EAAE,OADK;UAEXS,KAAK,EAAE;YACHT,IAAI,EAAE;UADH;QAFI;MADP,CAFP;MAULU,oBAAoB,EAAE;IAVjB,CAAD,CAVN;IAuBFC,QAAQ,EAAE;MACNC,WAAW,EAAE;IADP;EAvBR,CADO;;EA4BbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAO,CAACI,OAAR,CAAgB,CAAhB,CAAlB,CAAf;IACA,MAAMV,aAAa,GAAG,IAAIW,GAAJ,CAAQJ,MAAM,CAACP,aAAP,IAAwB,EAAhC,CAAtB;IAEA,MAAMY,KAAK,GAAG,EAAd;IAEA;AACR;AACA;AACA;AACA;AACA;;IACQ,SAASC,aAAT,GAAyB;MACrBD,KAAK,CAACE,IAAN,CAAW,KAAX;IACH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;MAC5B,OAAO,CAACA,IAAI,CAACC,MAAN,IAAgBD,IAAI,CAACE,IAAL,KAAc,aAA9B,IAA+CF,IAAI,CAACxB,IAAL,KAAc,kBAApE;IACH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAAS2B,wBAAT,CAAkCH,IAAlC,EAAwC;MACpC,OAAOD,gBAAgB,CAACC,IAAD,CAAhB,KACFA,IAAI,CAACI,QAAL,IAAiB,CAACpB,aAAa,CAACqB,GAAd,CAAkBL,IAAI,CAACM,GAAL,CAASC,IAA3B,CADhB,CAAP;IAEH;IAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;;;IACQ,SAASC,YAAT,CAAsBR,IAAtB,EAA4B;MACxB,MAAMS,cAAc,GAAGb,KAAK,CAACc,GAAN,EAAvB;;MAEA,IAAIP,wBAAwB,CAACH,IAAI,CAACW,MAAN,CAAxB,IAAyC,CAACF,cAA9C,EAA8D;QAC1DnB,OAAO,CAACsB,MAAR,CAAe;UACXZ,IADW;UAEXa,SAAS,EAAE,aAFA;UAGXC,IAAI,EAAE;YACFP,IAAI,EAAEpC,QAAQ,CAAC4C,uBAAT,CAAiCf,IAAjC;UADJ;QAHK,CAAf;MAOH;IACJ;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASgB,YAAT,GAAwB;MACpB,IAAIpB,KAAK,CAACqB,MAAV,EAAkB;QACdrB,KAAK,CAACA,KAAK,CAACqB,MAAN,GAAe,CAAhB,CAAL,GAA0B,IAA1B;MACH;IACJ;;IAED,OAAO;MACHC,mBAAmB,EAAErB,aADlB;MAEH,4BAA4BW,YAFzB;MAGHW,kBAAkB,EAAEtB,aAHjB;MAIH,2BAA2BW,YAJxB;MAKHY,cAAc,EAAEJ,YALb;MAMHK,KAAK,EAAEL;IANJ,CAAP;EAQH;;AA1GY,CAAjB"},"metadata":{},"sourceType":"script"}