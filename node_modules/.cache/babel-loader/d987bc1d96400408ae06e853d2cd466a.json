{"ast":null,"code":"/**\n * @fileoverview Rule to disallow whitespace before properties\n * @author Kai Cataldo\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow whitespace before properties\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-whitespace-before-property\"\n    },\n    fixable: \"whitespace\",\n    schema: [],\n    messages: {\n      unexpectedWhitespace: \"Unexpected whitespace before property {{propName}}.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports whitespace before property token\n     * @param {ASTNode} node the node to report in the event of an error\n     * @param {Token} leftToken the left token\n     * @param {Token} rightToken the right token\n     * @returns {void}\n     * @private\n     */\n\n    function reportError(node, leftToken, rightToken) {\n      context.report({\n        node,\n        messageId: \"unexpectedWhitespace\",\n        data: {\n          propName: sourceCode.getText(node.property)\n        },\n\n        fix(fixer) {\n          let replacementText = \"\";\n\n          if (!node.computed && !node.optional && astUtils.isDecimalInteger(node.object)) {\n            /*\n             * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\n             * Don't fix this case.\n             */\n            return null;\n          } // Don't fix if comments exist.\n\n\n          if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n            return null;\n          }\n\n          if (node.optional) {\n            replacementText = \"?.\";\n          } else if (!node.computed) {\n            replacementText = \".\";\n          }\n\n          return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\n        }\n\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      MemberExpression(node) {\n        let rightToken;\n        let leftToken;\n\n        if (!astUtils.isTokenOnSameLine(node.object, node.property)) {\n          return;\n        }\n\n        if (node.computed) {\n          rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);\n          leftToken = sourceCode.getTokenBefore(rightToken, node.optional ? 1 : 0);\n        } else {\n          rightToken = sourceCode.getFirstToken(node.property);\n          leftToken = sourceCode.getTokenBefore(rightToken, 1);\n        }\n\n        if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\n          reportError(node, leftToken, rightToken);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","unexpectedWhitespace","create","context","sourceCode","getSourceCode","reportError","node","leftToken","rightToken","report","messageId","data","propName","getText","property","fix","fixer","replacementText","computed","optional","isDecimalInteger","object","commentsExistBetween","replaceTextRange","range","MemberExpression","isTokenOnSameLine","getTokenBefore","isOpeningBracketToken","getFirstToken","isSpaceBetweenTokens"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-whitespace-before-property.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow whitespace before properties\n * @author Kai Cataldo\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow whitespace before properties\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-whitespace-before-property\"\n        },\n\n        fixable: \"whitespace\",\n        schema: [],\n\n        messages: {\n            unexpectedWhitespace: \"Unexpected whitespace before property {{propName}}.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports whitespace before property token\n         * @param {ASTNode} node the node to report in the event of an error\n         * @param {Token} leftToken the left token\n         * @param {Token} rightToken the right token\n         * @returns {void}\n         * @private\n         */\n        function reportError(node, leftToken, rightToken) {\n            context.report({\n                node,\n                messageId: \"unexpectedWhitespace\",\n                data: {\n                    propName: sourceCode.getText(node.property)\n                },\n                fix(fixer) {\n                    let replacementText = \"\";\n\n                    if (!node.computed && !node.optional && astUtils.isDecimalInteger(node.object)) {\n\n                        /*\n                         * If the object is a number literal, fixing it to something like 5.toString() would cause a SyntaxError.\n                         * Don't fix this case.\n                         */\n                        return null;\n                    }\n\n                    // Don't fix if comments exist.\n                    if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n                        return null;\n                    }\n\n                    if (node.optional) {\n                        replacementText = \"?.\";\n                    } else if (!node.computed) {\n                        replacementText = \".\";\n                    }\n\n                    return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], replacementText);\n                }\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            MemberExpression(node) {\n                let rightToken;\n                let leftToken;\n\n                if (!astUtils.isTokenOnSameLine(node.object, node.property)) {\n                    return;\n                }\n\n                if (node.computed) {\n                    rightToken = sourceCode.getTokenBefore(node.property, astUtils.isOpeningBracketToken);\n                    leftToken = sourceCode.getTokenBefore(rightToken, node.optional ? 1 : 0);\n                } else {\n                    rightToken = sourceCode.getFirstToken(node.property);\n                    leftToken = sourceCode.getTokenBefore(rightToken, 1);\n                }\n\n                if (sourceCode.isSpaceBetweenTokens(leftToken, rightToken)) {\n                    reportError(node, leftToken, rightToken);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}