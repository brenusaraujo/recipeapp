{"ast":null,"code":"/**\n * @fileoverview Rule to check for jsdoc presence.\n * @author Gyandeep Singh\n */\n\"use strict\";\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require JSDoc comments\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/require-jsdoc\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        require: {\n          type: \"object\",\n          properties: {\n            ClassDeclaration: {\n              type: \"boolean\",\n              default: false\n            },\n            MethodDefinition: {\n              type: \"boolean\",\n              default: false\n            },\n            FunctionDeclaration: {\n              type: \"boolean\",\n              default: true\n            },\n            ArrowFunctionExpression: {\n              type: \"boolean\",\n              default: false\n            },\n            FunctionExpression: {\n              type: \"boolean\",\n              default: false\n            }\n          },\n          additionalProperties: false,\n          default: {}\n        }\n      },\n      additionalProperties: false\n    }],\n    deprecated: true,\n    replacedBy: [],\n    messages: {\n      missingJSDocComment: \"Missing JSDoc comment.\"\n    }\n  },\n\n  create(context) {\n    const source = context.getSourceCode();\n    const DEFAULT_OPTIONS = {\n      FunctionDeclaration: true,\n      MethodDefinition: false,\n      ClassDeclaration: false,\n      ArrowFunctionExpression: false,\n      FunctionExpression: false\n    };\n    const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);\n    /**\n     * Report the error message\n     * @param {ASTNode} node node to report\n     * @returns {void}\n     */\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"missingJSDocComment\"\n      });\n    }\n    /**\n     * Check if the jsdoc comment is present or not.\n     * @param {ASTNode} node node to examine\n     * @returns {void}\n     */\n\n\n    function checkJsDoc(node) {\n      const jsdocComment = source.getJSDocComment(node);\n\n      if (!jsdocComment) {\n        report(node);\n      }\n    }\n\n    return {\n      FunctionDeclaration(node) {\n        if (options.FunctionDeclaration) {\n          checkJsDoc(node);\n        }\n      },\n\n      FunctionExpression(node) {\n        if (options.MethodDefinition && node.parent.type === \"MethodDefinition\" || options.FunctionExpression && (node.parent.type === \"VariableDeclarator\" || node.parent.type === \"Property\" && node === node.parent.value)) {\n          checkJsDoc(node);\n        }\n      },\n\n      ClassDeclaration(node) {\n        if (options.ClassDeclaration) {\n          checkJsDoc(node);\n        }\n      },\n\n      ArrowFunctionExpression(node) {\n        if (options.ArrowFunctionExpression && node.parent.type === \"VariableDeclarator\") {\n          checkJsDoc(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","properties","require","ClassDeclaration","default","MethodDefinition","FunctionDeclaration","ArrowFunctionExpression","FunctionExpression","additionalProperties","deprecated","replacedBy","messages","missingJSDocComment","create","context","source","getSourceCode","DEFAULT_OPTIONS","options","Object","assign","report","node","messageId","checkJsDoc","jsdocComment","getJSDocComment","parent","value"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/require-jsdoc.js"],"sourcesContent":["/**\n * @fileoverview Rule to check for jsdoc presence.\n * @author Gyandeep Singh\n */\n\"use strict\";\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require JSDoc comments\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/require-jsdoc\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    require: {\n                        type: \"object\",\n                        properties: {\n                            ClassDeclaration: {\n                                type: \"boolean\",\n                                default: false\n                            },\n                            MethodDefinition: {\n                                type: \"boolean\",\n                                default: false\n                            },\n                            FunctionDeclaration: {\n                                type: \"boolean\",\n                                default: true\n                            },\n                            ArrowFunctionExpression: {\n                                type: \"boolean\",\n                                default: false\n                            },\n                            FunctionExpression: {\n                                type: \"boolean\",\n                                default: false\n                            }\n                        },\n                        additionalProperties: false,\n                        default: {}\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        deprecated: true,\n        replacedBy: [],\n\n        messages: {\n            missingJSDocComment: \"Missing JSDoc comment.\"\n        }\n    },\n\n    create(context) {\n        const source = context.getSourceCode();\n        const DEFAULT_OPTIONS = {\n            FunctionDeclaration: true,\n            MethodDefinition: false,\n            ClassDeclaration: false,\n            ArrowFunctionExpression: false,\n            FunctionExpression: false\n        };\n        const options = Object.assign(DEFAULT_OPTIONS, context.options[0] && context.options[0].require);\n\n        /**\n         * Report the error message\n         * @param {ASTNode} node node to report\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"missingJSDocComment\" });\n        }\n\n        /**\n         * Check if the jsdoc comment is present or not.\n         * @param {ASTNode} node node to examine\n         * @returns {void}\n         */\n        function checkJsDoc(node) {\n            const jsdocComment = source.getJSDocComment(node);\n\n            if (!jsdocComment) {\n                report(node);\n            }\n        }\n\n        return {\n            FunctionDeclaration(node) {\n                if (options.FunctionDeclaration) {\n                    checkJsDoc(node);\n                }\n            },\n            FunctionExpression(node) {\n                if (\n                    (options.MethodDefinition && node.parent.type === \"MethodDefinition\") ||\n                    (options.FunctionExpression && (node.parent.type === \"VariableDeclarator\" || (node.parent.type === \"Property\" && node === node.parent.value)))\n                ) {\n                    checkJsDoc(node);\n                }\n            },\n            ClassDeclaration(node) {\n                if (options.ClassDeclaration) {\n                    checkJsDoc(node);\n                }\n            },\n            ArrowFunctionExpression(node) {\n                if (options.ArrowFunctionExpression && node.parent.type === \"VariableDeclarator\") {\n                    checkJsDoc(node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}