{"ast":null,"code":"/**\n * @fileoverview A rule to disallow `this` keywords outside of classes or class-like objects.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `this` keywords outside of classes or class-like objects\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-invalid-this\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        capIsConstructor: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedThis: \"Unexpected 'this'.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const capIsConstructor = options.capIsConstructor !== false;\n    const stack = [],\n          sourceCode = context.getSourceCode();\n    /**\n     * Gets the current checking context.\n     *\n     * The return value has a flag that whether or not `this` keyword is valid.\n     * The flag is initialized when got at the first time.\n     * @returns {{valid: boolean}}\n     *   an object which has a flag that whether or not `this` keyword is valid.\n     */\n\n    stack.getCurrent = function () {\n      const current = this[this.length - 1];\n\n      if (!current.init) {\n        current.init = true;\n        current.valid = !astUtils.isDefaultThisBinding(current.node, sourceCode, {\n          capIsConstructor\n        });\n      }\n\n      return current;\n    };\n    /**\n     * Pushs new checking context into the stack.\n     *\n     * The checking context is not initialized yet.\n     * Because most functions don't have `this` keyword.\n     * When `this` keyword was found, the checking context is initialized.\n     * @param {ASTNode} node A function node that was entered.\n     * @returns {void}\n     */\n\n\n    function enterFunction(node) {\n      // `this` can be invalid only under strict mode.\n      stack.push({\n        init: !context.getScope().isStrict,\n        node,\n        valid: true\n      });\n    }\n    /**\n     * Pops the current checking context from the stack.\n     * @returns {void}\n     */\n\n\n    function exitFunction() {\n      stack.pop();\n    }\n\n    return {\n      /*\n       * `this` is invalid only under strict mode.\n       * Modules is always strict mode.\n       */\n      Program(node) {\n        const scope = context.getScope(),\n              features = context.parserOptions.ecmaFeatures || {};\n        stack.push({\n          init: true,\n          node,\n          valid: !(scope.isStrict || node.sourceType === \"module\" || features.globalReturn && scope.childScopes[0].isStrict)\n        });\n      },\n\n      \"Program:exit\"() {\n        stack.pop();\n      },\n\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n\n      // Reports if `this` of the current context is invalid.\n      ThisExpression(node) {\n        const current = stack.getCurrent();\n\n        if (current && !current.valid) {\n          context.report({\n            node,\n            messageId: \"unexpectedThis\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","capIsConstructor","default","additionalProperties","messages","unexpectedThis","create","context","options","stack","sourceCode","getSourceCode","getCurrent","current","length","init","valid","isDefaultThisBinding","node","enterFunction","push","getScope","isStrict","exitFunction","pop","Program","scope","features","parserOptions","ecmaFeatures","sourceType","globalReturn","childScopes","FunctionDeclaration","FunctionExpression","ThisExpression","report","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-invalid-this.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow `this` keywords outside of classes or class-like objects.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `this` keywords outside of classes or class-like objects\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-invalid-this\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    capIsConstructor: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedThis: \"Unexpected 'this'.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const capIsConstructor = options.capIsConstructor !== false;\n        const stack = [],\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Gets the current checking context.\n         *\n         * The return value has a flag that whether or not `this` keyword is valid.\n         * The flag is initialized when got at the first time.\n         * @returns {{valid: boolean}}\n         *   an object which has a flag that whether or not `this` keyword is valid.\n         */\n        stack.getCurrent = function() {\n            const current = this[this.length - 1];\n\n            if (!current.init) {\n                current.init = true;\n                current.valid = !astUtils.isDefaultThisBinding(\n                    current.node,\n                    sourceCode,\n                    { capIsConstructor }\n                );\n            }\n            return current;\n        };\n\n        /**\n         * Pushs new checking context into the stack.\n         *\n         * The checking context is not initialized yet.\n         * Because most functions don't have `this` keyword.\n         * When `this` keyword was found, the checking context is initialized.\n         * @param {ASTNode} node A function node that was entered.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n\n            // `this` can be invalid only under strict mode.\n            stack.push({\n                init: !context.getScope().isStrict,\n                node,\n                valid: true\n            });\n        }\n\n        /**\n         * Pops the current checking context from the stack.\n         * @returns {void}\n         */\n        function exitFunction() {\n            stack.pop();\n        }\n\n        return {\n\n            /*\n             * `this` is invalid only under strict mode.\n             * Modules is always strict mode.\n             */\n            Program(node) {\n                const scope = context.getScope(),\n                    features = context.parserOptions.ecmaFeatures || {};\n\n                stack.push({\n                    init: true,\n                    node,\n                    valid: !(\n                        scope.isStrict ||\n                        node.sourceType === \"module\" ||\n                        (features.globalReturn && scope.childScopes[0].isStrict)\n                    )\n                });\n            },\n\n            \"Program:exit\"() {\n                stack.pop();\n            },\n\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n\n            // Reports if `this` of the current context is invalid.\n            ThisExpression(node) {\n                const current = stack.getCurrent();\n\n                if (current && !current.valid) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedThis\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}