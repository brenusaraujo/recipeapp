{"ast":null,"code":"/**\n * @fileoverview Rule to flag the use of redundant constructors in classes.\n * @author Alberto Rodríguez\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether a given array of statements is a single call of `super`.\n * @param {ASTNode[]} body An array of statements to check.\n * @returns {boolean} `true` if the body is a single call of `super`.\n */\n\nfunction isSingleSuperCall(body) {\n  return body.length === 1 && body[0].type === \"ExpressionStatement\" && body[0].expression.type === \"CallExpression\" && body[0].expression.callee.type === \"Super\";\n}\n/**\n * Checks whether a given node is a pattern which doesn't have any side effects.\n * Default parameters and Destructuring parameters can have side effects.\n * @param {ASTNode} node A pattern node.\n * @returns {boolean} `true` if the node doesn't have any side effects.\n */\n\n\nfunction isSimple(node) {\n  return node.type === \"Identifier\" || node.type === \"RestElement\";\n}\n/**\n * Checks whether a given array of expressions is `...arguments` or not.\n * `super(...arguments)` passes all arguments through.\n * @param {ASTNode[]} superArgs An array of expressions to check.\n * @returns {boolean} `true` if the superArgs is `...arguments`.\n */\n\n\nfunction isSpreadArguments(superArgs) {\n  return superArgs.length === 1 && superArgs[0].type === \"SpreadElement\" && superArgs[0].argument.type === \"Identifier\" && superArgs[0].argument.name === \"arguments\";\n}\n/**\n * Checks whether given 2 nodes are identifiers which have the same name or not.\n * @param {ASTNode} ctorParam A node to check.\n * @param {ASTNode} superArg A node to check.\n * @returns {boolean} `true` if the nodes are identifiers which have the same\n *      name.\n */\n\n\nfunction isValidIdentifierPair(ctorParam, superArg) {\n  return ctorParam.type === \"Identifier\" && superArg.type === \"Identifier\" && ctorParam.name === superArg.name;\n}\n/**\n * Checks whether given 2 nodes are a rest/spread pair which has the same values.\n * @param {ASTNode} ctorParam A node to check.\n * @param {ASTNode} superArg A node to check.\n * @returns {boolean} `true` if the nodes are a rest/spread pair which has the\n *      same values.\n */\n\n\nfunction isValidRestSpreadPair(ctorParam, superArg) {\n  return ctorParam.type === \"RestElement\" && superArg.type === \"SpreadElement\" && isValidIdentifierPair(ctorParam.argument, superArg.argument);\n}\n/**\n * Checks whether given 2 nodes have the same value or not.\n * @param {ASTNode} ctorParam A node to check.\n * @param {ASTNode} superArg A node to check.\n * @returns {boolean} `true` if the nodes have the same value or not.\n */\n\n\nfunction isValidPair(ctorParam, superArg) {\n  return isValidIdentifierPair(ctorParam, superArg) || isValidRestSpreadPair(ctorParam, superArg);\n}\n/**\n * Checks whether the parameters of a constructor and the arguments of `super()`\n * have the same values or not.\n * @param {ASTNode} ctorParams The parameters of a constructor to check.\n * @param {ASTNode} superArgs The arguments of `super()` to check.\n * @returns {boolean} `true` if those have the same values.\n */\n\n\nfunction isPassingThrough(ctorParams, superArgs) {\n  if (ctorParams.length !== superArgs.length) {\n    return false;\n  }\n\n  for (let i = 0; i < ctorParams.length; ++i) {\n    if (!isValidPair(ctorParams[i], superArgs[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Checks whether the constructor body is a redundant super call.\n * @param {Array} body constructor body content.\n * @param {Array} ctorParams The params to check against super call.\n * @returns {boolean} true if the constructor body is redundant\n */\n\n\nfunction isRedundantSuperCall(body, ctorParams) {\n  return isSingleSuperCall(body) && ctorParams.every(isSimple) && (isSpreadArguments(body[0].expression.arguments) || isPassingThrough(ctorParams, body[0].expression.arguments));\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary constructors\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-useless-constructor\"\n    },\n    schema: [],\n    messages: {\n      noUselessConstructor: \"Useless constructor.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Checks whether a node is a redundant constructor\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n    function checkForConstructor(node) {\n      if (node.kind !== \"constructor\") {\n        return;\n      }\n      /*\n       * Prevent crashing on parsers which do not require class constructor\n       * to have a body, e.g. typescript and flow\n       */\n\n\n      if (!node.value.body) {\n        return;\n      }\n\n      const body = node.value.body.body;\n      const ctorParams = node.value.params;\n      const superClass = node.parent.parent.superClass;\n\n      if (superClass ? isRedundantSuperCall(body, ctorParams) : body.length === 0) {\n        context.report({\n          node,\n          messageId: \"noUselessConstructor\"\n        });\n      }\n    }\n\n    return {\n      MethodDefinition: checkForConstructor\n    };\n  }\n\n};","map":{"version":3,"names":["isSingleSuperCall","body","length","type","expression","callee","isSimple","node","isSpreadArguments","superArgs","argument","name","isValidIdentifierPair","ctorParam","superArg","isValidRestSpreadPair","isValidPair","isPassingThrough","ctorParams","i","isRedundantSuperCall","every","arguments","module","exports","meta","docs","description","category","recommended","url","schema","messages","noUselessConstructor","create","context","checkForConstructor","kind","value","params","superClass","parent","report","messageId","MethodDefinition"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-useless-constructor.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag the use of redundant constructors in classes.\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether a given array of statements is a single call of `super`.\n * @param {ASTNode[]} body An array of statements to check.\n * @returns {boolean} `true` if the body is a single call of `super`.\n */\nfunction isSingleSuperCall(body) {\n    return (\n        body.length === 1 &&\n        body[0].type === \"ExpressionStatement\" &&\n        body[0].expression.type === \"CallExpression\" &&\n        body[0].expression.callee.type === \"Super\"\n    );\n}\n\n/**\n * Checks whether a given node is a pattern which doesn't have any side effects.\n * Default parameters and Destructuring parameters can have side effects.\n * @param {ASTNode} node A pattern node.\n * @returns {boolean} `true` if the node doesn't have any side effects.\n */\nfunction isSimple(node) {\n    return node.type === \"Identifier\" || node.type === \"RestElement\";\n}\n\n/**\n * Checks whether a given array of expressions is `...arguments` or not.\n * `super(...arguments)` passes all arguments through.\n * @param {ASTNode[]} superArgs An array of expressions to check.\n * @returns {boolean} `true` if the superArgs is `...arguments`.\n */\nfunction isSpreadArguments(superArgs) {\n    return (\n        superArgs.length === 1 &&\n        superArgs[0].type === \"SpreadElement\" &&\n        superArgs[0].argument.type === \"Identifier\" &&\n        superArgs[0].argument.name === \"arguments\"\n    );\n}\n\n/**\n * Checks whether given 2 nodes are identifiers which have the same name or not.\n * @param {ASTNode} ctorParam A node to check.\n * @param {ASTNode} superArg A node to check.\n * @returns {boolean} `true` if the nodes are identifiers which have the same\n *      name.\n */\nfunction isValidIdentifierPair(ctorParam, superArg) {\n    return (\n        ctorParam.type === \"Identifier\" &&\n        superArg.type === \"Identifier\" &&\n        ctorParam.name === superArg.name\n    );\n}\n\n/**\n * Checks whether given 2 nodes are a rest/spread pair which has the same values.\n * @param {ASTNode} ctorParam A node to check.\n * @param {ASTNode} superArg A node to check.\n * @returns {boolean} `true` if the nodes are a rest/spread pair which has the\n *      same values.\n */\nfunction isValidRestSpreadPair(ctorParam, superArg) {\n    return (\n        ctorParam.type === \"RestElement\" &&\n        superArg.type === \"SpreadElement\" &&\n        isValidIdentifierPair(ctorParam.argument, superArg.argument)\n    );\n}\n\n/**\n * Checks whether given 2 nodes have the same value or not.\n * @param {ASTNode} ctorParam A node to check.\n * @param {ASTNode} superArg A node to check.\n * @returns {boolean} `true` if the nodes have the same value or not.\n */\nfunction isValidPair(ctorParam, superArg) {\n    return (\n        isValidIdentifierPair(ctorParam, superArg) ||\n        isValidRestSpreadPair(ctorParam, superArg)\n    );\n}\n\n/**\n * Checks whether the parameters of a constructor and the arguments of `super()`\n * have the same values or not.\n * @param {ASTNode} ctorParams The parameters of a constructor to check.\n * @param {ASTNode} superArgs The arguments of `super()` to check.\n * @returns {boolean} `true` if those have the same values.\n */\nfunction isPassingThrough(ctorParams, superArgs) {\n    if (ctorParams.length !== superArgs.length) {\n        return false;\n    }\n\n    for (let i = 0; i < ctorParams.length; ++i) {\n        if (!isValidPair(ctorParams[i], superArgs[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Checks whether the constructor body is a redundant super call.\n * @param {Array} body constructor body content.\n * @param {Array} ctorParams The params to check against super call.\n * @returns {boolean} true if the constructor body is redundant\n */\nfunction isRedundantSuperCall(body, ctorParams) {\n    return (\n        isSingleSuperCall(body) &&\n        ctorParams.every(isSimple) &&\n        (\n            isSpreadArguments(body[0].expression.arguments) ||\n            isPassingThrough(ctorParams, body[0].expression.arguments)\n        )\n    );\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary constructors\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-useless-constructor\"\n        },\n\n        schema: [],\n\n        messages: {\n            noUselessConstructor: \"Useless constructor.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Checks whether a node is a redundant constructor\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function checkForConstructor(node) {\n            if (node.kind !== \"constructor\") {\n                return;\n            }\n\n            /*\n             * Prevent crashing on parsers which do not require class constructor\n             * to have a body, e.g. typescript and flow\n             */\n            if (!node.value.body) {\n                return;\n            }\n\n            const body = node.value.body.body;\n            const ctorParams = node.value.params;\n            const superClass = node.parent.parent.superClass;\n\n            if (superClass ? isRedundantSuperCall(body, ctorParams) : (body.length === 0)) {\n                context.report({\n                    node,\n                    messageId: \"noUselessConstructor\"\n                });\n            }\n        }\n\n        return {\n            MethodDefinition: checkForConstructor\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}