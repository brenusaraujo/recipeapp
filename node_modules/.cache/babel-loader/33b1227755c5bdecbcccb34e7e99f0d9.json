{"ast":null,"code":"/**\n * @fileoverview Disallows or enforces spaces inside computed properties.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing inside computed property brackets\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/computed-property-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }, {\n      type: \"object\",\n      properties: {\n        enforceForClassMembers: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n      unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n      missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\",\n      missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\n\n    const enforceForClassMembers = !context.options[1] || context.options[1].enforceForClassMembers; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @param {Token} tokenAfter The token after `token`.\n     * @returns {void}\n     */\n\n    function reportNoBeginningSpace(node, token, tokenAfter) {\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: tokenAfter.loc.start\n        },\n        messageId: \"unexpectedSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @param {Token} tokenBefore The token before `token`.\n     * @returns {void}\n     */\n\n\n    function reportNoEndingSpace(node, token, tokenBefore) {\n      context.report({\n        node,\n        loc: {\n          start: tokenBefore.loc.end,\n          end: token.loc.start\n        },\n        messageId: \"unexpectedSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceAfter\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextAfter(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"missingSpaceBefore\",\n        data: {\n          tokenValue: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextBefore(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Returns a function that checks the spacing of a node on the property name\n     * that was passed in.\n     * @param {string} propertyName The property on the node to check for spacing\n     * @returns {Function} A function that will check spacing on a node\n     */\n\n\n    function checkSpacing(propertyName) {\n      return function (node) {\n        if (!node.computed) {\n          return;\n        }\n\n        const property = node[propertyName];\n        const before = sourceCode.getTokenBefore(property, astUtils.isOpeningBracketToken),\n              first = sourceCode.getTokenAfter(before, {\n          includeComments: true\n        }),\n              after = sourceCode.getTokenAfter(property, astUtils.isClosingBracketToken),\n              last = sourceCode.getTokenBefore(after, {\n          includeComments: true\n        });\n\n        if (astUtils.isTokenOnSameLine(before, first)) {\n          if (propertyNameMustBeSpaced) {\n            if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {\n              reportRequiredBeginningSpace(node, before);\n            }\n          } else {\n            if (sourceCode.isSpaceBetweenTokens(before, first)) {\n              reportNoBeginningSpace(node, before, first);\n            }\n          }\n        }\n\n        if (astUtils.isTokenOnSameLine(last, after)) {\n          if (propertyNameMustBeSpaced) {\n            if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {\n              reportRequiredEndingSpace(node, after);\n            }\n          } else {\n            if (sourceCode.isSpaceBetweenTokens(last, after)) {\n              reportNoEndingSpace(node, after, last);\n            }\n          }\n        }\n      };\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    const listeners = {\n      Property: checkSpacing(\"key\"),\n      MemberExpression: checkSpacing(\"property\")\n    };\n\n    if (enforceForClassMembers) {\n      listeners.MethodDefinition = checkSpacing(\"key\");\n    }\n\n    return listeners;\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","properties","enforceForClassMembers","default","additionalProperties","messages","unexpectedSpaceBefore","unexpectedSpaceAfter","missingSpaceBefore","missingSpaceAfter","create","context","sourceCode","getSourceCode","propertyNameMustBeSpaced","options","reportNoBeginningSpace","node","token","tokenAfter","report","loc","start","end","messageId","data","tokenValue","value","fix","fixer","removeRange","range","reportNoEndingSpace","tokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","checkSpacing","propertyName","computed","property","before","getTokenBefore","isOpeningBracketToken","first","getTokenAfter","includeComments","after","isClosingBracketToken","last","isTokenOnSameLine","isSpaceBetweenTokens","listeners","Property","MemberExpression","MethodDefinition"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/computed-property-spacing.js"],"sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside computed properties.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing inside computed property brackets\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/computed-property-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    enforceForClassMembers: {\n                        type: \"boolean\",\n                        default: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedSpaceBefore: \"There should be no space before '{{tokenValue}}'.\",\n            unexpectedSpaceAfter: \"There should be no space after '{{tokenValue}}'.\",\n\n            missingSpaceBefore: \"A space is required before '{{tokenValue}}'.\",\n            missingSpaceAfter: \"A space is required after '{{tokenValue}}'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const propertyNameMustBeSpaced = context.options[0] === \"always\"; // default is \"never\"\n        const enforceForClassMembers = !context.options[1] || context.options[1].enforceForClassMembers;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports that there shouldn't be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @param {Token} tokenAfter The token after `token`.\n         * @returns {void}\n         */\n        function reportNoBeginningSpace(node, token, tokenAfter) {\n            context.report({\n                node,\n                loc: { start: token.loc.end, end: tokenAfter.loc.start },\n                messageId: \"unexpectedSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([token.range[1], tokenAfter.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there shouldn't be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @param {Token} tokenBefore The token before `token`.\n         * @returns {void}\n         */\n        function reportNoEndingSpace(node, token, tokenBefore) {\n            context.report({\n                node,\n                loc: { start: tokenBefore.loc.end, end: token.loc.start },\n                messageId: \"unexpectedSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([tokenBefore.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"missingSpaceAfter\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"missingSpaceBefore\",\n                data: {\n                    tokenValue: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Returns a function that checks the spacing of a node on the property name\n         * that was passed in.\n         * @param {string} propertyName The property on the node to check for spacing\n         * @returns {Function} A function that will check spacing on a node\n         */\n        function checkSpacing(propertyName) {\n            return function(node) {\n                if (!node.computed) {\n                    return;\n                }\n\n                const property = node[propertyName];\n\n                const before = sourceCode.getTokenBefore(property, astUtils.isOpeningBracketToken),\n                    first = sourceCode.getTokenAfter(before, { includeComments: true }),\n                    after = sourceCode.getTokenAfter(property, astUtils.isClosingBracketToken),\n                    last = sourceCode.getTokenBefore(after, { includeComments: true });\n\n                if (astUtils.isTokenOnSameLine(before, first)) {\n                    if (propertyNameMustBeSpaced) {\n                        if (!sourceCode.isSpaceBetweenTokens(before, first) && astUtils.isTokenOnSameLine(before, first)) {\n                            reportRequiredBeginningSpace(node, before);\n                        }\n                    } else {\n                        if (sourceCode.isSpaceBetweenTokens(before, first)) {\n                            reportNoBeginningSpace(node, before, first);\n                        }\n                    }\n                }\n\n                if (astUtils.isTokenOnSameLine(last, after)) {\n                    if (propertyNameMustBeSpaced) {\n                        if (!sourceCode.isSpaceBetweenTokens(last, after) && astUtils.isTokenOnSameLine(last, after)) {\n                            reportRequiredEndingSpace(node, after);\n                        }\n                    } else {\n                        if (sourceCode.isSpaceBetweenTokens(last, after)) {\n                            reportNoEndingSpace(node, after, last);\n                        }\n                    }\n                }\n            };\n        }\n\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        const listeners = {\n            Property: checkSpacing(\"key\"),\n            MemberExpression: checkSpacing(\"property\")\n        };\n\n        if (enforceForClassMembers) {\n            listeners.MethodDefinition = checkSpacing(\"key\");\n        }\n\n        return listeners;\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}