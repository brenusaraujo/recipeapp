{"ast":null,"code":"/**\n * @fileoverview Rule to flag when return statement contains assignment\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow assignment operators in `return` statements\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-return-assign\"\n    },\n    schema: [{\n      enum: [\"except-parens\", \"always\"]\n    }],\n    messages: {\n      returnAssignment: \"Return statement should not contain assignment.\",\n      arrowAssignment: \"Arrow function should not return assignment.\"\n    }\n  },\n\n  create(context) {\n    const always = (context.options[0] || \"except-parens\") !== \"except-parens\";\n    const sourceCode = context.getSourceCode();\n    return {\n      AssignmentExpression(node) {\n        if (!always && astUtils.isParenthesised(sourceCode, node)) {\n          return;\n        }\n\n        let currentChild = node;\n        let parent = currentChild.parent; // Find ReturnStatement or ArrowFunctionExpression in ancestors.\n\n        while (parent && !SENTINEL_TYPE.test(parent.type)) {\n          currentChild = parent;\n          parent = parent.parent;\n        } // Reports.\n\n\n        if (parent && parent.type === \"ReturnStatement\") {\n          context.report({\n            node: parent,\n            messageId: \"returnAssignment\"\n          });\n        } else if (parent && parent.type === \"ArrowFunctionExpression\" && parent.body === currentChild) {\n          context.report({\n            node: parent,\n            messageId: \"arrowAssignment\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","SENTINEL_TYPE","module","exports","meta","type","docs","description","category","recommended","url","schema","enum","messages","returnAssignment","arrowAssignment","create","context","always","options","sourceCode","getSourceCode","AssignmentExpression","node","isParenthesised","currentChild","parent","test","report","messageId","body"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-return-assign.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when return statement contains assignment\n * @author Ilya Volodin\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SENTINEL_TYPE = /^(?:[a-zA-Z]+?Statement|ArrowFunctionExpression|FunctionExpression|ClassExpression)$/u;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow assignment operators in `return` statements\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-return-assign\"\n        },\n\n        schema: [\n            {\n                enum: [\"except-parens\", \"always\"]\n            }\n        ],\n\n        messages: {\n            returnAssignment: \"Return statement should not contain assignment.\",\n            arrowAssignment: \"Arrow function should not return assignment.\"\n        }\n    },\n\n    create(context) {\n        const always = (context.options[0] || \"except-parens\") !== \"except-parens\";\n        const sourceCode = context.getSourceCode();\n\n        return {\n            AssignmentExpression(node) {\n                if (!always && astUtils.isParenthesised(sourceCode, node)) {\n                    return;\n                }\n\n                let currentChild = node;\n                let parent = currentChild.parent;\n\n                // Find ReturnStatement or ArrowFunctionExpression in ancestors.\n                while (parent && !SENTINEL_TYPE.test(parent.type)) {\n                    currentChild = parent;\n                    parent = parent.parent;\n                }\n\n                // Reports.\n                if (parent && parent.type === \"ReturnStatement\") {\n                    context.report({\n                        node: parent,\n                        messageId: \"returnAssignment\"\n                    });\n                } else if (parent && parent.type === \"ArrowFunctionExpression\" && parent.body === currentChild) {\n                    context.report({\n                        node: parent,\n                        messageId: \"arrowAssignment\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,aAAa,GAAG,uFAAtB,C,CAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,sDADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,eAAD,EAAkB,QAAlB;IADV,CADI,CAVN;IAgBFC,QAAQ,EAAE;MACNC,gBAAgB,EAAE,iDADZ;MAENC,eAAe,EAAE;IAFX;EAhBR,CADO;;EAuBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,MAAM,GAAG,CAACD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,eAAvB,MAA4C,eAA3D;IACA,MAAMC,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;IAEA,OAAO;MACHC,oBAAoB,CAACC,IAAD,EAAO;QACvB,IAAI,CAACL,MAAD,IAAWnB,QAAQ,CAACyB,eAAT,CAAyBJ,UAAzB,EAAqCG,IAArC,CAAf,EAA2D;UACvD;QACH;;QAED,IAAIE,YAAY,GAAGF,IAAnB;QACA,IAAIG,MAAM,GAAGD,YAAY,CAACC,MAA1B,CANuB,CAQvB;;QACA,OAAOA,MAAM,IAAI,CAACzB,aAAa,CAAC0B,IAAd,CAAmBD,MAAM,CAACrB,IAA1B,CAAlB,EAAmD;UAC/CoB,YAAY,GAAGC,MAAf;UACAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;QACH,CAZsB,CAcvB;;;QACA,IAAIA,MAAM,IAAIA,MAAM,CAACrB,IAAP,KAAgB,iBAA9B,EAAiD;UAC7CY,OAAO,CAACW,MAAR,CAAe;YACXL,IAAI,EAAEG,MADK;YAEXG,SAAS,EAAE;UAFA,CAAf;QAIH,CALD,MAKO,IAAIH,MAAM,IAAIA,MAAM,CAACrB,IAAP,KAAgB,yBAA1B,IAAuDqB,MAAM,CAACI,IAAP,KAAgBL,YAA3E,EAAyF;UAC5FR,OAAO,CAACW,MAAR,CAAe;YACXL,IAAI,EAAEG,MADK;YAEXG,SAAS,EAAE;UAFA,CAAf;QAIH;MACJ;;IA3BE,CAAP;EA6BH;;AAxDY,CAAjB"},"metadata":{},"sourceType":"script"}