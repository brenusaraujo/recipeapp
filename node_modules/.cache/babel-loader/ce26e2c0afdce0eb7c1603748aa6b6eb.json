{"ast":null,"code":"/**\n * @fileoverview Rule to flag unnecessary bind calls\n * @author Bence Dányi <bence@danyi.me>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst SIDE_EFFECT_FREE_NODE_TYPES = new Set([\"Literal\", \"Identifier\", \"ThisExpression\", \"FunctionExpression\"]); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary calls to `.bind()`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-extra-bind\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      unexpected: \"The function binding is unnecessary.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n    /**\n     * Checks if a node is free of side effects.\n     *\n     * This check is stricter than it needs to be, in order to keep the implementation simple.\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} True if the node is known to be side-effect free, false otherwise.\n     */\n\n    function isSideEffectFree(node) {\n      return SIDE_EFFECT_FREE_NODE_TYPES.has(node.type);\n    }\n    /**\n     * Reports a given function node.\n     * @param {ASTNode} node A node to report. This is a FunctionExpression or\n     *      an ArrowFunctionExpression.\n     * @returns {void}\n     */\n\n\n    function report(node) {\n      const memberNode = node.parent;\n      const callNode = memberNode.parent.type === \"ChainExpression\" ? memberNode.parent.parent : memberNode.parent;\n      context.report({\n        node: callNode,\n        messageId: \"unexpected\",\n        loc: memberNode.property.loc,\n\n        fix(fixer) {\n          if (!isSideEffectFree(callNode.arguments[0])) {\n            return null;\n          }\n          /*\n           * The list of the first/last token pair of a removal range.\n           * This is two parts because closing parentheses may exist between the method name and arguments.\n           * E.g. `(function(){}.bind ) (obj)`\n           *                    ^^^^^   ^^^^^ < removal ranges\n           * E.g. `(function(){}?.['bind'] ) ?.(obj)`\n           *                    ^^^^^^^^^^   ^^^^^^^ < removal ranges\n           */\n\n\n          const tokenPairs = [[// `.`, `?.`, or `[` token.\n          sourceCode.getTokenAfter(memberNode.object, astUtils.isNotClosingParenToken), // property name or `]` token.\n          sourceCode.getLastToken(memberNode)], [// `?.` or `(` token of arguments.\n          sourceCode.getTokenAfter(memberNode, astUtils.isNotClosingParenToken), // `)` token of arguments.\n          sourceCode.getLastToken(callNode)]];\n          const firstTokenToRemove = tokenPairs[0][0];\n          const lastTokenToRemove = tokenPairs[1][1];\n\n          if (sourceCode.commentsExistBetween(firstTokenToRemove, lastTokenToRemove)) {\n            return null;\n          }\n\n          return tokenPairs.map(_ref => {\n            let [start, end] = _ref;\n            return fixer.removeRange([start.range[0], end.range[1]]);\n          });\n        }\n\n      });\n    }\n    /**\n     * Checks whether or not a given function node is the callee of `.bind()`\n     * method.\n     *\n     * e.g. `(function() {}.bind(foo))`\n     * @param {ASTNode} node A node to report. This is a FunctionExpression or\n     *      an ArrowFunctionExpression.\n     * @returns {boolean} `true` if the node is the callee of `.bind()` method.\n     */\n\n\n    function isCalleeOfBindMethod(node) {\n      if (!astUtils.isSpecificMemberAccess(node.parent, null, \"bind\")) {\n        return false;\n      } // The node of `*.bind` member access.\n\n\n      const bindNode = node.parent.parent.type === \"ChainExpression\" ? node.parent.parent : node.parent;\n      return bindNode.parent.type === \"CallExpression\" && bindNode.parent.callee === bindNode && bindNode.parent.arguments.length === 1 && bindNode.parent.arguments[0].type !== \"SpreadElement\";\n    }\n    /**\n     * Adds a scope information object to the stack.\n     * @param {ASTNode} node A node to add. This node is a FunctionExpression\n     *      or a FunctionDeclaration node.\n     * @returns {void}\n     */\n\n\n    function enterFunction(node) {\n      scopeInfo = {\n        isBound: isCalleeOfBindMethod(node),\n        thisFound: false,\n        upper: scopeInfo\n      };\n    }\n    /**\n     * Removes the scope information object from the top of the stack.\n     * At the same time, this reports the function node if the function has\n     * `.bind()` and the `this` keywords found.\n     * @param {ASTNode} node A node to remove. This node is a\n     *      FunctionExpression or a FunctionDeclaration node.\n     * @returns {void}\n     */\n\n\n    function exitFunction(node) {\n      if (scopeInfo.isBound && !scopeInfo.thisFound) {\n        report(node);\n      }\n\n      scopeInfo = scopeInfo.upper;\n    }\n    /**\n     * Reports a given arrow function if the function is callee of `.bind()`\n     * method.\n     * @param {ASTNode} node A node to report. This node is an\n     *      ArrowFunctionExpression.\n     * @returns {void}\n     */\n\n\n    function exitArrowFunction(node) {\n      if (isCalleeOfBindMethod(node)) {\n        report(node);\n      }\n    }\n    /**\n     * Set the mark as the `this` keyword was found in this scope.\n     * @returns {void}\n     */\n\n\n    function markAsThisFound() {\n      if (scopeInfo) {\n        scopeInfo.thisFound = true;\n      }\n    }\n\n    return {\n      \"ArrowFunctionExpression:exit\": exitArrowFunction,\n      FunctionDeclaration: enterFunction,\n      \"FunctionDeclaration:exit\": exitFunction,\n      FunctionExpression: enterFunction,\n      \"FunctionExpression:exit\": exitFunction,\n      ThisExpression: markAsThisFound\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","SIDE_EFFECT_FREE_NODE_TYPES","Set","module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","unexpected","create","context","sourceCode","getSourceCode","scopeInfo","isSideEffectFree","node","has","report","memberNode","parent","callNode","messageId","loc","property","fix","fixer","arguments","tokenPairs","getTokenAfter","object","isNotClosingParenToken","getLastToken","firstTokenToRemove","lastTokenToRemove","commentsExistBetween","map","start","end","removeRange","range","isCalleeOfBindMethod","isSpecificMemberAccess","bindNode","callee","length","enterFunction","isBound","thisFound","upper","exitFunction","exitArrowFunction","markAsThisFound","FunctionDeclaration","FunctionExpression","ThisExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-extra-bind.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag unnecessary bind calls\n * @author Bence Dányi <bence@danyi.me>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst SIDE_EFFECT_FREE_NODE_TYPES = new Set([\"Literal\", \"Identifier\", \"ThisExpression\", \"FunctionExpression\"]);\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary calls to `.bind()`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-extra-bind\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            unexpected: \"The function binding is unnecessary.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let scopeInfo = null;\n\n        /**\n         * Checks if a node is free of side effects.\n         *\n         * This check is stricter than it needs to be, in order to keep the implementation simple.\n         * @param {ASTNode} node A node to check.\n         * @returns {boolean} True if the node is known to be side-effect free, false otherwise.\n         */\n        function isSideEffectFree(node) {\n            return SIDE_EFFECT_FREE_NODE_TYPES.has(node.type);\n        }\n\n        /**\n         * Reports a given function node.\n         * @param {ASTNode} node A node to report. This is a FunctionExpression or\n         *      an ArrowFunctionExpression.\n         * @returns {void}\n         */\n        function report(node) {\n            const memberNode = node.parent;\n            const callNode = memberNode.parent.type === \"ChainExpression\"\n                ? memberNode.parent.parent\n                : memberNode.parent;\n\n            context.report({\n                node: callNode,\n                messageId: \"unexpected\",\n                loc: memberNode.property.loc,\n\n                fix(fixer) {\n                    if (!isSideEffectFree(callNode.arguments[0])) {\n                        return null;\n                    }\n\n                    /*\n                     * The list of the first/last token pair of a removal range.\n                     * This is two parts because closing parentheses may exist between the method name and arguments.\n                     * E.g. `(function(){}.bind ) (obj)`\n                     *                    ^^^^^   ^^^^^ < removal ranges\n                     * E.g. `(function(){}?.['bind'] ) ?.(obj)`\n                     *                    ^^^^^^^^^^   ^^^^^^^ < removal ranges\n                     */\n                    const tokenPairs = [\n                        [\n\n                            // `.`, `?.`, or `[` token.\n                            sourceCode.getTokenAfter(\n                                memberNode.object,\n                                astUtils.isNotClosingParenToken\n                            ),\n\n                            // property name or `]` token.\n                            sourceCode.getLastToken(memberNode)\n                        ],\n                        [\n\n                            // `?.` or `(` token of arguments.\n                            sourceCode.getTokenAfter(\n                                memberNode,\n                                astUtils.isNotClosingParenToken\n                            ),\n\n                            // `)` token of arguments.\n                            sourceCode.getLastToken(callNode)\n                        ]\n                    ];\n                    const firstTokenToRemove = tokenPairs[0][0];\n                    const lastTokenToRemove = tokenPairs[1][1];\n\n                    if (sourceCode.commentsExistBetween(firstTokenToRemove, lastTokenToRemove)) {\n                        return null;\n                    }\n\n                    return tokenPairs.map(([start, end]) =>\n                        fixer.removeRange([start.range[0], end.range[1]]));\n                }\n            });\n        }\n\n        /**\n         * Checks whether or not a given function node is the callee of `.bind()`\n         * method.\n         *\n         * e.g. `(function() {}.bind(foo))`\n         * @param {ASTNode} node A node to report. This is a FunctionExpression or\n         *      an ArrowFunctionExpression.\n         * @returns {boolean} `true` if the node is the callee of `.bind()` method.\n         */\n        function isCalleeOfBindMethod(node) {\n            if (!astUtils.isSpecificMemberAccess(node.parent, null, \"bind\")) {\n                return false;\n            }\n\n            // The node of `*.bind` member access.\n            const bindNode = node.parent.parent.type === \"ChainExpression\"\n                ? node.parent.parent\n                : node.parent;\n\n            return (\n                bindNode.parent.type === \"CallExpression\" &&\n                bindNode.parent.callee === bindNode &&\n                bindNode.parent.arguments.length === 1 &&\n                bindNode.parent.arguments[0].type !== \"SpreadElement\"\n            );\n        }\n\n        /**\n         * Adds a scope information object to the stack.\n         * @param {ASTNode} node A node to add. This node is a FunctionExpression\n         *      or a FunctionDeclaration node.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n            scopeInfo = {\n                isBound: isCalleeOfBindMethod(node),\n                thisFound: false,\n                upper: scopeInfo\n            };\n        }\n\n        /**\n         * Removes the scope information object from the top of the stack.\n         * At the same time, this reports the function node if the function has\n         * `.bind()` and the `this` keywords found.\n         * @param {ASTNode} node A node to remove. This node is a\n         *      FunctionExpression or a FunctionDeclaration node.\n         * @returns {void}\n         */\n        function exitFunction(node) {\n            if (scopeInfo.isBound && !scopeInfo.thisFound) {\n                report(node);\n            }\n\n            scopeInfo = scopeInfo.upper;\n        }\n\n        /**\n         * Reports a given arrow function if the function is callee of `.bind()`\n         * method.\n         * @param {ASTNode} node A node to report. This node is an\n         *      ArrowFunctionExpression.\n         * @returns {void}\n         */\n        function exitArrowFunction(node) {\n            if (isCalleeOfBindMethod(node)) {\n                report(node);\n            }\n        }\n\n        /**\n         * Set the mark as the `this` keyword was found in this scope.\n         * @returns {void}\n         */\n        function markAsThisFound() {\n            if (scopeInfo) {\n                scopeInfo.thisFound = true;\n            }\n        }\n\n        return {\n            \"ArrowFunctionExpression:exit\": exitArrowFunction,\n            FunctionDeclaration: enterFunction,\n            \"FunctionDeclaration:exit\": exitFunction,\n            FunctionExpression: enterFunction,\n            \"FunctionExpression:exit\": exitFunction,\n            ThisExpression: markAsThisFound\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}