{"ast":null,"code":"/**\n * @fileoverview Mocha test wrapper\n * @author Ilya Volodin\n */\n\"use strict\";\n/* global describe, it */\n\n/*\n * This is a wrapper around mocha to allow for DRY unittests for eslint\n * Format:\n * RuleTester.run(\"{ruleName}\", {\n *      valid: [\n *          \"{code}\",\n *          { code: \"{code}\", options: {options}, globals: {globals}, parser: \"{parser}\", settings: {settings} }\n *      ],\n *      invalid: [\n *          { code: \"{code}\", errors: {numErrors} },\n *          { code: \"{code}\", errors: [\"{errorMessage}\"] },\n *          { code: \"{code}\", options: {options}, globals: {globals}, parser: \"{parser}\", settings: {settings}, errors: [{ message: \"{errorMessage}\", type: \"{errorNodeType}\"}] }\n *      ]\n *  });\n *\n * Variables:\n * {code} - String that represents the code to be tested\n * {options} - Arguments that are passed to the configurable rules.\n * {globals} - An object representing a list of variables that are\n *             registered as globals\n * {parser} - String representing the parser to use\n * {settings} - An object representing global settings for all rules\n * {numErrors} - If failing case doesn't need to check error message,\n *               this integer will specify how many errors should be\n *               received\n * {errorMessage} - Message that is returned by the rule on failure\n * {errorNodeType} - AST node type that is returned by they rule as\n *                   a cause of the failure.\n */\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst assert = require(\"assert\"),\n      path = require(\"path\"),\n      util = require(\"util\"),\n      merge = require(\"lodash.merge\"),\n      equal = require(\"fast-deep-equal\"),\n      Traverser = require(\"../../lib/shared/traverser\"),\n      {\n  getRuleOptionsSchema,\n  validate\n} = require(\"../shared/config-validator\"),\n      {\n  Linter,\n  SourceCodeFixer,\n  interpolate\n} = require(\"../linter\");\n\nconst ajv = require(\"../shared/ajv\")({\n  strictDefaults: true\n});\n\nconst espreePath = require.resolve(\"espree\");\n\nconst parserSymbol = Symbol.for(\"eslint.RuleTester.parser\"); //------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/** @typedef {import(\"../shared/types\").Parser} Parser */\n\n/**\n * A test case that is expected to pass lint.\n * @typedef {Object} ValidTestCase\n * @property {string} code Code for the test case.\n * @property {any[]} [options] Options for the test case.\n * @property {{ [name: string]: any }} [settings] Settings for the test case.\n * @property {string} [filename] The fake filename for the test case. Useful for rules that make assertion about filenames.\n * @property {string} [parser] The absolute path for the parser.\n * @property {{ [name: string]: any }} [parserOptions] Options for the parser.\n * @property {{ [name: string]: \"readonly\" | \"writable\" | \"off\" }} [globals] The additional global variables.\n * @property {{ [name: string]: boolean }} [env] Environments for the test case.\n * @property {boolean} [only] Run only this test case or the subset of test cases with this property.\n */\n\n/**\n * A test case that is expected to fail lint.\n * @typedef {Object} InvalidTestCase\n * @property {string} code Code for the test case.\n * @property {number | Array<TestCaseError | string | RegExp>} errors Expected errors.\n * @property {string | null} [output] The expected code after autofixes are applied. If set to `null`, the test runner will assert that no autofix is suggested.\n * @property {any[]} [options] Options for the test case.\n * @property {{ [name: string]: any }} [settings] Settings for the test case.\n * @property {string} [filename] The fake filename for the test case. Useful for rules that make assertion about filenames.\n * @property {string} [parser] The absolute path for the parser.\n * @property {{ [name: string]: any }} [parserOptions] Options for the parser.\n * @property {{ [name: string]: \"readonly\" | \"writable\" | \"off\" }} [globals] The additional global variables.\n * @property {{ [name: string]: boolean }} [env] Environments for the test case.\n * @property {boolean} [only] Run only this test case or the subset of test cases with this property.\n */\n\n/**\n * A description of a reported error used in a rule tester test.\n * @typedef {Object} TestCaseError\n * @property {string | RegExp} [message] Message.\n * @property {string} [messageId] Message ID.\n * @property {string} [type] The type of the reported AST node.\n * @property {{ [name: string]: string }} [data] The data used to fill the message template.\n * @property {number} [line] The 1-based line number of the reported start location.\n * @property {number} [column] The 1-based column number of the reported start location.\n * @property {number} [endLine] The 1-based line number of the reported end location.\n * @property {number} [endColumn] The 1-based column number of the reported end location.\n */\n//------------------------------------------------------------------------------\n// Private Members\n//------------------------------------------------------------------------------\n\n/*\n * testerDefaultConfig must not be modified as it allows to reset the tester to\n * the initial default configuration\n */\n\nconst testerDefaultConfig = {\n  rules: {}\n};\nlet defaultConfig = {\n  rules: {}\n};\n/*\n * List every parameters possible on a test case that are not related to eslint\n * configuration\n */\n\nconst RuleTesterParameters = [\"code\", \"filename\", \"options\", \"errors\", \"output\", \"only\"];\n/*\n * All allowed property names in error objects.\n */\n\nconst errorObjectParameters = new Set([\"message\", \"messageId\", \"data\", \"type\", \"line\", \"column\", \"endLine\", \"endColumn\", \"suggestions\"]);\nconst friendlyErrorObjectParameterList = `[${[...errorObjectParameters].map(key => `'${key}'`).join(\", \")}]`;\n/*\n * All allowed property names in suggestion objects.\n */\n\nconst suggestionObjectParameters = new Set([\"desc\", \"messageId\", \"data\", \"output\"]);\nconst friendlySuggestionObjectParameterList = `[${[...suggestionObjectParameters].map(key => `'${key}'`).join(\", \")}]`;\nconst hasOwnProperty = Function.call.bind(Object.hasOwnProperty);\n/**\n * Clones a given value deeply.\n * Note: This ignores `parent` property.\n * @param {any} x A value to clone.\n * @returns {any} A cloned value.\n */\n\nfunction cloneDeeplyExcludesParent(x) {\n  if (typeof x === \"object\" && x !== null) {\n    if (Array.isArray(x)) {\n      return x.map(cloneDeeplyExcludesParent);\n    }\n\n    const retv = {};\n\n    for (const key in x) {\n      if (key !== \"parent\" && hasOwnProperty(x, key)) {\n        retv[key] = cloneDeeplyExcludesParent(x[key]);\n      }\n    }\n\n    return retv;\n  }\n\n  return x;\n}\n/**\n * Freezes a given value deeply.\n * @param {any} x A value to freeze.\n * @returns {void}\n */\n\n\nfunction freezeDeeply(x) {\n  if (typeof x === \"object\" && x !== null) {\n    if (Array.isArray(x)) {\n      x.forEach(freezeDeeply);\n    } else {\n      for (const key in x) {\n        if (key !== \"parent\" && hasOwnProperty(x, key)) {\n          freezeDeeply(x[key]);\n        }\n      }\n    }\n\n    Object.freeze(x);\n  }\n}\n/**\n * Replace control characters by `\\u00xx` form.\n * @param {string} text The text to sanitize.\n * @returns {string} The sanitized text.\n */\n\n\nfunction sanitize(text) {\n  return text.replace(/[\\u0000-\\u0009\\u000b-\\u001a]/gu, // eslint-disable-line no-control-regex\n  c => `\\\\u${c.codePointAt(0).toString(16).padStart(4, \"0\")}`);\n}\n/**\n * Define `start`/`end` properties as throwing error.\n * @param {string} objName Object name used for error messages.\n * @param {ASTNode} node The node to define.\n * @returns {void}\n */\n\n\nfunction defineStartEndAsError(objName, node) {\n  Object.defineProperties(node, {\n    start: {\n      get() {\n        throw new Error(`Use ${objName}.range[0] instead of ${objName}.start`);\n      },\n\n      configurable: true,\n      enumerable: false\n    },\n    end: {\n      get() {\n        throw new Error(`Use ${objName}.range[1] instead of ${objName}.end`);\n      },\n\n      configurable: true,\n      enumerable: false\n    }\n  });\n}\n/**\n * Define `start`/`end` properties of all nodes of the given AST as throwing error.\n * @param {ASTNode} ast The root node to errorize `start`/`end` properties.\n * @param {Object} [visitorKeys] Visitor keys to be used for traversing the given ast.\n * @returns {void}\n */\n\n\nfunction defineStartEndAsErrorInTree(ast, visitorKeys) {\n  Traverser.traverse(ast, {\n    visitorKeys,\n    enter: defineStartEndAsError.bind(null, \"node\")\n  });\n  ast.tokens.forEach(defineStartEndAsError.bind(null, \"token\"));\n  ast.comments.forEach(defineStartEndAsError.bind(null, \"token\"));\n}\n/**\n * Wraps the given parser in order to intercept and modify return values from the `parse` and `parseForESLint` methods, for test purposes.\n * In particular, to modify ast nodes, tokens and comments to throw on access to their `start` and `end` properties.\n * @param {Parser} parser Parser object.\n * @returns {Parser} Wrapped parser object.\n */\n\n\nfunction wrapParser(parser) {\n  if (typeof parser.parseForESLint === \"function\") {\n    return {\n      [parserSymbol]: parser,\n\n      parseForESLint() {\n        const ret = parser.parseForESLint(...arguments);\n        defineStartEndAsErrorInTree(ret.ast, ret.visitorKeys);\n        return ret;\n      }\n\n    };\n  }\n\n  return {\n    [parserSymbol]: parser,\n\n    parse() {\n      const ast = parser.parse(...arguments);\n      defineStartEndAsErrorInTree(ast);\n      return ast;\n    }\n\n  };\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n// default separators for testing\n\n\nconst DESCRIBE = Symbol(\"describe\");\nconst IT = Symbol(\"it\");\nconst IT_ONLY = Symbol(\"itOnly\");\n/**\n * This is `it` default handler if `it` don't exist.\n * @this {Mocha}\n * @param {string} text The description of the test case.\n * @param {Function} method The logic of the test case.\n * @returns {any} Returned value of `method`.\n */\n\nfunction itDefaultHandler(text, method) {\n  try {\n    return method.call(this);\n  } catch (err) {\n    if (err instanceof assert.AssertionError) {\n      err.message += ` (${util.inspect(err.actual)} ${err.operator} ${util.inspect(err.expected)})`;\n    }\n\n    throw err;\n  }\n}\n/**\n * This is `describe` default handler if `describe` don't exist.\n * @this {Mocha}\n * @param {string} text The description of the test case.\n * @param {Function} method The logic of the test case.\n * @returns {any} Returned value of `method`.\n */\n\n\nfunction describeDefaultHandler(text, method) {\n  return method.call(this);\n}\n\nclass RuleTester {\n  /**\n   * Creates a new instance of RuleTester.\n   * @param {Object} [testerConfig] Optional, extra configuration for the tester\n   */\n  constructor(testerConfig) {\n    /**\n     * The configuration to use for this tester. Combination of the tester\n     * configuration and the default configuration.\n     * @type {Object}\n     */\n    this.testerConfig = merge({}, defaultConfig, testerConfig, {\n      rules: {\n        \"rule-tester/validate-ast\": \"error\"\n      }\n    });\n    /**\n     * Rule definitions to define before tests.\n     * @type {Object}\n     */\n\n    this.rules = {};\n    this.linter = new Linter();\n  }\n  /**\n   * Set the configuration to use for all future tests\n   * @param {Object} config the configuration to use.\n   * @returns {void}\n   */\n\n\n  static setDefaultConfig(config) {\n    if (typeof config !== \"object\") {\n      throw new TypeError(\"RuleTester.setDefaultConfig: config must be an object\");\n    }\n\n    defaultConfig = config; // Make sure the rules object exists since it is assumed to exist later\n\n    defaultConfig.rules = defaultConfig.rules || {};\n  }\n  /**\n   * Get the current configuration used for all tests\n   * @returns {Object} the current configuration\n   */\n\n\n  static getDefaultConfig() {\n    return defaultConfig;\n  }\n  /**\n   * Reset the configuration to the initial configuration of the tester removing\n   * any changes made until now.\n   * @returns {void}\n   */\n\n\n  static resetDefaultConfig() {\n    defaultConfig = merge({}, testerDefaultConfig);\n  }\n  /*\n   * If people use `mocha test.js --watch` command, `describe` and `it` function\n   * instances are different for each execution. So `describe` and `it` should get fresh instance\n   * always.\n   */\n\n\n  static get describe() {\n    return this[DESCRIBE] || (typeof describe === \"function\" ? describe : describeDefaultHandler);\n  }\n\n  static set describe(value) {\n    this[DESCRIBE] = value;\n  }\n\n  static get it() {\n    return this[IT] || (typeof it === \"function\" ? it : itDefaultHandler);\n  }\n\n  static set it(value) {\n    this[IT] = value;\n  }\n  /**\n   * Adds the `only` property to a test to run it in isolation.\n   * @param {string | ValidTestCase | InvalidTestCase} item A single test to run by itself.\n   * @returns {ValidTestCase | InvalidTestCase} The test with `only` set.\n   */\n\n\n  static only(item) {\n    if (typeof item === \"string\") {\n      return {\n        code: item,\n        only: true\n      };\n    }\n\n    return { ...item,\n      only: true\n    };\n  }\n\n  static get itOnly() {\n    if (typeof this[IT_ONLY] === \"function\") {\n      return this[IT_ONLY];\n    }\n\n    if (typeof this[IT] === \"function\" && typeof this[IT].only === \"function\") {\n      return Function.bind.call(this[IT].only, this[IT]);\n    }\n\n    if (typeof it === \"function\" && typeof it.only === \"function\") {\n      return Function.bind.call(it.only, it);\n    }\n\n    if (typeof this[DESCRIBE] === \"function\" || typeof this[IT] === \"function\") {\n      throw new Error(\"Set `RuleTester.itOnly` to use `only` with a custom test framework.\\n\" + \"See https://eslint.org/docs/developer-guide/nodejs-api#customizing-ruletester for more.\");\n    }\n\n    if (typeof it === \"function\") {\n      throw new Error(\"The current test framework does not support exclusive tests with `only`.\");\n    }\n\n    throw new Error(\"To use `only`, use RuleTester with a test framework that provides `it.only()` like Mocha.\");\n  }\n\n  static set itOnly(value) {\n    this[IT_ONLY] = value;\n  }\n  /**\n   * Define a rule for one particular run of tests.\n   * @param {string} name The name of the rule to define.\n   * @param {Function} rule The rule definition.\n   * @returns {void}\n   */\n\n\n  defineRule(name, rule) {\n    this.rules[name] = rule;\n  }\n  /**\n   * Adds a new rule test to execute.\n   * @param {string} ruleName The name of the rule to run.\n   * @param {Function} rule The rule to test.\n   * @param {{\n   *   valid: (ValidTestCase | string)[],\n   *   invalid: InvalidTestCase[]\n   * }} test The collection of tests to run.\n   * @returns {void}\n   */\n\n\n  run(ruleName, rule, test) {\n    const testerConfig = this.testerConfig,\n          requiredScenarios = [\"valid\", \"invalid\"],\n          scenarioErrors = [],\n          linter = this.linter;\n\n    if (!test || typeof test !== \"object\") {\n      throw new TypeError(`Test Scenarios for rule ${ruleName} : Could not find test scenario object`);\n    }\n\n    requiredScenarios.forEach(scenarioType => {\n      if (!test[scenarioType]) {\n        scenarioErrors.push(`Could not find any ${scenarioType} test scenarios`);\n      }\n    });\n\n    if (scenarioErrors.length > 0) {\n      throw new Error([`Test Scenarios for rule ${ruleName} is invalid:`].concat(scenarioErrors).join(\"\\n\"));\n    }\n\n    linter.defineRule(ruleName, Object.assign({}, rule, {\n      // Create a wrapper rule that freezes the `context` properties.\n      create(context) {\n        freezeDeeply(context.options);\n        freezeDeeply(context.settings);\n        freezeDeeply(context.parserOptions);\n        return (typeof rule === \"function\" ? rule : rule.create)(context);\n      }\n\n    }));\n    linter.defineRules(this.rules);\n    /**\n     * Run the rule for the given item\n     * @param {string|Object} item Item to run the rule against\n     * @returns {Object} Eslint run result\n     * @private\n     */\n\n    function runRuleForItem(item) {\n      let config = merge({}, testerConfig),\n          code,\n          filename,\n          output,\n          beforeAST,\n          afterAST;\n\n      if (typeof item === \"string\") {\n        code = item;\n      } else {\n        code = item.code;\n        /*\n         * Assumes everything on the item is a config except for the\n         * parameters used by this tester\n         */\n\n        const itemConfig = { ...item\n        };\n\n        for (const parameter of RuleTesterParameters) {\n          delete itemConfig[parameter];\n        }\n        /*\n         * Create the config object from the tester config and this item\n         * specific configurations.\n         */\n\n\n        config = merge(config, itemConfig);\n      }\n\n      if (item.filename) {\n        filename = item.filename;\n      }\n\n      if (hasOwnProperty(item, \"options\")) {\n        assert(Array.isArray(item.options), \"options must be an array\");\n        config.rules[ruleName] = [1].concat(item.options);\n      } else {\n        config.rules[ruleName] = 1;\n      }\n\n      const schema = getRuleOptionsSchema(rule);\n      /*\n       * Setup AST getters.\n       * The goal is to check whether or not AST was modified when\n       * running the rule under test.\n       */\n\n      linter.defineRule(\"rule-tester/validate-ast\", () => ({\n        Program(node) {\n          beforeAST = cloneDeeplyExcludesParent(node);\n        },\n\n        \"Program:exit\"(node) {\n          afterAST = node;\n        }\n\n      }));\n\n      if (typeof config.parser === \"string\") {\n        assert(path.isAbsolute(config.parser), \"Parsers provided as strings to RuleTester must be absolute paths\");\n      } else {\n        config.parser = espreePath;\n      }\n\n      linter.defineParser(config.parser, wrapParser(require(config.parser)));\n\n      if (schema) {\n        ajv.validateSchema(schema);\n\n        if (ajv.errors) {\n          const errors = ajv.errors.map(error => {\n            const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n            return `\\t${field}: ${error.message}`;\n          }).join(\"\\n\");\n          throw new Error([`Schema for rule ${ruleName} is invalid:`, errors]);\n        }\n        /*\n         * `ajv.validateSchema` checks for errors in the structure of the schema (by comparing the schema against a \"meta-schema\"),\n         * and it reports those errors individually. However, there are other types of schema errors that only occur when compiling\n         * the schema (e.g. using invalid defaults in a schema), and only one of these errors can be reported at a time. As a result,\n         * the schema is compiled here separately from checking for `validateSchema` errors.\n         */\n\n\n        try {\n          ajv.compile(schema);\n        } catch (err) {\n          throw new Error(`Schema for rule ${ruleName} is invalid: ${err.message}`);\n        }\n      }\n\n      validate(config, \"rule-tester\", id => id === ruleName ? rule : null); // Verify the code.\n\n      const messages = linter.verify(code, config, filename);\n      const fatalErrorMessage = messages.find(m => m.fatal);\n      assert(!fatalErrorMessage, `A fatal parsing error occurred: ${fatalErrorMessage && fatalErrorMessage.message}`); // Verify if autofix makes a syntax error or not.\n\n      if (messages.some(m => m.fix)) {\n        output = SourceCodeFixer.applyFixes(code, messages).output;\n        const errorMessageInFix = linter.verify(output, config, filename).find(m => m.fatal);\n        assert(!errorMessageInFix, [\"A fatal parsing error occurred in autofix.\", `Error: ${errorMessageInFix && errorMessageInFix.message}`, \"Autofix output:\", output].join(\"\\n\"));\n      } else {\n        output = code;\n      }\n\n      return {\n        messages,\n        output,\n        beforeAST,\n        afterAST: cloneDeeplyExcludesParent(afterAST)\n      };\n    }\n    /**\n     * Check if the AST was changed\n     * @param {ASTNode} beforeAST AST node before running\n     * @param {ASTNode} afterAST AST node after running\n     * @returns {void}\n     * @private\n     */\n\n\n    function assertASTDidntChange(beforeAST, afterAST) {\n      if (!equal(beforeAST, afterAST)) {\n        assert.fail(\"Rule should not modify AST.\");\n      }\n    }\n    /**\n     * Check if the template is valid or not\n     * all valid cases go through this\n     * @param {string|Object} item Item to run the rule against\n     * @returns {void}\n     * @private\n     */\n\n\n    function testValidTemplate(item) {\n      const result = runRuleForItem(item);\n      const messages = result.messages;\n      assert.strictEqual(messages.length, 0, util.format(\"Should have no errors but had %d: %s\", messages.length, util.inspect(messages)));\n      assertASTDidntChange(result.beforeAST, result.afterAST);\n    }\n    /**\n     * Asserts that the message matches its expected value. If the expected\n     * value is a regular expression, it is checked against the actual\n     * value.\n     * @param {string} actual Actual value\n     * @param {string|RegExp} expected Expected value\n     * @returns {void}\n     * @private\n     */\n\n\n    function assertMessageMatches(actual, expected) {\n      if (expected instanceof RegExp) {\n        // assert.js doesn't have a built-in RegExp match function\n        assert.ok(expected.test(actual), `Expected '${actual}' to match ${expected}`);\n      } else {\n        assert.strictEqual(actual, expected);\n      }\n    }\n    /**\n     * Check if the template is invalid or not\n     * all invalid cases go through this.\n     * @param {string|Object} item Item to run the rule against\n     * @returns {void}\n     * @private\n     */\n\n\n    function testInvalidTemplate(item) {\n      assert.ok(item.errors || item.errors === 0, `Did not specify errors for an invalid test of ${ruleName}`);\n\n      if (Array.isArray(item.errors) && item.errors.length === 0) {\n        assert.fail(\"Invalid cases must have at least one error\");\n      }\n\n      const ruleHasMetaMessages = hasOwnProperty(rule, \"meta\") && hasOwnProperty(rule.meta, \"messages\");\n      const friendlyIDList = ruleHasMetaMessages ? `[${Object.keys(rule.meta.messages).map(key => `'${key}'`).join(\", \")}]` : null;\n      const result = runRuleForItem(item);\n      const messages = result.messages;\n\n      if (typeof item.errors === \"number\") {\n        if (item.errors === 0) {\n          assert.fail(\"Invalid cases must have 'error' value greater than 0\");\n        }\n\n        assert.strictEqual(messages.length, item.errors, util.format(\"Should have %d error%s but had %d: %s\", item.errors, item.errors === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));\n      } else {\n        assert.strictEqual(messages.length, item.errors.length, util.format(\"Should have %d error%s but had %d: %s\", item.errors.length, item.errors.length === 1 ? \"\" : \"s\", messages.length, util.inspect(messages)));\n        const hasMessageOfThisRule = messages.some(m => m.ruleId === ruleName);\n\n        for (let i = 0, l = item.errors.length; i < l; i++) {\n          const error = item.errors[i];\n          const message = messages[i];\n          assert(hasMessageOfThisRule, \"Error rule name should be the same as the name of the rule being tested\");\n\n          if (typeof error === \"string\" || error instanceof RegExp) {\n            // Just an error message.\n            assertMessageMatches(message.message, error);\n          } else if (typeof error === \"object\" && error !== null) {\n            /*\n             * Error object.\n             * This may have a message, messageId, data, node type, line, and/or\n             * column.\n             */\n            Object.keys(error).forEach(propertyName => {\n              assert.ok(errorObjectParameters.has(propertyName), `Invalid error property name '${propertyName}'. Expected one of ${friendlyErrorObjectParameterList}.`);\n            });\n\n            if (hasOwnProperty(error, \"message\")) {\n              assert.ok(!hasOwnProperty(error, \"messageId\"), \"Error should not specify both 'message' and a 'messageId'.\");\n              assert.ok(!hasOwnProperty(error, \"data\"), \"Error should not specify both 'data' and 'message'.\");\n              assertMessageMatches(message.message, error.message);\n            } else if (hasOwnProperty(error, \"messageId\")) {\n              assert.ok(ruleHasMetaMessages, \"Error can not use 'messageId' if rule under test doesn't define 'meta.messages'.\");\n\n              if (!hasOwnProperty(rule.meta.messages, error.messageId)) {\n                assert(false, `Invalid messageId '${error.messageId}'. Expected one of ${friendlyIDList}.`);\n              }\n\n              assert.strictEqual(message.messageId, error.messageId, `messageId '${message.messageId}' does not match expected messageId '${error.messageId}'.`);\n\n              if (hasOwnProperty(error, \"data\")) {\n                /*\n                 *  if data was provided, then directly compare the returned message to a synthetic\n                 *  interpolated message using the same message ID and data provided in the test.\n                 *  See https://github.com/eslint/eslint/issues/9890 for context.\n                 */\n                const unformattedOriginalMessage = rule.meta.messages[error.messageId];\n                const rehydratedMessage = interpolate(unformattedOriginalMessage, error.data);\n                assert.strictEqual(message.message, rehydratedMessage, `Hydrated message \"${rehydratedMessage}\" does not match \"${message.message}\"`);\n              }\n            }\n\n            assert.ok(hasOwnProperty(error, \"data\") ? hasOwnProperty(error, \"messageId\") : true, \"Error must specify 'messageId' if 'data' is used.\");\n\n            if (error.type) {\n              assert.strictEqual(message.nodeType, error.type, `Error type should be ${error.type}, found ${message.nodeType}`);\n            }\n\n            if (hasOwnProperty(error, \"line\")) {\n              assert.strictEqual(message.line, error.line, `Error line should be ${error.line}`);\n            }\n\n            if (hasOwnProperty(error, \"column\")) {\n              assert.strictEqual(message.column, error.column, `Error column should be ${error.column}`);\n            }\n\n            if (hasOwnProperty(error, \"endLine\")) {\n              assert.strictEqual(message.endLine, error.endLine, `Error endLine should be ${error.endLine}`);\n            }\n\n            if (hasOwnProperty(error, \"endColumn\")) {\n              assert.strictEqual(message.endColumn, error.endColumn, `Error endColumn should be ${error.endColumn}`);\n            }\n\n            if (hasOwnProperty(error, \"suggestions\")) {\n              // Support asserting there are no suggestions\n              if (!error.suggestions || Array.isArray(error.suggestions) && error.suggestions.length === 0) {\n                if (Array.isArray(message.suggestions) && message.suggestions.length > 0) {\n                  assert.fail(`Error should have no suggestions on error with message: \"${message.message}\"`);\n                }\n              } else {\n                assert.strictEqual(Array.isArray(message.suggestions), true, `Error should have an array of suggestions. Instead received \"${message.suggestions}\" on error with message: \"${message.message}\"`);\n                assert.strictEqual(message.suggestions.length, error.suggestions.length, `Error should have ${error.suggestions.length} suggestions. Instead found ${message.suggestions.length} suggestions`);\n                error.suggestions.forEach((expectedSuggestion, index) => {\n                  assert.ok(typeof expectedSuggestion === \"object\" && expectedSuggestion !== null, \"Test suggestion in 'suggestions' array must be an object.\");\n                  Object.keys(expectedSuggestion).forEach(propertyName => {\n                    assert.ok(suggestionObjectParameters.has(propertyName), `Invalid suggestion property name '${propertyName}'. Expected one of ${friendlySuggestionObjectParameterList}.`);\n                  });\n                  const actualSuggestion = message.suggestions[index];\n                  const suggestionPrefix = `Error Suggestion at index ${index} :`;\n\n                  if (hasOwnProperty(expectedSuggestion, \"desc\")) {\n                    assert.ok(!hasOwnProperty(expectedSuggestion, \"data\"), `${suggestionPrefix} Test should not specify both 'desc' and 'data'.`);\n                    assert.strictEqual(actualSuggestion.desc, expectedSuggestion.desc, `${suggestionPrefix} desc should be \"${expectedSuggestion.desc}\" but got \"${actualSuggestion.desc}\" instead.`);\n                  }\n\n                  if (hasOwnProperty(expectedSuggestion, \"messageId\")) {\n                    assert.ok(ruleHasMetaMessages, `${suggestionPrefix} Test can not use 'messageId' if rule under test doesn't define 'meta.messages'.`);\n                    assert.ok(hasOwnProperty(rule.meta.messages, expectedSuggestion.messageId), `${suggestionPrefix} Test has invalid messageId '${expectedSuggestion.messageId}', the rule under test allows only one of ${friendlyIDList}.`);\n                    assert.strictEqual(actualSuggestion.messageId, expectedSuggestion.messageId, `${suggestionPrefix} messageId should be '${expectedSuggestion.messageId}' but got '${actualSuggestion.messageId}' instead.`);\n\n                    if (hasOwnProperty(expectedSuggestion, \"data\")) {\n                      const unformattedMetaMessage = rule.meta.messages[expectedSuggestion.messageId];\n                      const rehydratedDesc = interpolate(unformattedMetaMessage, expectedSuggestion.data);\n                      assert.strictEqual(actualSuggestion.desc, rehydratedDesc, `${suggestionPrefix} Hydrated test desc \"${rehydratedDesc}\" does not match received desc \"${actualSuggestion.desc}\".`);\n                    }\n                  } else {\n                    assert.ok(!hasOwnProperty(expectedSuggestion, \"data\"), `${suggestionPrefix} Test must specify 'messageId' if 'data' is used.`);\n                  }\n\n                  if (hasOwnProperty(expectedSuggestion, \"output\")) {\n                    const codeWithAppliedSuggestion = SourceCodeFixer.applyFixes(item.code, [actualSuggestion]).output;\n                    assert.strictEqual(codeWithAppliedSuggestion, expectedSuggestion.output, `Expected the applied suggestion fix to match the test suggestion output for suggestion at index: ${index} on error with message: \"${message.message}\"`);\n                  }\n                });\n              }\n            }\n          } else {\n            // Message was an unexpected type\n            assert.fail(`Error should be a string, object, or RegExp, but found (${util.inspect(message)})`);\n          }\n        }\n      }\n\n      if (hasOwnProperty(item, \"output\")) {\n        if (item.output === null) {\n          assert.strictEqual(result.output, item.code, \"Expected no autofixes to be suggested\");\n        } else {\n          assert.strictEqual(result.output, item.output, \"Output is incorrect.\");\n        }\n      } else {\n        assert.strictEqual(result.output, item.code, \"The rule fixed the code. Please add 'output' property.\");\n      } // Rules that produce fixes must have `meta.fixable` property.\n\n\n      if (result.output !== item.code) {\n        assert.ok(hasOwnProperty(rule, \"meta\"), \"Fixable rules should export a `meta.fixable` property.\"); // Linter throws if a rule that produced a fix has `meta` but doesn't have `meta.fixable`.\n      }\n\n      assertASTDidntChange(result.beforeAST, result.afterAST);\n    }\n    /*\n     * This creates a mocha test suite and pipes all supplied info through\n     * one of the templates above.\n     */\n\n\n    RuleTester.describe(ruleName, () => {\n      RuleTester.describe(\"valid\", () => {\n        test.valid.forEach(valid => {\n          RuleTester[valid.only ? \"itOnly\" : \"it\"](sanitize(typeof valid === \"object\" ? valid.code : valid), () => {\n            testValidTemplate(valid);\n          });\n        });\n      });\n      RuleTester.describe(\"invalid\", () => {\n        test.invalid.forEach(invalid => {\n          RuleTester[invalid.only ? \"itOnly\" : \"it\"](sanitize(invalid.code), () => {\n            testInvalidTemplate(invalid);\n          });\n        });\n      });\n    });\n  }\n\n}\n\nRuleTester[DESCRIBE] = RuleTester[IT] = RuleTester[IT_ONLY] = null;\nmodule.exports = RuleTester;","map":{"version":3,"names":["assert","require","path","util","merge","equal","Traverser","getRuleOptionsSchema","validate","Linter","SourceCodeFixer","interpolate","ajv","strictDefaults","espreePath","resolve","parserSymbol","Symbol","for","testerDefaultConfig","rules","defaultConfig","RuleTesterParameters","errorObjectParameters","Set","friendlyErrorObjectParameterList","map","key","join","suggestionObjectParameters","friendlySuggestionObjectParameterList","hasOwnProperty","Function","call","bind","Object","cloneDeeplyExcludesParent","x","Array","isArray","retv","freezeDeeply","forEach","freeze","sanitize","text","replace","c","codePointAt","toString","padStart","defineStartEndAsError","objName","node","defineProperties","start","get","Error","configurable","enumerable","end","defineStartEndAsErrorInTree","ast","visitorKeys","traverse","enter","tokens","comments","wrapParser","parser","parseForESLint","ret","parse","DESCRIBE","IT","IT_ONLY","itDefaultHandler","method","err","AssertionError","message","inspect","actual","operator","expected","describeDefaultHandler","RuleTester","constructor","testerConfig","linter","setDefaultConfig","config","TypeError","getDefaultConfig","resetDefaultConfig","describe","value","it","only","item","code","itOnly","defineRule","name","rule","run","ruleName","test","requiredScenarios","scenarioErrors","scenarioType","push","length","concat","assign","create","context","options","settings","parserOptions","defineRules","runRuleForItem","filename","output","beforeAST","afterAST","itemConfig","parameter","schema","Program","isAbsolute","defineParser","validateSchema","errors","error","field","dataPath","slice","compile","id","messages","verify","fatalErrorMessage","find","m","fatal","some","fix","applyFixes","errorMessageInFix","assertASTDidntChange","fail","testValidTemplate","result","strictEqual","format","assertMessageMatches","RegExp","ok","testInvalidTemplate","ruleHasMetaMessages","meta","friendlyIDList","keys","hasMessageOfThisRule","ruleId","i","l","propertyName","has","messageId","unformattedOriginalMessage","rehydratedMessage","data","type","nodeType","line","column","endLine","endColumn","suggestions","expectedSuggestion","index","actualSuggestion","suggestionPrefix","desc","unformattedMetaMessage","rehydratedDesc","codeWithAppliedSuggestion","valid","invalid","module","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rule-tester/rule-tester.js"],"sourcesContent":["/**\n * @fileoverview Mocha test wrapper\n * @author Ilya Volodin\n */\n\"use strict\";\n\n/* global describe, it */\n\n/*\n * This is a wrapper around mocha to allow for DRY unittests for eslint\n * Format:\n * RuleTester.run(\"{ruleName}\", {\n *      valid: [\n *          \"{code}\",\n *          { code: \"{code}\", options: {options}, globals: {globals}, parser: \"{parser}\", settings: {settings} }\n *      ],\n *      invalid: [\n *          { code: \"{code}\", errors: {numErrors} },\n *          { code: \"{code}\", errors: [\"{errorMessage}\"] },\n *          { code: \"{code}\", options: {options}, globals: {globals}, parser: \"{parser}\", settings: {settings}, errors: [{ message: \"{errorMessage}\", type: \"{errorNodeType}\"}] }\n *      ]\n *  });\n *\n * Variables:\n * {code} - String that represents the code to be tested\n * {options} - Arguments that are passed to the configurable rules.\n * {globals} - An object representing a list of variables that are\n *             registered as globals\n * {parser} - String representing the parser to use\n * {settings} - An object representing global settings for all rules\n * {numErrors} - If failing case doesn't need to check error message,\n *               this integer will specify how many errors should be\n *               received\n * {errorMessage} - Message that is returned by the rule on failure\n * {errorNodeType} - AST node type that is returned by they rule as\n *                   a cause of the failure.\n */\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst\n    assert = require(\"assert\"),\n    path = require(\"path\"),\n    util = require(\"util\"),\n    merge = require(\"lodash.merge\"),\n    equal = require(\"fast-deep-equal\"),\n    Traverser = require(\"../../lib/shared/traverser\"),\n    { getRuleOptionsSchema, validate } = require(\"../shared/config-validator\"),\n    { Linter, SourceCodeFixer, interpolate } = require(\"../linter\");\n\nconst ajv = require(\"../shared/ajv\")({ strictDefaults: true });\n\nconst espreePath = require.resolve(\"espree\");\nconst parserSymbol = Symbol.for(\"eslint.RuleTester.parser\");\n\n//------------------------------------------------------------------------------\n// Typedefs\n//------------------------------------------------------------------------------\n\n/** @typedef {import(\"../shared/types\").Parser} Parser */\n\n/**\n * A test case that is expected to pass lint.\n * @typedef {Object} ValidTestCase\n * @property {string} code Code for the test case.\n * @property {any[]} [options] Options for the test case.\n * @property {{ [name: string]: any }} [settings] Settings for the test case.\n * @property {string} [filename] The fake filename for the test case. Useful for rules that make assertion about filenames.\n * @property {string} [parser] The absolute path for the parser.\n * @property {{ [name: string]: any }} [parserOptions] Options for the parser.\n * @property {{ [name: string]: \"readonly\" | \"writable\" | \"off\" }} [globals] The additional global variables.\n * @property {{ [name: string]: boolean }} [env] Environments for the test case.\n * @property {boolean} [only] Run only this test case or the subset of test cases with this property.\n */\n\n/**\n * A test case that is expected to fail lint.\n * @typedef {Object} InvalidTestCase\n * @property {string} code Code for the test case.\n * @property {number | Array<TestCaseError | string | RegExp>} errors Expected errors.\n * @property {string | null} [output] The expected code after autofixes are applied. If set to `null`, the test runner will assert that no autofix is suggested.\n * @property {any[]} [options] Options for the test case.\n * @property {{ [name: string]: any }} [settings] Settings for the test case.\n * @property {string} [filename] The fake filename for the test case. Useful for rules that make assertion about filenames.\n * @property {string} [parser] The absolute path for the parser.\n * @property {{ [name: string]: any }} [parserOptions] Options for the parser.\n * @property {{ [name: string]: \"readonly\" | \"writable\" | \"off\" }} [globals] The additional global variables.\n * @property {{ [name: string]: boolean }} [env] Environments for the test case.\n * @property {boolean} [only] Run only this test case or the subset of test cases with this property.\n */\n\n/**\n * A description of a reported error used in a rule tester test.\n * @typedef {Object} TestCaseError\n * @property {string | RegExp} [message] Message.\n * @property {string} [messageId] Message ID.\n * @property {string} [type] The type of the reported AST node.\n * @property {{ [name: string]: string }} [data] The data used to fill the message template.\n * @property {number} [line] The 1-based line number of the reported start location.\n * @property {number} [column] The 1-based column number of the reported start location.\n * @property {number} [endLine] The 1-based line number of the reported end location.\n * @property {number} [endColumn] The 1-based column number of the reported end location.\n */\n\n//------------------------------------------------------------------------------\n// Private Members\n//------------------------------------------------------------------------------\n\n/*\n * testerDefaultConfig must not be modified as it allows to reset the tester to\n * the initial default configuration\n */\nconst testerDefaultConfig = { rules: {} };\nlet defaultConfig = { rules: {} };\n\n/*\n * List every parameters possible on a test case that are not related to eslint\n * configuration\n */\nconst RuleTesterParameters = [\n    \"code\",\n    \"filename\",\n    \"options\",\n    \"errors\",\n    \"output\",\n    \"only\"\n];\n\n/*\n * All allowed property names in error objects.\n */\nconst errorObjectParameters = new Set([\n    \"message\",\n    \"messageId\",\n    \"data\",\n    \"type\",\n    \"line\",\n    \"column\",\n    \"endLine\",\n    \"endColumn\",\n    \"suggestions\"\n]);\nconst friendlyErrorObjectParameterList = `[${[...errorObjectParameters].map(key => `'${key}'`).join(\", \")}]`;\n\n/*\n * All allowed property names in suggestion objects.\n */\nconst suggestionObjectParameters = new Set([\n    \"desc\",\n    \"messageId\",\n    \"data\",\n    \"output\"\n]);\nconst friendlySuggestionObjectParameterList = `[${[...suggestionObjectParameters].map(key => `'${key}'`).join(\", \")}]`;\n\nconst hasOwnProperty = Function.call.bind(Object.hasOwnProperty);\n\n/**\n * Clones a given value deeply.\n * Note: This ignores `parent` property.\n * @param {any} x A value to clone.\n * @returns {any} A cloned value.\n */\nfunction cloneDeeplyExcludesParent(x) {\n    if (typeof x === \"object\" && x !== null) {\n        if (Array.isArray(x)) {\n            return x.map(cloneDeeplyExcludesParent);\n        }\n\n        const retv = {};\n\n        for (const key in x) {\n            if (key !== \"parent\" && hasOwnProperty(x, key)) {\n                retv[key] = cloneDeeplyExcludesParent(x[key]);\n            }\n        }\n\n        return retv;\n    }\n\n    return x;\n}\n\n/**\n * Freezes a given value deeply.\n * @param {any} x A value to freeze.\n * @returns {void}\n */\nfunction freezeDeeply(x) {\n    if (typeof x === \"object\" && x !== null) {\n        if (Array.isArray(x)) {\n            x.forEach(freezeDeeply);\n        } else {\n            for (const key in x) {\n                if (key !== \"parent\" && hasOwnProperty(x, key)) {\n                    freezeDeeply(x[key]);\n                }\n            }\n        }\n        Object.freeze(x);\n    }\n}\n\n/**\n * Replace control characters by `\\u00xx` form.\n * @param {string} text The text to sanitize.\n * @returns {string} The sanitized text.\n */\nfunction sanitize(text) {\n    return text.replace(\n        /[\\u0000-\\u0009\\u000b-\\u001a]/gu, // eslint-disable-line no-control-regex\n        c => `\\\\u${c.codePointAt(0).toString(16).padStart(4, \"0\")}`\n    );\n}\n\n/**\n * Define `start`/`end` properties as throwing error.\n * @param {string} objName Object name used for error messages.\n * @param {ASTNode} node The node to define.\n * @returns {void}\n */\nfunction defineStartEndAsError(objName, node) {\n    Object.defineProperties(node, {\n        start: {\n            get() {\n                throw new Error(`Use ${objName}.range[0] instead of ${objName}.start`);\n            },\n            configurable: true,\n            enumerable: false\n        },\n        end: {\n            get() {\n                throw new Error(`Use ${objName}.range[1] instead of ${objName}.end`);\n            },\n            configurable: true,\n            enumerable: false\n        }\n    });\n}\n\n\n/**\n * Define `start`/`end` properties of all nodes of the given AST as throwing error.\n * @param {ASTNode} ast The root node to errorize `start`/`end` properties.\n * @param {Object} [visitorKeys] Visitor keys to be used for traversing the given ast.\n * @returns {void}\n */\nfunction defineStartEndAsErrorInTree(ast, visitorKeys) {\n    Traverser.traverse(ast, { visitorKeys, enter: defineStartEndAsError.bind(null, \"node\") });\n    ast.tokens.forEach(defineStartEndAsError.bind(null, \"token\"));\n    ast.comments.forEach(defineStartEndAsError.bind(null, \"token\"));\n}\n\n/**\n * Wraps the given parser in order to intercept and modify return values from the `parse` and `parseForESLint` methods, for test purposes.\n * In particular, to modify ast nodes, tokens and comments to throw on access to their `start` and `end` properties.\n * @param {Parser} parser Parser object.\n * @returns {Parser} Wrapped parser object.\n */\nfunction wrapParser(parser) {\n\n    if (typeof parser.parseForESLint === \"function\") {\n        return {\n            [parserSymbol]: parser,\n            parseForESLint(...args) {\n                const ret = parser.parseForESLint(...args);\n\n                defineStartEndAsErrorInTree(ret.ast, ret.visitorKeys);\n                return ret;\n            }\n        };\n    }\n\n    return {\n        [parserSymbol]: parser,\n        parse(...args) {\n            const ast = parser.parse(...args);\n\n            defineStartEndAsErrorInTree(ast);\n            return ast;\n        }\n    };\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n// default separators for testing\nconst DESCRIBE = Symbol(\"describe\");\nconst IT = Symbol(\"it\");\nconst IT_ONLY = Symbol(\"itOnly\");\n\n/**\n * This is `it` default handler if `it` don't exist.\n * @this {Mocha}\n * @param {string} text The description of the test case.\n * @param {Function} method The logic of the test case.\n * @returns {any} Returned value of `method`.\n */\nfunction itDefaultHandler(text, method) {\n    try {\n        return method.call(this);\n    } catch (err) {\n        if (err instanceof assert.AssertionError) {\n            err.message += ` (${util.inspect(err.actual)} ${err.operator} ${util.inspect(err.expected)})`;\n        }\n        throw err;\n    }\n}\n\n/**\n * This is `describe` default handler if `describe` don't exist.\n * @this {Mocha}\n * @param {string} text The description of the test case.\n * @param {Function} method The logic of the test case.\n * @returns {any} Returned value of `method`.\n */\nfunction describeDefaultHandler(text, method) {\n    return method.call(this);\n}\n\nclass RuleTester {\n\n    /**\n     * Creates a new instance of RuleTester.\n     * @param {Object} [testerConfig] Optional, extra configuration for the tester\n     */\n    constructor(testerConfig) {\n\n        /**\n         * The configuration to use for this tester. Combination of the tester\n         * configuration and the default configuration.\n         * @type {Object}\n         */\n        this.testerConfig = merge(\n            {},\n            defaultConfig,\n            testerConfig,\n            { rules: { \"rule-tester/validate-ast\": \"error\" } }\n        );\n\n        /**\n         * Rule definitions to define before tests.\n         * @type {Object}\n         */\n        this.rules = {};\n        this.linter = new Linter();\n    }\n\n    /**\n     * Set the configuration to use for all future tests\n     * @param {Object} config the configuration to use.\n     * @returns {void}\n     */\n    static setDefaultConfig(config) {\n        if (typeof config !== \"object\") {\n            throw new TypeError(\"RuleTester.setDefaultConfig: config must be an object\");\n        }\n        defaultConfig = config;\n\n        // Make sure the rules object exists since it is assumed to exist later\n        defaultConfig.rules = defaultConfig.rules || {};\n    }\n\n    /**\n     * Get the current configuration used for all tests\n     * @returns {Object} the current configuration\n     */\n    static getDefaultConfig() {\n        return defaultConfig;\n    }\n\n    /**\n     * Reset the configuration to the initial configuration of the tester removing\n     * any changes made until now.\n     * @returns {void}\n     */\n    static resetDefaultConfig() {\n        defaultConfig = merge({}, testerDefaultConfig);\n    }\n\n\n    /*\n     * If people use `mocha test.js --watch` command, `describe` and `it` function\n     * instances are different for each execution. So `describe` and `it` should get fresh instance\n     * always.\n     */\n    static get describe() {\n        return (\n            this[DESCRIBE] ||\n            (typeof describe === \"function\" ? describe : describeDefaultHandler)\n        );\n    }\n\n    static set describe(value) {\n        this[DESCRIBE] = value;\n    }\n\n    static get it() {\n        return (\n            this[IT] ||\n            (typeof it === \"function\" ? it : itDefaultHandler)\n        );\n    }\n\n    static set it(value) {\n        this[IT] = value;\n    }\n\n    /**\n     * Adds the `only` property to a test to run it in isolation.\n     * @param {string | ValidTestCase | InvalidTestCase} item A single test to run by itself.\n     * @returns {ValidTestCase | InvalidTestCase} The test with `only` set.\n     */\n    static only(item) {\n        if (typeof item === \"string\") {\n            return { code: item, only: true };\n        }\n\n        return { ...item, only: true };\n    }\n\n    static get itOnly() {\n        if (typeof this[IT_ONLY] === \"function\") {\n            return this[IT_ONLY];\n        }\n        if (typeof this[IT] === \"function\" && typeof this[IT].only === \"function\") {\n            return Function.bind.call(this[IT].only, this[IT]);\n        }\n        if (typeof it === \"function\" && typeof it.only === \"function\") {\n            return Function.bind.call(it.only, it);\n        }\n\n        if (typeof this[DESCRIBE] === \"function\" || typeof this[IT] === \"function\") {\n            throw new Error(\n                \"Set `RuleTester.itOnly` to use `only` with a custom test framework.\\n\" +\n                \"See https://eslint.org/docs/developer-guide/nodejs-api#customizing-ruletester for more.\"\n            );\n        }\n        if (typeof it === \"function\") {\n            throw new Error(\"The current test framework does not support exclusive tests with `only`.\");\n        }\n        throw new Error(\"To use `only`, use RuleTester with a test framework that provides `it.only()` like Mocha.\");\n    }\n\n    static set itOnly(value) {\n        this[IT_ONLY] = value;\n    }\n\n    /**\n     * Define a rule for one particular run of tests.\n     * @param {string} name The name of the rule to define.\n     * @param {Function} rule The rule definition.\n     * @returns {void}\n     */\n    defineRule(name, rule) {\n        this.rules[name] = rule;\n    }\n\n    /**\n     * Adds a new rule test to execute.\n     * @param {string} ruleName The name of the rule to run.\n     * @param {Function} rule The rule to test.\n     * @param {{\n     *   valid: (ValidTestCase | string)[],\n     *   invalid: InvalidTestCase[]\n     * }} test The collection of tests to run.\n     * @returns {void}\n     */\n    run(ruleName, rule, test) {\n\n        const testerConfig = this.testerConfig,\n            requiredScenarios = [\"valid\", \"invalid\"],\n            scenarioErrors = [],\n            linter = this.linter;\n\n        if (!test || typeof test !== \"object\") {\n            throw new TypeError(`Test Scenarios for rule ${ruleName} : Could not find test scenario object`);\n        }\n\n        requiredScenarios.forEach(scenarioType => {\n            if (!test[scenarioType]) {\n                scenarioErrors.push(`Could not find any ${scenarioType} test scenarios`);\n            }\n        });\n\n        if (scenarioErrors.length > 0) {\n            throw new Error([\n                `Test Scenarios for rule ${ruleName} is invalid:`\n            ].concat(scenarioErrors).join(\"\\n\"));\n        }\n\n\n        linter.defineRule(ruleName, Object.assign({}, rule, {\n\n            // Create a wrapper rule that freezes the `context` properties.\n            create(context) {\n                freezeDeeply(context.options);\n                freezeDeeply(context.settings);\n                freezeDeeply(context.parserOptions);\n\n                return (typeof rule === \"function\" ? rule : rule.create)(context);\n            }\n        }));\n\n        linter.defineRules(this.rules);\n\n        /**\n         * Run the rule for the given item\n         * @param {string|Object} item Item to run the rule against\n         * @returns {Object} Eslint run result\n         * @private\n         */\n        function runRuleForItem(item) {\n            let config = merge({}, testerConfig),\n                code, filename, output, beforeAST, afterAST;\n\n            if (typeof item === \"string\") {\n                code = item;\n            } else {\n                code = item.code;\n\n                /*\n                 * Assumes everything on the item is a config except for the\n                 * parameters used by this tester\n                 */\n                const itemConfig = { ...item };\n\n                for (const parameter of RuleTesterParameters) {\n                    delete itemConfig[parameter];\n                }\n\n                /*\n                 * Create the config object from the tester config and this item\n                 * specific configurations.\n                 */\n                config = merge(\n                    config,\n                    itemConfig\n                );\n            }\n\n            if (item.filename) {\n                filename = item.filename;\n            }\n\n            if (hasOwnProperty(item, \"options\")) {\n                assert(Array.isArray(item.options), \"options must be an array\");\n                config.rules[ruleName] = [1].concat(item.options);\n            } else {\n                config.rules[ruleName] = 1;\n            }\n\n            const schema = getRuleOptionsSchema(rule);\n\n            /*\n             * Setup AST getters.\n             * The goal is to check whether or not AST was modified when\n             * running the rule under test.\n             */\n            linter.defineRule(\"rule-tester/validate-ast\", () => ({\n                Program(node) {\n                    beforeAST = cloneDeeplyExcludesParent(node);\n                },\n                \"Program:exit\"(node) {\n                    afterAST = node;\n                }\n            }));\n\n            if (typeof config.parser === \"string\") {\n                assert(path.isAbsolute(config.parser), \"Parsers provided as strings to RuleTester must be absolute paths\");\n            } else {\n                config.parser = espreePath;\n            }\n\n            linter.defineParser(config.parser, wrapParser(require(config.parser)));\n\n            if (schema) {\n                ajv.validateSchema(schema);\n\n                if (ajv.errors) {\n                    const errors = ajv.errors.map(error => {\n                        const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n\n                        return `\\t${field}: ${error.message}`;\n                    }).join(\"\\n\");\n\n                    throw new Error([`Schema for rule ${ruleName} is invalid:`, errors]);\n                }\n\n                /*\n                 * `ajv.validateSchema` checks for errors in the structure of the schema (by comparing the schema against a \"meta-schema\"),\n                 * and it reports those errors individually. However, there are other types of schema errors that only occur when compiling\n                 * the schema (e.g. using invalid defaults in a schema), and only one of these errors can be reported at a time. As a result,\n                 * the schema is compiled here separately from checking for `validateSchema` errors.\n                 */\n                try {\n                    ajv.compile(schema);\n                } catch (err) {\n                    throw new Error(`Schema for rule ${ruleName} is invalid: ${err.message}`);\n                }\n            }\n\n            validate(config, \"rule-tester\", id => (id === ruleName ? rule : null));\n\n            // Verify the code.\n            const messages = linter.verify(code, config, filename);\n            const fatalErrorMessage = messages.find(m => m.fatal);\n\n            assert(!fatalErrorMessage, `A fatal parsing error occurred: ${fatalErrorMessage && fatalErrorMessage.message}`);\n\n            // Verify if autofix makes a syntax error or not.\n            if (messages.some(m => m.fix)) {\n                output = SourceCodeFixer.applyFixes(code, messages).output;\n                const errorMessageInFix = linter.verify(output, config, filename).find(m => m.fatal);\n\n                assert(!errorMessageInFix, [\n                    \"A fatal parsing error occurred in autofix.\",\n                    `Error: ${errorMessageInFix && errorMessageInFix.message}`,\n                    \"Autofix output:\",\n                    output\n                ].join(\"\\n\"));\n            } else {\n                output = code;\n            }\n\n            return {\n                messages,\n                output,\n                beforeAST,\n                afterAST: cloneDeeplyExcludesParent(afterAST)\n            };\n        }\n\n        /**\n         * Check if the AST was changed\n         * @param {ASTNode} beforeAST AST node before running\n         * @param {ASTNode} afterAST AST node after running\n         * @returns {void}\n         * @private\n         */\n        function assertASTDidntChange(beforeAST, afterAST) {\n            if (!equal(beforeAST, afterAST)) {\n                assert.fail(\"Rule should not modify AST.\");\n            }\n        }\n\n        /**\n         * Check if the template is valid or not\n         * all valid cases go through this\n         * @param {string|Object} item Item to run the rule against\n         * @returns {void}\n         * @private\n         */\n        function testValidTemplate(item) {\n            const result = runRuleForItem(item);\n            const messages = result.messages;\n\n            assert.strictEqual(messages.length, 0, util.format(\"Should have no errors but had %d: %s\",\n                messages.length,\n                util.inspect(messages)));\n\n            assertASTDidntChange(result.beforeAST, result.afterAST);\n        }\n\n        /**\n         * Asserts that the message matches its expected value. If the expected\n         * value is a regular expression, it is checked against the actual\n         * value.\n         * @param {string} actual Actual value\n         * @param {string|RegExp} expected Expected value\n         * @returns {void}\n         * @private\n         */\n        function assertMessageMatches(actual, expected) {\n            if (expected instanceof RegExp) {\n\n                // assert.js doesn't have a built-in RegExp match function\n                assert.ok(\n                    expected.test(actual),\n                    `Expected '${actual}' to match ${expected}`\n                );\n            } else {\n                assert.strictEqual(actual, expected);\n            }\n        }\n\n        /**\n         * Check if the template is invalid or not\n         * all invalid cases go through this.\n         * @param {string|Object} item Item to run the rule against\n         * @returns {void}\n         * @private\n         */\n        function testInvalidTemplate(item) {\n            assert.ok(item.errors || item.errors === 0,\n                `Did not specify errors for an invalid test of ${ruleName}`);\n\n            if (Array.isArray(item.errors) && item.errors.length === 0) {\n                assert.fail(\"Invalid cases must have at least one error\");\n            }\n\n            const ruleHasMetaMessages = hasOwnProperty(rule, \"meta\") && hasOwnProperty(rule.meta, \"messages\");\n            const friendlyIDList = ruleHasMetaMessages ? `[${Object.keys(rule.meta.messages).map(key => `'${key}'`).join(\", \")}]` : null;\n\n            const result = runRuleForItem(item);\n            const messages = result.messages;\n\n            if (typeof item.errors === \"number\") {\n\n                if (item.errors === 0) {\n                    assert.fail(\"Invalid cases must have 'error' value greater than 0\");\n                }\n\n                assert.strictEqual(messages.length, item.errors, util.format(\"Should have %d error%s but had %d: %s\",\n                    item.errors,\n                    item.errors === 1 ? \"\" : \"s\",\n                    messages.length,\n                    util.inspect(messages)));\n            } else {\n                assert.strictEqual(\n                    messages.length, item.errors.length, util.format(\n                        \"Should have %d error%s but had %d: %s\",\n                        item.errors.length,\n                        item.errors.length === 1 ? \"\" : \"s\",\n                        messages.length,\n                        util.inspect(messages)\n                    )\n                );\n\n                const hasMessageOfThisRule = messages.some(m => m.ruleId === ruleName);\n\n                for (let i = 0, l = item.errors.length; i < l; i++) {\n                    const error = item.errors[i];\n                    const message = messages[i];\n\n                    assert(hasMessageOfThisRule, \"Error rule name should be the same as the name of the rule being tested\");\n\n                    if (typeof error === \"string\" || error instanceof RegExp) {\n\n                        // Just an error message.\n                        assertMessageMatches(message.message, error);\n                    } else if (typeof error === \"object\" && error !== null) {\n\n                        /*\n                         * Error object.\n                         * This may have a message, messageId, data, node type, line, and/or\n                         * column.\n                         */\n\n                        Object.keys(error).forEach(propertyName => {\n                            assert.ok(\n                                errorObjectParameters.has(propertyName),\n                                `Invalid error property name '${propertyName}'. Expected one of ${friendlyErrorObjectParameterList}.`\n                            );\n                        });\n\n                        if (hasOwnProperty(error, \"message\")) {\n                            assert.ok(!hasOwnProperty(error, \"messageId\"), \"Error should not specify both 'message' and a 'messageId'.\");\n                            assert.ok(!hasOwnProperty(error, \"data\"), \"Error should not specify both 'data' and 'message'.\");\n                            assertMessageMatches(message.message, error.message);\n                        } else if (hasOwnProperty(error, \"messageId\")) {\n                            assert.ok(\n                                ruleHasMetaMessages,\n                                \"Error can not use 'messageId' if rule under test doesn't define 'meta.messages'.\"\n                            );\n                            if (!hasOwnProperty(rule.meta.messages, error.messageId)) {\n                                assert(false, `Invalid messageId '${error.messageId}'. Expected one of ${friendlyIDList}.`);\n                            }\n                            assert.strictEqual(\n                                message.messageId,\n                                error.messageId,\n                                `messageId '${message.messageId}' does not match expected messageId '${error.messageId}'.`\n                            );\n                            if (hasOwnProperty(error, \"data\")) {\n\n                                /*\n                                 *  if data was provided, then directly compare the returned message to a synthetic\n                                 *  interpolated message using the same message ID and data provided in the test.\n                                 *  See https://github.com/eslint/eslint/issues/9890 for context.\n                                 */\n                                const unformattedOriginalMessage = rule.meta.messages[error.messageId];\n                                const rehydratedMessage = interpolate(unformattedOriginalMessage, error.data);\n\n                                assert.strictEqual(\n                                    message.message,\n                                    rehydratedMessage,\n                                    `Hydrated message \"${rehydratedMessage}\" does not match \"${message.message}\"`\n                                );\n                            }\n                        }\n\n                        assert.ok(\n                            hasOwnProperty(error, \"data\") ? hasOwnProperty(error, \"messageId\") : true,\n                            \"Error must specify 'messageId' if 'data' is used.\"\n                        );\n\n                        if (error.type) {\n                            assert.strictEqual(message.nodeType, error.type, `Error type should be ${error.type}, found ${message.nodeType}`);\n                        }\n\n                        if (hasOwnProperty(error, \"line\")) {\n                            assert.strictEqual(message.line, error.line, `Error line should be ${error.line}`);\n                        }\n\n                        if (hasOwnProperty(error, \"column\")) {\n                            assert.strictEqual(message.column, error.column, `Error column should be ${error.column}`);\n                        }\n\n                        if (hasOwnProperty(error, \"endLine\")) {\n                            assert.strictEqual(message.endLine, error.endLine, `Error endLine should be ${error.endLine}`);\n                        }\n\n                        if (hasOwnProperty(error, \"endColumn\")) {\n                            assert.strictEqual(message.endColumn, error.endColumn, `Error endColumn should be ${error.endColumn}`);\n                        }\n\n                        if (hasOwnProperty(error, \"suggestions\")) {\n\n                            // Support asserting there are no suggestions\n                            if (!error.suggestions || (Array.isArray(error.suggestions) && error.suggestions.length === 0)) {\n                                if (Array.isArray(message.suggestions) && message.suggestions.length > 0) {\n                                    assert.fail(`Error should have no suggestions on error with message: \"${message.message}\"`);\n                                }\n                            } else {\n                                assert.strictEqual(Array.isArray(message.suggestions), true, `Error should have an array of suggestions. Instead received \"${message.suggestions}\" on error with message: \"${message.message}\"`);\n                                assert.strictEqual(message.suggestions.length, error.suggestions.length, `Error should have ${error.suggestions.length} suggestions. Instead found ${message.suggestions.length} suggestions`);\n\n                                error.suggestions.forEach((expectedSuggestion, index) => {\n                                    assert.ok(\n                                        typeof expectedSuggestion === \"object\" && expectedSuggestion !== null,\n                                        \"Test suggestion in 'suggestions' array must be an object.\"\n                                    );\n                                    Object.keys(expectedSuggestion).forEach(propertyName => {\n                                        assert.ok(\n                                            suggestionObjectParameters.has(propertyName),\n                                            `Invalid suggestion property name '${propertyName}'. Expected one of ${friendlySuggestionObjectParameterList}.`\n                                        );\n                                    });\n\n                                    const actualSuggestion = message.suggestions[index];\n                                    const suggestionPrefix = `Error Suggestion at index ${index} :`;\n\n                                    if (hasOwnProperty(expectedSuggestion, \"desc\")) {\n                                        assert.ok(\n                                            !hasOwnProperty(expectedSuggestion, \"data\"),\n                                            `${suggestionPrefix} Test should not specify both 'desc' and 'data'.`\n                                        );\n                                        assert.strictEqual(\n                                            actualSuggestion.desc,\n                                            expectedSuggestion.desc,\n                                            `${suggestionPrefix} desc should be \"${expectedSuggestion.desc}\" but got \"${actualSuggestion.desc}\" instead.`\n                                        );\n                                    }\n\n                                    if (hasOwnProperty(expectedSuggestion, \"messageId\")) {\n                                        assert.ok(\n                                            ruleHasMetaMessages,\n                                            `${suggestionPrefix} Test can not use 'messageId' if rule under test doesn't define 'meta.messages'.`\n                                        );\n                                        assert.ok(\n                                            hasOwnProperty(rule.meta.messages, expectedSuggestion.messageId),\n                                            `${suggestionPrefix} Test has invalid messageId '${expectedSuggestion.messageId}', the rule under test allows only one of ${friendlyIDList}.`\n                                        );\n                                        assert.strictEqual(\n                                            actualSuggestion.messageId,\n                                            expectedSuggestion.messageId,\n                                            `${suggestionPrefix} messageId should be '${expectedSuggestion.messageId}' but got '${actualSuggestion.messageId}' instead.`\n                                        );\n                                        if (hasOwnProperty(expectedSuggestion, \"data\")) {\n                                            const unformattedMetaMessage = rule.meta.messages[expectedSuggestion.messageId];\n                                            const rehydratedDesc = interpolate(unformattedMetaMessage, expectedSuggestion.data);\n\n                                            assert.strictEqual(\n                                                actualSuggestion.desc,\n                                                rehydratedDesc,\n                                                `${suggestionPrefix} Hydrated test desc \"${rehydratedDesc}\" does not match received desc \"${actualSuggestion.desc}\".`\n                                            );\n                                        }\n                                    } else {\n                                        assert.ok(\n                                            !hasOwnProperty(expectedSuggestion, \"data\"),\n                                            `${suggestionPrefix} Test must specify 'messageId' if 'data' is used.`\n                                        );\n                                    }\n\n                                    if (hasOwnProperty(expectedSuggestion, \"output\")) {\n                                        const codeWithAppliedSuggestion = SourceCodeFixer.applyFixes(item.code, [actualSuggestion]).output;\n\n                                        assert.strictEqual(codeWithAppliedSuggestion, expectedSuggestion.output, `Expected the applied suggestion fix to match the test suggestion output for suggestion at index: ${index} on error with message: \"${message.message}\"`);\n                                    }\n                                });\n                            }\n                        }\n                    } else {\n\n                        // Message was an unexpected type\n                        assert.fail(`Error should be a string, object, or RegExp, but found (${util.inspect(message)})`);\n                    }\n                }\n            }\n\n            if (hasOwnProperty(item, \"output\")) {\n                if (item.output === null) {\n                    assert.strictEqual(\n                        result.output,\n                        item.code,\n                        \"Expected no autofixes to be suggested\"\n                    );\n                } else {\n                    assert.strictEqual(result.output, item.output, \"Output is incorrect.\");\n                }\n            } else {\n                assert.strictEqual(\n                    result.output,\n                    item.code,\n                    \"The rule fixed the code. Please add 'output' property.\"\n                );\n            }\n\n            // Rules that produce fixes must have `meta.fixable` property.\n            if (result.output !== item.code) {\n                assert.ok(\n                    hasOwnProperty(rule, \"meta\"),\n                    \"Fixable rules should export a `meta.fixable` property.\"\n                );\n\n                // Linter throws if a rule that produced a fix has `meta` but doesn't have `meta.fixable`.\n            }\n\n            assertASTDidntChange(result.beforeAST, result.afterAST);\n        }\n\n        /*\n         * This creates a mocha test suite and pipes all supplied info through\n         * one of the templates above.\n         */\n        RuleTester.describe(ruleName, () => {\n            RuleTester.describe(\"valid\", () => {\n                test.valid.forEach(valid => {\n                    RuleTester[valid.only ? \"itOnly\" : \"it\"](\n                        sanitize(typeof valid === \"object\" ? valid.code : valid),\n                        () => {\n                            testValidTemplate(valid);\n                        }\n                    );\n                });\n            });\n\n            RuleTester.describe(\"invalid\", () => {\n                test.invalid.forEach(invalid => {\n                    RuleTester[invalid.only ? \"itOnly\" : \"it\"](\n                        sanitize(invalid.code),\n                        () => {\n                            testInvalidTemplate(invalid);\n                        }\n                    );\n                });\n            });\n        });\n    }\n}\n\nRuleTester[DESCRIBE] = RuleTester[IT] = RuleTester[IT_ONLY] = null;\n\nmodule.exports = RuleTester;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}