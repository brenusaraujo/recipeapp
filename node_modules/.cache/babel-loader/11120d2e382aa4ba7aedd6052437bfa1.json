{"ast":null,"code":"/**\n * @fileoverview Rule to flag when initializing octal literal\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow octal literals\",\n      category: \"Best Practices\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-octal\"\n    },\n    schema: [],\n    messages: {\n      noOcatal: \"Octal literals should not be used.\"\n    }\n  },\n\n  create(context) {\n    return {\n      Literal(node) {\n        if (typeof node.value === \"number\" && /^0[0-9]/u.test(node.raw)) {\n          context.report({\n            node,\n            messageId: \"noOcatal\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","noOcatal","create","context","Literal","node","value","test","raw","report","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-octal.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when initializing octal literal\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow octal literals\",\n            category: \"Best Practices\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-octal\"\n        },\n\n        schema: [],\n\n        messages: {\n            noOcatal: \"Octal literals should not be used.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            Literal(node) {\n                if (typeof node.value === \"number\" && /^0[0-9]/u.test(node.raw)) {\n                    context.report({\n                        node,\n                        messageId: \"noOcatal\"\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,yBADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,QAAQ,EAAE;IADJ;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,OAAO;MAEHC,OAAO,CAACC,IAAD,EAAO;QACV,IAAI,OAAOA,IAAI,CAACC,KAAZ,KAAsB,QAAtB,IAAkC,WAAWC,IAAX,CAAgBF,IAAI,CAACG,GAArB,CAAtC,EAAiE;UAC7DL,OAAO,CAACM,MAAR,CAAe;YACXJ,IADW;YAEXK,SAAS,EAAE;UAFA,CAAf;QAIH;MACJ;;IATE,CAAP;EAYH;;AAhCY,CAAjB"},"metadata":{},"sourceType":"script"}