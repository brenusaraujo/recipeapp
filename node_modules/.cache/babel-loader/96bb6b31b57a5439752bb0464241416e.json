{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of comma operator\n * @author Brandon Mills\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst DEFAULT_OPTIONS = {\n  allowInParentheses: true\n}; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow comma operators\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-sequences\"\n    },\n    schema: [{\n      properties: {\n        allowInParentheses: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedCommaExpression: \"Unexpected use of comma operator.\"\n    }\n  },\n\n  create(context) {\n    const options = Object.assign({}, DEFAULT_OPTIONS, context.options[0]);\n    const sourceCode = context.getSourceCode();\n    /**\n     * Parts of the grammar that are required to have parens.\n     */\n\n    const parenthesized = {\n      DoWhileStatement: \"test\",\n      IfStatement: \"test\",\n      SwitchStatement: \"discriminant\",\n      WhileStatement: \"test\",\n      WithStatement: \"object\",\n      ArrowFunctionExpression: \"body\"\n      /*\n       * Omitting CallExpression - commas are parsed as argument separators\n       * Omitting NewExpression - commas are parsed as argument separators\n       * Omitting ForInStatement - parts aren't individually parenthesised\n       * Omitting ForStatement - parts aren't individually parenthesised\n       */\n\n    };\n    /**\n     * Determines whether a node is required by the grammar to be wrapped in\n     * parens, e.g. the test of an if statement.\n     * @param {ASTNode} node The AST node\n     * @returns {boolean} True if parens around node belong to parent node.\n     */\n\n    function requiresExtraParens(node) {\n      return node.parent && parenthesized[node.parent.type] && node === node.parent[parenthesized[node.parent.type]];\n    }\n    /**\n     * Check if a node is wrapped in parens.\n     * @param {ASTNode} node The AST node\n     * @returns {boolean} True if the node has a paren on each side.\n     */\n\n\n    function isParenthesised(node) {\n      return astUtils.isParenthesised(sourceCode, node);\n    }\n    /**\n     * Check if a node is wrapped in two levels of parens.\n     * @param {ASTNode} node The AST node\n     * @returns {boolean} True if two parens surround the node on each side.\n     */\n\n\n    function isParenthesisedTwice(node) {\n      const previousToken = sourceCode.getTokenBefore(node, 1),\n            nextToken = sourceCode.getTokenAfter(node, 1);\n      return isParenthesised(node) && previousToken && nextToken && astUtils.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] && astUtils.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];\n    }\n\n    return {\n      SequenceExpression(node) {\n        // Always allow sequences in for statement update\n        if (node.parent.type === \"ForStatement\" && (node === node.parent.init || node === node.parent.update)) {\n          return;\n        } // Wrapping a sequence in extra parens indicates intent\n\n\n        if (options.allowInParentheses) {\n          if (requiresExtraParens(node)) {\n            if (isParenthesisedTwice(node)) {\n              return;\n            }\n          } else {\n            if (isParenthesised(node)) {\n              return;\n            }\n          }\n        }\n\n        const firstCommaToken = sourceCode.getTokenAfter(node.expressions[0], astUtils.isCommaToken);\n        context.report({\n          node,\n          loc: firstCommaToken.loc,\n          messageId: \"unexpectedCommaExpression\"\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","DEFAULT_OPTIONS","allowInParentheses","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","default","additionalProperties","messages","unexpectedCommaExpression","create","context","options","Object","assign","sourceCode","getSourceCode","parenthesized","DoWhileStatement","IfStatement","SwitchStatement","WhileStatement","WithStatement","ArrowFunctionExpression","requiresExtraParens","node","parent","isParenthesised","isParenthesisedTwice","previousToken","getTokenBefore","nextToken","getTokenAfter","isOpeningParenToken","range","isClosingParenToken","SequenceExpression","init","update","firstCommaToken","expressions","isCommaToken","report","loc","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-sequences.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of comma operator\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst DEFAULT_OPTIONS = {\n    allowInParentheses: true\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow comma operators\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-sequences\"\n        },\n\n        schema: [{\n            properties: {\n                allowInParentheses: {\n                    type: \"boolean\",\n                    default: true\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            unexpectedCommaExpression: \"Unexpected use of comma operator.\"\n        }\n    },\n\n    create(context) {\n        const options = Object.assign({}, DEFAULT_OPTIONS, context.options[0]);\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Parts of the grammar that are required to have parens.\n         */\n        const parenthesized = {\n            DoWhileStatement: \"test\",\n            IfStatement: \"test\",\n            SwitchStatement: \"discriminant\",\n            WhileStatement: \"test\",\n            WithStatement: \"object\",\n            ArrowFunctionExpression: \"body\"\n\n            /*\n             * Omitting CallExpression - commas are parsed as argument separators\n             * Omitting NewExpression - commas are parsed as argument separators\n             * Omitting ForInStatement - parts aren't individually parenthesised\n             * Omitting ForStatement - parts aren't individually parenthesised\n             */\n        };\n\n        /**\n         * Determines whether a node is required by the grammar to be wrapped in\n         * parens, e.g. the test of an if statement.\n         * @param {ASTNode} node The AST node\n         * @returns {boolean} True if parens around node belong to parent node.\n         */\n        function requiresExtraParens(node) {\n            return node.parent && parenthesized[node.parent.type] &&\n                    node === node.parent[parenthesized[node.parent.type]];\n        }\n\n        /**\n         * Check if a node is wrapped in parens.\n         * @param {ASTNode} node The AST node\n         * @returns {boolean} True if the node has a paren on each side.\n         */\n        function isParenthesised(node) {\n            return astUtils.isParenthesised(sourceCode, node);\n        }\n\n        /**\n         * Check if a node is wrapped in two levels of parens.\n         * @param {ASTNode} node The AST node\n         * @returns {boolean} True if two parens surround the node on each side.\n         */\n        function isParenthesisedTwice(node) {\n            const previousToken = sourceCode.getTokenBefore(node, 1),\n                nextToken = sourceCode.getTokenAfter(node, 1);\n\n            return isParenthesised(node) && previousToken && nextToken &&\n                astUtils.isOpeningParenToken(previousToken) && previousToken.range[1] <= node.range[0] &&\n                astUtils.isClosingParenToken(nextToken) && nextToken.range[0] >= node.range[1];\n        }\n\n        return {\n            SequenceExpression(node) {\n\n                // Always allow sequences in for statement update\n                if (node.parent.type === \"ForStatement\" &&\n                        (node === node.parent.init || node === node.parent.update)) {\n                    return;\n                }\n\n                // Wrapping a sequence in extra parens indicates intent\n                if (options.allowInParentheses) {\n                    if (requiresExtraParens(node)) {\n                        if (isParenthesisedTwice(node)) {\n                            return;\n                        }\n                    } else {\n                        if (isParenthesised(node)) {\n                            return;\n                        }\n                    }\n                }\n\n                const firstCommaToken = sourceCode.getTokenAfter(node.expressions[0], astUtils.isCommaToken);\n\n                context.report({ node, loc: firstCommaToken.loc, messageId: \"unexpectedCommaExpression\" });\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}