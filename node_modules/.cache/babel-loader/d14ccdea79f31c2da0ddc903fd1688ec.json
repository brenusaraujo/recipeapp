{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of certain node types\n * @author Burak Yigit Kaya\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified syntax\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-syntax\"\n    },\n    schema: {\n      type: \"array\",\n      items: {\n        oneOf: [{\n          type: \"string\"\n        }, {\n          type: \"object\",\n          properties: {\n            selector: {\n              type: \"string\"\n            },\n            message: {\n              type: \"string\"\n            }\n          },\n          required: [\"selector\"],\n          additionalProperties: false\n        }]\n      },\n      uniqueItems: true,\n      minItems: 0\n    },\n    messages: {\n      // eslint-disable-next-line eslint-plugin/report-message-format\n      restrictedSyntax: \"{{message}}\"\n    }\n  },\n\n  create(context) {\n    return context.options.reduce((result, selectorOrObject) => {\n      const isStringFormat = typeof selectorOrObject === \"string\";\n      const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);\n      const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;\n      const message = hasCustomMessage ? selectorOrObject.message : `Using '${selector}' is not allowed.`;\n      return Object.assign(result, {\n        [selector](node) {\n          context.report({\n            node,\n            messageId: \"restrictedSyntax\",\n            data: {\n              message\n            }\n          });\n        }\n\n      });\n    }, {});\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","items","oneOf","properties","selector","message","required","additionalProperties","uniqueItems","minItems","messages","restrictedSyntax","create","context","options","reduce","result","selectorOrObject","isStringFormat","hasCustomMessage","Boolean","Object","assign","node","report","messageId","data"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-restricted-syntax.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of certain node types\n * @author Burak Yigit Kaya\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow specified syntax\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-syntax\"\n        },\n\n        schema: {\n            type: \"array\",\n            items: {\n                oneOf: [\n                    {\n                        type: \"string\"\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            selector: { type: \"string\" },\n                            message: { type: \"string\" }\n                        },\n                        required: [\"selector\"],\n                        additionalProperties: false\n                    }\n                ]\n            },\n            uniqueItems: true,\n            minItems: 0\n        },\n\n        messages: {\n            // eslint-disable-next-line eslint-plugin/report-message-format\n            restrictedSyntax: \"{{message}}\"\n        }\n    },\n\n    create(context) {\n        return context.options.reduce((result, selectorOrObject) => {\n            const isStringFormat = (typeof selectorOrObject === \"string\");\n            const hasCustomMessage = !isStringFormat && Boolean(selectorOrObject.message);\n\n            const selector = isStringFormat ? selectorOrObject : selectorOrObject.selector;\n            const message = hasCustomMessage ? selectorOrObject.message : `Using '${selector}' is not allowed.`;\n\n            return Object.assign(result, {\n                [selector](node) {\n                    context.report({\n                        node,\n                        messageId: \"restrictedSyntax\",\n                        data: { message }\n                    });\n                }\n            });\n        }, {});\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,2BADX;MAEFC,QAAQ,EAAE,kBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE;MACJN,IAAI,EAAE,OADF;MAEJO,KAAK,EAAE;QACHC,KAAK,EAAE,CACH;UACIR,IAAI,EAAE;QADV,CADG,EAIH;UACIA,IAAI,EAAE,QADV;UAEIS,UAAU,EAAE;YACRC,QAAQ,EAAE;cAAEV,IAAI,EAAE;YAAR,CADF;YAERW,OAAO,EAAE;cAAEX,IAAI,EAAE;YAAR;UAFD,CAFhB;UAMIY,QAAQ,EAAE,CAAC,UAAD,CANd;UAOIC,oBAAoB,EAAE;QAP1B,CAJG;MADJ,CAFH;MAkBJC,WAAW,EAAE,IAlBT;MAmBJC,QAAQ,EAAE;IAnBN,CAVN;IAgCFC,QAAQ,EAAE;MACN;MACAC,gBAAgB,EAAE;IAFZ;EAhCR,CADO;;EAuCbC,MAAM,CAACC,OAAD,EAAU;IACZ,OAAOA,OAAO,CAACC,OAAR,CAAgBC,MAAhB,CAAuB,CAACC,MAAD,EAASC,gBAAT,KAA8B;MACxD,MAAMC,cAAc,GAAI,OAAOD,gBAAP,KAA4B,QAApD;MACA,MAAME,gBAAgB,GAAG,CAACD,cAAD,IAAmBE,OAAO,CAACH,gBAAgB,CAACZ,OAAlB,CAAnD;MAEA,MAAMD,QAAQ,GAAGc,cAAc,GAAGD,gBAAH,GAAsBA,gBAAgB,CAACb,QAAtE;MACA,MAAMC,OAAO,GAAGc,gBAAgB,GAAGF,gBAAgB,CAACZ,OAApB,GAA+B,UAASD,QAAS,mBAAjF;MAEA,OAAOiB,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsB;QACzB,CAACZ,QAAD,EAAWmB,IAAX,EAAiB;UACbV,OAAO,CAACW,MAAR,CAAe;YACXD,IADW;YAEXE,SAAS,EAAE,kBAFA;YAGXC,IAAI,EAAE;cAAErB;YAAF;UAHK,CAAf;QAKH;;MAPwB,CAAtB,CAAP;IASH,CAhBM,EAgBJ,EAhBI,CAAP;EAkBH;;AA1DY,CAAjB"},"metadata":{},"sourceType":"script"}