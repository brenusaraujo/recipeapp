{"ast":null,"code":"/**\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require parenthesis around regex literals\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/wrap-regex\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      requireParens: \"Wrap the regexp literal in parens to disambiguate the slash.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      Literal(node) {\n        const token = sourceCode.getFirstToken(node),\n              nodeType = token.type;\n\n        if (nodeType === \"RegularExpression\") {\n          const beforeToken = sourceCode.getTokenBefore(node);\n          const afterToken = sourceCode.getTokenAfter(node);\n          const ancestors = context.getAncestors();\n          const grandparent = ancestors[ancestors.length - 1];\n\n          if (grandparent.type === \"MemberExpression\" && grandparent.object === node && !(beforeToken && beforeToken.value === \"(\" && afterToken && afterToken.value === \")\")) {\n            context.report({\n              node,\n              messageId: \"requireParens\",\n              fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","requireParens","create","context","sourceCode","getSourceCode","Literal","node","token","getFirstToken","nodeType","beforeToken","getTokenBefore","afterToken","getTokenAfter","ancestors","getAncestors","grandparent","length","object","value","report","messageId","fix","fixer","replaceText","getText"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/wrap-regex.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when regex literals are not wrapped in parens\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require parenthesis around regex literals\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/wrap-regex\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            requireParens: \"Wrap the regexp literal in parens to disambiguate the slash.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n\n            Literal(node) {\n                const token = sourceCode.getFirstToken(node),\n                    nodeType = token.type;\n\n                if (nodeType === \"RegularExpression\") {\n                    const beforeToken = sourceCode.getTokenBefore(node);\n                    const afterToken = sourceCode.getTokenAfter(node);\n                    const ancestors = context.getAncestors();\n                    const grandparent = ancestors[ancestors.length - 1];\n\n                    if (grandparent.type === \"MemberExpression\" && grandparent.object === node &&\n                        !(beforeToken && beforeToken.value === \"(\" && afterToken && afterToken.value === \")\")) {\n                        context.report({\n                            node,\n                            messageId: \"requireParens\",\n                            fix: fixer => fixer.replaceText(node, `(${sourceCode.getText(node)})`)\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,2CADX;MAEFC,QAAQ,EAAE,kBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAWFC,OAAO,EAAE,MAXP;IAaFC,QAAQ,EAAE;MACNC,aAAa,EAAE;IADT;EAbR,CADO;;EAmBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IAEA,OAAO;MAEHC,OAAO,CAACC,IAAD,EAAO;QACV,MAAMC,KAAK,GAAGJ,UAAU,CAACK,aAAX,CAAyBF,IAAzB,CAAd;QAAA,MACIG,QAAQ,GAAGF,KAAK,CAAChB,IADrB;;QAGA,IAAIkB,QAAQ,KAAK,mBAAjB,EAAsC;UAClC,MAAMC,WAAW,GAAGP,UAAU,CAACQ,cAAX,CAA0BL,IAA1B,CAApB;UACA,MAAMM,UAAU,GAAGT,UAAU,CAACU,aAAX,CAAyBP,IAAzB,CAAnB;UACA,MAAMQ,SAAS,GAAGZ,OAAO,CAACa,YAAR,EAAlB;UACA,MAAMC,WAAW,GAAGF,SAAS,CAACA,SAAS,CAACG,MAAV,GAAmB,CAApB,CAA7B;;UAEA,IAAID,WAAW,CAACzB,IAAZ,KAAqB,kBAArB,IAA2CyB,WAAW,CAACE,MAAZ,KAAuBZ,IAAlE,IACA,EAAEI,WAAW,IAAIA,WAAW,CAACS,KAAZ,KAAsB,GAArC,IAA4CP,UAA5C,IAA0DA,UAAU,CAACO,KAAX,KAAqB,GAAjF,CADJ,EAC2F;YACvFjB,OAAO,CAACkB,MAAR,CAAe;cACXd,IADW;cAEXe,SAAS,EAAE,eAFA;cAGXC,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,WAAN,CAAkBlB,IAAlB,EAAyB,IAAGH,UAAU,CAACsB,OAAX,CAAmBnB,IAAnB,CAAyB,GAArD;YAHH,CAAf;UAKH;QACJ;MACJ;;IArBE,CAAP;EAwBH;;AA9CY,CAAjB"},"metadata":{},"sourceType":"script"}