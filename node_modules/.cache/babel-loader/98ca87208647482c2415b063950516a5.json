{"ast":null,"code":"/**\n * @fileoverview Rule to flag for-in loops without if statements inside\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `for-in` loops to include an `if` statement\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/guard-for-in\"\n    },\n    schema: [],\n    messages: {\n      wrap: \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\"\n    }\n  },\n\n  create(context) {\n    return {\n      ForInStatement(node) {\n        const body = node.body; // empty statement\n\n        if (body.type === \"EmptyStatement\") {\n          return;\n        } // if statement\n\n\n        if (body.type === \"IfStatement\") {\n          return;\n        } // empty block\n\n\n        if (body.type === \"BlockStatement\" && body.body.length === 0) {\n          return;\n        } // block with just if statement\n\n\n        if (body.type === \"BlockStatement\" && body.body.length === 1 && body.body[0].type === \"IfStatement\") {\n          return;\n        } // block that starts with if statement\n\n\n        if (body.type === \"BlockStatement\" && body.body.length >= 1 && body.body[0].type === \"IfStatement\") {\n          const i = body.body[0]; // ... whose consequent is a continue\n\n          if (i.consequent.type === \"ContinueStatement\") {\n            return;\n          } // ... whose consequent is a block that contains only a continue\n\n\n          if (i.consequent.type === \"BlockStatement\" && i.consequent.body.length === 1 && i.consequent.body[0].type === \"ContinueStatement\") {\n            return;\n          }\n        }\n\n        context.report({\n          node,\n          messageId: \"wrap\"\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","wrap","create","context","ForInStatement","node","body","length","i","consequent","report","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/guard-for-in.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag for-in loops without if statements inside\n * @author Nicholas C. Zakas\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `for-in` loops to include an `if` statement\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/guard-for-in\"\n        },\n\n        schema: [],\n        messages: {\n            wrap: \"The body of a for-in should be wrapped in an if statement to filter unwanted properties from the prototype.\"\n        }\n    },\n\n    create(context) {\n\n        return {\n\n            ForInStatement(node) {\n                const body = node.body;\n\n                // empty statement\n                if (body.type === \"EmptyStatement\") {\n                    return;\n                }\n\n                // if statement\n                if (body.type === \"IfStatement\") {\n                    return;\n                }\n\n                // empty block\n                if (body.type === \"BlockStatement\" && body.body.length === 0) {\n                    return;\n                }\n\n                // block with just if statement\n                if (body.type === \"BlockStatement\" && body.body.length === 1 && body.body[0].type === \"IfStatement\") {\n                    return;\n                }\n\n                // block that starts with if statement\n                if (body.type === \"BlockStatement\" && body.body.length >= 1 && body.body[0].type === \"IfStatement\") {\n                    const i = body.body[0];\n\n                    // ... whose consequent is a continue\n                    if (i.consequent.type === \"ContinueStatement\") {\n                        return;\n                    }\n\n                    // ... whose consequent is a block that contains only a continue\n                    if (i.consequent.type === \"BlockStatement\" && i.consequent.body.length === 1 && i.consequent.body[0].type === \"ContinueStatement\") {\n                        return;\n                    }\n                }\n\n                context.report({ node, messageId: \"wrap\" });\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,qDADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAWFC,QAAQ,EAAE;MACNC,IAAI,EAAE;IADA;EAXR,CADO;;EAiBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,OAAO;MAEHC,cAAc,CAACC,IAAD,EAAO;QACjB,MAAMC,IAAI,GAAGD,IAAI,CAACC,IAAlB,CADiB,CAGjB;;QACA,IAAIA,IAAI,CAACb,IAAL,KAAc,gBAAlB,EAAoC;UAChC;QACH,CANgB,CAQjB;;;QACA,IAAIa,IAAI,CAACb,IAAL,KAAc,aAAlB,EAAiC;UAC7B;QACH,CAXgB,CAajB;;;QACA,IAAIa,IAAI,CAACb,IAAL,KAAc,gBAAd,IAAkCa,IAAI,CAACA,IAAL,CAAUC,MAAV,KAAqB,CAA3D,EAA8D;UAC1D;QACH,CAhBgB,CAkBjB;;;QACA,IAAID,IAAI,CAACb,IAAL,KAAc,gBAAd,IAAkCa,IAAI,CAACA,IAAL,CAAUC,MAAV,KAAqB,CAAvD,IAA4DD,IAAI,CAACA,IAAL,CAAU,CAAV,EAAab,IAAb,KAAsB,aAAtF,EAAqG;UACjG;QACH,CArBgB,CAuBjB;;;QACA,IAAIa,IAAI,CAACb,IAAL,KAAc,gBAAd,IAAkCa,IAAI,CAACA,IAAL,CAAUC,MAAV,IAAoB,CAAtD,IAA2DD,IAAI,CAACA,IAAL,CAAU,CAAV,EAAab,IAAb,KAAsB,aAArF,EAAoG;UAChG,MAAMe,CAAC,GAAGF,IAAI,CAACA,IAAL,CAAU,CAAV,CAAV,CADgG,CAGhG;;UACA,IAAIE,CAAC,CAACC,UAAF,CAAahB,IAAb,KAAsB,mBAA1B,EAA+C;YAC3C;UACH,CAN+F,CAQhG;;;UACA,IAAIe,CAAC,CAACC,UAAF,CAAahB,IAAb,KAAsB,gBAAtB,IAA0Ce,CAAC,CAACC,UAAF,CAAaH,IAAb,CAAkBC,MAAlB,KAA6B,CAAvE,IAA4EC,CAAC,CAACC,UAAF,CAAaH,IAAb,CAAkB,CAAlB,EAAqBb,IAArB,KAA8B,mBAA9G,EAAmI;YAC/H;UACH;QACJ;;QAEDU,OAAO,CAACO,MAAR,CAAe;UAAEL,IAAF;UAAQM,SAAS,EAAE;QAAnB,CAAf;MACH;;IAzCE,CAAP;EA4CH;;AA/DY,CAAjB"},"metadata":{},"sourceType":"script"}