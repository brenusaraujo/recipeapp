{"ast":null,"code":"/**\n * @fileoverview Rule to disallow `\\8` and `\\9` escape sequences in string literals.\n * @author Milos Djermanovic\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst QUICK_TEST_REGEX = /\\\\[89]/u;\n/**\n * Returns unicode escape sequence that represents the given character.\n * @param {string} character A single code unit.\n * @returns {string} \"\\uXXXX\" sequence.\n */\n\nfunction getUnicodeEscape(character) {\n  return `\\\\u${character.charCodeAt(0).toString(16).padStart(4, \"0\")}`;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `\\\\8` and `\\\\9` escape sequences in string literals\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-nonoctal-decimal-escape\",\n      suggestion: true\n    },\n    schema: [],\n    messages: {\n      decimalEscape: \"Don't use '{{decimalEscape}}' escape sequence.\",\n      // suggestions\n      refactor: \"Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.\",\n      escapeBackslash: \"Replace '{{original}}' with '{{replacement}}' to include the actual backslash character.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\n     * Creates a new Suggestion object.\n     * @param {string} messageId \"refactor\" or \"escapeBackslash\".\n     * @param {int[]} range The range to replace.\n     * @param {string} replacement New text for the range.\n     * @returns {Object} Suggestion\n     */\n\n    function createSuggestion(messageId, range, replacement) {\n      return {\n        messageId,\n        data: {\n          original: sourceCode.getText().slice(...range),\n          replacement\n        },\n\n        fix(fixer) {\n          return fixer.replaceTextRange(range, replacement);\n        }\n\n      };\n    }\n\n    return {\n      Literal(node) {\n        if (typeof node.value !== \"string\") {\n          return;\n        }\n\n        if (!QUICK_TEST_REGEX.test(node.raw)) {\n          return;\n        }\n\n        const regex = /(?:[^\\\\]|(?<previousEscape>\\\\.))*?(?<decimalEscape>\\\\[89])/suy;\n        let match;\n\n        while (match = regex.exec(node.raw)) {\n          const {\n            previousEscape,\n            decimalEscape\n          } = match.groups;\n          const decimalEscapeRangeEnd = node.range[0] + match.index + match[0].length;\n          const decimalEscapeRangeStart = decimalEscapeRangeEnd - decimalEscape.length;\n          const decimalEscapeRange = [decimalEscapeRangeStart, decimalEscapeRangeEnd];\n          const suggest = []; // When `regex` is matched, `previousEscape` can only capture characters adjacent to `decimalEscape`\n\n          if (previousEscape === \"\\\\0\") {\n            /*\n             * Now we have a NULL escape \"\\0\" immediately followed by a decimal escape, e.g.: \"\\0\\8\".\n             * Fixing this to \"\\08\" would turn \"\\0\" into a legacy octal escape. To avoid producing\n             * an octal escape while fixing a decimal escape, we provide different suggestions.\n             */\n            suggest.push(createSuggestion( // \"\\0\\8\" -> \"\\u00008\"\n            \"refactor\", [decimalEscapeRangeStart - previousEscape.length, decimalEscapeRangeEnd], `${getUnicodeEscape(\"\\0\")}${decimalEscape[1]}`), createSuggestion( // \"\\8\" -> \"\\u0038\"\n            \"refactor\", decimalEscapeRange, getUnicodeEscape(decimalEscape[1])));\n          } else {\n            suggest.push(createSuggestion( // \"\\8\" -> \"8\"\n            \"refactor\", decimalEscapeRange, decimalEscape[1]));\n          }\n\n          suggest.push(createSuggestion( // \"\\8\" -> \"\\\\8\"\n          \"escapeBackslash\", decimalEscapeRange, `\\\\${decimalEscape}`));\n          context.report({\n            node,\n            loc: {\n              start: sourceCode.getLocFromIndex(decimalEscapeRangeStart),\n              end: sourceCode.getLocFromIndex(decimalEscapeRangeEnd)\n            },\n            messageId: \"decimalEscape\",\n            data: {\n              decimalEscape\n            },\n            suggest\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["QUICK_TEST_REGEX","getUnicodeEscape","character","charCodeAt","toString","padStart","module","exports","meta","type","docs","description","category","recommended","url","suggestion","schema","messages","decimalEscape","refactor","escapeBackslash","create","context","sourceCode","getSourceCode","createSuggestion","messageId","range","replacement","data","original","getText","slice","fix","fixer","replaceTextRange","Literal","node","value","test","raw","regex","match","exec","previousEscape","groups","decimalEscapeRangeEnd","index","length","decimalEscapeRangeStart","decimalEscapeRange","suggest","push","report","loc","start","getLocFromIndex","end"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-nonoctal-decimal-escape.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow `\\8` and `\\9` escape sequences in string literals.\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst QUICK_TEST_REGEX = /\\\\[89]/u;\n\n/**\n * Returns unicode escape sequence that represents the given character.\n * @param {string} character A single code unit.\n * @returns {string} \"\\uXXXX\" sequence.\n */\nfunction getUnicodeEscape(character) {\n    return `\\\\u${character.charCodeAt(0).toString(16).padStart(4, \"0\")}`;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `\\\\8` and `\\\\9` escape sequences in string literals\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-nonoctal-decimal-escape\",\n            suggestion: true\n        },\n\n        schema: [],\n\n        messages: {\n            decimalEscape: \"Don't use '{{decimalEscape}}' escape sequence.\",\n\n            // suggestions\n            refactor: \"Replace '{{original}}' with '{{replacement}}'. This maintains the current functionality.\",\n            escapeBackslash: \"Replace '{{original}}' with '{{replacement}}' to include the actual backslash character.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Creates a new Suggestion object.\n         * @param {string} messageId \"refactor\" or \"escapeBackslash\".\n         * @param {int[]} range The range to replace.\n         * @param {string} replacement New text for the range.\n         * @returns {Object} Suggestion\n         */\n        function createSuggestion(messageId, range, replacement) {\n            return {\n                messageId,\n                data: {\n                    original: sourceCode.getText().slice(...range),\n                    replacement\n                },\n                fix(fixer) {\n                    return fixer.replaceTextRange(range, replacement);\n                }\n            };\n        }\n\n        return {\n            Literal(node) {\n                if (typeof node.value !== \"string\") {\n                    return;\n                }\n\n                if (!QUICK_TEST_REGEX.test(node.raw)) {\n                    return;\n                }\n\n                const regex = /(?:[^\\\\]|(?<previousEscape>\\\\.))*?(?<decimalEscape>\\\\[89])/suy;\n                let match;\n\n                while ((match = regex.exec(node.raw))) {\n                    const { previousEscape, decimalEscape } = match.groups;\n                    const decimalEscapeRangeEnd = node.range[0] + match.index + match[0].length;\n                    const decimalEscapeRangeStart = decimalEscapeRangeEnd - decimalEscape.length;\n                    const decimalEscapeRange = [decimalEscapeRangeStart, decimalEscapeRangeEnd];\n                    const suggest = [];\n\n                    // When `regex` is matched, `previousEscape` can only capture characters adjacent to `decimalEscape`\n                    if (previousEscape === \"\\\\0\") {\n\n                        /*\n                         * Now we have a NULL escape \"\\0\" immediately followed by a decimal escape, e.g.: \"\\0\\8\".\n                         * Fixing this to \"\\08\" would turn \"\\0\" into a legacy octal escape. To avoid producing\n                         * an octal escape while fixing a decimal escape, we provide different suggestions.\n                         */\n                        suggest.push(\n                            createSuggestion( // \"\\0\\8\" -> \"\\u00008\"\n                                \"refactor\",\n                                [decimalEscapeRangeStart - previousEscape.length, decimalEscapeRangeEnd],\n                                `${getUnicodeEscape(\"\\0\")}${decimalEscape[1]}`\n                            ),\n                            createSuggestion( // \"\\8\" -> \"\\u0038\"\n                                \"refactor\",\n                                decimalEscapeRange,\n                                getUnicodeEscape(decimalEscape[1])\n                            )\n                        );\n                    } else {\n                        suggest.push(\n                            createSuggestion( // \"\\8\" -> \"8\"\n                                \"refactor\",\n                                decimalEscapeRange,\n                                decimalEscape[1]\n                            )\n                        );\n                    }\n\n                    suggest.push(\n                        createSuggestion( // \"\\8\" -> \"\\\\8\"\n                            \"escapeBackslash\",\n                            decimalEscapeRange,\n                            `\\\\${decimalEscape}`\n                        )\n                    );\n\n                    context.report({\n                        node,\n                        loc: {\n                            start: sourceCode.getLocFromIndex(decimalEscapeRangeStart),\n                            end: sourceCode.getLocFromIndex(decimalEscapeRangeEnd)\n                        },\n                        messageId: \"decimalEscape\",\n                        data: {\n                            decimalEscape\n                        },\n                        suggest\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}