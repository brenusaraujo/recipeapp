{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of duplicate keys in an object.\n * @author Ian Christian Myers\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst GET_KIND = /^(?:init|get)$/u;\nconst SET_KIND = /^(?:init|set)$/u;\n/**\n * The class which stores properties' information of an object.\n */\n\nclass ObjectInfo {\n  // eslint-disable-next-line jsdoc/require-description\n\n  /**\n   * @param {ObjectInfo|null} upper The information of the outer object.\n   * @param {ASTNode} node The ObjectExpression node of this information.\n   */\n  constructor(upper, node) {\n    this.upper = upper;\n    this.node = node;\n    this.properties = new Map();\n  }\n  /**\n   * Gets the information of the given Property node.\n   * @param {ASTNode} node The Property node to get.\n   * @returns {{get: boolean, set: boolean}} The information of the property.\n   */\n\n\n  getPropertyInfo(node) {\n    const name = astUtils.getStaticPropertyName(node);\n\n    if (!this.properties.has(name)) {\n      this.properties.set(name, {\n        get: false,\n        set: false\n      });\n    }\n\n    return this.properties.get(name);\n  }\n  /**\n   * Checks whether the given property has been defined already or not.\n   * @param {ASTNode} node The Property node to check.\n   * @returns {boolean} `true` if the property has been defined.\n   */\n\n\n  isPropertyDefined(node) {\n    const entry = this.getPropertyInfo(node);\n    return GET_KIND.test(node.kind) && entry.get || SET_KIND.test(node.kind) && entry.set;\n  }\n  /**\n   * Defines the given property.\n   * @param {ASTNode} node The Property node to define.\n   * @returns {void}\n   */\n\n\n  defineProperty(node) {\n    const entry = this.getPropertyInfo(node);\n\n    if (GET_KIND.test(node.kind)) {\n      entry.get = true;\n    }\n\n    if (SET_KIND.test(node.kind)) {\n      entry.set = true;\n    }\n  }\n\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate keys in object literals\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-dupe-keys\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate key '{{name}}'.\"\n    }\n  },\n\n  create(context) {\n    let info = null;\n    return {\n      ObjectExpression(node) {\n        info = new ObjectInfo(info, node);\n      },\n\n      \"ObjectExpression:exit\"() {\n        info = info.upper;\n      },\n\n      Property(node) {\n        const name = astUtils.getStaticPropertyName(node); // Skip destructuring.\n\n        if (node.parent.type !== \"ObjectExpression\") {\n          return;\n        } // Skip if the name is not static.\n\n\n        if (name === null) {\n          return;\n        } // Reports if the name is defined already.\n\n\n        if (info.isPropertyDefined(node)) {\n          context.report({\n            node: info.node,\n            loc: node.key.loc,\n            messageId: \"unexpected\",\n            data: {\n              name\n            }\n          });\n        } // Update info.\n\n\n        info.defineProperty(node);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","GET_KIND","SET_KIND","ObjectInfo","constructor","upper","node","properties","Map","getPropertyInfo","name","getStaticPropertyName","has","set","get","isPropertyDefined","entry","test","kind","defineProperty","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","info","ObjectExpression","Property","parent","report","loc","key","messageId","data"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-dupe-keys.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of duplicate keys in an object.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst GET_KIND = /^(?:init|get)$/u;\nconst SET_KIND = /^(?:init|set)$/u;\n\n/**\n * The class which stores properties' information of an object.\n */\nclass ObjectInfo {\n\n    // eslint-disable-next-line jsdoc/require-description\n    /**\n     * @param {ObjectInfo|null} upper The information of the outer object.\n     * @param {ASTNode} node The ObjectExpression node of this information.\n     */\n    constructor(upper, node) {\n        this.upper = upper;\n        this.node = node;\n        this.properties = new Map();\n    }\n\n    /**\n     * Gets the information of the given Property node.\n     * @param {ASTNode} node The Property node to get.\n     * @returns {{get: boolean, set: boolean}} The information of the property.\n     */\n    getPropertyInfo(node) {\n        const name = astUtils.getStaticPropertyName(node);\n\n        if (!this.properties.has(name)) {\n            this.properties.set(name, { get: false, set: false });\n        }\n        return this.properties.get(name);\n    }\n\n    /**\n     * Checks whether the given property has been defined already or not.\n     * @param {ASTNode} node The Property node to check.\n     * @returns {boolean} `true` if the property has been defined.\n     */\n    isPropertyDefined(node) {\n        const entry = this.getPropertyInfo(node);\n\n        return (\n            (GET_KIND.test(node.kind) && entry.get) ||\n            (SET_KIND.test(node.kind) && entry.set)\n        );\n    }\n\n    /**\n     * Defines the given property.\n     * @param {ASTNode} node The Property node to define.\n     * @returns {void}\n     */\n    defineProperty(node) {\n        const entry = this.getPropertyInfo(node);\n\n        if (GET_KIND.test(node.kind)) {\n            entry.get = true;\n        }\n        if (SET_KIND.test(node.kind)) {\n            entry.set = true;\n        }\n    }\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow duplicate keys in object literals\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-dupe-keys\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate key '{{name}}'.\"\n        }\n    },\n\n    create(context) {\n        let info = null;\n\n        return {\n            ObjectExpression(node) {\n                info = new ObjectInfo(info, node);\n            },\n            \"ObjectExpression:exit\"() {\n                info = info.upper;\n            },\n\n            Property(node) {\n                const name = astUtils.getStaticPropertyName(node);\n\n                // Skip destructuring.\n                if (node.parent.type !== \"ObjectExpression\") {\n                    return;\n                }\n\n                // Skip if the name is not static.\n                if (name === null) {\n                    return;\n                }\n\n                // Reports if the name is defined already.\n                if (info.isPropertyDefined(node)) {\n                    context.report({\n                        node: info.node,\n                        loc: node.key.loc,\n                        messageId: \"unexpected\",\n                        data: { name }\n                    });\n                }\n\n                // Update info.\n                info.defineProperty(node);\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}