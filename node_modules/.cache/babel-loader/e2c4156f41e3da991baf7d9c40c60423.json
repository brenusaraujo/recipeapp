{"ast":null,"code":"/**\n * @fileoverview Require spaces around infix operators\n * @author Michael Ficarra\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require spacing around infix operators\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/space-infix-ops\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        int32Hint: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingSpace: \"Operator '{{operator}}' must be spaced.\"\n    }\n  },\n\n  create(context) {\n    const int32Hint = context.options[0] ? context.options[0].int32Hint === true : false;\n    const sourceCode = context.getSourceCode();\n    /**\n     * Returns the first token which violates the rule\n     * @param {ASTNode} left The left node of the main node\n     * @param {ASTNode} right The right node of the main node\n     * @param {string} op The operator of the main node\n     * @returns {Object} The violator token or null\n     * @private\n     */\n\n    function getFirstNonSpacedToken(left, right, op) {\n      const operator = sourceCode.getFirstTokenBetween(left, right, token => token.value === op);\n      const prev = sourceCode.getTokenBefore(operator);\n      const next = sourceCode.getTokenAfter(operator);\n\n      if (!sourceCode.isSpaceBetweenTokens(prev, operator) || !sourceCode.isSpaceBetweenTokens(operator, next)) {\n        return operator;\n      }\n\n      return null;\n    }\n    /**\n     * Reports an AST node as a rule violation\n     * @param {ASTNode} mainNode The node to report\n     * @param {Object} culpritToken The token which has a problem\n     * @returns {void}\n     * @private\n     */\n\n\n    function report(mainNode, culpritToken) {\n      context.report({\n        node: mainNode,\n        loc: culpritToken.loc,\n        messageId: \"missingSpace\",\n        data: {\n          operator: culpritToken.value\n        },\n\n        fix(fixer) {\n          const previousToken = sourceCode.getTokenBefore(culpritToken);\n          const afterToken = sourceCode.getTokenAfter(culpritToken);\n          let fixString = \"\";\n\n          if (culpritToken.range[0] - previousToken.range[1] === 0) {\n            fixString = \" \";\n          }\n\n          fixString += culpritToken.value;\n\n          if (afterToken.range[0] - culpritToken.range[1] === 0) {\n            fixString += \" \";\n          }\n\n          return fixer.replaceText(culpritToken, fixString);\n        }\n\n      });\n    }\n    /**\n     * Check if the node is binary then report\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkBinary(node) {\n      const leftNode = node.left.typeAnnotation ? node.left.typeAnnotation : node.left;\n      const rightNode = node.right; // search for = in AssignmentPattern nodes\n\n      const operator = node.operator || \"=\";\n      const nonSpacedNode = getFirstNonSpacedToken(leftNode, rightNode, operator);\n\n      if (nonSpacedNode) {\n        if (!(int32Hint && sourceCode.getText(node).endsWith(\"|0\"))) {\n          report(node, nonSpacedNode);\n        }\n      }\n    }\n    /**\n     * Check if the node is conditional\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkConditional(node) {\n      const nonSpacedConsequentNode = getFirstNonSpacedToken(node.test, node.consequent, \"?\");\n      const nonSpacedAlternateNode = getFirstNonSpacedToken(node.consequent, node.alternate, \":\");\n\n      if (nonSpacedConsequentNode) {\n        report(node, nonSpacedConsequentNode);\n      }\n\n      if (nonSpacedAlternateNode) {\n        report(node, nonSpacedAlternateNode);\n      }\n    }\n    /**\n     * Check if the node is a variable\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkVar(node) {\n      const leftNode = node.id.typeAnnotation ? node.id.typeAnnotation : node.id;\n      const rightNode = node.init;\n\n      if (rightNode) {\n        const nonSpacedNode = getFirstNonSpacedToken(leftNode, rightNode, \"=\");\n\n        if (nonSpacedNode) {\n          report(node, nonSpacedNode);\n        }\n      }\n    }\n\n    return {\n      AssignmentExpression: checkBinary,\n      AssignmentPattern: checkBinary,\n      BinaryExpression: checkBinary,\n      LogicalExpression: checkBinary,\n      ConditionalExpression: checkConditional,\n      VariableDeclarator: checkVar\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","int32Hint","default","additionalProperties","messages","missingSpace","create","context","options","sourceCode","getSourceCode","getFirstNonSpacedToken","left","right","op","operator","getFirstTokenBetween","token","value","prev","getTokenBefore","next","getTokenAfter","isSpaceBetweenTokens","report","mainNode","culpritToken","node","loc","messageId","data","fix","fixer","previousToken","afterToken","fixString","range","replaceText","checkBinary","leftNode","typeAnnotation","rightNode","nonSpacedNode","getText","endsWith","checkConditional","nonSpacedConsequentNode","test","consequent","nonSpacedAlternateNode","alternate","checkVar","id","init","AssignmentExpression","AssignmentPattern","BinaryExpression","LogicalExpression","ConditionalExpression","VariableDeclarator"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/space-infix-ops.js"],"sourcesContent":["/**\n * @fileoverview Require spaces around infix operators\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require spacing around infix operators\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/space-infix-ops\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    int32Hint: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            missingSpace: \"Operator '{{operator}}' must be spaced.\"\n        }\n    },\n\n    create(context) {\n        const int32Hint = context.options[0] ? context.options[0].int32Hint === true : false;\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Returns the first token which violates the rule\n         * @param {ASTNode} left The left node of the main node\n         * @param {ASTNode} right The right node of the main node\n         * @param {string} op The operator of the main node\n         * @returns {Object} The violator token or null\n         * @private\n         */\n        function getFirstNonSpacedToken(left, right, op) {\n            const operator = sourceCode.getFirstTokenBetween(left, right, token => token.value === op);\n            const prev = sourceCode.getTokenBefore(operator);\n            const next = sourceCode.getTokenAfter(operator);\n\n            if (!sourceCode.isSpaceBetweenTokens(prev, operator) || !sourceCode.isSpaceBetweenTokens(operator, next)) {\n                return operator;\n            }\n\n            return null;\n        }\n\n        /**\n         * Reports an AST node as a rule violation\n         * @param {ASTNode} mainNode The node to report\n         * @param {Object} culpritToken The token which has a problem\n         * @returns {void}\n         * @private\n         */\n        function report(mainNode, culpritToken) {\n            context.report({\n                node: mainNode,\n                loc: culpritToken.loc,\n                messageId: \"missingSpace\",\n                data: {\n                    operator: culpritToken.value\n                },\n                fix(fixer) {\n                    const previousToken = sourceCode.getTokenBefore(culpritToken);\n                    const afterToken = sourceCode.getTokenAfter(culpritToken);\n                    let fixString = \"\";\n\n                    if (culpritToken.range[0] - previousToken.range[1] === 0) {\n                        fixString = \" \";\n                    }\n\n                    fixString += culpritToken.value;\n\n                    if (afterToken.range[0] - culpritToken.range[1] === 0) {\n                        fixString += \" \";\n                    }\n\n                    return fixer.replaceText(culpritToken, fixString);\n                }\n            });\n        }\n\n        /**\n         * Check if the node is binary then report\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkBinary(node) {\n            const leftNode = (node.left.typeAnnotation) ? node.left.typeAnnotation : node.left;\n            const rightNode = node.right;\n\n            // search for = in AssignmentPattern nodes\n            const operator = node.operator || \"=\";\n\n            const nonSpacedNode = getFirstNonSpacedToken(leftNode, rightNode, operator);\n\n            if (nonSpacedNode) {\n                if (!(int32Hint && sourceCode.getText(node).endsWith(\"|0\"))) {\n                    report(node, nonSpacedNode);\n                }\n            }\n        }\n\n        /**\n         * Check if the node is conditional\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkConditional(node) {\n            const nonSpacedConsequentNode = getFirstNonSpacedToken(node.test, node.consequent, \"?\");\n            const nonSpacedAlternateNode = getFirstNonSpacedToken(node.consequent, node.alternate, \":\");\n\n            if (nonSpacedConsequentNode) {\n                report(node, nonSpacedConsequentNode);\n            }\n\n            if (nonSpacedAlternateNode) {\n                report(node, nonSpacedAlternateNode);\n            }\n        }\n\n        /**\n         * Check if the node is a variable\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkVar(node) {\n            const leftNode = (node.id.typeAnnotation) ? node.id.typeAnnotation : node.id;\n            const rightNode = node.init;\n\n            if (rightNode) {\n                const nonSpacedNode = getFirstNonSpacedToken(leftNode, rightNode, \"=\");\n\n                if (nonSpacedNode) {\n                    report(node, nonSpacedNode);\n                }\n            }\n        }\n\n        return {\n            AssignmentExpression: checkBinary,\n            AssignmentPattern: checkBinary,\n            BinaryExpression: checkBinary,\n            LogicalExpression: checkBinary,\n            ConditionalExpression: checkConditional,\n            VariableDeclarator: checkVar\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}