{"ast":null,"code":"/**\n * @fileoverview Rule to check for max length on a line.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst OPTIONS_SCHEMA = {\n  type: \"object\",\n  properties: {\n    code: {\n      type: \"integer\",\n      minimum: 0\n    },\n    comments: {\n      type: \"integer\",\n      minimum: 0\n    },\n    tabWidth: {\n      type: \"integer\",\n      minimum: 0\n    },\n    ignorePattern: {\n      type: \"string\"\n    },\n    ignoreComments: {\n      type: \"boolean\"\n    },\n    ignoreStrings: {\n      type: \"boolean\"\n    },\n    ignoreUrls: {\n      type: \"boolean\"\n    },\n    ignoreTemplateLiterals: {\n      type: \"boolean\"\n    },\n    ignoreRegExpLiterals: {\n      type: \"boolean\"\n    },\n    ignoreTrailingComments: {\n      type: \"boolean\"\n    }\n  },\n  additionalProperties: false\n};\nconst OPTIONS_OR_INTEGER_SCHEMA = {\n  anyOf: [OPTIONS_SCHEMA, {\n    type: \"integer\",\n    minimum: 0\n  }]\n}; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce a maximum line length\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-len\"\n    },\n    schema: [OPTIONS_OR_INTEGER_SCHEMA, OPTIONS_OR_INTEGER_SCHEMA, OPTIONS_SCHEMA],\n    messages: {\n      max: \"This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.\",\n      maxComment: \"This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}.\"\n    }\n  },\n\n  create(context) {\n    /*\n     * Inspired by http://tools.ietf.org/html/rfc3986#appendix-B, however:\n     * - They're matching an entire string that we know is a URI\n     * - We're matching part of a string where we think there *might* be a URL\n     * - We're only concerned about URLs, as picking out any URI would cause\n     *   too many false positives\n     * - We don't care about matching the entire URL, any small segment is fine\n     */\n    const URL_REGEXP = /[^:/?#]:\\/\\/[^?#]/u;\n    const sourceCode = context.getSourceCode();\n    /**\n     * Computes the length of a line that may contain tabs. The width of each\n     * tab will be the number of spaces to the next tab stop.\n     * @param {string} line The line.\n     * @param {int} tabWidth The width of each tab stop in spaces.\n     * @returns {int} The computed line length.\n     * @private\n     */\n\n    function computeLineLength(line, tabWidth) {\n      let extraCharacterCount = 0;\n      line.replace(/\\t/gu, (match, offset) => {\n        const totalOffset = offset + extraCharacterCount,\n              previousTabStopOffset = tabWidth ? totalOffset % tabWidth : 0,\n              spaceCount = tabWidth - previousTabStopOffset;\n        extraCharacterCount += spaceCount - 1; // -1 for the replaced tab\n      });\n      return Array.from(line).length + extraCharacterCount;\n    } // The options object must be the last option specified…\n\n\n    const options = Object.assign({}, context.options[context.options.length - 1]); // …but max code length…\n\n    if (typeof context.options[0] === \"number\") {\n      options.code = context.options[0];\n    } // …and tabWidth can be optionally specified directly as integers.\n\n\n    if (typeof context.options[1] === \"number\") {\n      options.tabWidth = context.options[1];\n    }\n\n    const maxLength = typeof options.code === \"number\" ? options.code : 80,\n          tabWidth = typeof options.tabWidth === \"number\" ? options.tabWidth : 4,\n          ignoreComments = !!options.ignoreComments,\n          ignoreStrings = !!options.ignoreStrings,\n          ignoreTemplateLiterals = !!options.ignoreTemplateLiterals,\n          ignoreRegExpLiterals = !!options.ignoreRegExpLiterals,\n          ignoreTrailingComments = !!options.ignoreTrailingComments || !!options.ignoreComments,\n          ignoreUrls = !!options.ignoreUrls,\n          maxCommentLength = options.comments;\n    let ignorePattern = options.ignorePattern || null;\n\n    if (ignorePattern) {\n      ignorePattern = new RegExp(ignorePattern, \"u\");\n    } //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Tells if a given comment is trailing: it starts on the current line and\n     * extends to or past the end of the current line.\n     * @param {string} line The source line we want to check for a trailing comment on\n     * @param {number} lineNumber The one-indexed line number for line\n     * @param {ASTNode} comment The comment to inspect\n     * @returns {boolean} If the comment is trailing on the given line\n     */\n\n\n    function isTrailingComment(line, lineNumber, comment) {\n      return comment && comment.loc.start.line === lineNumber && lineNumber <= comment.loc.end.line && (comment.loc.end.line > lineNumber || comment.loc.end.column === line.length);\n    }\n    /**\n     * Tells if a comment encompasses the entire line.\n     * @param {string} line The source line with a trailing comment\n     * @param {number} lineNumber The one-indexed line number this is on\n     * @param {ASTNode} comment The comment to remove\n     * @returns {boolean} If the comment covers the entire line\n     */\n\n\n    function isFullLineComment(line, lineNumber, comment) {\n      const start = comment.loc.start,\n            end = comment.loc.end,\n            isFirstTokenOnLine = !line.slice(0, comment.loc.start.column).trim();\n      return comment && (start.line < lineNumber || start.line === lineNumber && isFirstTokenOnLine) && (end.line > lineNumber || end.line === lineNumber && end.column === line.length);\n    }\n    /**\n     * Check if a node is a JSXEmptyExpression contained in a single line JSXExpressionContainer.\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} True if the node is a JSXEmptyExpression contained in a single line JSXExpressionContainer.\n     */\n\n\n    function isJSXEmptyExpressionInSingleLineContainer(node) {\n      if (!node || !node.parent || node.type !== \"JSXEmptyExpression\" || node.parent.type !== \"JSXExpressionContainer\") {\n        return false;\n      }\n\n      const parent = node.parent;\n      return parent.loc.start.line === parent.loc.end.line;\n    }\n    /**\n     * Gets the line after the comment and any remaining trailing whitespace is\n     * stripped.\n     * @param {string} line The source line with a trailing comment\n     * @param {ASTNode} comment The comment to remove\n     * @returns {string} Line without comment and trailing whitespace\n     */\n\n\n    function stripTrailingComment(line, comment) {\n      // loc.column is zero-indexed\n      return line.slice(0, comment.loc.start.column).replace(/\\s+$/u, \"\");\n    }\n    /**\n     * Ensure that an array exists at [key] on `object`, and add `value` to it.\n     * @param {Object} object the object to mutate\n     * @param {string} key the object's key\n     * @param {*} value the value to add\n     * @returns {void}\n     * @private\n     */\n\n\n    function ensureArrayAndPush(object, key, value) {\n      if (!Array.isArray(object[key])) {\n        object[key] = [];\n      }\n\n      object[key].push(value);\n    }\n    /**\n     * Retrieves an array containing all strings (\" or ') in the source code.\n     * @returns {ASTNode[]} An array of string nodes.\n     */\n\n\n    function getAllStrings() {\n      return sourceCode.ast.tokens.filter(token => token.type === \"String\" || token.type === \"JSXText\" && sourceCode.getNodeByRangeIndex(token.range[0] - 1).type === \"JSXAttribute\");\n    }\n    /**\n     * Retrieves an array containing all template literals in the source code.\n     * @returns {ASTNode[]} An array of template literal nodes.\n     */\n\n\n    function getAllTemplateLiterals() {\n      return sourceCode.ast.tokens.filter(token => token.type === \"Template\");\n    }\n    /**\n     * Retrieves an array containing all RegExp literals in the source code.\n     * @returns {ASTNode[]} An array of RegExp literal nodes.\n     */\n\n\n    function getAllRegExpLiterals() {\n      return sourceCode.ast.tokens.filter(token => token.type === \"RegularExpression\");\n    }\n    /**\n     * A reducer to group an AST node by line number, both start and end.\n     * @param {Object} acc the accumulator\n     * @param {ASTNode} node the AST node in question\n     * @returns {Object} the modified accumulator\n     * @private\n     */\n\n\n    function groupByLineNumber(acc, node) {\n      for (let i = node.loc.start.line; i <= node.loc.end.line; ++i) {\n        ensureArrayAndPush(acc, i, node);\n      }\n\n      return acc;\n    }\n    /**\n     * Returns an array of all comments in the source code.\n     * If the element in the array is a JSXEmptyExpression contained with a single line JSXExpressionContainer,\n     * the element is changed with JSXExpressionContainer node.\n     * @returns {ASTNode[]} An array of comment nodes\n     */\n\n\n    function getAllComments() {\n      const comments = [];\n      sourceCode.getAllComments().forEach(commentNode => {\n        const containingNode = sourceCode.getNodeByRangeIndex(commentNode.range[0]);\n\n        if (isJSXEmptyExpressionInSingleLineContainer(containingNode)) {\n          // push a unique node only\n          if (comments[comments.length - 1] !== containingNode.parent) {\n            comments.push(containingNode.parent);\n          }\n        } else {\n          comments.push(commentNode);\n        }\n      });\n      return comments;\n    }\n    /**\n     * Check the program for max length\n     * @param {ASTNode} node Node to examine\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkProgramForMaxLength(node) {\n      // split (honors line-ending)\n      const lines = sourceCode.lines,\n            // list of comments to ignore\n      comments = ignoreComments || maxCommentLength || ignoreTrailingComments ? getAllComments() : []; // we iterate over comments in parallel with the lines\n\n      let commentsIndex = 0;\n      const strings = getAllStrings();\n      const stringsByLine = strings.reduce(groupByLineNumber, {});\n      const templateLiterals = getAllTemplateLiterals();\n      const templateLiteralsByLine = templateLiterals.reduce(groupByLineNumber, {});\n      const regExpLiterals = getAllRegExpLiterals();\n      const regExpLiteralsByLine = regExpLiterals.reduce(groupByLineNumber, {});\n      lines.forEach((line, i) => {\n        // i is zero-indexed, line numbers are one-indexed\n        const lineNumber = i + 1;\n        /*\n         * if we're checking comment length; we need to know whether this\n         * line is a comment\n         */\n\n        let lineIsComment = false;\n        let textToMeasure;\n        /*\n         * We can short-circuit the comment checks if we're already out of\n         * comments to check.\n         */\n\n        if (commentsIndex < comments.length) {\n          let comment = null; // iterate over comments until we find one past the current line\n\n          do {\n            comment = comments[++commentsIndex];\n          } while (comment && comment.loc.start.line <= lineNumber); // and step back by one\n\n\n          comment = comments[--commentsIndex];\n\n          if (isFullLineComment(line, lineNumber, comment)) {\n            lineIsComment = true;\n            textToMeasure = line;\n          } else if (ignoreTrailingComments && isTrailingComment(line, lineNumber, comment)) {\n            textToMeasure = stripTrailingComment(line, comment); // ignore multiple trailing comments in the same line\n\n            let lastIndex = commentsIndex;\n\n            while (isTrailingComment(textToMeasure, lineNumber, comments[--lastIndex])) {\n              textToMeasure = stripTrailingComment(textToMeasure, comments[lastIndex]);\n            }\n          } else {\n            textToMeasure = line;\n          }\n        } else {\n          textToMeasure = line;\n        }\n\n        if (ignorePattern && ignorePattern.test(textToMeasure) || ignoreUrls && URL_REGEXP.test(textToMeasure) || ignoreStrings && stringsByLine[lineNumber] || ignoreTemplateLiterals && templateLiteralsByLine[lineNumber] || ignoreRegExpLiterals && regExpLiteralsByLine[lineNumber]) {\n          // ignore this line\n          return;\n        }\n\n        const lineLength = computeLineLength(textToMeasure, tabWidth);\n        const commentLengthApplies = lineIsComment && maxCommentLength;\n\n        if (lineIsComment && ignoreComments) {\n          return;\n        }\n\n        const loc = {\n          start: {\n            line: lineNumber,\n            column: 0\n          },\n          end: {\n            line: lineNumber,\n            column: textToMeasure.length\n          }\n        };\n\n        if (commentLengthApplies) {\n          if (lineLength > maxCommentLength) {\n            context.report({\n              node,\n              loc,\n              messageId: \"maxComment\",\n              data: {\n                lineLength,\n                maxCommentLength\n              }\n            });\n          }\n        } else if (lineLength > maxLength) {\n          context.report({\n            node,\n            loc,\n            messageId: \"max\",\n            data: {\n              lineLength,\n              maxLength\n            }\n          });\n        }\n      });\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Program: checkProgramForMaxLength\n    };\n  }\n\n};","map":{"version":3,"names":["OPTIONS_SCHEMA","type","properties","code","minimum","comments","tabWidth","ignorePattern","ignoreComments","ignoreStrings","ignoreUrls","ignoreTemplateLiterals","ignoreRegExpLiterals","ignoreTrailingComments","additionalProperties","OPTIONS_OR_INTEGER_SCHEMA","anyOf","module","exports","meta","docs","description","category","recommended","url","schema","messages","max","maxComment","create","context","URL_REGEXP","sourceCode","getSourceCode","computeLineLength","line","extraCharacterCount","replace","match","offset","totalOffset","previousTabStopOffset","spaceCount","Array","from","length","options","Object","assign","maxLength","maxCommentLength","RegExp","isTrailingComment","lineNumber","comment","loc","start","end","column","isFullLineComment","isFirstTokenOnLine","slice","trim","isJSXEmptyExpressionInSingleLineContainer","node","parent","stripTrailingComment","ensureArrayAndPush","object","key","value","isArray","push","getAllStrings","ast","tokens","filter","token","getNodeByRangeIndex","range","getAllTemplateLiterals","getAllRegExpLiterals","groupByLineNumber","acc","i","getAllComments","forEach","commentNode","containingNode","checkProgramForMaxLength","lines","commentsIndex","strings","stringsByLine","reduce","templateLiterals","templateLiteralsByLine","regExpLiterals","regExpLiteralsByLine","lineIsComment","textToMeasure","lastIndex","test","lineLength","commentLengthApplies","report","messageId","data","Program"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/max-len.js"],"sourcesContent":["/**\n * @fileoverview Rule to check for max length on a line.\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst OPTIONS_SCHEMA = {\n    type: \"object\",\n    properties: {\n        code: {\n            type: \"integer\",\n            minimum: 0\n        },\n        comments: {\n            type: \"integer\",\n            minimum: 0\n        },\n        tabWidth: {\n            type: \"integer\",\n            minimum: 0\n        },\n        ignorePattern: {\n            type: \"string\"\n        },\n        ignoreComments: {\n            type: \"boolean\"\n        },\n        ignoreStrings: {\n            type: \"boolean\"\n        },\n        ignoreUrls: {\n            type: \"boolean\"\n        },\n        ignoreTemplateLiterals: {\n            type: \"boolean\"\n        },\n        ignoreRegExpLiterals: {\n            type: \"boolean\"\n        },\n        ignoreTrailingComments: {\n            type: \"boolean\"\n        }\n    },\n    additionalProperties: false\n};\n\nconst OPTIONS_OR_INTEGER_SCHEMA = {\n    anyOf: [\n        OPTIONS_SCHEMA,\n        {\n            type: \"integer\",\n            minimum: 0\n        }\n    ]\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce a maximum line length\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-len\"\n        },\n\n        schema: [\n            OPTIONS_OR_INTEGER_SCHEMA,\n            OPTIONS_OR_INTEGER_SCHEMA,\n            OPTIONS_SCHEMA\n        ],\n        messages: {\n            max: \"This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.\",\n            maxComment: \"This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}.\"\n        }\n    },\n\n    create(context) {\n\n        /*\n         * Inspired by http://tools.ietf.org/html/rfc3986#appendix-B, however:\n         * - They're matching an entire string that we know is a URI\n         * - We're matching part of a string where we think there *might* be a URL\n         * - We're only concerned about URLs, as picking out any URI would cause\n         *   too many false positives\n         * - We don't care about matching the entire URL, any small segment is fine\n         */\n        const URL_REGEXP = /[^:/?#]:\\/\\/[^?#]/u;\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Computes the length of a line that may contain tabs. The width of each\n         * tab will be the number of spaces to the next tab stop.\n         * @param {string} line The line.\n         * @param {int} tabWidth The width of each tab stop in spaces.\n         * @returns {int} The computed line length.\n         * @private\n         */\n        function computeLineLength(line, tabWidth) {\n            let extraCharacterCount = 0;\n\n            line.replace(/\\t/gu, (match, offset) => {\n                const totalOffset = offset + extraCharacterCount,\n                    previousTabStopOffset = tabWidth ? totalOffset % tabWidth : 0,\n                    spaceCount = tabWidth - previousTabStopOffset;\n\n                extraCharacterCount += spaceCount - 1; // -1 for the replaced tab\n            });\n            return Array.from(line).length + extraCharacterCount;\n        }\n\n        // The options object must be the last option specified…\n        const options = Object.assign({}, context.options[context.options.length - 1]);\n\n        // …but max code length…\n        if (typeof context.options[0] === \"number\") {\n            options.code = context.options[0];\n        }\n\n        // …and tabWidth can be optionally specified directly as integers.\n        if (typeof context.options[1] === \"number\") {\n            options.tabWidth = context.options[1];\n        }\n\n        const maxLength = typeof options.code === \"number\" ? options.code : 80,\n            tabWidth = typeof options.tabWidth === \"number\" ? options.tabWidth : 4,\n            ignoreComments = !!options.ignoreComments,\n            ignoreStrings = !!options.ignoreStrings,\n            ignoreTemplateLiterals = !!options.ignoreTemplateLiterals,\n            ignoreRegExpLiterals = !!options.ignoreRegExpLiterals,\n            ignoreTrailingComments = !!options.ignoreTrailingComments || !!options.ignoreComments,\n            ignoreUrls = !!options.ignoreUrls,\n            maxCommentLength = options.comments;\n        let ignorePattern = options.ignorePattern || null;\n\n        if (ignorePattern) {\n            ignorePattern = new RegExp(ignorePattern, \"u\");\n        }\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Tells if a given comment is trailing: it starts on the current line and\n         * extends to or past the end of the current line.\n         * @param {string} line The source line we want to check for a trailing comment on\n         * @param {number} lineNumber The one-indexed line number for line\n         * @param {ASTNode} comment The comment to inspect\n         * @returns {boolean} If the comment is trailing on the given line\n         */\n        function isTrailingComment(line, lineNumber, comment) {\n            return comment &&\n                (comment.loc.start.line === lineNumber && lineNumber <= comment.loc.end.line) &&\n                (comment.loc.end.line > lineNumber || comment.loc.end.column === line.length);\n        }\n\n        /**\n         * Tells if a comment encompasses the entire line.\n         * @param {string} line The source line with a trailing comment\n         * @param {number} lineNumber The one-indexed line number this is on\n         * @param {ASTNode} comment The comment to remove\n         * @returns {boolean} If the comment covers the entire line\n         */\n        function isFullLineComment(line, lineNumber, comment) {\n            const start = comment.loc.start,\n                end = comment.loc.end,\n                isFirstTokenOnLine = !line.slice(0, comment.loc.start.column).trim();\n\n            return comment &&\n                (start.line < lineNumber || (start.line === lineNumber && isFirstTokenOnLine)) &&\n                (end.line > lineNumber || (end.line === lineNumber && end.column === line.length));\n        }\n\n        /**\n         * Check if a node is a JSXEmptyExpression contained in a single line JSXExpressionContainer.\n         * @param {ASTNode} node A node to check.\n         * @returns {boolean} True if the node is a JSXEmptyExpression contained in a single line JSXExpressionContainer.\n         */\n        function isJSXEmptyExpressionInSingleLineContainer(node) {\n            if (!node || !node.parent || node.type !== \"JSXEmptyExpression\" || node.parent.type !== \"JSXExpressionContainer\") {\n                return false;\n            }\n\n            const parent = node.parent;\n\n            return parent.loc.start.line === parent.loc.end.line;\n        }\n\n        /**\n         * Gets the line after the comment and any remaining trailing whitespace is\n         * stripped.\n         * @param {string} line The source line with a trailing comment\n         * @param {ASTNode} comment The comment to remove\n         * @returns {string} Line without comment and trailing whitespace\n         */\n        function stripTrailingComment(line, comment) {\n\n            // loc.column is zero-indexed\n            return line.slice(0, comment.loc.start.column).replace(/\\s+$/u, \"\");\n        }\n\n        /**\n         * Ensure that an array exists at [key] on `object`, and add `value` to it.\n         * @param {Object} object the object to mutate\n         * @param {string} key the object's key\n         * @param {*} value the value to add\n         * @returns {void}\n         * @private\n         */\n        function ensureArrayAndPush(object, key, value) {\n            if (!Array.isArray(object[key])) {\n                object[key] = [];\n            }\n            object[key].push(value);\n        }\n\n        /**\n         * Retrieves an array containing all strings (\" or ') in the source code.\n         * @returns {ASTNode[]} An array of string nodes.\n         */\n        function getAllStrings() {\n            return sourceCode.ast.tokens.filter(token => (token.type === \"String\" ||\n                (token.type === \"JSXText\" && sourceCode.getNodeByRangeIndex(token.range[0] - 1).type === \"JSXAttribute\")));\n        }\n\n        /**\n         * Retrieves an array containing all template literals in the source code.\n         * @returns {ASTNode[]} An array of template literal nodes.\n         */\n        function getAllTemplateLiterals() {\n            return sourceCode.ast.tokens.filter(token => token.type === \"Template\");\n        }\n\n\n        /**\n         * Retrieves an array containing all RegExp literals in the source code.\n         * @returns {ASTNode[]} An array of RegExp literal nodes.\n         */\n        function getAllRegExpLiterals() {\n            return sourceCode.ast.tokens.filter(token => token.type === \"RegularExpression\");\n        }\n\n\n        /**\n         * A reducer to group an AST node by line number, both start and end.\n         * @param {Object} acc the accumulator\n         * @param {ASTNode} node the AST node in question\n         * @returns {Object} the modified accumulator\n         * @private\n         */\n        function groupByLineNumber(acc, node) {\n            for (let i = node.loc.start.line; i <= node.loc.end.line; ++i) {\n                ensureArrayAndPush(acc, i, node);\n            }\n            return acc;\n        }\n\n        /**\n         * Returns an array of all comments in the source code.\n         * If the element in the array is a JSXEmptyExpression contained with a single line JSXExpressionContainer,\n         * the element is changed with JSXExpressionContainer node.\n         * @returns {ASTNode[]} An array of comment nodes\n         */\n        function getAllComments() {\n            const comments = [];\n\n            sourceCode.getAllComments()\n                .forEach(commentNode => {\n                    const containingNode = sourceCode.getNodeByRangeIndex(commentNode.range[0]);\n\n                    if (isJSXEmptyExpressionInSingleLineContainer(containingNode)) {\n\n                        // push a unique node only\n                        if (comments[comments.length - 1] !== containingNode.parent) {\n                            comments.push(containingNode.parent);\n                        }\n                    } else {\n                        comments.push(commentNode);\n                    }\n                });\n\n            return comments;\n        }\n\n        /**\n         * Check the program for max length\n         * @param {ASTNode} node Node to examine\n         * @returns {void}\n         * @private\n         */\n        function checkProgramForMaxLength(node) {\n\n            // split (honors line-ending)\n            const lines = sourceCode.lines,\n\n                // list of comments to ignore\n                comments = ignoreComments || maxCommentLength || ignoreTrailingComments ? getAllComments() : [];\n\n            // we iterate over comments in parallel with the lines\n            let commentsIndex = 0;\n\n            const strings = getAllStrings();\n            const stringsByLine = strings.reduce(groupByLineNumber, {});\n\n            const templateLiterals = getAllTemplateLiterals();\n            const templateLiteralsByLine = templateLiterals.reduce(groupByLineNumber, {});\n\n            const regExpLiterals = getAllRegExpLiterals();\n            const regExpLiteralsByLine = regExpLiterals.reduce(groupByLineNumber, {});\n\n            lines.forEach((line, i) => {\n\n                // i is zero-indexed, line numbers are one-indexed\n                const lineNumber = i + 1;\n\n                /*\n                 * if we're checking comment length; we need to know whether this\n                 * line is a comment\n                 */\n                let lineIsComment = false;\n                let textToMeasure;\n\n                /*\n                 * We can short-circuit the comment checks if we're already out of\n                 * comments to check.\n                 */\n                if (commentsIndex < comments.length) {\n                    let comment = null;\n\n                    // iterate over comments until we find one past the current line\n                    do {\n                        comment = comments[++commentsIndex];\n                    } while (comment && comment.loc.start.line <= lineNumber);\n\n                    // and step back by one\n                    comment = comments[--commentsIndex];\n\n                    if (isFullLineComment(line, lineNumber, comment)) {\n                        lineIsComment = true;\n                        textToMeasure = line;\n                    } else if (ignoreTrailingComments && isTrailingComment(line, lineNumber, comment)) {\n                        textToMeasure = stripTrailingComment(line, comment);\n\n                        // ignore multiple trailing comments in the same line\n                        let lastIndex = commentsIndex;\n\n                        while (isTrailingComment(textToMeasure, lineNumber, comments[--lastIndex])) {\n                            textToMeasure = stripTrailingComment(textToMeasure, comments[lastIndex]);\n                        }\n                    } else {\n                        textToMeasure = line;\n                    }\n                } else {\n                    textToMeasure = line;\n                }\n                if (ignorePattern && ignorePattern.test(textToMeasure) ||\n                    ignoreUrls && URL_REGEXP.test(textToMeasure) ||\n                    ignoreStrings && stringsByLine[lineNumber] ||\n                    ignoreTemplateLiterals && templateLiteralsByLine[lineNumber] ||\n                    ignoreRegExpLiterals && regExpLiteralsByLine[lineNumber]\n                ) {\n\n                    // ignore this line\n                    return;\n                }\n\n                const lineLength = computeLineLength(textToMeasure, tabWidth);\n                const commentLengthApplies = lineIsComment && maxCommentLength;\n\n                if (lineIsComment && ignoreComments) {\n                    return;\n                }\n\n                const loc = {\n                    start: {\n                        line: lineNumber,\n                        column: 0\n                    },\n                    end: {\n                        line: lineNumber,\n                        column: textToMeasure.length\n                    }\n                };\n\n                if (commentLengthApplies) {\n                    if (lineLength > maxCommentLength) {\n                        context.report({\n                            node,\n                            loc,\n                            messageId: \"maxComment\",\n                            data: {\n                                lineLength,\n                                maxCommentLength\n                            }\n                        });\n                    }\n                } else if (lineLength > maxLength) {\n                    context.report({\n                        node,\n                        loc,\n                        messageId: \"max\",\n                        data: {\n                            lineLength,\n                            maxLength\n                        }\n                    });\n                }\n            });\n        }\n\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            Program: checkProgramForMaxLength\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}