{"ast":null,"code":"/**\n * @fileoverview Rule to control usage of strict mode directives.\n * @author Brandon Mills\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets all of the Use Strict Directives in the Directive Prologue of a group of\n * statements.\n * @param {ASTNode[]} statements Statements in the program or function body.\n * @returns {ASTNode[]} All of the Use Strict Directives.\n */\n\n\nfunction getUseStrictDirectives(statements) {\n  const directives = [];\n\n  for (let i = 0; i < statements.length; i++) {\n    const statement = statements[i];\n\n    if (statement.type === \"ExpressionStatement\" && statement.expression.type === \"Literal\" && statement.expression.value === \"use strict\") {\n      directives[i] = statement;\n    } else {\n      break;\n    }\n  }\n\n  return directives;\n}\n/**\n * Checks whether a given parameter is a simple parameter.\n * @param {ASTNode} node A pattern node to check.\n * @returns {boolean} `true` if the node is an Identifier node.\n */\n\n\nfunction isSimpleParameter(node) {\n  return node.type === \"Identifier\";\n}\n/**\n * Checks whether a given parameter list is a simple parameter list.\n * @param {ASTNode[]} params A parameter list to check.\n * @returns {boolean} `true` if the every parameter is an Identifier node.\n */\n\n\nfunction isSimpleParameterList(params) {\n  return params.every(isSimpleParameter);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require or disallow strict mode directives\",\n      category: \"Strict Mode\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/strict\"\n    },\n    schema: [{\n      enum: [\"never\", \"global\", \"function\", \"safe\"]\n    }],\n    fixable: \"code\",\n    messages: {\n      function: \"Use the function form of 'use strict'.\",\n      global: \"Use the global form of 'use strict'.\",\n      multiple: \"Multiple 'use strict' directives.\",\n      never: \"Strict mode is not permitted.\",\n      unnecessary: \"Unnecessary 'use strict' directive.\",\n      module: \"'use strict' is unnecessary inside of modules.\",\n      implied: \"'use strict' is unnecessary when implied strict mode is enabled.\",\n      unnecessaryInClasses: \"'use strict' is unnecessary inside of classes.\",\n      nonSimpleParameterList: \"'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.\",\n      wrap: \"Wrap {{name}} in a function with 'use strict' directive.\"\n    }\n  },\n\n  create(context) {\n    const ecmaFeatures = context.parserOptions.ecmaFeatures || {},\n          scopes = [],\n          classScopes = [];\n    let mode = context.options[0] || \"safe\";\n\n    if (ecmaFeatures.impliedStrict) {\n      mode = \"implied\";\n    } else if (mode === \"safe\") {\n      mode = ecmaFeatures.globalReturn ? \"global\" : \"function\";\n    }\n    /**\n     * Determines whether a reported error should be fixed, depending on the error type.\n     * @param {string} errorType The type of error\n     * @returns {boolean} `true` if the reported error should be fixed\n     */\n\n\n    function shouldFix(errorType) {\n      return errorType === \"multiple\" || errorType === \"unnecessary\" || errorType === \"module\" || errorType === \"implied\" || errorType === \"unnecessaryInClasses\";\n    }\n    /**\n     * Gets a fixer function to remove a given 'use strict' directive.\n     * @param {ASTNode} node The directive that should be removed\n     * @returns {Function} A fixer function\n     */\n\n\n    function getFixFunction(node) {\n      return fixer => fixer.remove(node);\n    }\n    /**\n     * Report a slice of an array of nodes with a given message.\n     * @param {ASTNode[]} nodes Nodes.\n     * @param {string} start Index to start from.\n     * @param {string} end Index to end before.\n     * @param {string} messageId Message to display.\n     * @param {boolean} fix `true` if the directive should be fixed (i.e. removed)\n     * @returns {void}\n     */\n\n\n    function reportSlice(nodes, start, end, messageId, fix) {\n      nodes.slice(start, end).forEach(node => {\n        context.report({\n          node,\n          messageId,\n          fix: fix ? getFixFunction(node) : null\n        });\n      });\n    }\n    /**\n     * Report all nodes in an array with a given message.\n     * @param {ASTNode[]} nodes Nodes.\n     * @param {string} messageId Message id to display.\n     * @param {boolean} fix `true` if the directive should be fixed (i.e. removed)\n     * @returns {void}\n     */\n\n\n    function reportAll(nodes, messageId, fix) {\n      reportSlice(nodes, 0, nodes.length, messageId, fix);\n    }\n    /**\n     * Report all nodes in an array, except the first, with a given message.\n     * @param {ASTNode[]} nodes Nodes.\n     * @param {string} messageId Message id to display.\n     * @param {boolean} fix `true` if the directive should be fixed (i.e. removed)\n     * @returns {void}\n     */\n\n\n    function reportAllExceptFirst(nodes, messageId, fix) {\n      reportSlice(nodes, 1, nodes.length, messageId, fix);\n    }\n    /**\n     * Entering a function in 'function' mode pushes a new nested scope onto the\n     * stack. The new scope is true if the nested function is strict mode code.\n     * @param {ASTNode} node The function declaration or expression.\n     * @param {ASTNode[]} useStrictDirectives The Use Strict Directives of the node.\n     * @returns {void}\n     */\n\n\n    function enterFunctionInFunctionMode(node, useStrictDirectives) {\n      const isInClass = classScopes.length > 0,\n            isParentGlobal = scopes.length === 0 && classScopes.length === 0,\n            isParentStrict = scopes.length > 0 && scopes[scopes.length - 1],\n            isStrict = useStrictDirectives.length > 0;\n\n      if (isStrict) {\n        if (!isSimpleParameterList(node.params)) {\n          context.report({\n            node: useStrictDirectives[0],\n            messageId: \"nonSimpleParameterList\"\n          });\n        } else if (isParentStrict) {\n          context.report({\n            node: useStrictDirectives[0],\n            messageId: \"unnecessary\",\n            fix: getFixFunction(useStrictDirectives[0])\n          });\n        } else if (isInClass) {\n          context.report({\n            node: useStrictDirectives[0],\n            messageId: \"unnecessaryInClasses\",\n            fix: getFixFunction(useStrictDirectives[0])\n          });\n        }\n\n        reportAllExceptFirst(useStrictDirectives, \"multiple\", true);\n      } else if (isParentGlobal) {\n        if (isSimpleParameterList(node.params)) {\n          context.report({\n            node,\n            messageId: \"function\"\n          });\n        } else {\n          context.report({\n            node,\n            messageId: \"wrap\",\n            data: {\n              name: astUtils.getFunctionNameWithKind(node)\n            }\n          });\n        }\n      }\n\n      scopes.push(isParentStrict || isStrict);\n    }\n    /**\n     * Exiting a function in 'function' mode pops its scope off the stack.\n     * @returns {void}\n     */\n\n\n    function exitFunctionInFunctionMode() {\n      scopes.pop();\n    }\n    /**\n     * Enter a function and either:\n     * - Push a new nested scope onto the stack (in 'function' mode).\n     * - Report all the Use Strict Directives (in the other modes).\n     * @param {ASTNode} node The function declaration or expression.\n     * @returns {void}\n     */\n\n\n    function enterFunction(node) {\n      const isBlock = node.body.type === \"BlockStatement\",\n            useStrictDirectives = isBlock ? getUseStrictDirectives(node.body.body) : [];\n\n      if (mode === \"function\") {\n        enterFunctionInFunctionMode(node, useStrictDirectives);\n      } else if (useStrictDirectives.length > 0) {\n        if (isSimpleParameterList(node.params)) {\n          reportAll(useStrictDirectives, mode, shouldFix(mode));\n        } else {\n          context.report({\n            node: useStrictDirectives[0],\n            messageId: \"nonSimpleParameterList\"\n          });\n          reportAllExceptFirst(useStrictDirectives, \"multiple\", true);\n        }\n      }\n    }\n\n    const rule = {\n      Program(node) {\n        const useStrictDirectives = getUseStrictDirectives(node.body);\n\n        if (node.sourceType === \"module\") {\n          mode = \"module\";\n        }\n\n        if (mode === \"global\") {\n          if (node.body.length > 0 && useStrictDirectives.length === 0) {\n            context.report({\n              node,\n              messageId: \"global\"\n            });\n          }\n\n          reportAllExceptFirst(useStrictDirectives, \"multiple\", true);\n        } else {\n          reportAll(useStrictDirectives, mode, shouldFix(mode));\n        }\n      },\n\n      FunctionDeclaration: enterFunction,\n      FunctionExpression: enterFunction,\n      ArrowFunctionExpression: enterFunction\n    };\n\n    if (mode === \"function\") {\n      Object.assign(rule, {\n        // Inside of class bodies are always strict mode.\n        ClassBody() {\n          classScopes.push(true);\n        },\n\n        \"ClassBody:exit\"() {\n          classScopes.pop();\n        },\n\n        \"FunctionDeclaration:exit\": exitFunctionInFunctionMode,\n        \"FunctionExpression:exit\": exitFunctionInFunctionMode,\n        \"ArrowFunctionExpression:exit\": exitFunctionInFunctionMode\n      });\n    }\n\n    return rule;\n  }\n\n};","map":{"version":3,"names":["astUtils","require","getUseStrictDirectives","statements","directives","i","length","statement","type","expression","value","isSimpleParameter","node","isSimpleParameterList","params","every","module","exports","meta","docs","description","category","recommended","url","schema","enum","fixable","messages","function","global","multiple","never","unnecessary","implied","unnecessaryInClasses","nonSimpleParameterList","wrap","create","context","ecmaFeatures","parserOptions","scopes","classScopes","mode","options","impliedStrict","globalReturn","shouldFix","errorType","getFixFunction","fixer","remove","reportSlice","nodes","start","end","messageId","fix","slice","forEach","report","reportAll","reportAllExceptFirst","enterFunctionInFunctionMode","useStrictDirectives","isInClass","isParentGlobal","isParentStrict","isStrict","data","name","getFunctionNameWithKind","push","exitFunctionInFunctionMode","pop","enterFunction","isBlock","body","rule","Program","sourceType","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","Object","assign","ClassBody"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/strict.js"],"sourcesContent":["/**\n * @fileoverview Rule to control usage of strict mode directives.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Gets all of the Use Strict Directives in the Directive Prologue of a group of\n * statements.\n * @param {ASTNode[]} statements Statements in the program or function body.\n * @returns {ASTNode[]} All of the Use Strict Directives.\n */\nfunction getUseStrictDirectives(statements) {\n    const directives = [];\n\n    for (let i = 0; i < statements.length; i++) {\n        const statement = statements[i];\n\n        if (\n            statement.type === \"ExpressionStatement\" &&\n            statement.expression.type === \"Literal\" &&\n            statement.expression.value === \"use strict\"\n        ) {\n            directives[i] = statement;\n        } else {\n            break;\n        }\n    }\n\n    return directives;\n}\n\n/**\n * Checks whether a given parameter is a simple parameter.\n * @param {ASTNode} node A pattern node to check.\n * @returns {boolean} `true` if the node is an Identifier node.\n */\nfunction isSimpleParameter(node) {\n    return node.type === \"Identifier\";\n}\n\n/**\n * Checks whether a given parameter list is a simple parameter list.\n * @param {ASTNode[]} params A parameter list to check.\n * @returns {boolean} `true` if the every parameter is an Identifier node.\n */\nfunction isSimpleParameterList(params) {\n    return params.every(isSimpleParameter);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require or disallow strict mode directives\",\n            category: \"Strict Mode\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/strict\"\n        },\n\n        schema: [\n            {\n                enum: [\"never\", \"global\", \"function\", \"safe\"]\n            }\n        ],\n\n        fixable: \"code\",\n        messages: {\n            function: \"Use the function form of 'use strict'.\",\n            global: \"Use the global form of 'use strict'.\",\n            multiple: \"Multiple 'use strict' directives.\",\n            never: \"Strict mode is not permitted.\",\n            unnecessary: \"Unnecessary 'use strict' directive.\",\n            module: \"'use strict' is unnecessary inside of modules.\",\n            implied: \"'use strict' is unnecessary when implied strict mode is enabled.\",\n            unnecessaryInClasses: \"'use strict' is unnecessary inside of classes.\",\n            nonSimpleParameterList: \"'use strict' directive inside a function with non-simple parameter list throws a syntax error since ES2016.\",\n            wrap: \"Wrap {{name}} in a function with 'use strict' directive.\"\n        }\n    },\n\n    create(context) {\n\n        const ecmaFeatures = context.parserOptions.ecmaFeatures || {},\n            scopes = [],\n            classScopes = [];\n        let mode = context.options[0] || \"safe\";\n\n        if (ecmaFeatures.impliedStrict) {\n            mode = \"implied\";\n        } else if (mode === \"safe\") {\n            mode = ecmaFeatures.globalReturn ? \"global\" : \"function\";\n        }\n\n        /**\n         * Determines whether a reported error should be fixed, depending on the error type.\n         * @param {string} errorType The type of error\n         * @returns {boolean} `true` if the reported error should be fixed\n         */\n        function shouldFix(errorType) {\n            return errorType === \"multiple\" || errorType === \"unnecessary\" || errorType === \"module\" || errorType === \"implied\" || errorType === \"unnecessaryInClasses\";\n        }\n\n        /**\n         * Gets a fixer function to remove a given 'use strict' directive.\n         * @param {ASTNode} node The directive that should be removed\n         * @returns {Function} A fixer function\n         */\n        function getFixFunction(node) {\n            return fixer => fixer.remove(node);\n        }\n\n        /**\n         * Report a slice of an array of nodes with a given message.\n         * @param {ASTNode[]} nodes Nodes.\n         * @param {string} start Index to start from.\n         * @param {string} end Index to end before.\n         * @param {string} messageId Message to display.\n         * @param {boolean} fix `true` if the directive should be fixed (i.e. removed)\n         * @returns {void}\n         */\n        function reportSlice(nodes, start, end, messageId, fix) {\n            nodes.slice(start, end).forEach(node => {\n                context.report({ node, messageId, fix: fix ? getFixFunction(node) : null });\n            });\n        }\n\n        /**\n         * Report all nodes in an array with a given message.\n         * @param {ASTNode[]} nodes Nodes.\n         * @param {string} messageId Message id to display.\n         * @param {boolean} fix `true` if the directive should be fixed (i.e. removed)\n         * @returns {void}\n         */\n        function reportAll(nodes, messageId, fix) {\n            reportSlice(nodes, 0, nodes.length, messageId, fix);\n        }\n\n        /**\n         * Report all nodes in an array, except the first, with a given message.\n         * @param {ASTNode[]} nodes Nodes.\n         * @param {string} messageId Message id to display.\n         * @param {boolean} fix `true` if the directive should be fixed (i.e. removed)\n         * @returns {void}\n         */\n        function reportAllExceptFirst(nodes, messageId, fix) {\n            reportSlice(nodes, 1, nodes.length, messageId, fix);\n        }\n\n        /**\n         * Entering a function in 'function' mode pushes a new nested scope onto the\n         * stack. The new scope is true if the nested function is strict mode code.\n         * @param {ASTNode} node The function declaration or expression.\n         * @param {ASTNode[]} useStrictDirectives The Use Strict Directives of the node.\n         * @returns {void}\n         */\n        function enterFunctionInFunctionMode(node, useStrictDirectives) {\n            const isInClass = classScopes.length > 0,\n                isParentGlobal = scopes.length === 0 && classScopes.length === 0,\n                isParentStrict = scopes.length > 0 && scopes[scopes.length - 1],\n                isStrict = useStrictDirectives.length > 0;\n\n            if (isStrict) {\n                if (!isSimpleParameterList(node.params)) {\n                    context.report({ node: useStrictDirectives[0], messageId: \"nonSimpleParameterList\" });\n                } else if (isParentStrict) {\n                    context.report({ node: useStrictDirectives[0], messageId: \"unnecessary\", fix: getFixFunction(useStrictDirectives[0]) });\n                } else if (isInClass) {\n                    context.report({ node: useStrictDirectives[0], messageId: \"unnecessaryInClasses\", fix: getFixFunction(useStrictDirectives[0]) });\n                }\n\n                reportAllExceptFirst(useStrictDirectives, \"multiple\", true);\n            } else if (isParentGlobal) {\n                if (isSimpleParameterList(node.params)) {\n                    context.report({ node, messageId: \"function\" });\n                } else {\n                    context.report({\n                        node,\n                        messageId: \"wrap\",\n                        data: { name: astUtils.getFunctionNameWithKind(node) }\n                    });\n                }\n            }\n\n            scopes.push(isParentStrict || isStrict);\n        }\n\n        /**\n         * Exiting a function in 'function' mode pops its scope off the stack.\n         * @returns {void}\n         */\n        function exitFunctionInFunctionMode() {\n            scopes.pop();\n        }\n\n        /**\n         * Enter a function and either:\n         * - Push a new nested scope onto the stack (in 'function' mode).\n         * - Report all the Use Strict Directives (in the other modes).\n         * @param {ASTNode} node The function declaration or expression.\n         * @returns {void}\n         */\n        function enterFunction(node) {\n            const isBlock = node.body.type === \"BlockStatement\",\n                useStrictDirectives = isBlock\n                    ? getUseStrictDirectives(node.body.body) : [];\n\n            if (mode === \"function\") {\n                enterFunctionInFunctionMode(node, useStrictDirectives);\n            } else if (useStrictDirectives.length > 0) {\n                if (isSimpleParameterList(node.params)) {\n                    reportAll(useStrictDirectives, mode, shouldFix(mode));\n                } else {\n                    context.report({ node: useStrictDirectives[0], messageId: \"nonSimpleParameterList\" });\n                    reportAllExceptFirst(useStrictDirectives, \"multiple\", true);\n                }\n            }\n        }\n\n        const rule = {\n            Program(node) {\n                const useStrictDirectives = getUseStrictDirectives(node.body);\n\n                if (node.sourceType === \"module\") {\n                    mode = \"module\";\n                }\n\n                if (mode === \"global\") {\n                    if (node.body.length > 0 && useStrictDirectives.length === 0) {\n                        context.report({ node, messageId: \"global\" });\n                    }\n                    reportAllExceptFirst(useStrictDirectives, \"multiple\", true);\n                } else {\n                    reportAll(useStrictDirectives, mode, shouldFix(mode));\n                }\n            },\n            FunctionDeclaration: enterFunction,\n            FunctionExpression: enterFunction,\n            ArrowFunctionExpression: enterFunction\n        };\n\n        if (mode === \"function\") {\n            Object.assign(rule, {\n\n                // Inside of class bodies are always strict mode.\n                ClassBody() {\n                    classScopes.push(true);\n                },\n                \"ClassBody:exit\"() {\n                    classScopes.pop();\n                },\n\n                \"FunctionDeclaration:exit\": exitFunctionInFunctionMode,\n                \"FunctionExpression:exit\": exitFunctionInFunctionMode,\n                \"ArrowFunctionExpression:exit\": exitFunctionInFunctionMode\n            });\n        }\n\n        return rule;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}