{"ast":null,"code":"/**\n * @fileoverview `ExtractedConfig` class.\n *\n * `ExtractedConfig` class expresses a final configuration for a specific file.\n *\n * It provides one method.\n *\n * - `toCompatibleObjectAsConfigFileContent()`\n *      Convert this configuration to the compatible object as the content of\n *      config files. It converts the loaded parser and plugins to strings.\n *      `CLIEngine#getConfigForFile(filePath)` method uses this method.\n *\n * `ConfigArray#extractConfig(filePath)` creates a `ExtractedConfig` instance.\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\nconst {\n  IgnorePattern\n} = require(\"./ignore-pattern\"); // For VSCode intellisense\n\n/** @typedef {import(\"../../shared/types\").ConfigData} ConfigData */\n\n/** @typedef {import(\"../../shared/types\").GlobalConf} GlobalConf */\n\n/** @typedef {import(\"../../shared/types\").SeverityConf} SeverityConf */\n\n/** @typedef {import(\"./config-dependency\").DependentParser} DependentParser */\n\n/** @typedef {import(\"./config-dependency\").DependentPlugin} DependentPlugin */\n\n/**\n * Check if `xs` starts with `ys`.\n * @template T\n * @param {T[]} xs The array to check.\n * @param {T[]} ys The array that may be the first part of `xs`.\n * @returns {boolean} `true` if `xs` starts with `ys`.\n */\n\n\nfunction startsWith(xs, ys) {\n  return xs.length >= ys.length && ys.every((y, i) => y === xs[i]);\n}\n/**\n * The class for extracted config data.\n */\n\n\nclass ExtractedConfig {\n  constructor() {\n    /**\n     * The config name what `noInlineConfig` setting came from.\n     * @type {string}\n     */\n    this.configNameOfNoInlineConfig = \"\";\n    /**\n     * Environments.\n     * @type {Record<string, boolean>}\n     */\n\n    this.env = {};\n    /**\n     * Global variables.\n     * @type {Record<string, GlobalConf>}\n     */\n\n    this.globals = {};\n    /**\n     * The glob patterns that ignore to lint.\n     * @type {(((filePath:string, dot?:boolean) => boolean) & { basePath:string; patterns:string[] }) | undefined}\n     */\n\n    this.ignores = void 0;\n    /**\n     * The flag that disables directive comments.\n     * @type {boolean|undefined}\n     */\n\n    this.noInlineConfig = void 0;\n    /**\n     * Parser definition.\n     * @type {DependentParser|null}\n     */\n\n    this.parser = null;\n    /**\n     * Options for the parser.\n     * @type {Object}\n     */\n\n    this.parserOptions = {};\n    /**\n     * Plugin definitions.\n     * @type {Record<string, DependentPlugin>}\n     */\n\n    this.plugins = {};\n    /**\n     * Processor ID.\n     * @type {string|null}\n     */\n\n    this.processor = null;\n    /**\n     * The flag that reports unused `eslint-disable` directive comments.\n     * @type {boolean|undefined}\n     */\n\n    this.reportUnusedDisableDirectives = void 0;\n    /**\n     * Rule settings.\n     * @type {Record<string, [SeverityConf, ...any[]]>}\n     */\n\n    this.rules = {};\n    /**\n     * Shared settings.\n     * @type {Object}\n     */\n\n    this.settings = {};\n  }\n  /**\n   * Convert this config to the compatible object as a config file content.\n   * @returns {ConfigData} The converted object.\n   */\n\n\n  toCompatibleObjectAsConfigFileContent() {\n    const {\n      /* eslint-disable no-unused-vars */\n      configNameOfNoInlineConfig: _ignore1,\n      processor: _ignore2,\n\n      /* eslint-enable no-unused-vars */\n      ignores,\n      ...config\n    } = this;\n    config.parser = config.parser && config.parser.filePath;\n    config.plugins = Object.keys(config.plugins).filter(Boolean).reverse();\n    config.ignorePatterns = ignores ? ignores.patterns : []; // Strip the default patterns from `ignorePatterns`.\n\n    if (startsWith(config.ignorePatterns, IgnorePattern.DefaultPatterns)) {\n      config.ignorePatterns = config.ignorePatterns.slice(IgnorePattern.DefaultPatterns.length);\n    }\n\n    return config;\n  }\n\n}\n\nmodule.exports = {\n  ExtractedConfig\n};","map":{"version":3,"names":["IgnorePattern","require","startsWith","xs","ys","length","every","y","i","ExtractedConfig","constructor","configNameOfNoInlineConfig","env","globals","ignores","noInlineConfig","parser","parserOptions","plugins","processor","reportUnusedDisableDirectives","rules","settings","toCompatibleObjectAsConfigFileContent","_ignore1","_ignore2","config","filePath","Object","keys","filter","Boolean","reverse","ignorePatterns","patterns","DefaultPatterns","slice","module","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/@eslint/eslintrc/lib/config-array/extracted-config.js"],"sourcesContent":["/**\n * @fileoverview `ExtractedConfig` class.\n *\n * `ExtractedConfig` class expresses a final configuration for a specific file.\n *\n * It provides one method.\n *\n * - `toCompatibleObjectAsConfigFileContent()`\n *      Convert this configuration to the compatible object as the content of\n *      config files. It converts the loaded parser and plugins to strings.\n *      `CLIEngine#getConfigForFile(filePath)` method uses this method.\n *\n * `ConfigArray#extractConfig(filePath)` creates a `ExtractedConfig` instance.\n *\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\nconst { IgnorePattern } = require(\"./ignore-pattern\");\n\n// For VSCode intellisense\n/** @typedef {import(\"../../shared/types\").ConfigData} ConfigData */\n/** @typedef {import(\"../../shared/types\").GlobalConf} GlobalConf */\n/** @typedef {import(\"../../shared/types\").SeverityConf} SeverityConf */\n/** @typedef {import(\"./config-dependency\").DependentParser} DependentParser */\n/** @typedef {import(\"./config-dependency\").DependentPlugin} DependentPlugin */\n\n/**\n * Check if `xs` starts with `ys`.\n * @template T\n * @param {T[]} xs The array to check.\n * @param {T[]} ys The array that may be the first part of `xs`.\n * @returns {boolean} `true` if `xs` starts with `ys`.\n */\nfunction startsWith(xs, ys) {\n    return xs.length >= ys.length && ys.every((y, i) => y === xs[i]);\n}\n\n/**\n * The class for extracted config data.\n */\nclass ExtractedConfig {\n    constructor() {\n\n        /**\n         * The config name what `noInlineConfig` setting came from.\n         * @type {string}\n         */\n        this.configNameOfNoInlineConfig = \"\";\n\n        /**\n         * Environments.\n         * @type {Record<string, boolean>}\n         */\n        this.env = {};\n\n        /**\n         * Global variables.\n         * @type {Record<string, GlobalConf>}\n         */\n        this.globals = {};\n\n        /**\n         * The glob patterns that ignore to lint.\n         * @type {(((filePath:string, dot?:boolean) => boolean) & { basePath:string; patterns:string[] }) | undefined}\n         */\n        this.ignores = void 0;\n\n        /**\n         * The flag that disables directive comments.\n         * @type {boolean|undefined}\n         */\n        this.noInlineConfig = void 0;\n\n        /**\n         * Parser definition.\n         * @type {DependentParser|null}\n         */\n        this.parser = null;\n\n        /**\n         * Options for the parser.\n         * @type {Object}\n         */\n        this.parserOptions = {};\n\n        /**\n         * Plugin definitions.\n         * @type {Record<string, DependentPlugin>}\n         */\n        this.plugins = {};\n\n        /**\n         * Processor ID.\n         * @type {string|null}\n         */\n        this.processor = null;\n\n        /**\n         * The flag that reports unused `eslint-disable` directive comments.\n         * @type {boolean|undefined}\n         */\n        this.reportUnusedDisableDirectives = void 0;\n\n        /**\n         * Rule settings.\n         * @type {Record<string, [SeverityConf, ...any[]]>}\n         */\n        this.rules = {};\n\n        /**\n         * Shared settings.\n         * @type {Object}\n         */\n        this.settings = {};\n    }\n\n    /**\n     * Convert this config to the compatible object as a config file content.\n     * @returns {ConfigData} The converted object.\n     */\n    toCompatibleObjectAsConfigFileContent() {\n        const {\n            /* eslint-disable no-unused-vars */\n            configNameOfNoInlineConfig: _ignore1,\n            processor: _ignore2,\n            /* eslint-enable no-unused-vars */\n            ignores,\n            ...config\n        } = this;\n\n        config.parser = config.parser && config.parser.filePath;\n        config.plugins = Object.keys(config.plugins).filter(Boolean).reverse();\n        config.ignorePatterns = ignores ? ignores.patterns : [];\n\n        // Strip the default patterns from `ignorePatterns`.\n        if (startsWith(config.ignorePatterns, IgnorePattern.DefaultPatterns)) {\n            config.ignorePatterns =\n                config.ignorePatterns.slice(IgnorePattern.DefaultPatterns.length);\n        }\n\n        return config;\n    }\n}\n\nmodule.exports = { ExtractedConfig };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAF,IAAoBC,OAAO,CAAC,kBAAD,CAAjC,C,CAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,EAApB,EAAwBC,EAAxB,EAA4B;EACxB,OAAOD,EAAE,CAACE,MAAH,IAAaD,EAAE,CAACC,MAAhB,IAA0BD,EAAE,CAACE,KAAH,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,KAAKJ,EAAE,CAACK,CAAD,CAA3B,CAAjC;AACH;AAED;AACA;AACA;;;AACA,MAAMC,eAAN,CAAsB;EAClBC,WAAW,GAAG;IAEV;AACR;AACA;AACA;IACQ,KAAKC,0BAAL,GAAkC,EAAlC;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,GAAL,GAAW,EAAX;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,OAAL,GAAe,EAAf;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,OAAL,GAAe,KAAK,CAApB;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,cAAL,GAAsB,KAAK,CAA3B;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,MAAL,GAAc,IAAd;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,aAAL,GAAqB,EAArB;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,OAAL,GAAe,EAAf;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,SAAL,GAAiB,IAAjB;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,6BAAL,GAAqC,KAAK,CAA1C;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,KAAL,GAAa,EAAb;IAEA;AACR;AACA;AACA;;IACQ,KAAKC,QAAL,GAAgB,EAAhB;EACH;EAED;AACJ;AACA;AACA;;;EACIC,qCAAqC,GAAG;IACpC,MAAM;MACF;MACAZ,0BAA0B,EAAEa,QAF1B;MAGFL,SAAS,EAAEM,QAHT;;MAIF;MACAX,OALE;MAMF,GAAGY;IAND,IAOF,IAPJ;IASAA,MAAM,CAACV,MAAP,GAAgBU,MAAM,CAACV,MAAP,IAAiBU,MAAM,CAACV,MAAP,CAAcW,QAA/C;IACAD,MAAM,CAACR,OAAP,GAAiBU,MAAM,CAACC,IAAP,CAAYH,MAAM,CAACR,OAAnB,EAA4BY,MAA5B,CAAmCC,OAAnC,EAA4CC,OAA5C,EAAjB;IACAN,MAAM,CAACO,cAAP,GAAwBnB,OAAO,GAAGA,OAAO,CAACoB,QAAX,GAAsB,EAArD,CAZoC,CAcpC;;IACA,IAAIhC,UAAU,CAACwB,MAAM,CAACO,cAAR,EAAwBjC,aAAa,CAACmC,eAAtC,CAAd,EAAsE;MAClET,MAAM,CAACO,cAAP,GACIP,MAAM,CAACO,cAAP,CAAsBG,KAAtB,CAA4BpC,aAAa,CAACmC,eAAd,CAA8B9B,MAA1D,CADJ;IAEH;;IAED,OAAOqB,MAAP;EACH;;AArGiB;;AAwGtBW,MAAM,CAACC,OAAP,GAAiB;EAAE7B;AAAF,CAAjB"},"metadata":{},"sourceType":"script"}