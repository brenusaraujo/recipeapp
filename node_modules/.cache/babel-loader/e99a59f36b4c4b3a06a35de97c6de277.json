{"ast":null,"code":"/**\n * @fileoverview Rule to check for tabs inside a file\n * @author Gyandeep Singh\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst tabRegex = /\\t+/gu;\nconst anyNonWhitespaceRegex = /\\S/u; //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow all tabs\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-tabs\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowIndentationTabs: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedTab: \"Unexpected tab character.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;\n    return {\n      Program(node) {\n        sourceCode.getLines().forEach((line, index) => {\n          let match;\n\n          while ((match = tabRegex.exec(line)) !== null) {\n            if (allowIndentationTabs && !anyNonWhitespaceRegex.test(line.slice(0, match.index))) {\n              continue;\n            }\n\n            context.report({\n              node,\n              loc: {\n                start: {\n                  line: index + 1,\n                  column: match.index\n                },\n                end: {\n                  line: index + 1,\n                  column: match.index + match[0].length\n                }\n              },\n              messageId: \"unexpectedTab\"\n            });\n          }\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["tabRegex","anyNonWhitespaceRegex","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","allowIndentationTabs","default","additionalProperties","messages","unexpectedTab","create","context","sourceCode","getSourceCode","options","Program","node","getLines","forEach","line","index","match","exec","test","slice","report","loc","start","column","end","length","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-tabs.js"],"sourcesContent":["/**\n * @fileoverview Rule to check for tabs inside a file\n * @author Gyandeep Singh\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst tabRegex = /\\t+/gu;\nconst anyNonWhitespaceRegex = /\\S/u;\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow all tabs\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-tabs\"\n        },\n        schema: [{\n            type: \"object\",\n            properties: {\n                allowIndentationTabs: {\n                    type: \"boolean\",\n                    default: false\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            unexpectedTab: \"Unexpected tab character.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const allowIndentationTabs = context.options && context.options[0] && context.options[0].allowIndentationTabs;\n\n        return {\n            Program(node) {\n                sourceCode.getLines().forEach((line, index) => {\n                    let match;\n\n                    while ((match = tabRegex.exec(line)) !== null) {\n                        if (allowIndentationTabs && !anyNonWhitespaceRegex.test(line.slice(0, match.index))) {\n                            continue;\n                        }\n\n                        context.report({\n                            node,\n                            loc: {\n                                start: {\n                                    line: index + 1,\n                                    column: match.index\n                                },\n                                end: {\n                                    line: index + 1,\n                                    column: match.index + match[0].length\n                                }\n                            },\n                            messageId: \"unexpectedTab\"\n                        });\n                    }\n                });\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAG,OAAjB;AACA,MAAMC,qBAAqB,GAAG,KAA9B,C,CAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,mBADX;MAEFC,QAAQ,EAAE,kBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IASFC,MAAM,EAAE,CAAC;MACLN,IAAI,EAAE,QADD;MAELO,UAAU,EAAE;QACRC,oBAAoB,EAAE;UAClBR,IAAI,EAAE,SADY;UAElBS,OAAO,EAAE;QAFS;MADd,CAFP;MAQLC,oBAAoB,EAAE;IARjB,CAAD,CATN;IAoBFC,QAAQ,EAAE;MACNC,aAAa,EAAE;IADT;EApBR,CADO;;EA0BbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IACA,MAAMR,oBAAoB,GAAGM,OAAO,CAACG,OAAR,IAAmBH,OAAO,CAACG,OAAR,CAAgB,CAAhB,CAAnB,IAAyCH,OAAO,CAACG,OAAR,CAAgB,CAAhB,EAAmBT,oBAAzF;IAEA,OAAO;MACHU,OAAO,CAACC,IAAD,EAAO;QACVJ,UAAU,CAACK,QAAX,GAAsBC,OAAtB,CAA8B,CAACC,IAAD,EAAOC,KAAP,KAAiB;UAC3C,IAAIC,KAAJ;;UAEA,OAAO,CAACA,KAAK,GAAG7B,QAAQ,CAAC8B,IAAT,CAAcH,IAAd,CAAT,MAAkC,IAAzC,EAA+C;YAC3C,IAAId,oBAAoB,IAAI,CAACZ,qBAAqB,CAAC8B,IAAtB,CAA2BJ,IAAI,CAACK,KAAL,CAAW,CAAX,EAAcH,KAAK,CAACD,KAApB,CAA3B,CAA7B,EAAqF;cACjF;YACH;;YAEDT,OAAO,CAACc,MAAR,CAAe;cACXT,IADW;cAEXU,GAAG,EAAE;gBACDC,KAAK,EAAE;kBACHR,IAAI,EAAEC,KAAK,GAAG,CADX;kBAEHQ,MAAM,EAAEP,KAAK,CAACD;gBAFX,CADN;gBAKDS,GAAG,EAAE;kBACDV,IAAI,EAAEC,KAAK,GAAG,CADb;kBAEDQ,MAAM,EAAEP,KAAK,CAACD,KAAN,GAAcC,KAAK,CAAC,CAAD,CAAL,CAASS;gBAF9B;cALJ,CAFM;cAYXC,SAAS,EAAE;YAZA,CAAf;UAcH;QACJ,CAvBD;MAwBH;;IA1BE,CAAP;EA4BH;;AA1DY,CAAjB"},"metadata":{},"sourceType":"script"}