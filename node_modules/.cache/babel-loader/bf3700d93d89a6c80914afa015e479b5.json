{"ast":null,"code":"/**\n * @fileoverview A rule to control the style of variable initializations.\n * @author Colin Ihrig\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a for loop.\n * @param {ASTNode} block A node to check.\n * @returns {boolean} `true` when the node is a for loop.\n */\n\nfunction isForLoop(block) {\n  return block.type === \"ForInStatement\" || block.type === \"ForOfStatement\" || block.type === \"ForStatement\";\n}\n/**\n * Checks whether or not a given declarator node has its initializer.\n * @param {ASTNode} node A declarator node to check.\n * @returns {boolean} `true` when the node has its initializer.\n */\n\n\nfunction isInitialized(node) {\n  const declaration = node.parent;\n  const block = declaration.parent;\n\n  if (isForLoop(block)) {\n    if (block.type === \"ForStatement\") {\n      return block.init === declaration;\n    }\n\n    return block.left === declaration;\n  }\n\n  return Boolean(node.init);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require or disallow initialization in variable declarations\",\n      category: \"Variables\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/init-declarations\"\n    },\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }, {\n          type: \"object\",\n          properties: {\n            ignoreForLoopInit: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      initialized: \"Variable '{{idName}}' should be initialized on declaration.\",\n      notInitialized: \"Variable '{{idName}}' should not be initialized on declaration.\"\n    }\n  },\n\n  create(context) {\n    const MODE_ALWAYS = \"always\",\n          MODE_NEVER = \"never\";\n    const mode = context.options[0] || MODE_ALWAYS;\n    const params = context.options[1] || {}; //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n    return {\n      \"VariableDeclaration:exit\"(node) {\n        const kind = node.kind,\n              declarations = node.declarations;\n\n        for (let i = 0; i < declarations.length; ++i) {\n          const declaration = declarations[i],\n                id = declaration.id,\n                initialized = isInitialized(declaration),\n                isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);\n          let messageId = \"\";\n\n          if (mode === MODE_ALWAYS && !initialized) {\n            messageId = \"initialized\";\n          } else if (mode === MODE_NEVER && kind !== \"const\" && initialized && !isIgnoredForLoop) {\n            messageId = \"notInitialized\";\n          }\n\n          if (id.type === \"Identifier\" && messageId) {\n            context.report({\n              node: declaration,\n              messageId,\n              data: {\n                idName: id.name\n              }\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["isForLoop","block","type","isInitialized","node","declaration","parent","init","left","Boolean","module","exports","meta","docs","description","category","recommended","url","schema","anyOf","items","enum","minItems","maxItems","properties","ignoreForLoopInit","additionalProperties","messages","initialized","notInitialized","create","context","MODE_ALWAYS","MODE_NEVER","mode","options","params","kind","declarations","i","length","id","isIgnoredForLoop","messageId","report","data","idName","name"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/init-declarations.js"],"sourcesContent":["/**\n * @fileoverview A rule to control the style of variable initializations.\n * @author Colin Ihrig\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a given node is a for loop.\n * @param {ASTNode} block A node to check.\n * @returns {boolean} `true` when the node is a for loop.\n */\nfunction isForLoop(block) {\n    return block.type === \"ForInStatement\" ||\n    block.type === \"ForOfStatement\" ||\n    block.type === \"ForStatement\";\n}\n\n/**\n * Checks whether or not a given declarator node has its initializer.\n * @param {ASTNode} node A declarator node to check.\n * @returns {boolean} `true` when the node has its initializer.\n */\nfunction isInitialized(node) {\n    const declaration = node.parent;\n    const block = declaration.parent;\n\n    if (isForLoop(block)) {\n        if (block.type === \"ForStatement\") {\n            return block.init === declaration;\n        }\n        return block.left === declaration;\n    }\n    return Boolean(node.init);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require or disallow initialization in variable declarations\",\n            category: \"Variables\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/init-declarations\"\n        },\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                ignoreForLoopInit: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n        messages: {\n            initialized: \"Variable '{{idName}}' should be initialized on declaration.\",\n            notInitialized: \"Variable '{{idName}}' should not be initialized on declaration.\"\n        }\n    },\n\n    create(context) {\n\n        const MODE_ALWAYS = \"always\",\n            MODE_NEVER = \"never\";\n\n        const mode = context.options[0] || MODE_ALWAYS;\n        const params = context.options[1] || {};\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            \"VariableDeclaration:exit\"(node) {\n\n                const kind = node.kind,\n                    declarations = node.declarations;\n\n                for (let i = 0; i < declarations.length; ++i) {\n                    const declaration = declarations[i],\n                        id = declaration.id,\n                        initialized = isInitialized(declaration),\n                        isIgnoredForLoop = params.ignoreForLoopInit && isForLoop(node.parent);\n                    let messageId = \"\";\n\n                    if (mode === MODE_ALWAYS && !initialized) {\n                        messageId = \"initialized\";\n                    } else if (mode === MODE_NEVER && kind !== \"const\" && initialized && !isIgnoredForLoop) {\n                        messageId = \"notInitialized\";\n                    }\n\n                    if (id.type === \"Identifier\" && messageId) {\n                        context.report({\n                            node: declaration,\n                            messageId,\n                            data: {\n                                idName: id.name\n                            }\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}