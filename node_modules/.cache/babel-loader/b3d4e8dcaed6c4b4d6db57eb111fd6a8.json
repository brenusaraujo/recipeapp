{"ast":null,"code":"/**\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\n * @author Andrew Levine\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow calling some `Object.prototype` methods directly on objects\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-prototype-builtins\"\n    },\n    schema: [],\n    messages: {\n      prototypeBuildIn: \"Do not access Object.prototype method '{{prop}}' from target object.\"\n    }\n  },\n\n  create(context) {\n    const DISALLOWED_PROPS = [\"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\"];\n    /**\n     * Reports if a disallowed property is used in a CallExpression\n     * @param {ASTNode} node The CallExpression node.\n     * @returns {void}\n     */\n\n    function disallowBuiltIns(node) {\n      const callee = astUtils.skipChainExpression(node.callee);\n\n      if (callee.type !== \"MemberExpression\") {\n        return;\n      }\n\n      const propName = astUtils.getStaticPropertyName(callee);\n\n      if (propName !== null && DISALLOWED_PROPS.indexOf(propName) > -1) {\n        context.report({\n          messageId: \"prototypeBuildIn\",\n          loc: callee.property.loc,\n          data: {\n            prop: propName\n          },\n          node\n        });\n      }\n    }\n\n    return {\n      CallExpression: disallowBuiltIns\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","prototypeBuildIn","create","context","DISALLOWED_PROPS","disallowBuiltIns","node","callee","skipChainExpression","propName","getStaticPropertyName","indexOf","report","messageId","loc","property","data","prop","CallExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-prototype-builtins.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow use of Object.prototype builtins on objects\n * @author Andrew Levine\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow calling some `Object.prototype` methods directly on objects\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-prototype-builtins\"\n        },\n\n        schema: [],\n\n        messages: {\n            prototypeBuildIn: \"Do not access Object.prototype method '{{prop}}' from target object.\"\n        }\n    },\n\n    create(context) {\n        const DISALLOWED_PROPS = [\n            \"hasOwnProperty\",\n            \"isPrototypeOf\",\n            \"propertyIsEnumerable\"\n        ];\n\n        /**\n         * Reports if a disallowed property is used in a CallExpression\n         * @param {ASTNode} node The CallExpression node.\n         * @returns {void}\n         */\n        function disallowBuiltIns(node) {\n\n            const callee = astUtils.skipChainExpression(node.callee);\n\n            if (callee.type !== \"MemberExpression\") {\n                return;\n            }\n\n            const propName = astUtils.getStaticPropertyName(callee);\n\n            if (propName !== null && DISALLOWED_PROPS.indexOf(propName) > -1) {\n                context.report({\n                    messageId: \"prototypeBuildIn\",\n                    loc: callee.property.loc,\n                    data: { prop: propName },\n                    node\n                });\n            }\n        }\n\n        return {\n            CallExpression: disallowBuiltIns\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,sEADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,gBAAgB,EAAE;IADZ;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,gBAAgB,GAAG,CACrB,gBADqB,EAErB,eAFqB,EAGrB,sBAHqB,CAAzB;IAMA;AACR;AACA;AACA;AACA;;IACQ,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;MAE5B,MAAMC,MAAM,GAAGnB,QAAQ,CAACoB,mBAAT,CAA6BF,IAAI,CAACC,MAAlC,CAAf;;MAEA,IAAIA,MAAM,CAACd,IAAP,KAAgB,kBAApB,EAAwC;QACpC;MACH;;MAED,MAAMgB,QAAQ,GAAGrB,QAAQ,CAACsB,qBAAT,CAA+BH,MAA/B,CAAjB;;MAEA,IAAIE,QAAQ,KAAK,IAAb,IAAqBL,gBAAgB,CAACO,OAAjB,CAAyBF,QAAzB,IAAqC,CAAC,CAA/D,EAAkE;QAC9DN,OAAO,CAACS,MAAR,CAAe;UACXC,SAAS,EAAE,kBADA;UAEXC,GAAG,EAAEP,MAAM,CAACQ,QAAP,CAAgBD,GAFV;UAGXE,IAAI,EAAE;YAAEC,IAAI,EAAER;UAAR,CAHK;UAIXH;QAJW,CAAf;MAMH;IACJ;;IAED,OAAO;MACHY,cAAc,EAAEb;IADb,CAAP;EAGH;;AArDY,CAAjB"},"metadata":{},"sourceType":"script"}