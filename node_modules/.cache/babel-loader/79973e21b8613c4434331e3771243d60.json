{"ast":null,"code":"/**\n * @fileoverview The rule should warn against code that tries to compare against -0.\n * @author Aladdin-ADD <hh_2013@foxmail.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow comparing against -0\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-compare-neg-zero\"\n    },\n    fixable: null,\n    schema: [],\n    messages: {\n      unexpected: \"Do not use the '{{operator}}' operator to compare against -0.\"\n    }\n  },\n\n  create(context) {\n    //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Checks a given node is -0\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} `true` if the node is -0.\n     */\n    function isNegZero(node) {\n      return node.type === \"UnaryExpression\" && node.operator === \"-\" && node.argument.type === \"Literal\" && node.argument.value === 0;\n    }\n\n    const OPERATORS_TO_CHECK = new Set([\">\", \">=\", \"<\", \"<=\", \"==\", \"===\", \"!=\", \"!==\"]);\n    return {\n      BinaryExpression(node) {\n        if (OPERATORS_TO_CHECK.has(node.operator)) {\n          if (isNegZero(node.left) || isNegZero(node.right)) {\n            context.report({\n              node,\n              messageId: \"unexpected\",\n              data: {\n                operator: node.operator\n              }\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","unexpected","create","context","isNegZero","node","operator","argument","value","OPERATORS_TO_CHECK","Set","BinaryExpression","has","left","right","report","messageId","data"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-compare-neg-zero.js"],"sourcesContent":["/**\n * @fileoverview The rule should warn against code that tries to compare against -0.\n * @author Aladdin-ADD <hh_2013@foxmail.com>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow comparing against -0\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-compare-neg-zero\"\n        },\n\n        fixable: null,\n        schema: [],\n\n        messages: {\n            unexpected: \"Do not use the '{{operator}}' operator to compare against -0.\"\n        }\n    },\n\n    create(context) {\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Checks a given node is -0\n         * @param {ASTNode} node A node to check.\n         * @returns {boolean} `true` if the node is -0.\n         */\n        function isNegZero(node) {\n            return node.type === \"UnaryExpression\" && node.operator === \"-\" && node.argument.type === \"Literal\" && node.argument.value === 0;\n        }\n        const OPERATORS_TO_CHECK = new Set([\">\", \">=\", \"<\", \"<=\", \"==\", \"===\", \"!=\", \"!==\"]);\n\n        return {\n            BinaryExpression(node) {\n                if (OPERATORS_TO_CHECK.has(node.operator)) {\n                    if (isNegZero(node.left) || isNegZero(node.right)) {\n                        context.report({\n                            node,\n                            messageId: \"unexpected\",\n                            data: { operator: node.operator }\n                        });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,+BADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,OAAO,EAAE,IAVP;IAWFC,MAAM,EAAE,EAXN;IAaFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAbR,CADO;;EAmBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;IACQ,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;MACrB,OAAOA,IAAI,CAACb,IAAL,KAAc,iBAAd,IAAmCa,IAAI,CAACC,QAAL,KAAkB,GAArD,IAA4DD,IAAI,CAACE,QAAL,CAAcf,IAAd,KAAuB,SAAnF,IAAgGa,IAAI,CAACE,QAAL,CAAcC,KAAd,KAAwB,CAA/H;IACH;;IACD,MAAMC,kBAAkB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,IAApC,EAA0C,KAA1C,CAAR,CAA3B;IAEA,OAAO;MACHC,gBAAgB,CAACN,IAAD,EAAO;QACnB,IAAII,kBAAkB,CAACG,GAAnB,CAAuBP,IAAI,CAACC,QAA5B,CAAJ,EAA2C;UACvC,IAAIF,SAAS,CAACC,IAAI,CAACQ,IAAN,CAAT,IAAwBT,SAAS,CAACC,IAAI,CAACS,KAAN,CAArC,EAAmD;YAC/CX,OAAO,CAACY,MAAR,CAAe;cACXV,IADW;cAEXW,SAAS,EAAE,YAFA;cAGXC,IAAI,EAAE;gBAAEX,QAAQ,EAAED,IAAI,CAACC;cAAjB;YAHK,CAAf;UAKH;QACJ;MACJ;;IAXE,CAAP;EAaH;;AAhDY,CAAjB"},"metadata":{},"sourceType":"script"}