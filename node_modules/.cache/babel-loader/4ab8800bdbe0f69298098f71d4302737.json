{"ast":null,"code":"/**\n * @fileoverview Rule to suggest using \"Reflect\" api over Function/Object methods\n * @author Keith Cirkel <http://keithcirkel.co.uk>\n * @deprecated in ESLint v3.9.0\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `Reflect` methods where applicable\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-reflect\"\n    },\n    deprecated: true,\n    replacedBy: [],\n    schema: [{\n      type: \"object\",\n      properties: {\n        exceptions: {\n          type: \"array\",\n          items: {\n            enum: [\"apply\", \"call\", \"delete\", \"defineProperty\", \"getOwnPropertyDescriptor\", \"getPrototypeOf\", \"setPrototypeOf\", \"isExtensible\", \"getOwnPropertyNames\", \"preventExtensions\"]\n          },\n          uniqueItems: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      preferReflect: \"Avoid using {{existing}}, instead use {{substitute}}.\"\n    }\n  },\n\n  create(context) {\n    const existingNames = {\n      apply: \"Function.prototype.apply\",\n      call: \"Function.prototype.call\",\n      defineProperty: \"Object.defineProperty\",\n      getOwnPropertyDescriptor: \"Object.getOwnPropertyDescriptor\",\n      getPrototypeOf: \"Object.getPrototypeOf\",\n      setPrototypeOf: \"Object.setPrototypeOf\",\n      isExtensible: \"Object.isExtensible\",\n      getOwnPropertyNames: \"Object.getOwnPropertyNames\",\n      preventExtensions: \"Object.preventExtensions\"\n    };\n    const reflectSubstitutes = {\n      apply: \"Reflect.apply\",\n      call: \"Reflect.apply\",\n      defineProperty: \"Reflect.defineProperty\",\n      getOwnPropertyDescriptor: \"Reflect.getOwnPropertyDescriptor\",\n      getPrototypeOf: \"Reflect.getPrototypeOf\",\n      setPrototypeOf: \"Reflect.setPrototypeOf\",\n      isExtensible: \"Reflect.isExtensible\",\n      getOwnPropertyNames: \"Reflect.getOwnPropertyNames\",\n      preventExtensions: \"Reflect.preventExtensions\"\n    };\n    const exceptions = (context.options[0] || {}).exceptions || [];\n    /**\n     * Reports the Reflect violation based on the `existing` and `substitute`\n     * @param {Object} node The node that violates the rule.\n     * @param {string} existing The existing method name that has been used.\n     * @param {string} substitute The Reflect substitute that should be used.\n     * @returns {void}\n     */\n\n    function report(node, existing, substitute) {\n      context.report({\n        node,\n        messageId: \"preferReflect\",\n        data: {\n          existing,\n          substitute\n        }\n      });\n    }\n\n    return {\n      CallExpression(node) {\n        const methodName = (node.callee.property || {}).name;\n        const isReflectCall = (node.callee.object || {}).name === \"Reflect\";\n        const hasReflectSubstitute = Object.prototype.hasOwnProperty.call(reflectSubstitutes, methodName);\n        const userConfiguredException = exceptions.indexOf(methodName) !== -1;\n\n        if (hasReflectSubstitute && !isReflectCall && !userConfiguredException) {\n          report(node, existingNames[methodName], reflectSubstitutes[methodName]);\n        }\n      },\n\n      UnaryExpression(node) {\n        const isDeleteOperator = node.operator === \"delete\";\n        const targetsIdentifier = node.argument.type === \"Identifier\";\n        const userConfiguredException = exceptions.indexOf(\"delete\") !== -1;\n\n        if (isDeleteOperator && !targetsIdentifier && !userConfiguredException) {\n          report(node, \"the delete keyword\", \"Reflect.deleteProperty\");\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","deprecated","replacedBy","schema","properties","exceptions","items","enum","uniqueItems","additionalProperties","messages","preferReflect","create","context","existingNames","apply","call","defineProperty","getOwnPropertyDescriptor","getPrototypeOf","setPrototypeOf","isExtensible","getOwnPropertyNames","preventExtensions","reflectSubstitutes","options","report","node","existing","substitute","messageId","data","CallExpression","methodName","callee","property","name","isReflectCall","object","hasReflectSubstitute","Object","prototype","hasOwnProperty","userConfiguredException","indexOf","UnaryExpression","isDeleteOperator","operator","targetsIdentifier","argument"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/prefer-reflect.js"],"sourcesContent":["/**\n * @fileoverview Rule to suggest using \"Reflect\" api over Function/Object methods\n * @author Keith Cirkel <http://keithcirkel.co.uk>\n * @deprecated in ESLint v3.9.0\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `Reflect` methods where applicable\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/prefer-reflect\"\n        },\n\n        deprecated: true,\n\n        replacedBy: [],\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    exceptions: {\n                        type: \"array\",\n                        items: {\n                            enum: [\n                                \"apply\",\n                                \"call\",\n                                \"delete\",\n                                \"defineProperty\",\n                                \"getOwnPropertyDescriptor\",\n                                \"getPrototypeOf\",\n                                \"setPrototypeOf\",\n                                \"isExtensible\",\n                                \"getOwnPropertyNames\",\n                                \"preventExtensions\"\n                            ]\n                        },\n                        uniqueItems: true\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            preferReflect: \"Avoid using {{existing}}, instead use {{substitute}}.\"\n        }\n    },\n\n    create(context) {\n        const existingNames = {\n            apply: \"Function.prototype.apply\",\n            call: \"Function.prototype.call\",\n            defineProperty: \"Object.defineProperty\",\n            getOwnPropertyDescriptor: \"Object.getOwnPropertyDescriptor\",\n            getPrototypeOf: \"Object.getPrototypeOf\",\n            setPrototypeOf: \"Object.setPrototypeOf\",\n            isExtensible: \"Object.isExtensible\",\n            getOwnPropertyNames: \"Object.getOwnPropertyNames\",\n            preventExtensions: \"Object.preventExtensions\"\n        };\n\n        const reflectSubstitutes = {\n            apply: \"Reflect.apply\",\n            call: \"Reflect.apply\",\n            defineProperty: \"Reflect.defineProperty\",\n            getOwnPropertyDescriptor: \"Reflect.getOwnPropertyDescriptor\",\n            getPrototypeOf: \"Reflect.getPrototypeOf\",\n            setPrototypeOf: \"Reflect.setPrototypeOf\",\n            isExtensible: \"Reflect.isExtensible\",\n            getOwnPropertyNames: \"Reflect.getOwnPropertyNames\",\n            preventExtensions: \"Reflect.preventExtensions\"\n        };\n\n        const exceptions = (context.options[0] || {}).exceptions || [];\n\n        /**\n         * Reports the Reflect violation based on the `existing` and `substitute`\n         * @param {Object} node The node that violates the rule.\n         * @param {string} existing The existing method name that has been used.\n         * @param {string} substitute The Reflect substitute that should be used.\n         * @returns {void}\n         */\n        function report(node, existing, substitute) {\n            context.report({\n                node,\n                messageId: \"preferReflect\",\n                data: {\n                    existing,\n                    substitute\n                }\n            });\n        }\n\n        return {\n            CallExpression(node) {\n                const methodName = (node.callee.property || {}).name;\n                const isReflectCall = (node.callee.object || {}).name === \"Reflect\";\n                const hasReflectSubstitute = Object.prototype.hasOwnProperty.call(reflectSubstitutes, methodName);\n                const userConfiguredException = exceptions.indexOf(methodName) !== -1;\n\n                if (hasReflectSubstitute && !isReflectCall && !userConfiguredException) {\n                    report(node, existingNames[methodName], reflectSubstitutes[methodName]);\n                }\n            },\n            UnaryExpression(node) {\n                const isDeleteOperator = node.operator === \"delete\";\n                const targetsIdentifier = node.argument.type === \"Identifier\";\n                const userConfiguredException = exceptions.indexOf(\"delete\") !== -1;\n\n                if (isDeleteOperator && !targetsIdentifier && !userConfiguredException) {\n                    report(node, \"the delete keyword\", \"Reflect.deleteProperty\");\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}