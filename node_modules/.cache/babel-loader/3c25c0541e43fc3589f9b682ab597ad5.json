{"ast":null,"code":"/**\n * @fileoverview `Map` to load rules lazily.\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\nconst debug = require(\"debug\")(\"eslint:rules\");\n/** @typedef {import(\"./types\").Rule} Rule */\n\n/**\n * The `Map` object that loads each rule when it's accessed.\n * @example\n * const rules = new LazyLoadingRuleMap([\n *     [\"eqeqeq\", () => require(\"eqeqeq\")],\n *     [\"semi\", () => require(\"semi\")],\n *     [\"no-unused-vars\", () => require(\"no-unused-vars\")],\n * ])\n *\n * rules.get(\"semi\") // call `() => require(\"semi\")` here.\n *\n * @extends {Map<string, () => Rule>}\n */\n\n\nclass LazyLoadingRuleMap extends Map {\n  /**\n   * Initialize this map.\n   * @param {Array<[string, function(): Rule]>} loaders The rule loaders.\n   */\n  constructor(loaders) {\n    let remaining = loaders.length;\n    super(debug.enabled ? loaders.map(_ref => {\n      let [ruleId, load] = _ref;\n      let cache = null;\n      return [ruleId, () => {\n        if (!cache) {\n          debug(\"Loading rule %o (remaining=%d)\", ruleId, --remaining);\n          cache = load();\n        }\n\n        return cache;\n      }];\n    }) : loaders); // `super(...iterable)` uses `this.set()`, so disable it here.\n\n    Object.defineProperty(LazyLoadingRuleMap.prototype, \"set\", {\n      configurable: true,\n      value: void 0\n    });\n  }\n  /**\n   * Get a rule.\n   * Each rule will be loaded on the first access.\n   * @param {string} ruleId The rule ID to get.\n   * @returns {Rule|undefined} The rule.\n   */\n\n\n  get(ruleId) {\n    const load = super.get(ruleId);\n    return load && load();\n  }\n  /**\n   * Iterate rules.\n   * @returns {IterableIterator<Rule>} Rules.\n   */\n\n\n  *values() {\n    for (const load of super.values()) {\n      yield load();\n    }\n  }\n  /**\n   * Iterate rules.\n   * @returns {IterableIterator<[string, Rule]>} Rules.\n   */\n\n\n  *entries() {\n    for (const [ruleId, load] of super.entries()) {\n      yield [ruleId, load()];\n    }\n  }\n  /**\n   * Call a function with each rule.\n   * @param {Function} callbackFn The callback function.\n   * @param {any} [thisArg] The object to pass to `this` of the callback function.\n   * @returns {void}\n   */\n\n\n  forEach(callbackFn, thisArg) {\n    for (const [ruleId, load] of super.entries()) {\n      callbackFn.call(thisArg, load(), ruleId, this);\n    }\n  }\n\n} // Forbid mutation.\n\n\nObject.defineProperties(LazyLoadingRuleMap.prototype, {\n  clear: {\n    configurable: true,\n    value: void 0\n  },\n  delete: {\n    configurable: true,\n    value: void 0\n  },\n  [Symbol.iterator]: {\n    configurable: true,\n    writable: true,\n    value: LazyLoadingRuleMap.prototype.entries\n  }\n});\nmodule.exports = {\n  LazyLoadingRuleMap\n};","map":{"version":3,"names":["debug","require","LazyLoadingRuleMap","Map","constructor","loaders","remaining","length","enabled","map","ruleId","load","cache","Object","defineProperty","prototype","configurable","value","get","values","entries","forEach","callbackFn","thisArg","call","defineProperties","clear","delete","Symbol","iterator","writable","module","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/utils/lazy-loading-rule-map.js"],"sourcesContent":["/**\n * @fileoverview `Map` to load rules lazily.\n * @author Toru Nagashima <https://github.com/mysticatea>\n */\n\"use strict\";\n\nconst debug = require(\"debug\")(\"eslint:rules\");\n\n/** @typedef {import(\"./types\").Rule} Rule */\n\n/**\n * The `Map` object that loads each rule when it's accessed.\n * @example\n * const rules = new LazyLoadingRuleMap([\n *     [\"eqeqeq\", () => require(\"eqeqeq\")],\n *     [\"semi\", () => require(\"semi\")],\n *     [\"no-unused-vars\", () => require(\"no-unused-vars\")],\n * ])\n *\n * rules.get(\"semi\") // call `() => require(\"semi\")` here.\n *\n * @extends {Map<string, () => Rule>}\n */\nclass LazyLoadingRuleMap extends Map {\n\n    /**\n     * Initialize this map.\n     * @param {Array<[string, function(): Rule]>} loaders The rule loaders.\n     */\n    constructor(loaders) {\n        let remaining = loaders.length;\n\n        super(\n            debug.enabled\n                ? loaders.map(([ruleId, load]) => {\n                    let cache = null;\n\n                    return [\n                        ruleId,\n                        () => {\n                            if (!cache) {\n                                debug(\"Loading rule %o (remaining=%d)\", ruleId, --remaining);\n                                cache = load();\n                            }\n                            return cache;\n                        }\n                    ];\n                })\n                : loaders\n        );\n\n        // `super(...iterable)` uses `this.set()`, so disable it here.\n        Object.defineProperty(LazyLoadingRuleMap.prototype, \"set\", {\n            configurable: true,\n            value: void 0\n        });\n    }\n\n    /**\n     * Get a rule.\n     * Each rule will be loaded on the first access.\n     * @param {string} ruleId The rule ID to get.\n     * @returns {Rule|undefined} The rule.\n     */\n    get(ruleId) {\n        const load = super.get(ruleId);\n\n        return load && load();\n    }\n\n    /**\n     * Iterate rules.\n     * @returns {IterableIterator<Rule>} Rules.\n     */\n    *values() {\n        for (const load of super.values()) {\n            yield load();\n        }\n    }\n\n    /**\n     * Iterate rules.\n     * @returns {IterableIterator<[string, Rule]>} Rules.\n     */\n    *entries() {\n        for (const [ruleId, load] of super.entries()) {\n            yield [ruleId, load()];\n        }\n    }\n\n    /**\n     * Call a function with each rule.\n     * @param {Function} callbackFn The callback function.\n     * @param {any} [thisArg] The object to pass to `this` of the callback function.\n     * @returns {void}\n     */\n    forEach(callbackFn, thisArg) {\n        for (const [ruleId, load] of super.entries()) {\n            callbackFn.call(thisArg, load(), ruleId, this);\n        }\n    }\n}\n\n// Forbid mutation.\nObject.defineProperties(LazyLoadingRuleMap.prototype, {\n    clear: { configurable: true, value: void 0 },\n    delete: { configurable: true, value: void 0 },\n    [Symbol.iterator]: {\n        configurable: true,\n        writable: true,\n        value: LazyLoadingRuleMap.prototype.entries\n    }\n});\n\nmodule.exports = { LazyLoadingRuleMap };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiB,cAAjB,CAAd;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,kBAAN,SAAiCC,GAAjC,CAAqC;EAEjC;AACJ;AACA;AACA;EACIC,WAAW,CAACC,OAAD,EAAU;IACjB,IAAIC,SAAS,GAAGD,OAAO,CAACE,MAAxB;IAEA,MACIP,KAAK,CAACQ,OAAN,GACMH,OAAO,CAACI,GAAR,CAAY,QAAoB;MAAA,IAAnB,CAACC,MAAD,EAASC,IAAT,CAAmB;MAC9B,IAAIC,KAAK,GAAG,IAAZ;MAEA,OAAO,CACHF,MADG,EAEH,MAAM;QACF,IAAI,CAACE,KAAL,EAAY;UACRZ,KAAK,CAAC,gCAAD,EAAmCU,MAAnC,EAA2C,EAAEJ,SAA7C,CAAL;UACAM,KAAK,GAAGD,IAAI,EAAZ;QACH;;QACD,OAAOC,KAAP;MACH,CARE,CAAP;IAUH,CAbC,CADN,GAeMP,OAhBV,EAHiB,CAsBjB;;IACAQ,MAAM,CAACC,cAAP,CAAsBZ,kBAAkB,CAACa,SAAzC,EAAoD,KAApD,EAA2D;MACvDC,YAAY,EAAE,IADyC;MAEvDC,KAAK,EAAE,KAAK;IAF2C,CAA3D;EAIH;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIC,GAAG,CAACR,MAAD,EAAS;IACR,MAAMC,IAAI,GAAG,MAAMO,GAAN,CAAUR,MAAV,CAAb;IAEA,OAAOC,IAAI,IAAIA,IAAI,EAAnB;EACH;EAED;AACJ;AACA;AACA;;;EACW,CAANQ,MAAM,GAAG;IACN,KAAK,MAAMR,IAAX,IAAmB,MAAMQ,MAAN,EAAnB,EAAmC;MAC/B,MAAMR,IAAI,EAAV;IACH;EACJ;EAED;AACJ;AACA;AACA;;;EACY,CAAPS,OAAO,GAAG;IACP,KAAK,MAAM,CAACV,MAAD,EAASC,IAAT,CAAX,IAA6B,MAAMS,OAAN,EAA7B,EAA8C;MAC1C,MAAM,CAACV,MAAD,EAASC,IAAI,EAAb,CAAN;IACH;EACJ;EAED;AACJ;AACA;AACA;AACA;AACA;;;EACIU,OAAO,CAACC,UAAD,EAAaC,OAAb,EAAsB;IACzB,KAAK,MAAM,CAACb,MAAD,EAASC,IAAT,CAAX,IAA6B,MAAMS,OAAN,EAA7B,EAA8C;MAC1CE,UAAU,CAACE,IAAX,CAAgBD,OAAhB,EAAyBZ,IAAI,EAA7B,EAAiCD,MAAjC,EAAyC,IAAzC;IACH;EACJ;;AA7EgC,C,CAgFrC;;;AACAG,MAAM,CAACY,gBAAP,CAAwBvB,kBAAkB,CAACa,SAA3C,EAAsD;EAClDW,KAAK,EAAE;IAAEV,YAAY,EAAE,IAAhB;IAAsBC,KAAK,EAAE,KAAK;EAAlC,CAD2C;EAElDU,MAAM,EAAE;IAAEX,YAAY,EAAE,IAAhB;IAAsBC,KAAK,EAAE,KAAK;EAAlC,CAF0C;EAGlD,CAACW,MAAM,CAACC,QAAR,GAAmB;IACfb,YAAY,EAAE,IADC;IAEfc,QAAQ,EAAE,IAFK;IAGfb,KAAK,EAAEf,kBAAkB,CAACa,SAAnB,CAA6BK;EAHrB;AAH+B,CAAtD;AAUAW,MAAM,CAACC,OAAP,GAAiB;EAAE9B;AAAF,CAAjB"},"metadata":{},"sourceType":"script"}