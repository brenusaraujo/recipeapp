{"ast":null,"code":"/**\n * @fileoverview Module for loading rules from files and directories.\n * @author Michael Ficarra\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst fs = require(\"fs\"),\n      path = require(\"path\");\n\nconst rulesDirCache = {}; //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Load all rule modules from specified directory.\n * @param {string} relativeRulesDir Path to rules directory, may be relative.\n * @param {string} cwd Current working directory\n * @returns {Object} Loaded rule modules.\n */\n\nmodule.exports = function (relativeRulesDir, cwd) {\n  const rulesDir = path.resolve(cwd, relativeRulesDir); // cache will help performance as IO operation are expensive\n\n  if (rulesDirCache[rulesDir]) {\n    return rulesDirCache[rulesDir];\n  }\n\n  const rules = Object.create(null);\n  fs.readdirSync(rulesDir).forEach(file => {\n    if (path.extname(file) !== \".js\") {\n      return;\n    }\n\n    rules[file.slice(0, -3)] = require(path.join(rulesDir, file));\n  });\n  rulesDirCache[rulesDir] = rules;\n  return rules;\n};","map":{"version":3,"names":["fs","require","path","rulesDirCache","module","exports","relativeRulesDir","cwd","rulesDir","resolve","rules","Object","create","readdirSync","forEach","file","extname","slice","join"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/cli-engine/load-rules.js"],"sourcesContent":["/**\n * @fileoverview Module for loading rules from files and directories.\n * @author Michael Ficarra\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst fs = require(\"fs\"),\n    path = require(\"path\");\n\nconst rulesDirCache = {};\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n/**\n * Load all rule modules from specified directory.\n * @param {string} relativeRulesDir Path to rules directory, may be relative.\n * @param {string} cwd Current working directory\n * @returns {Object} Loaded rule modules.\n */\nmodule.exports = function(relativeRulesDir, cwd) {\n    const rulesDir = path.resolve(cwd, relativeRulesDir);\n\n    // cache will help performance as IO operation are expensive\n    if (rulesDirCache[rulesDir]) {\n        return rulesDirCache[rulesDir];\n    }\n\n    const rules = Object.create(null);\n\n    fs.readdirSync(rulesDir).forEach(file => {\n        if (path.extname(file) !== \".js\") {\n            return;\n        }\n        rules[file.slice(0, -3)] = require(path.join(rulesDir, file));\n    });\n    rulesDirCache[rulesDir] = rules;\n\n    return rules;\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;AAAA,MACIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CADlB;;AAGA,MAAME,aAAa,GAAG,EAAtB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAASC,gBAAT,EAA2BC,GAA3B,EAAgC;EAC7C,MAAMC,QAAQ,GAAGN,IAAI,CAACO,OAAL,CAAaF,GAAb,EAAkBD,gBAAlB,CAAjB,CAD6C,CAG7C;;EACA,IAAIH,aAAa,CAACK,QAAD,CAAjB,EAA6B;IACzB,OAAOL,aAAa,CAACK,QAAD,CAApB;EACH;;EAED,MAAME,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAd;EAEAZ,EAAE,CAACa,WAAH,CAAeL,QAAf,EAAyBM,OAAzB,CAAiCC,IAAI,IAAI;IACrC,IAAIb,IAAI,CAACc,OAAL,CAAaD,IAAb,MAAuB,KAA3B,EAAkC;MAC9B;IACH;;IACDL,KAAK,CAACK,IAAI,CAACE,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAD,CAAL,GAA2BhB,OAAO,CAACC,IAAI,CAACgB,IAAL,CAAUV,QAAV,EAAoBO,IAApB,CAAD,CAAlC;EACH,CALD;EAMAZ,aAAa,CAACK,QAAD,CAAb,GAA0BE,KAA1B;EAEA,OAAOA,KAAP;AACH,CAnBD"},"metadata":{},"sourceType":"script"}