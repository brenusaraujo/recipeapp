{"ast":null,"code":"/**\n * @fileoverview Disallow parenthesising higher precedence subexpressions.\n * @author Michael Ficarra\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst {\n  isParenthesized: isParenthesizedRaw\n} = require(\"eslint-utils\");\n\nconst astUtils = require(\"./utils/ast-utils.js\");\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"disallow unnecessary parentheses\",\n      category: \"Possible Errors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-extra-parens\"\n    },\n    fixable: \"code\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"functions\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"all\"]\n        }, {\n          type: \"object\",\n          properties: {\n            conditionalAssign: {\n              type: \"boolean\"\n            },\n            nestedBinaryExpressions: {\n              type: \"boolean\"\n            },\n            returnAssign: {\n              type: \"boolean\"\n            },\n            ignoreJSX: {\n              enum: [\"none\", \"all\", \"single-line\", \"multi-line\"]\n            },\n            enforceForArrowConditionals: {\n              type: \"boolean\"\n            },\n            enforceForSequenceExpressions: {\n              type: \"boolean\"\n            },\n            enforceForNewInMemberExpressions: {\n              type: \"boolean\"\n            },\n            enforceForFunctionPrototypeMethods: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      unexpected: \"Unnecessary parentheses around expression.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const tokensToIgnore = new WeakSet();\n    const precedence = astUtils.getPrecedence;\n    const ALL_NODES = context.options[0] !== \"functions\";\n    const EXCEPT_COND_ASSIGN = ALL_NODES && context.options[1] && context.options[1].conditionalAssign === false;\n    const NESTED_BINARY = ALL_NODES && context.options[1] && context.options[1].nestedBinaryExpressions === false;\n    const EXCEPT_RETURN_ASSIGN = ALL_NODES && context.options[1] && context.options[1].returnAssign === false;\n    const IGNORE_JSX = ALL_NODES && context.options[1] && context.options[1].ignoreJSX;\n    const IGNORE_ARROW_CONDITIONALS = ALL_NODES && context.options[1] && context.options[1].enforceForArrowConditionals === false;\n    const IGNORE_SEQUENCE_EXPRESSIONS = ALL_NODES && context.options[1] && context.options[1].enforceForSequenceExpressions === false;\n    const IGNORE_NEW_IN_MEMBER_EXPR = ALL_NODES && context.options[1] && context.options[1].enforceForNewInMemberExpressions === false;\n    const IGNORE_FUNCTION_PROTOTYPE_METHODS = ALL_NODES && context.options[1] && context.options[1].enforceForFunctionPrototypeMethods === false;\n    const PRECEDENCE_OF_ASSIGNMENT_EXPR = precedence({\n      type: \"AssignmentExpression\"\n    });\n    const PRECEDENCE_OF_UPDATE_EXPR = precedence({\n      type: \"UpdateExpression\"\n    });\n    let reportsBuffer;\n    /**\n     * Determines whether the given node is a `call` or `apply` method call, invoked directly on a `FunctionExpression` node.\n     * Example: function(){}.call()\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is an immediate `call` or `apply` method call.\n     * @private\n     */\n\n    function isImmediateFunctionPrototypeMethodCall(node) {\n      const callNode = astUtils.skipChainExpression(node);\n\n      if (callNode.type !== \"CallExpression\") {\n        return false;\n      }\n\n      const callee = astUtils.skipChainExpression(callNode.callee);\n      return callee.type === \"MemberExpression\" && callee.object.type === \"FunctionExpression\" && [\"call\", \"apply\"].includes(astUtils.getStaticPropertyName(callee));\n    }\n    /**\n     * Determines if this rule should be enforced for a node given the current configuration.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the rule should be enforced for this node.\n     * @private\n     */\n\n\n    function ruleApplies(node) {\n      if (node.type === \"JSXElement\" || node.type === \"JSXFragment\") {\n        const isSingleLine = node.loc.start.line === node.loc.end.line;\n\n        switch (IGNORE_JSX) {\n          // Exclude this JSX element from linting\n          case \"all\":\n            return false;\n          // Exclude this JSX element if it is multi-line element\n\n          case \"multi-line\":\n            return isSingleLine;\n          // Exclude this JSX element if it is single-line element\n\n          case \"single-line\":\n            return !isSingleLine;\n          // Nothing special to be done for JSX elements\n\n          case \"none\":\n            break;\n          // no default\n        }\n      }\n\n      if (node.type === \"SequenceExpression\" && IGNORE_SEQUENCE_EXPRESSIONS) {\n        return false;\n      }\n\n      if (isImmediateFunctionPrototypeMethodCall(node) && IGNORE_FUNCTION_PROTOTYPE_METHODS) {\n        return false;\n      }\n\n      return ALL_NODES || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\";\n    }\n    /**\n     * Determines if a node is surrounded by parentheses.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is parenthesised.\n     * @private\n     */\n\n\n    function isParenthesised(node) {\n      return isParenthesizedRaw(1, node, sourceCode);\n    }\n    /**\n     * Determines if a node is surrounded by parentheses twice.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is doubly parenthesised.\n     * @private\n     */\n\n\n    function isParenthesisedTwice(node) {\n      return isParenthesizedRaw(2, node, sourceCode);\n    }\n    /**\n     * Determines if a node is surrounded by (potentially) invalid parentheses.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is incorrectly parenthesised.\n     * @private\n     */\n\n\n    function hasExcessParens(node) {\n      return ruleApplies(node) && isParenthesised(node);\n    }\n    /**\n     * Determines if a node that is expected to be parenthesised is surrounded by\n     * (potentially) invalid extra parentheses.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.\n     * @private\n     */\n\n\n    function hasDoubleExcessParens(node) {\n      return ruleApplies(node) && isParenthesisedTwice(node);\n    }\n    /**\n     * Determines if a node that is expected to be parenthesised is surrounded by\n     * (potentially) invalid extra parentheses with considering precedence level of the node.\n     * If the preference level of the node is not higher or equal to precedence lower limit, it also checks\n     * whether the node is surrounded by parentheses twice or not.\n     * @param {ASTNode} node The node to be checked.\n     * @param {number} precedenceLowerLimit The lower limit of precedence.\n     * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.\n     * @private\n     */\n\n\n    function hasExcessParensWithPrecedence(node, precedenceLowerLimit) {\n      if (ruleApplies(node) && isParenthesised(node)) {\n        if (precedence(node) >= precedenceLowerLimit || isParenthesisedTwice(node)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Determines if a node test expression is allowed to have a parenthesised assignment\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the assignment can be parenthesised.\n     * @private\n     */\n\n\n    function isCondAssignException(node) {\n      return EXCEPT_COND_ASSIGN && node.test.type === \"AssignmentExpression\";\n    }\n    /**\n     * Determines if a node is in a return statement\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is in a return statement.\n     * @private\n     */\n\n\n    function isInReturnStatement(node) {\n      for (let currentNode = node; currentNode; currentNode = currentNode.parent) {\n        if (currentNode.type === \"ReturnStatement\" || currentNode.type === \"ArrowFunctionExpression\" && currentNode.body.type !== \"BlockStatement\") {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Determines if a constructor function is newed-up with parens\n     * @param {ASTNode} newExpression The NewExpression node to be checked.\n     * @returns {boolean} True if the constructor is called with parens.\n     * @private\n     */\n\n\n    function isNewExpressionWithParens(newExpression) {\n      const lastToken = sourceCode.getLastToken(newExpression);\n      const penultimateToken = sourceCode.getTokenBefore(lastToken);\n      return newExpression.arguments.length > 0 || // The expression should end with its own parens, e.g., new new foo() is not a new expression with parens\n      astUtils.isOpeningParenToken(penultimateToken) && astUtils.isClosingParenToken(lastToken) && newExpression.callee.range[1] < newExpression.range[1];\n    }\n    /**\n     * Determines if a node is or contains an assignment expression\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is or contains an assignment expression.\n     * @private\n     */\n\n\n    function containsAssignment(node) {\n      if (node.type === \"AssignmentExpression\") {\n        return true;\n      }\n\n      if (node.type === \"ConditionalExpression\" && (node.consequent.type === \"AssignmentExpression\" || node.alternate.type === \"AssignmentExpression\")) {\n        return true;\n      }\n\n      if (node.left && node.left.type === \"AssignmentExpression\" || node.right && node.right.type === \"AssignmentExpression\") {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Determines if a node is contained by or is itself a return statement and is allowed to have a parenthesised assignment\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the assignment can be parenthesised.\n     * @private\n     */\n\n\n    function isReturnAssignException(node) {\n      if (!EXCEPT_RETURN_ASSIGN || !isInReturnStatement(node)) {\n        return false;\n      }\n\n      if (node.type === \"ReturnStatement\") {\n        return node.argument && containsAssignment(node.argument);\n      }\n\n      if (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\") {\n        return containsAssignment(node.body);\n      }\n\n      return containsAssignment(node);\n    }\n    /**\n     * Determines if a node following a [no LineTerminator here] restriction is\n     * surrounded by (potentially) invalid extra parentheses.\n     * @param {Token} token The token preceding the [no LineTerminator here] restriction.\n     * @param {ASTNode} node The node to be checked.\n     * @returns {boolean} True if the node is incorrectly parenthesised.\n     * @private\n     */\n\n\n    function hasExcessParensNoLineTerminator(token, node) {\n      if (token.loc.end.line === node.loc.start.line) {\n        return hasExcessParens(node);\n      }\n\n      return hasDoubleExcessParens(node);\n    }\n    /**\n     * Determines whether a node should be preceded by an additional space when removing parens\n     * @param {ASTNode} node node to evaluate; must be surrounded by parentheses\n     * @returns {boolean} `true` if a space should be inserted before the node\n     * @private\n     */\n\n\n    function requiresLeadingSpace(node) {\n      const leftParenToken = sourceCode.getTokenBefore(node);\n      const tokenBeforeLeftParen = sourceCode.getTokenBefore(leftParenToken, {\n        includeComments: true\n      });\n      const tokenAfterLeftParen = sourceCode.getTokenAfter(leftParenToken, {\n        includeComments: true\n      });\n      return tokenBeforeLeftParen && tokenBeforeLeftParen.range[1] === leftParenToken.range[0] && leftParenToken.range[1] === tokenAfterLeftParen.range[0] && !astUtils.canTokensBeAdjacent(tokenBeforeLeftParen, tokenAfterLeftParen);\n    }\n    /**\n     * Determines whether a node should be followed by an additional space when removing parens\n     * @param {ASTNode} node node to evaluate; must be surrounded by parentheses\n     * @returns {boolean} `true` if a space should be inserted after the node\n     * @private\n     */\n\n\n    function requiresTrailingSpace(node) {\n      const nextTwoTokens = sourceCode.getTokensAfter(node, {\n        count: 2\n      });\n      const rightParenToken = nextTwoTokens[0];\n      const tokenAfterRightParen = nextTwoTokens[1];\n      const tokenBeforeRightParen = sourceCode.getLastToken(node);\n      return rightParenToken && tokenAfterRightParen && !sourceCode.isSpaceBetweenTokens(rightParenToken, tokenAfterRightParen) && !astUtils.canTokensBeAdjacent(tokenBeforeRightParen, tokenAfterRightParen);\n    }\n    /**\n     * Determines if a given expression node is an IIFE\n     * @param {ASTNode} node The node to check\n     * @returns {boolean} `true` if the given node is an IIFE\n     */\n\n\n    function isIIFE(node) {\n      const maybeCallNode = astUtils.skipChainExpression(node);\n      return maybeCallNode.type === \"CallExpression\" && maybeCallNode.callee.type === \"FunctionExpression\";\n    }\n    /**\n     * Determines if the given node can be the assignment target in destructuring or the LHS of an assignment.\n     * This is to avoid an autofix that could change behavior because parsers mistakenly allow invalid syntax,\n     * such as `(a = b) = c` and `[(a = b) = c] = []`. Ideally, this function shouldn't be necessary.\n     * @param {ASTNode} [node] The node to check\n     * @returns {boolean} `true` if the given node can be a valid assignment target\n     */\n\n\n    function canBeAssignmentTarget(node) {\n      return node && (node.type === \"Identifier\" || node.type === \"MemberExpression\");\n    }\n    /**\n     * Report the node\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function report(node) {\n      const leftParenToken = sourceCode.getTokenBefore(node);\n      const rightParenToken = sourceCode.getTokenAfter(node);\n\n      if (!isParenthesisedTwice(node)) {\n        if (tokensToIgnore.has(sourceCode.getFirstToken(node))) {\n          return;\n        }\n\n        if (isIIFE(node) && !isParenthesised(node.callee)) {\n          return;\n        }\n      }\n      /**\n       * Finishes reporting\n       * @returns {void}\n       * @private\n       */\n\n\n      function finishReport() {\n        context.report({\n          node,\n          loc: leftParenToken.loc,\n          messageId: \"unexpected\",\n\n          fix(fixer) {\n            const parenthesizedSource = sourceCode.text.slice(leftParenToken.range[1], rightParenToken.range[0]);\n            return fixer.replaceTextRange([leftParenToken.range[0], rightParenToken.range[1]], (requiresLeadingSpace(node) ? \" \" : \"\") + parenthesizedSource + (requiresTrailingSpace(node) ? \" \" : \"\"));\n          }\n\n        });\n      }\n\n      if (reportsBuffer) {\n        reportsBuffer.reports.push({\n          node,\n          finishReport\n        });\n        return;\n      }\n\n      finishReport();\n    }\n    /**\n     * Evaluate a argument of the node.\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkArgumentWithPrecedence(node) {\n      if (hasExcessParensWithPrecedence(node.argument, precedence(node))) {\n        report(node.argument);\n      }\n    }\n    /**\n     * Check if a member expression contains a call expression\n     * @param {ASTNode} node MemberExpression node to evaluate\n     * @returns {boolean} true if found, false if not\n     */\n\n\n    function doesMemberExpressionContainCallExpression(node) {\n      let currentNode = node.object;\n      let currentNodeType = node.object.type;\n\n      while (currentNodeType === \"MemberExpression\") {\n        currentNode = currentNode.object;\n        currentNodeType = currentNode.type;\n      }\n\n      return currentNodeType === \"CallExpression\";\n    }\n    /**\n     * Evaluate a new call\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkCallNew(node) {\n      const callee = node.callee;\n\n      if (hasExcessParensWithPrecedence(callee, precedence(node))) {\n        if (hasDoubleExcessParens(callee) || !(isIIFE(node) || // (new A)(); new (new A)();\n        callee.type === \"NewExpression\" && !isNewExpressionWithParens(callee) && !(node.type === \"NewExpression\" && !isNewExpressionWithParens(node)) || // new (a().b)(); new (a.b().c);\n        node.type === \"NewExpression\" && callee.type === \"MemberExpression\" && doesMemberExpressionContainCallExpression(callee) || // (a?.b)(); (a?.())();\n        !node.optional && callee.type === \"ChainExpression\")) {\n          report(node.callee);\n        }\n      }\n\n      node.arguments.filter(arg => hasExcessParensWithPrecedence(arg, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(report);\n    }\n    /**\n     * Evaluate binary logicals\n     * @param {ASTNode} node node to evaluate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkBinaryLogical(node) {\n      const prec = precedence(node);\n      const leftPrecedence = precedence(node.left);\n      const rightPrecedence = precedence(node.right);\n      const isExponentiation = node.operator === \"**\";\n      const shouldSkipLeft = NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\");\n      const shouldSkipRight = NESTED_BINARY && (node.right.type === \"BinaryExpression\" || node.right.type === \"LogicalExpression\");\n\n      if (!shouldSkipLeft && hasExcessParens(node.left)) {\n        if (!([\"AwaitExpression\", \"UnaryExpression\"].includes(node.left.type) && isExponentiation) && !astUtils.isMixedLogicalAndCoalesceExpressions(node.left, node) && (leftPrecedence > prec || leftPrecedence === prec && !isExponentiation) || isParenthesisedTwice(node.left)) {\n          report(node.left);\n        }\n      }\n\n      if (!shouldSkipRight && hasExcessParens(node.right)) {\n        if (!astUtils.isMixedLogicalAndCoalesceExpressions(node.right, node) && (rightPrecedence > prec || rightPrecedence === prec && isExponentiation) || isParenthesisedTwice(node.right)) {\n          report(node.right);\n        }\n      }\n    }\n    /**\n     * Check the parentheses around the super class of the given class definition.\n     * @param {ASTNode} node The node of class declarations to check.\n     * @returns {void}\n     */\n\n\n    function checkClass(node) {\n      if (!node.superClass) {\n        return;\n      }\n      /*\n       * If `node.superClass` is a LeftHandSideExpression, parentheses are extra.\n       * Otherwise, parentheses are needed.\n       */\n\n\n      const hasExtraParens = precedence(node.superClass) > PRECEDENCE_OF_UPDATE_EXPR ? hasExcessParens(node.superClass) : hasDoubleExcessParens(node.superClass);\n\n      if (hasExtraParens) {\n        report(node.superClass);\n      }\n    }\n    /**\n     * Check the parentheses around the argument of the given spread operator.\n     * @param {ASTNode} node The node of spread elements/properties to check.\n     * @returns {void}\n     */\n\n\n    function checkSpreadOperator(node) {\n      if (hasExcessParensWithPrecedence(node.argument, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n        report(node.argument);\n      }\n    }\n    /**\n     * Checks the parentheses for an ExpressionStatement or ExportDefaultDeclaration\n     * @param {ASTNode} node The ExpressionStatement.expression or ExportDefaultDeclaration.declaration node\n     * @returns {void}\n     */\n\n\n    function checkExpressionOrExportStatement(node) {\n      const firstToken = isParenthesised(node) ? sourceCode.getTokenBefore(node) : sourceCode.getFirstToken(node);\n      const secondToken = sourceCode.getTokenAfter(firstToken, astUtils.isNotOpeningParenToken);\n      const thirdToken = secondToken ? sourceCode.getTokenAfter(secondToken) : null;\n      const tokenAfterClosingParens = secondToken ? sourceCode.getTokenAfter(secondToken, astUtils.isNotClosingParenToken) : null;\n\n      if (astUtils.isOpeningParenToken(firstToken) && (astUtils.isOpeningBraceToken(secondToken) || secondToken.type === \"Keyword\" && (secondToken.value === \"function\" || secondToken.value === \"class\" || secondToken.value === \"let\" && tokenAfterClosingParens && (astUtils.isOpeningBracketToken(tokenAfterClosingParens) || tokenAfterClosingParens.type === \"Identifier\")) || secondToken && secondToken.type === \"Identifier\" && secondToken.value === \"async\" && thirdToken && thirdToken.type === \"Keyword\" && thirdToken.value === \"function\")) {\n        tokensToIgnore.add(secondToken);\n      }\n\n      const hasExtraParens = node.parent.type === \"ExportDefaultDeclaration\" ? hasExcessParensWithPrecedence(node, PRECEDENCE_OF_ASSIGNMENT_EXPR) : hasExcessParens(node);\n\n      if (hasExtraParens) {\n        report(node);\n      }\n    }\n    /**\n     * Finds the path from the given node to the specified ancestor.\n     * @param {ASTNode} node First node in the path.\n     * @param {ASTNode} ancestor Last node in the path.\n     * @returns {ASTNode[]} Path, including both nodes.\n     * @throws {Error} If the given node does not have the specified ancestor.\n     */\n\n\n    function pathToAncestor(node, ancestor) {\n      const path = [node];\n      let currentNode = node;\n\n      while (currentNode !== ancestor) {\n        currentNode = currentNode.parent;\n        /* istanbul ignore if */\n\n        if (currentNode === null) {\n          throw new Error(\"Nodes are not in the ancestor-descendant relationship.\");\n        }\n\n        path.push(currentNode);\n      }\n\n      return path;\n    }\n    /**\n     * Finds the path from the given node to the specified descendant.\n     * @param {ASTNode} node First node in the path.\n     * @param {ASTNode} descendant Last node in the path.\n     * @returns {ASTNode[]} Path, including both nodes.\n     * @throws {Error} If the given node does not have the specified descendant.\n     */\n\n\n    function pathToDescendant(node, descendant) {\n      return pathToAncestor(descendant, node).reverse();\n    }\n    /**\n     * Checks whether the syntax of the given ancestor of an 'in' expression inside a for-loop initializer\n     * is preventing the 'in' keyword from being interpreted as a part of an ill-formed for-in loop.\n     * @param {ASTNode} node Ancestor of an 'in' expression.\n     * @param {ASTNode} child Child of the node, ancestor of the same 'in' expression or the 'in' expression itself.\n     * @returns {boolean} True if the keyword 'in' would be interpreted as the 'in' operator, without any parenthesis.\n     */\n\n\n    function isSafelyEnclosingInExpression(node, child) {\n      switch (node.type) {\n        case \"ArrayExpression\":\n        case \"ArrayPattern\":\n        case \"BlockStatement\":\n        case \"ObjectExpression\":\n        case \"ObjectPattern\":\n        case \"TemplateLiteral\":\n          return true;\n\n        case \"ArrowFunctionExpression\":\n        case \"FunctionExpression\":\n          return node.params.includes(child);\n\n        case \"CallExpression\":\n        case \"NewExpression\":\n          return node.arguments.includes(child);\n\n        case \"MemberExpression\":\n          return node.computed && node.property === child;\n\n        case \"ConditionalExpression\":\n          return node.consequent === child;\n\n        default:\n          return false;\n      }\n    }\n    /**\n     * Starts a new reports buffering. Warnings will be stored in a buffer instead of being reported immediately.\n     * An additional logic that requires multiple nodes (e.g. a whole subtree) may dismiss some of the stored warnings.\n     * @returns {void}\n     */\n\n\n    function startNewReportsBuffering() {\n      reportsBuffer = {\n        upper: reportsBuffer,\n        inExpressionNodes: [],\n        reports: []\n      };\n    }\n    /**\n     * Ends the current reports buffering.\n     * @returns {void}\n     */\n\n\n    function endCurrentReportsBuffering() {\n      const {\n        upper,\n        inExpressionNodes,\n        reports\n      } = reportsBuffer;\n\n      if (upper) {\n        upper.inExpressionNodes.push(...inExpressionNodes);\n        upper.reports.push(...reports);\n      } else {\n        // flush remaining reports\n        reports.forEach(_ref => {\n          let {\n            finishReport\n          } = _ref;\n          return finishReport();\n        });\n      }\n\n      reportsBuffer = upper;\n    }\n    /**\n     * Checks whether the given node is in the current reports buffer.\n     * @param {ASTNode} node Node to check.\n     * @returns {boolean} True if the node is in the current buffer, false otherwise.\n     */\n\n\n    function isInCurrentReportsBuffer(node) {\n      return reportsBuffer.reports.some(r => r.node === node);\n    }\n    /**\n     * Removes the given node from the current reports buffer.\n     * @param {ASTNode} node Node to remove.\n     * @returns {void}\n     */\n\n\n    function removeFromCurrentReportsBuffer(node) {\n      reportsBuffer.reports = reportsBuffer.reports.filter(r => r.node !== node);\n    }\n    /**\n     * Checks whether a node is a MemberExpression at NewExpression's callee.\n     * @param {ASTNode} node node to check.\n     * @returns {boolean} True if the node is a MemberExpression at NewExpression's callee. false otherwise.\n     */\n\n\n    function isMemberExpInNewCallee(node) {\n      if (node.type === \"MemberExpression\") {\n        return node.parent.type === \"NewExpression\" && node.parent.callee === node ? true : node.parent.object === node && isMemberExpInNewCallee(node.parent);\n      }\n\n      return false;\n    }\n\n    return {\n      ArrayExpression(node) {\n        node.elements.filter(e => e && hasExcessParensWithPrecedence(e, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(report);\n      },\n\n      ArrayPattern(node) {\n        node.elements.filter(e => canBeAssignmentTarget(e) && hasExcessParens(e)).forEach(report);\n      },\n\n      ArrowFunctionExpression(node) {\n        if (isReturnAssignException(node)) {\n          return;\n        }\n\n        if (node.body.type === \"ConditionalExpression\" && IGNORE_ARROW_CONDITIONALS) {\n          return;\n        }\n\n        if (node.body.type !== \"BlockStatement\") {\n          const firstBodyToken = sourceCode.getFirstToken(node.body, astUtils.isNotOpeningParenToken);\n          const tokenBeforeFirst = sourceCode.getTokenBefore(firstBodyToken);\n\n          if (astUtils.isOpeningParenToken(tokenBeforeFirst) && astUtils.isOpeningBraceToken(firstBodyToken)) {\n            tokensToIgnore.add(firstBodyToken);\n          }\n\n          if (hasExcessParensWithPrecedence(node.body, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n            report(node.body);\n          }\n        }\n      },\n\n      AssignmentExpression(node) {\n        if (canBeAssignmentTarget(node.left) && hasExcessParens(node.left)) {\n          report(node.left);\n        }\n\n        if (!isReturnAssignException(node) && hasExcessParensWithPrecedence(node.right, precedence(node))) {\n          report(node.right);\n        }\n      },\n\n      BinaryExpression(node) {\n        if (reportsBuffer && node.operator === \"in\") {\n          reportsBuffer.inExpressionNodes.push(node);\n        }\n\n        checkBinaryLogical(node);\n      },\n\n      CallExpression: checkCallNew,\n\n      ClassBody(node) {\n        node.body.filter(member => member.type === \"MethodDefinition\" && member.computed && member.key).filter(member => hasExcessParensWithPrecedence(member.key, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(member => report(member.key));\n      },\n\n      ConditionalExpression(node) {\n        if (isReturnAssignException(node)) {\n          return;\n        }\n\n        if (!isCondAssignException(node) && hasExcessParensWithPrecedence(node.test, precedence({\n          type: \"LogicalExpression\",\n          operator: \"||\"\n        }))) {\n          report(node.test);\n        }\n\n        if (hasExcessParensWithPrecedence(node.consequent, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n          report(node.consequent);\n        }\n\n        if (hasExcessParensWithPrecedence(node.alternate, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n          report(node.alternate);\n        }\n      },\n\n      DoWhileStatement(node) {\n        if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n          report(node.test);\n        }\n      },\n\n      ExportDefaultDeclaration: node => checkExpressionOrExportStatement(node.declaration),\n      ExpressionStatement: node => checkExpressionOrExportStatement(node.expression),\n\n      ForInStatement(node) {\n        if (node.left.type !== \"VariableDeclaration\") {\n          const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils.isNotOpeningParenToken);\n\n          if (firstLeftToken.value === \"let\" && astUtils.isOpeningBracketToken(sourceCode.getTokenAfter(firstLeftToken, astUtils.isNotClosingParenToken))) {\n            // ForInStatement#left expression cannot start with `let[`.\n            tokensToIgnore.add(firstLeftToken);\n          }\n        }\n\n        if (hasExcessParens(node.left)) {\n          report(node.left);\n        }\n\n        if (hasExcessParens(node.right)) {\n          report(node.right);\n        }\n      },\n\n      ForOfStatement(node) {\n        if (node.left.type !== \"VariableDeclaration\") {\n          const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils.isNotOpeningParenToken);\n\n          if (firstLeftToken.value === \"let\") {\n            // ForOfStatement#left expression cannot start with `let`.\n            tokensToIgnore.add(firstLeftToken);\n          }\n        }\n\n        if (hasExcessParens(node.left)) {\n          report(node.left);\n        }\n\n        if (hasExcessParensWithPrecedence(node.right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n          report(node.right);\n        }\n      },\n\n      ForStatement(node) {\n        if (node.test && hasExcessParens(node.test) && !isCondAssignException(node)) {\n          report(node.test);\n        }\n\n        if (node.update && hasExcessParens(node.update)) {\n          report(node.update);\n        }\n\n        if (node.init) {\n          if (node.init.type !== \"VariableDeclaration\") {\n            const firstToken = sourceCode.getFirstToken(node.init, astUtils.isNotOpeningParenToken);\n\n            if (firstToken.value === \"let\" && astUtils.isOpeningBracketToken(sourceCode.getTokenAfter(firstToken, astUtils.isNotClosingParenToken))) {\n              // ForStatement#init expression cannot start with `let[`.\n              tokensToIgnore.add(firstToken);\n            }\n          }\n\n          startNewReportsBuffering();\n\n          if (hasExcessParens(node.init)) {\n            report(node.init);\n          }\n        }\n      },\n\n      \"ForStatement > *.init:exit\"(node) {\n        /*\n         * Removing parentheses around `in` expressions might change semantics and cause errors.\n         *\n         * For example, this valid for loop:\n         *      for (let a = (b in c); ;);\n         * after removing parentheses would be treated as an invalid for-in loop:\n         *      for (let a = b in c; ;);\n         */\n        if (reportsBuffer.reports.length) {\n          reportsBuffer.inExpressionNodes.forEach(inExpressionNode => {\n            const path = pathToDescendant(node, inExpressionNode);\n            let nodeToExclude;\n\n            for (let i = 0; i < path.length; i++) {\n              const pathNode = path[i];\n\n              if (i < path.length - 1) {\n                const nextPathNode = path[i + 1];\n\n                if (isSafelyEnclosingInExpression(pathNode, nextPathNode)) {\n                  // The 'in' expression in safely enclosed by the syntax of its ancestor nodes (e.g. by '{}' or '[]').\n                  return;\n                }\n              }\n\n              if (isParenthesised(pathNode)) {\n                if (isInCurrentReportsBuffer(pathNode)) {\n                  // This node was supposed to be reported, but parentheses might be necessary.\n                  if (isParenthesisedTwice(pathNode)) {\n                    /*\n                     * This node is parenthesised twice, it certainly has at least one pair of `extra` parentheses.\n                     * If the --fix option is on, the current fixing iteration will remove only one pair of parentheses.\n                     * The remaining pair is safely enclosing the 'in' expression.\n                     */\n                    return;\n                  } // Exclude the outermost node only.\n\n\n                  if (!nodeToExclude) {\n                    nodeToExclude = pathNode;\n                  } // Don't break the loop here, there might be some safe nodes or parentheses that will stay inside.\n\n                } else {\n                  // This node will stay parenthesised, the 'in' expression in safely enclosed by '()'.\n                  return;\n                }\n              }\n            } // Exclude the node from the list (i.e. treat parentheses as necessary)\n\n\n            removeFromCurrentReportsBuffer(nodeToExclude);\n          });\n        }\n\n        endCurrentReportsBuffering();\n      },\n\n      IfStatement(node) {\n        if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n          report(node.test);\n        }\n      },\n\n      ImportExpression(node) {\n        const {\n          source\n        } = node;\n\n        if (source.type === \"SequenceExpression\") {\n          if (hasDoubleExcessParens(source)) {\n            report(source);\n          }\n        } else if (hasExcessParens(source)) {\n          report(source);\n        }\n      },\n\n      LogicalExpression: checkBinaryLogical,\n\n      MemberExpression(node) {\n        const shouldAllowWrapOnce = isMemberExpInNewCallee(node) && doesMemberExpressionContainCallExpression(node);\n        const nodeObjHasExcessParens = shouldAllowWrapOnce ? hasDoubleExcessParens(node.object) : hasExcessParens(node.object) && !(isImmediateFunctionPrototypeMethodCall(node.parent) && node.parent.callee === node && IGNORE_FUNCTION_PROTOTYPE_METHODS);\n\n        if (nodeObjHasExcessParens && precedence(node.object) >= precedence(node) && (node.computed || !(astUtils.isDecimalInteger(node.object) || // RegExp literal is allowed to have parens (#1589)\n        node.object.type === \"Literal\" && node.object.regex))) {\n          report(node.object);\n        }\n\n        if (nodeObjHasExcessParens && node.object.type === \"CallExpression\") {\n          report(node.object);\n        }\n\n        if (nodeObjHasExcessParens && !IGNORE_NEW_IN_MEMBER_EXPR && node.object.type === \"NewExpression\" && isNewExpressionWithParens(node.object)) {\n          report(node.object);\n        }\n\n        if (nodeObjHasExcessParens && node.optional && node.object.type === \"ChainExpression\") {\n          report(node.object);\n        }\n\n        if (node.computed && hasExcessParens(node.property)) {\n          report(node.property);\n        }\n      },\n\n      NewExpression: checkCallNew,\n\n      ObjectExpression(node) {\n        node.properties.filter(property => property.value && hasExcessParensWithPrecedence(property.value, PRECEDENCE_OF_ASSIGNMENT_EXPR)).forEach(property => report(property.value));\n      },\n\n      ObjectPattern(node) {\n        node.properties.filter(property => {\n          const value = property.value;\n          return canBeAssignmentTarget(value) && hasExcessParens(value);\n        }).forEach(property => report(property.value));\n      },\n\n      Property(node) {\n        if (node.computed) {\n          const {\n            key\n          } = node;\n\n          if (key && hasExcessParensWithPrecedence(key, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n            report(key);\n          }\n        }\n      },\n\n      RestElement(node) {\n        const argument = node.argument;\n\n        if (canBeAssignmentTarget(argument) && hasExcessParens(argument)) {\n          report(argument);\n        }\n      },\n\n      ReturnStatement(node) {\n        const returnToken = sourceCode.getFirstToken(node);\n\n        if (isReturnAssignException(node)) {\n          return;\n        }\n\n        if (node.argument && hasExcessParensNoLineTerminator(returnToken, node.argument) && // RegExp literal is allowed to have parens (#1589)\n        !(node.argument.type === \"Literal\" && node.argument.regex)) {\n          report(node.argument);\n        }\n      },\n\n      SequenceExpression(node) {\n        const precedenceOfNode = precedence(node);\n        node.expressions.filter(e => hasExcessParensWithPrecedence(e, precedenceOfNode)).forEach(report);\n      },\n\n      SwitchCase(node) {\n        if (node.test && hasExcessParens(node.test)) {\n          report(node.test);\n        }\n      },\n\n      SwitchStatement(node) {\n        if (hasExcessParens(node.discriminant)) {\n          report(node.discriminant);\n        }\n      },\n\n      ThrowStatement(node) {\n        const throwToken = sourceCode.getFirstToken(node);\n\n        if (hasExcessParensNoLineTerminator(throwToken, node.argument)) {\n          report(node.argument);\n        }\n      },\n\n      UnaryExpression: checkArgumentWithPrecedence,\n\n      UpdateExpression(node) {\n        if (node.prefix) {\n          checkArgumentWithPrecedence(node);\n        } else {\n          const {\n            argument\n          } = node;\n          const operatorToken = sourceCode.getLastToken(node);\n\n          if (argument.loc.end.line === operatorToken.loc.start.line) {\n            checkArgumentWithPrecedence(node);\n          } else {\n            if (hasDoubleExcessParens(argument)) {\n              report(argument);\n            }\n          }\n        }\n      },\n\n      AwaitExpression: checkArgumentWithPrecedence,\n\n      VariableDeclarator(node) {\n        if (node.init && hasExcessParensWithPrecedence(node.init, PRECEDENCE_OF_ASSIGNMENT_EXPR) && // RegExp literal is allowed to have parens (#1589)\n        !(node.init.type === \"Literal\" && node.init.regex)) {\n          report(node.init);\n        }\n      },\n\n      WhileStatement(node) {\n        if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n          report(node.test);\n        }\n      },\n\n      WithStatement(node) {\n        if (hasExcessParens(node.object)) {\n          report(node.object);\n        }\n      },\n\n      YieldExpression(node) {\n        if (node.argument) {\n          const yieldToken = sourceCode.getFirstToken(node);\n\n          if (precedence(node.argument) >= precedence(node) && hasExcessParensNoLineTerminator(yieldToken, node.argument) || hasDoubleExcessParens(node.argument)) {\n            report(node.argument);\n          }\n        }\n      },\n\n      ClassDeclaration: checkClass,\n      ClassExpression: checkClass,\n      SpreadElement: checkSpreadOperator,\n      SpreadProperty: checkSpreadOperator,\n      ExperimentalSpreadProperty: checkSpreadOperator,\n\n      TemplateLiteral(node) {\n        node.expressions.filter(e => e && hasExcessParens(e)).forEach(report);\n      },\n\n      AssignmentPattern(node) {\n        const {\n          left,\n          right\n        } = node;\n\n        if (canBeAssignmentTarget(left) && hasExcessParens(left)) {\n          report(left);\n        }\n\n        if (right && hasExcessParensWithPrecedence(right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n          report(right);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["isParenthesized","isParenthesizedRaw","require","astUtils","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","anyOf","items","enum","minItems","maxItems","properties","conditionalAssign","nestedBinaryExpressions","returnAssign","ignoreJSX","enforceForArrowConditionals","enforceForSequenceExpressions","enforceForNewInMemberExpressions","enforceForFunctionPrototypeMethods","additionalProperties","messages","unexpected","create","context","sourceCode","getSourceCode","tokensToIgnore","WeakSet","precedence","getPrecedence","ALL_NODES","options","EXCEPT_COND_ASSIGN","NESTED_BINARY","EXCEPT_RETURN_ASSIGN","IGNORE_JSX","IGNORE_ARROW_CONDITIONALS","IGNORE_SEQUENCE_EXPRESSIONS","IGNORE_NEW_IN_MEMBER_EXPR","IGNORE_FUNCTION_PROTOTYPE_METHODS","PRECEDENCE_OF_ASSIGNMENT_EXPR","PRECEDENCE_OF_UPDATE_EXPR","reportsBuffer","isImmediateFunctionPrototypeMethodCall","node","callNode","skipChainExpression","callee","object","includes","getStaticPropertyName","ruleApplies","isSingleLine","loc","start","line","end","isParenthesised","isParenthesisedTwice","hasExcessParens","hasDoubleExcessParens","hasExcessParensWithPrecedence","precedenceLowerLimit","isCondAssignException","test","isInReturnStatement","currentNode","parent","body","isNewExpressionWithParens","newExpression","lastToken","getLastToken","penultimateToken","getTokenBefore","arguments","length","isOpeningParenToken","isClosingParenToken","range","containsAssignment","consequent","alternate","left","right","isReturnAssignException","argument","hasExcessParensNoLineTerminator","token","requiresLeadingSpace","leftParenToken","tokenBeforeLeftParen","includeComments","tokenAfterLeftParen","getTokenAfter","canTokensBeAdjacent","requiresTrailingSpace","nextTwoTokens","getTokensAfter","count","rightParenToken","tokenAfterRightParen","tokenBeforeRightParen","isSpaceBetweenTokens","isIIFE","maybeCallNode","canBeAssignmentTarget","report","has","getFirstToken","finishReport","messageId","fix","fixer","parenthesizedSource","text","slice","replaceTextRange","reports","push","checkArgumentWithPrecedence","doesMemberExpressionContainCallExpression","currentNodeType","checkCallNew","optional","filter","arg","forEach","checkBinaryLogical","prec","leftPrecedence","rightPrecedence","isExponentiation","operator","shouldSkipLeft","shouldSkipRight","isMixedLogicalAndCoalesceExpressions","checkClass","superClass","hasExtraParens","checkSpreadOperator","checkExpressionOrExportStatement","firstToken","secondToken","isNotOpeningParenToken","thirdToken","tokenAfterClosingParens","isNotClosingParenToken","isOpeningBraceToken","value","isOpeningBracketToken","add","pathToAncestor","ancestor","path","Error","pathToDescendant","descendant","reverse","isSafelyEnclosingInExpression","child","params","computed","property","startNewReportsBuffering","upper","inExpressionNodes","endCurrentReportsBuffering","isInCurrentReportsBuffer","some","r","removeFromCurrentReportsBuffer","isMemberExpInNewCallee","ArrayExpression","elements","e","ArrayPattern","ArrowFunctionExpression","firstBodyToken","tokenBeforeFirst","AssignmentExpression","BinaryExpression","CallExpression","ClassBody","member","key","ConditionalExpression","DoWhileStatement","ExportDefaultDeclaration","declaration","ExpressionStatement","expression","ForInStatement","firstLeftToken","ForOfStatement","ForStatement","update","init","inExpressionNode","nodeToExclude","i","pathNode","nextPathNode","IfStatement","ImportExpression","source","LogicalExpression","MemberExpression","shouldAllowWrapOnce","nodeObjHasExcessParens","isDecimalInteger","regex","NewExpression","ObjectExpression","ObjectPattern","Property","RestElement","ReturnStatement","returnToken","SequenceExpression","precedenceOfNode","expressions","SwitchCase","SwitchStatement","discriminant","ThrowStatement","throwToken","UnaryExpression","UpdateExpression","prefix","operatorToken","AwaitExpression","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","yieldToken","ClassDeclaration","ClassExpression","SpreadElement","SpreadProperty","ExperimentalSpreadProperty","TemplateLiteral","AssignmentPattern"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-extra-parens.js"],"sourcesContent":["/**\n * @fileoverview Disallow parenthesising higher precedence subexpressions.\n * @author Michael Ficarra\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst { isParenthesized: isParenthesizedRaw } = require(\"eslint-utils\");\nconst astUtils = require(\"./utils/ast-utils.js\");\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"disallow unnecessary parentheses\",\n            category: \"Possible Errors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-extra-parens\"\n        },\n\n        fixable: \"code\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"functions\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"all\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                conditionalAssign: { type: \"boolean\" },\n                                nestedBinaryExpressions: { type: \"boolean\" },\n                                returnAssign: { type: \"boolean\" },\n                                ignoreJSX: { enum: [\"none\", \"all\", \"single-line\", \"multi-line\"] },\n                                enforceForArrowConditionals: { type: \"boolean\" },\n                                enforceForSequenceExpressions: { type: \"boolean\" },\n                                enforceForNewInMemberExpressions: { type: \"boolean\" },\n                                enforceForFunctionPrototypeMethods: { type: \"boolean\" }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n\n        messages: {\n            unexpected: \"Unnecessary parentheses around expression.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        const tokensToIgnore = new WeakSet();\n        const precedence = astUtils.getPrecedence;\n        const ALL_NODES = context.options[0] !== \"functions\";\n        const EXCEPT_COND_ASSIGN = ALL_NODES && context.options[1] && context.options[1].conditionalAssign === false;\n        const NESTED_BINARY = ALL_NODES && context.options[1] && context.options[1].nestedBinaryExpressions === false;\n        const EXCEPT_RETURN_ASSIGN = ALL_NODES && context.options[1] && context.options[1].returnAssign === false;\n        const IGNORE_JSX = ALL_NODES && context.options[1] && context.options[1].ignoreJSX;\n        const IGNORE_ARROW_CONDITIONALS = ALL_NODES && context.options[1] &&\n            context.options[1].enforceForArrowConditionals === false;\n        const IGNORE_SEQUENCE_EXPRESSIONS = ALL_NODES && context.options[1] &&\n            context.options[1].enforceForSequenceExpressions === false;\n        const IGNORE_NEW_IN_MEMBER_EXPR = ALL_NODES && context.options[1] &&\n            context.options[1].enforceForNewInMemberExpressions === false;\n        const IGNORE_FUNCTION_PROTOTYPE_METHODS = ALL_NODES && context.options[1] &&\n            context.options[1].enforceForFunctionPrototypeMethods === false;\n\n        const PRECEDENCE_OF_ASSIGNMENT_EXPR = precedence({ type: \"AssignmentExpression\" });\n        const PRECEDENCE_OF_UPDATE_EXPR = precedence({ type: \"UpdateExpression\" });\n\n        let reportsBuffer;\n\n        /**\n         * Determines whether the given node is a `call` or `apply` method call, invoked directly on a `FunctionExpression` node.\n         * Example: function(){}.call()\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is an immediate `call` or `apply` method call.\n         * @private\n         */\n        function isImmediateFunctionPrototypeMethodCall(node) {\n            const callNode = astUtils.skipChainExpression(node);\n\n            if (callNode.type !== \"CallExpression\") {\n                return false;\n            }\n            const callee = astUtils.skipChainExpression(callNode.callee);\n\n            return (\n                callee.type === \"MemberExpression\" &&\n                callee.object.type === \"FunctionExpression\" &&\n                [\"call\", \"apply\"].includes(astUtils.getStaticPropertyName(callee))\n            );\n        }\n\n        /**\n         * Determines if this rule should be enforced for a node given the current configuration.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the rule should be enforced for this node.\n         * @private\n         */\n        function ruleApplies(node) {\n            if (node.type === \"JSXElement\" || node.type === \"JSXFragment\") {\n                const isSingleLine = node.loc.start.line === node.loc.end.line;\n\n                switch (IGNORE_JSX) {\n\n                    // Exclude this JSX element from linting\n                    case \"all\":\n                        return false;\n\n                    // Exclude this JSX element if it is multi-line element\n                    case \"multi-line\":\n                        return isSingleLine;\n\n                    // Exclude this JSX element if it is single-line element\n                    case \"single-line\":\n                        return !isSingleLine;\n\n                    // Nothing special to be done for JSX elements\n                    case \"none\":\n                        break;\n\n                    // no default\n                }\n            }\n\n            if (node.type === \"SequenceExpression\" && IGNORE_SEQUENCE_EXPRESSIONS) {\n                return false;\n            }\n\n            if (isImmediateFunctionPrototypeMethodCall(node) && IGNORE_FUNCTION_PROTOTYPE_METHODS) {\n                return false;\n            }\n\n            return ALL_NODES || node.type === \"FunctionExpression\" || node.type === \"ArrowFunctionExpression\";\n        }\n\n        /**\n         * Determines if a node is surrounded by parentheses.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is parenthesised.\n         * @private\n         */\n        function isParenthesised(node) {\n            return isParenthesizedRaw(1, node, sourceCode);\n        }\n\n        /**\n         * Determines if a node is surrounded by parentheses twice.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is doubly parenthesised.\n         * @private\n         */\n        function isParenthesisedTwice(node) {\n            return isParenthesizedRaw(2, node, sourceCode);\n        }\n\n        /**\n         * Determines if a node is surrounded by (potentially) invalid parentheses.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is incorrectly parenthesised.\n         * @private\n         */\n        function hasExcessParens(node) {\n            return ruleApplies(node) && isParenthesised(node);\n        }\n\n        /**\n         * Determines if a node that is expected to be parenthesised is surrounded by\n         * (potentially) invalid extra parentheses.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.\n         * @private\n         */\n        function hasDoubleExcessParens(node) {\n            return ruleApplies(node) && isParenthesisedTwice(node);\n        }\n\n        /**\n         * Determines if a node that is expected to be parenthesised is surrounded by\n         * (potentially) invalid extra parentheses with considering precedence level of the node.\n         * If the preference level of the node is not higher or equal to precedence lower limit, it also checks\n         * whether the node is surrounded by parentheses twice or not.\n         * @param {ASTNode} node The node to be checked.\n         * @param {number} precedenceLowerLimit The lower limit of precedence.\n         * @returns {boolean} True if the node is has an unexpected extra pair of parentheses.\n         * @private\n         */\n        function hasExcessParensWithPrecedence(node, precedenceLowerLimit) {\n            if (ruleApplies(node) && isParenthesised(node)) {\n                if (\n                    precedence(node) >= precedenceLowerLimit ||\n                    isParenthesisedTwice(node)\n                ) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        /**\n         * Determines if a node test expression is allowed to have a parenthesised assignment\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the assignment can be parenthesised.\n         * @private\n         */\n        function isCondAssignException(node) {\n            return EXCEPT_COND_ASSIGN && node.test.type === \"AssignmentExpression\";\n        }\n\n        /**\n         * Determines if a node is in a return statement\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is in a return statement.\n         * @private\n         */\n        function isInReturnStatement(node) {\n            for (let currentNode = node; currentNode; currentNode = currentNode.parent) {\n                if (\n                    currentNode.type === \"ReturnStatement\" ||\n                    (currentNode.type === \"ArrowFunctionExpression\" && currentNode.body.type !== \"BlockStatement\")\n                ) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        /**\n         * Determines if a constructor function is newed-up with parens\n         * @param {ASTNode} newExpression The NewExpression node to be checked.\n         * @returns {boolean} True if the constructor is called with parens.\n         * @private\n         */\n        function isNewExpressionWithParens(newExpression) {\n            const lastToken = sourceCode.getLastToken(newExpression);\n            const penultimateToken = sourceCode.getTokenBefore(lastToken);\n\n            return newExpression.arguments.length > 0 ||\n                (\n\n                    // The expression should end with its own parens, e.g., new new foo() is not a new expression with parens\n                    astUtils.isOpeningParenToken(penultimateToken) &&\n                    astUtils.isClosingParenToken(lastToken) &&\n                    newExpression.callee.range[1] < newExpression.range[1]\n                );\n        }\n\n        /**\n         * Determines if a node is or contains an assignment expression\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is or contains an assignment expression.\n         * @private\n         */\n        function containsAssignment(node) {\n            if (node.type === \"AssignmentExpression\") {\n                return true;\n            }\n            if (node.type === \"ConditionalExpression\" &&\n                    (node.consequent.type === \"AssignmentExpression\" || node.alternate.type === \"AssignmentExpression\")) {\n                return true;\n            }\n            if ((node.left && node.left.type === \"AssignmentExpression\") ||\n                    (node.right && node.right.type === \"AssignmentExpression\")) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Determines if a node is contained by or is itself a return statement and is allowed to have a parenthesised assignment\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the assignment can be parenthesised.\n         * @private\n         */\n        function isReturnAssignException(node) {\n            if (!EXCEPT_RETURN_ASSIGN || !isInReturnStatement(node)) {\n                return false;\n            }\n\n            if (node.type === \"ReturnStatement\") {\n                return node.argument && containsAssignment(node.argument);\n            }\n            if (node.type === \"ArrowFunctionExpression\" && node.body.type !== \"BlockStatement\") {\n                return containsAssignment(node.body);\n            }\n            return containsAssignment(node);\n\n        }\n\n        /**\n         * Determines if a node following a [no LineTerminator here] restriction is\n         * surrounded by (potentially) invalid extra parentheses.\n         * @param {Token} token The token preceding the [no LineTerminator here] restriction.\n         * @param {ASTNode} node The node to be checked.\n         * @returns {boolean} True if the node is incorrectly parenthesised.\n         * @private\n         */\n        function hasExcessParensNoLineTerminator(token, node) {\n            if (token.loc.end.line === node.loc.start.line) {\n                return hasExcessParens(node);\n            }\n\n            return hasDoubleExcessParens(node);\n        }\n\n        /**\n         * Determines whether a node should be preceded by an additional space when removing parens\n         * @param {ASTNode} node node to evaluate; must be surrounded by parentheses\n         * @returns {boolean} `true` if a space should be inserted before the node\n         * @private\n         */\n        function requiresLeadingSpace(node) {\n            const leftParenToken = sourceCode.getTokenBefore(node);\n            const tokenBeforeLeftParen = sourceCode.getTokenBefore(leftParenToken, { includeComments: true });\n            const tokenAfterLeftParen = sourceCode.getTokenAfter(leftParenToken, { includeComments: true });\n\n            return tokenBeforeLeftParen &&\n                tokenBeforeLeftParen.range[1] === leftParenToken.range[0] &&\n                leftParenToken.range[1] === tokenAfterLeftParen.range[0] &&\n                !astUtils.canTokensBeAdjacent(tokenBeforeLeftParen, tokenAfterLeftParen);\n        }\n\n        /**\n         * Determines whether a node should be followed by an additional space when removing parens\n         * @param {ASTNode} node node to evaluate; must be surrounded by parentheses\n         * @returns {boolean} `true` if a space should be inserted after the node\n         * @private\n         */\n        function requiresTrailingSpace(node) {\n            const nextTwoTokens = sourceCode.getTokensAfter(node, { count: 2 });\n            const rightParenToken = nextTwoTokens[0];\n            const tokenAfterRightParen = nextTwoTokens[1];\n            const tokenBeforeRightParen = sourceCode.getLastToken(node);\n\n            return rightParenToken && tokenAfterRightParen &&\n                !sourceCode.isSpaceBetweenTokens(rightParenToken, tokenAfterRightParen) &&\n                !astUtils.canTokensBeAdjacent(tokenBeforeRightParen, tokenAfterRightParen);\n        }\n\n        /**\n         * Determines if a given expression node is an IIFE\n         * @param {ASTNode} node The node to check\n         * @returns {boolean} `true` if the given node is an IIFE\n         */\n        function isIIFE(node) {\n            const maybeCallNode = astUtils.skipChainExpression(node);\n\n            return maybeCallNode.type === \"CallExpression\" && maybeCallNode.callee.type === \"FunctionExpression\";\n        }\n\n        /**\n         * Determines if the given node can be the assignment target in destructuring or the LHS of an assignment.\n         * This is to avoid an autofix that could change behavior because parsers mistakenly allow invalid syntax,\n         * such as `(a = b) = c` and `[(a = b) = c] = []`. Ideally, this function shouldn't be necessary.\n         * @param {ASTNode} [node] The node to check\n         * @returns {boolean} `true` if the given node can be a valid assignment target\n         */\n        function canBeAssignmentTarget(node) {\n            return node && (node.type === \"Identifier\" || node.type === \"MemberExpression\");\n        }\n\n        /**\n         * Report the node\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function report(node) {\n            const leftParenToken = sourceCode.getTokenBefore(node);\n            const rightParenToken = sourceCode.getTokenAfter(node);\n\n            if (!isParenthesisedTwice(node)) {\n                if (tokensToIgnore.has(sourceCode.getFirstToken(node))) {\n                    return;\n                }\n\n                if (isIIFE(node) && !isParenthesised(node.callee)) {\n                    return;\n                }\n            }\n\n            /**\n             * Finishes reporting\n             * @returns {void}\n             * @private\n             */\n            function finishReport() {\n                context.report({\n                    node,\n                    loc: leftParenToken.loc,\n                    messageId: \"unexpected\",\n                    fix(fixer) {\n                        const parenthesizedSource = sourceCode.text.slice(leftParenToken.range[1], rightParenToken.range[0]);\n\n                        return fixer.replaceTextRange([\n                            leftParenToken.range[0],\n                            rightParenToken.range[1]\n                        ], (requiresLeadingSpace(node) ? \" \" : \"\") + parenthesizedSource + (requiresTrailingSpace(node) ? \" \" : \"\"));\n                    }\n                });\n            }\n\n            if (reportsBuffer) {\n                reportsBuffer.reports.push({ node, finishReport });\n                return;\n            }\n\n            finishReport();\n        }\n\n        /**\n         * Evaluate a argument of the node.\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkArgumentWithPrecedence(node) {\n            if (hasExcessParensWithPrecedence(node.argument, precedence(node))) {\n                report(node.argument);\n            }\n        }\n\n        /**\n         * Check if a member expression contains a call expression\n         * @param {ASTNode} node MemberExpression node to evaluate\n         * @returns {boolean} true if found, false if not\n         */\n        function doesMemberExpressionContainCallExpression(node) {\n            let currentNode = node.object;\n            let currentNodeType = node.object.type;\n\n            while (currentNodeType === \"MemberExpression\") {\n                currentNode = currentNode.object;\n                currentNodeType = currentNode.type;\n            }\n\n            return currentNodeType === \"CallExpression\";\n        }\n\n        /**\n         * Evaluate a new call\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkCallNew(node) {\n            const callee = node.callee;\n\n            if (hasExcessParensWithPrecedence(callee, precedence(node))) {\n                if (\n                    hasDoubleExcessParens(callee) ||\n                    !(\n                        isIIFE(node) ||\n\n                        // (new A)(); new (new A)();\n                        (\n                            callee.type === \"NewExpression\" &&\n                            !isNewExpressionWithParens(callee) &&\n                            !(\n                                node.type === \"NewExpression\" &&\n                                !isNewExpressionWithParens(node)\n                            )\n                        ) ||\n\n                        // new (a().b)(); new (a.b().c);\n                        (\n                            node.type === \"NewExpression\" &&\n                            callee.type === \"MemberExpression\" &&\n                            doesMemberExpressionContainCallExpression(callee)\n                        ) ||\n\n                        // (a?.b)(); (a?.())();\n                        (\n                            !node.optional &&\n                            callee.type === \"ChainExpression\"\n                        )\n                    )\n                ) {\n                    report(node.callee);\n                }\n            }\n            node.arguments\n                .filter(arg => hasExcessParensWithPrecedence(arg, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                .forEach(report);\n        }\n\n        /**\n         * Evaluate binary logicals\n         * @param {ASTNode} node node to evaluate\n         * @returns {void}\n         * @private\n         */\n        function checkBinaryLogical(node) {\n            const prec = precedence(node);\n            const leftPrecedence = precedence(node.left);\n            const rightPrecedence = precedence(node.right);\n            const isExponentiation = node.operator === \"**\";\n            const shouldSkipLeft = NESTED_BINARY && (node.left.type === \"BinaryExpression\" || node.left.type === \"LogicalExpression\");\n            const shouldSkipRight = NESTED_BINARY && (node.right.type === \"BinaryExpression\" || node.right.type === \"LogicalExpression\");\n\n            if (!shouldSkipLeft && hasExcessParens(node.left)) {\n                if (\n                    !([\"AwaitExpression\", \"UnaryExpression\"].includes(node.left.type) && isExponentiation) &&\n                    !astUtils.isMixedLogicalAndCoalesceExpressions(node.left, node) &&\n                    (leftPrecedence > prec || (leftPrecedence === prec && !isExponentiation)) ||\n                    isParenthesisedTwice(node.left)\n                ) {\n                    report(node.left);\n                }\n            }\n\n            if (!shouldSkipRight && hasExcessParens(node.right)) {\n                if (\n                    !astUtils.isMixedLogicalAndCoalesceExpressions(node.right, node) &&\n                    (rightPrecedence > prec || (rightPrecedence === prec && isExponentiation)) ||\n                    isParenthesisedTwice(node.right)\n                ) {\n                    report(node.right);\n                }\n            }\n        }\n\n        /**\n         * Check the parentheses around the super class of the given class definition.\n         * @param {ASTNode} node The node of class declarations to check.\n         * @returns {void}\n         */\n        function checkClass(node) {\n            if (!node.superClass) {\n                return;\n            }\n\n            /*\n             * If `node.superClass` is a LeftHandSideExpression, parentheses are extra.\n             * Otherwise, parentheses are needed.\n             */\n            const hasExtraParens = precedence(node.superClass) > PRECEDENCE_OF_UPDATE_EXPR\n                ? hasExcessParens(node.superClass)\n                : hasDoubleExcessParens(node.superClass);\n\n            if (hasExtraParens) {\n                report(node.superClass);\n            }\n        }\n\n        /**\n         * Check the parentheses around the argument of the given spread operator.\n         * @param {ASTNode} node The node of spread elements/properties to check.\n         * @returns {void}\n         */\n        function checkSpreadOperator(node) {\n            if (hasExcessParensWithPrecedence(node.argument, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                report(node.argument);\n            }\n        }\n\n        /**\n         * Checks the parentheses for an ExpressionStatement or ExportDefaultDeclaration\n         * @param {ASTNode} node The ExpressionStatement.expression or ExportDefaultDeclaration.declaration node\n         * @returns {void}\n         */\n        function checkExpressionOrExportStatement(node) {\n            const firstToken = isParenthesised(node) ? sourceCode.getTokenBefore(node) : sourceCode.getFirstToken(node);\n            const secondToken = sourceCode.getTokenAfter(firstToken, astUtils.isNotOpeningParenToken);\n            const thirdToken = secondToken ? sourceCode.getTokenAfter(secondToken) : null;\n            const tokenAfterClosingParens = secondToken ? sourceCode.getTokenAfter(secondToken, astUtils.isNotClosingParenToken) : null;\n\n            if (\n                astUtils.isOpeningParenToken(firstToken) &&\n                (\n                    astUtils.isOpeningBraceToken(secondToken) ||\n                    secondToken.type === \"Keyword\" && (\n                        secondToken.value === \"function\" ||\n                        secondToken.value === \"class\" ||\n                        secondToken.value === \"let\" &&\n                            tokenAfterClosingParens &&\n                            (\n                                astUtils.isOpeningBracketToken(tokenAfterClosingParens) ||\n                                tokenAfterClosingParens.type === \"Identifier\"\n                            )\n                    ) ||\n                    secondToken && secondToken.type === \"Identifier\" && secondToken.value === \"async\" && thirdToken && thirdToken.type === \"Keyword\" && thirdToken.value === \"function\"\n                )\n            ) {\n                tokensToIgnore.add(secondToken);\n            }\n\n            const hasExtraParens = node.parent.type === \"ExportDefaultDeclaration\"\n                ? hasExcessParensWithPrecedence(node, PRECEDENCE_OF_ASSIGNMENT_EXPR)\n                : hasExcessParens(node);\n\n            if (hasExtraParens) {\n                report(node);\n            }\n        }\n\n        /**\n         * Finds the path from the given node to the specified ancestor.\n         * @param {ASTNode} node First node in the path.\n         * @param {ASTNode} ancestor Last node in the path.\n         * @returns {ASTNode[]} Path, including both nodes.\n         * @throws {Error} If the given node does not have the specified ancestor.\n         */\n        function pathToAncestor(node, ancestor) {\n            const path = [node];\n            let currentNode = node;\n\n            while (currentNode !== ancestor) {\n\n                currentNode = currentNode.parent;\n\n                /* istanbul ignore if */\n                if (currentNode === null) {\n                    throw new Error(\"Nodes are not in the ancestor-descendant relationship.\");\n                }\n\n                path.push(currentNode);\n            }\n\n            return path;\n        }\n\n        /**\n         * Finds the path from the given node to the specified descendant.\n         * @param {ASTNode} node First node in the path.\n         * @param {ASTNode} descendant Last node in the path.\n         * @returns {ASTNode[]} Path, including both nodes.\n         * @throws {Error} If the given node does not have the specified descendant.\n         */\n        function pathToDescendant(node, descendant) {\n            return pathToAncestor(descendant, node).reverse();\n        }\n\n        /**\n         * Checks whether the syntax of the given ancestor of an 'in' expression inside a for-loop initializer\n         * is preventing the 'in' keyword from being interpreted as a part of an ill-formed for-in loop.\n         * @param {ASTNode} node Ancestor of an 'in' expression.\n         * @param {ASTNode} child Child of the node, ancestor of the same 'in' expression or the 'in' expression itself.\n         * @returns {boolean} True if the keyword 'in' would be interpreted as the 'in' operator, without any parenthesis.\n         */\n        function isSafelyEnclosingInExpression(node, child) {\n            switch (node.type) {\n                case \"ArrayExpression\":\n                case \"ArrayPattern\":\n                case \"BlockStatement\":\n                case \"ObjectExpression\":\n                case \"ObjectPattern\":\n                case \"TemplateLiteral\":\n                    return true;\n                case \"ArrowFunctionExpression\":\n                case \"FunctionExpression\":\n                    return node.params.includes(child);\n                case \"CallExpression\":\n                case \"NewExpression\":\n                    return node.arguments.includes(child);\n                case \"MemberExpression\":\n                    return node.computed && node.property === child;\n                case \"ConditionalExpression\":\n                    return node.consequent === child;\n                default:\n                    return false;\n            }\n        }\n\n        /**\n         * Starts a new reports buffering. Warnings will be stored in a buffer instead of being reported immediately.\n         * An additional logic that requires multiple nodes (e.g. a whole subtree) may dismiss some of the stored warnings.\n         * @returns {void}\n         */\n        function startNewReportsBuffering() {\n            reportsBuffer = {\n                upper: reportsBuffer,\n                inExpressionNodes: [],\n                reports: []\n            };\n        }\n\n        /**\n         * Ends the current reports buffering.\n         * @returns {void}\n         */\n        function endCurrentReportsBuffering() {\n            const { upper, inExpressionNodes, reports } = reportsBuffer;\n\n            if (upper) {\n                upper.inExpressionNodes.push(...inExpressionNodes);\n                upper.reports.push(...reports);\n            } else {\n\n                // flush remaining reports\n                reports.forEach(({ finishReport }) => finishReport());\n            }\n\n            reportsBuffer = upper;\n        }\n\n        /**\n         * Checks whether the given node is in the current reports buffer.\n         * @param {ASTNode} node Node to check.\n         * @returns {boolean} True if the node is in the current buffer, false otherwise.\n         */\n        function isInCurrentReportsBuffer(node) {\n            return reportsBuffer.reports.some(r => r.node === node);\n        }\n\n        /**\n         * Removes the given node from the current reports buffer.\n         * @param {ASTNode} node Node to remove.\n         * @returns {void}\n         */\n        function removeFromCurrentReportsBuffer(node) {\n            reportsBuffer.reports = reportsBuffer.reports.filter(r => r.node !== node);\n        }\n\n        /**\n         * Checks whether a node is a MemberExpression at NewExpression's callee.\n         * @param {ASTNode} node node to check.\n         * @returns {boolean} True if the node is a MemberExpression at NewExpression's callee. false otherwise.\n         */\n        function isMemberExpInNewCallee(node) {\n            if (node.type === \"MemberExpression\") {\n                return node.parent.type === \"NewExpression\" && node.parent.callee === node\n                    ? true\n                    : node.parent.object === node && isMemberExpInNewCallee(node.parent);\n            }\n            return false;\n        }\n\n        return {\n            ArrayExpression(node) {\n                node.elements\n                    .filter(e => e && hasExcessParensWithPrecedence(e, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                    .forEach(report);\n            },\n\n            ArrayPattern(node) {\n                node.elements\n                    .filter(e => canBeAssignmentTarget(e) && hasExcessParens(e))\n                    .forEach(report);\n            },\n\n            ArrowFunctionExpression(node) {\n                if (isReturnAssignException(node)) {\n                    return;\n                }\n\n                if (node.body.type === \"ConditionalExpression\" &&\n                    IGNORE_ARROW_CONDITIONALS\n                ) {\n                    return;\n                }\n\n                if (node.body.type !== \"BlockStatement\") {\n                    const firstBodyToken = sourceCode.getFirstToken(node.body, astUtils.isNotOpeningParenToken);\n                    const tokenBeforeFirst = sourceCode.getTokenBefore(firstBodyToken);\n\n                    if (astUtils.isOpeningParenToken(tokenBeforeFirst) && astUtils.isOpeningBraceToken(firstBodyToken)) {\n                        tokensToIgnore.add(firstBodyToken);\n                    }\n                    if (hasExcessParensWithPrecedence(node.body, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                        report(node.body);\n                    }\n                }\n            },\n\n            AssignmentExpression(node) {\n                if (canBeAssignmentTarget(node.left) && hasExcessParens(node.left)) {\n                    report(node.left);\n                }\n\n                if (!isReturnAssignException(node) && hasExcessParensWithPrecedence(node.right, precedence(node))) {\n                    report(node.right);\n                }\n            },\n\n            BinaryExpression(node) {\n                if (reportsBuffer && node.operator === \"in\") {\n                    reportsBuffer.inExpressionNodes.push(node);\n                }\n\n                checkBinaryLogical(node);\n            },\n\n            CallExpression: checkCallNew,\n\n            ClassBody(node) {\n                node.body\n                    .filter(member => member.type === \"MethodDefinition\" && member.computed && member.key)\n                    .filter(member => hasExcessParensWithPrecedence(member.key, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                    .forEach(member => report(member.key));\n            },\n\n            ConditionalExpression(node) {\n                if (isReturnAssignException(node)) {\n                    return;\n                }\n                if (\n                    !isCondAssignException(node) &&\n                    hasExcessParensWithPrecedence(node.test, precedence({ type: \"LogicalExpression\", operator: \"||\" }))\n                ) {\n                    report(node.test);\n                }\n\n                if (hasExcessParensWithPrecedence(node.consequent, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                    report(node.consequent);\n                }\n\n                if (hasExcessParensWithPrecedence(node.alternate, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                    report(node.alternate);\n                }\n            },\n\n            DoWhileStatement(node) {\n                if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n                    report(node.test);\n                }\n            },\n\n            ExportDefaultDeclaration: node => checkExpressionOrExportStatement(node.declaration),\n            ExpressionStatement: node => checkExpressionOrExportStatement(node.expression),\n\n            ForInStatement(node) {\n                if (node.left.type !== \"VariableDeclaration\") {\n                    const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils.isNotOpeningParenToken);\n\n                    if (\n                        firstLeftToken.value === \"let\" &&\n                        astUtils.isOpeningBracketToken(\n                            sourceCode.getTokenAfter(firstLeftToken, astUtils.isNotClosingParenToken)\n                        )\n                    ) {\n\n                        // ForInStatement#left expression cannot start with `let[`.\n                        tokensToIgnore.add(firstLeftToken);\n                    }\n                }\n\n                if (hasExcessParens(node.left)) {\n                    report(node.left);\n                }\n\n                if (hasExcessParens(node.right)) {\n                    report(node.right);\n                }\n            },\n\n            ForOfStatement(node) {\n                if (node.left.type !== \"VariableDeclaration\") {\n                    const firstLeftToken = sourceCode.getFirstToken(node.left, astUtils.isNotOpeningParenToken);\n\n                    if (firstLeftToken.value === \"let\") {\n\n                        // ForOfStatement#left expression cannot start with `let`.\n                        tokensToIgnore.add(firstLeftToken);\n                    }\n                }\n\n                if (hasExcessParens(node.left)) {\n                    report(node.left);\n                }\n\n                if (hasExcessParensWithPrecedence(node.right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                    report(node.right);\n                }\n            },\n\n            ForStatement(node) {\n                if (node.test && hasExcessParens(node.test) && !isCondAssignException(node)) {\n                    report(node.test);\n                }\n\n                if (node.update && hasExcessParens(node.update)) {\n                    report(node.update);\n                }\n\n                if (node.init) {\n\n                    if (node.init.type !== \"VariableDeclaration\") {\n                        const firstToken = sourceCode.getFirstToken(node.init, astUtils.isNotOpeningParenToken);\n\n                        if (\n                            firstToken.value === \"let\" &&\n                            astUtils.isOpeningBracketToken(\n                                sourceCode.getTokenAfter(firstToken, astUtils.isNotClosingParenToken)\n                            )\n                        ) {\n\n                            // ForStatement#init expression cannot start with `let[`.\n                            tokensToIgnore.add(firstToken);\n                        }\n                    }\n\n                    startNewReportsBuffering();\n\n                    if (hasExcessParens(node.init)) {\n                        report(node.init);\n                    }\n                }\n            },\n\n            \"ForStatement > *.init:exit\"(node) {\n\n                /*\n                 * Removing parentheses around `in` expressions might change semantics and cause errors.\n                 *\n                 * For example, this valid for loop:\n                 *      for (let a = (b in c); ;);\n                 * after removing parentheses would be treated as an invalid for-in loop:\n                 *      for (let a = b in c; ;);\n                 */\n\n                if (reportsBuffer.reports.length) {\n                    reportsBuffer.inExpressionNodes.forEach(inExpressionNode => {\n                        const path = pathToDescendant(node, inExpressionNode);\n                        let nodeToExclude;\n\n                        for (let i = 0; i < path.length; i++) {\n                            const pathNode = path[i];\n\n                            if (i < path.length - 1) {\n                                const nextPathNode = path[i + 1];\n\n                                if (isSafelyEnclosingInExpression(pathNode, nextPathNode)) {\n\n                                    // The 'in' expression in safely enclosed by the syntax of its ancestor nodes (e.g. by '{}' or '[]').\n                                    return;\n                                }\n                            }\n\n                            if (isParenthesised(pathNode)) {\n                                if (isInCurrentReportsBuffer(pathNode)) {\n\n                                    // This node was supposed to be reported, but parentheses might be necessary.\n\n                                    if (isParenthesisedTwice(pathNode)) {\n\n                                        /*\n                                         * This node is parenthesised twice, it certainly has at least one pair of `extra` parentheses.\n                                         * If the --fix option is on, the current fixing iteration will remove only one pair of parentheses.\n                                         * The remaining pair is safely enclosing the 'in' expression.\n                                         */\n                                        return;\n                                    }\n\n                                    // Exclude the outermost node only.\n                                    if (!nodeToExclude) {\n                                        nodeToExclude = pathNode;\n                                    }\n\n                                    // Don't break the loop here, there might be some safe nodes or parentheses that will stay inside.\n\n                                } else {\n\n                                    // This node will stay parenthesised, the 'in' expression in safely enclosed by '()'.\n                                    return;\n                                }\n                            }\n                        }\n\n                        // Exclude the node from the list (i.e. treat parentheses as necessary)\n                        removeFromCurrentReportsBuffer(nodeToExclude);\n                    });\n                }\n\n                endCurrentReportsBuffering();\n            },\n\n            IfStatement(node) {\n                if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n                    report(node.test);\n                }\n            },\n\n            ImportExpression(node) {\n                const { source } = node;\n\n                if (source.type === \"SequenceExpression\") {\n                    if (hasDoubleExcessParens(source)) {\n                        report(source);\n                    }\n                } else if (hasExcessParens(source)) {\n                    report(source);\n                }\n            },\n\n            LogicalExpression: checkBinaryLogical,\n\n            MemberExpression(node) {\n                const shouldAllowWrapOnce = isMemberExpInNewCallee(node) &&\n                  doesMemberExpressionContainCallExpression(node);\n                const nodeObjHasExcessParens = shouldAllowWrapOnce\n                    ? hasDoubleExcessParens(node.object)\n                    : hasExcessParens(node.object) &&\n                    !(\n                        isImmediateFunctionPrototypeMethodCall(node.parent) &&\n                        node.parent.callee === node &&\n                        IGNORE_FUNCTION_PROTOTYPE_METHODS\n                    );\n\n                if (\n                    nodeObjHasExcessParens &&\n                    precedence(node.object) >= precedence(node) &&\n                    (\n                        node.computed ||\n                        !(\n                            astUtils.isDecimalInteger(node.object) ||\n\n                            // RegExp literal is allowed to have parens (#1589)\n                            (node.object.type === \"Literal\" && node.object.regex)\n                        )\n                    )\n                ) {\n                    report(node.object);\n                }\n\n                if (nodeObjHasExcessParens &&\n                  node.object.type === \"CallExpression\"\n                ) {\n                    report(node.object);\n                }\n\n                if (nodeObjHasExcessParens &&\n                  !IGNORE_NEW_IN_MEMBER_EXPR &&\n                  node.object.type === \"NewExpression\" &&\n                  isNewExpressionWithParens(node.object)) {\n                    report(node.object);\n                }\n\n                if (nodeObjHasExcessParens &&\n                    node.optional &&\n                    node.object.type === \"ChainExpression\"\n                ) {\n                    report(node.object);\n                }\n\n                if (node.computed && hasExcessParens(node.property)) {\n                    report(node.property);\n                }\n            },\n\n            NewExpression: checkCallNew,\n\n            ObjectExpression(node) {\n                node.properties\n                    .filter(property => property.value && hasExcessParensWithPrecedence(property.value, PRECEDENCE_OF_ASSIGNMENT_EXPR))\n                    .forEach(property => report(property.value));\n            },\n\n            ObjectPattern(node) {\n                node.properties\n                    .filter(property => {\n                        const value = property.value;\n\n                        return canBeAssignmentTarget(value) && hasExcessParens(value);\n                    }).forEach(property => report(property.value));\n            },\n\n            Property(node) {\n                if (node.computed) {\n                    const { key } = node;\n\n                    if (key && hasExcessParensWithPrecedence(key, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                        report(key);\n                    }\n                }\n            },\n\n            RestElement(node) {\n                const argument = node.argument;\n\n                if (canBeAssignmentTarget(argument) && hasExcessParens(argument)) {\n                    report(argument);\n                }\n            },\n\n            ReturnStatement(node) {\n                const returnToken = sourceCode.getFirstToken(node);\n\n                if (isReturnAssignException(node)) {\n                    return;\n                }\n\n                if (node.argument &&\n                        hasExcessParensNoLineTerminator(returnToken, node.argument) &&\n\n                        // RegExp literal is allowed to have parens (#1589)\n                        !(node.argument.type === \"Literal\" && node.argument.regex)) {\n                    report(node.argument);\n                }\n            },\n\n            SequenceExpression(node) {\n                const precedenceOfNode = precedence(node);\n\n                node.expressions\n                    .filter(e => hasExcessParensWithPrecedence(e, precedenceOfNode))\n                    .forEach(report);\n            },\n\n            SwitchCase(node) {\n                if (node.test && hasExcessParens(node.test)) {\n                    report(node.test);\n                }\n            },\n\n            SwitchStatement(node) {\n                if (hasExcessParens(node.discriminant)) {\n                    report(node.discriminant);\n                }\n            },\n\n            ThrowStatement(node) {\n                const throwToken = sourceCode.getFirstToken(node);\n\n                if (hasExcessParensNoLineTerminator(throwToken, node.argument)) {\n                    report(node.argument);\n                }\n            },\n\n            UnaryExpression: checkArgumentWithPrecedence,\n            UpdateExpression(node) {\n                if (node.prefix) {\n                    checkArgumentWithPrecedence(node);\n                } else {\n                    const { argument } = node;\n                    const operatorToken = sourceCode.getLastToken(node);\n\n                    if (argument.loc.end.line === operatorToken.loc.start.line) {\n                        checkArgumentWithPrecedence(node);\n                    } else {\n                        if (hasDoubleExcessParens(argument)) {\n                            report(argument);\n                        }\n                    }\n                }\n            },\n            AwaitExpression: checkArgumentWithPrecedence,\n\n            VariableDeclarator(node) {\n                if (\n                    node.init && hasExcessParensWithPrecedence(node.init, PRECEDENCE_OF_ASSIGNMENT_EXPR) &&\n\n                    // RegExp literal is allowed to have parens (#1589)\n                    !(node.init.type === \"Literal\" && node.init.regex)\n                ) {\n                    report(node.init);\n                }\n            },\n\n            WhileStatement(node) {\n                if (hasExcessParens(node.test) && !isCondAssignException(node)) {\n                    report(node.test);\n                }\n            },\n\n            WithStatement(node) {\n                if (hasExcessParens(node.object)) {\n                    report(node.object);\n                }\n            },\n\n            YieldExpression(node) {\n                if (node.argument) {\n                    const yieldToken = sourceCode.getFirstToken(node);\n\n                    if ((precedence(node.argument) >= precedence(node) &&\n                            hasExcessParensNoLineTerminator(yieldToken, node.argument)) ||\n                            hasDoubleExcessParens(node.argument)) {\n                        report(node.argument);\n                    }\n                }\n            },\n\n            ClassDeclaration: checkClass,\n            ClassExpression: checkClass,\n\n            SpreadElement: checkSpreadOperator,\n            SpreadProperty: checkSpreadOperator,\n            ExperimentalSpreadProperty: checkSpreadOperator,\n\n            TemplateLiteral(node) {\n                node.expressions\n                    .filter(e => e && hasExcessParens(e))\n                    .forEach(report);\n            },\n\n            AssignmentPattern(node) {\n                const { left, right } = node;\n\n                if (canBeAssignmentTarget(left) && hasExcessParens(left)) {\n                    report(left);\n                }\n\n                if (right && hasExcessParensWithPrecedence(right, PRECEDENCE_OF_ASSIGNMENT_EXPR)) {\n                    report(right);\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}