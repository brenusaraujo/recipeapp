{"ast":null,"code":"/**\n * @fileoverview Rule to flag when using javascript: urls\n * @author Ilya Volodin\n */\n\n/* jshint scripturl: true */\n\n/* eslint no-script-url: 0 */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow `javascript:` urls\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-script-url\"\n    },\n    schema: [],\n    messages: {\n      unexpectedScriptURL: \"Script URL is a form of eval.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Check whether a node's static value starts with \"javascript:\" or not.\n     * And report an error for unexpected script URL.\n     * @param {ASTNode} node node to check\n     * @returns {void}\n     */\n    function check(node) {\n      const value = astUtils.getStaticStringValue(node);\n\n      if (typeof value === \"string\" && value.toLowerCase().indexOf(\"javascript:\") === 0) {\n        context.report({\n          node,\n          messageId: \"unexpectedScriptURL\"\n        });\n      }\n    }\n\n    return {\n      Literal(node) {\n        if (node.value && typeof node.value === \"string\") {\n          check(node);\n        }\n      },\n\n      TemplateLiteral(node) {\n        if (!(node.parent && node.parent.type === \"TaggedTemplateExpression\")) {\n          check(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpectedScriptURL","create","context","check","node","value","getStaticStringValue","toLowerCase","indexOf","report","messageId","Literal","TemplateLiteral","parent"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-script-url.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag when using javascript: urls\n * @author Ilya Volodin\n */\n/* jshint scripturl: true */\n/* eslint no-script-url: 0 */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow `javascript:` urls\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-script-url\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedScriptURL: \"Script URL is a form of eval.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Check whether a node's static value starts with \"javascript:\" or not.\n         * And report an error for unexpected script URL.\n         * @param {ASTNode} node node to check\n         * @returns {void}\n         */\n        function check(node) {\n            const value = astUtils.getStaticStringValue(node);\n\n            if (typeof value === \"string\" && value.toLowerCase().indexOf(\"javascript:\") === 0) {\n                context.report({ node, messageId: \"unexpectedScriptURL\" });\n            }\n        }\n        return {\n            Literal(node) {\n                if (node.value && typeof node.value === \"string\") {\n                    check(node);\n                }\n            },\n            TemplateLiteral(node) {\n                if (!(node.parent && node.parent.type === \"TaggedTemplateExpression\")) {\n                    check(node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AACA;;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,6BADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,mBAAmB,EAAE;IADf;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,KAAT,CAAeC,IAAf,EAAqB;MACjB,MAAMC,KAAK,GAAGlB,QAAQ,CAACmB,oBAAT,CAA8BF,IAA9B,CAAd;;MAEA,IAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACE,WAAN,GAAoBC,OAApB,CAA4B,aAA5B,MAA+C,CAAhF,EAAmF;QAC/EN,OAAO,CAACO,MAAR,CAAe;UAAEL,IAAF;UAAQM,SAAS,EAAE;QAAnB,CAAf;MACH;IACJ;;IACD,OAAO;MACHC,OAAO,CAACP,IAAD,EAAO;QACV,IAAIA,IAAI,CAACC,KAAL,IAAc,OAAOD,IAAI,CAACC,KAAZ,KAAsB,QAAxC,EAAkD;UAC9CF,KAAK,CAACC,IAAD,CAAL;QACH;MACJ,CALE;;MAMHQ,eAAe,CAACR,IAAD,EAAO;QAClB,IAAI,EAAEA,IAAI,CAACS,MAAL,IAAeT,IAAI,CAACS,MAAL,CAAYrB,IAAZ,KAAqB,0BAAtC,CAAJ,EAAuE;UACnEW,KAAK,CAACC,IAAD,CAAL;QACH;MACJ;;IAVE,CAAP;EAYH;;AA7CY,CAAjB"},"metadata":{},"sourceType":"script"}