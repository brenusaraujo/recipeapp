{"ast":null,"code":"/**\n * @fileoverview Rule to check multiple var declarations per line\n * @author Alberto Rodríguez\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require or disallow newlines around variable declarations\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/one-var-declaration-per-line\"\n    },\n    schema: [{\n      enum: [\"always\", \"initializations\"]\n    }],\n    fixable: \"whitespace\",\n    messages: {\n      expectVarOnNewline: \"Expected variable declaration to be on a new line.\"\n    }\n  },\n\n  create(context) {\n    const always = context.options[0] === \"always\"; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Determine if provided keyword is a variant of for specifiers\n     * @private\n     * @param {string} keyword keyword to test\n     * @returns {boolean} True if `keyword` is a variant of for specifier\n     */\n\n    function isForTypeSpecifier(keyword) {\n      return keyword === \"ForStatement\" || keyword === \"ForInStatement\" || keyword === \"ForOfStatement\";\n    }\n    /**\n     * Checks newlines around variable declarations.\n     * @private\n     * @param {ASTNode} node `VariableDeclaration` node to test\n     * @returns {void}\n     */\n\n\n    function checkForNewLine(node) {\n      if (isForTypeSpecifier(node.parent.type)) {\n        return;\n      }\n\n      const declarations = node.declarations;\n      let prev;\n      declarations.forEach(current => {\n        if (prev && prev.loc.end.line === current.loc.start.line) {\n          if (always || prev.init || current.init) {\n            context.report({\n              node,\n              messageId: \"expectVarOnNewline\",\n              loc: current.loc,\n              fix: fixer => fixer.insertTextBefore(current, \"\\n\")\n            });\n          }\n        }\n\n        prev = current;\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      VariableDeclaration: checkForNewLine\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","enum","fixable","messages","expectVarOnNewline","create","context","always","options","isForTypeSpecifier","keyword","checkForNewLine","node","parent","declarations","prev","forEach","current","loc","end","line","start","init","report","messageId","fix","fixer","insertTextBefore","VariableDeclaration"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/one-var-declaration-per-line.js"],"sourcesContent":["/**\n * @fileoverview Rule to check multiple var declarations per line\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require or disallow newlines around variable declarations\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/one-var-declaration-per-line\"\n        },\n\n        schema: [\n            {\n                enum: [\"always\", \"initializations\"]\n            }\n        ],\n\n        fixable: \"whitespace\",\n\n        messages: {\n            expectVarOnNewline: \"Expected variable declaration to be on a new line.\"\n        }\n    },\n\n    create(context) {\n\n        const always = context.options[0] === \"always\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n\n        /**\n         * Determine if provided keyword is a variant of for specifiers\n         * @private\n         * @param {string} keyword keyword to test\n         * @returns {boolean} True if `keyword` is a variant of for specifier\n         */\n        function isForTypeSpecifier(keyword) {\n            return keyword === \"ForStatement\" || keyword === \"ForInStatement\" || keyword === \"ForOfStatement\";\n        }\n\n        /**\n         * Checks newlines around variable declarations.\n         * @private\n         * @param {ASTNode} node `VariableDeclaration` node to test\n         * @returns {void}\n         */\n        function checkForNewLine(node) {\n            if (isForTypeSpecifier(node.parent.type)) {\n                return;\n            }\n\n            const declarations = node.declarations;\n            let prev;\n\n            declarations.forEach(current => {\n                if (prev && prev.loc.end.line === current.loc.start.line) {\n                    if (always || prev.init || current.init) {\n                        context.report({\n                            node,\n                            messageId: \"expectVarOnNewline\",\n                            loc: current.loc,\n                            fix: fixer => fixer.insertTextBefore(current, \"\\n\")\n                        });\n                    }\n                }\n                prev = current;\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            VariableDeclaration: checkForNewLine\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,2DADX;MAEFC,QAAQ,EAAE,kBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,QAAD,EAAW,iBAAX;IADV,CADI,CAVN;IAgBFC,OAAO,EAAE,YAhBP;IAkBFC,QAAQ,EAAE;MACNC,kBAAkB,EAAE;IADd;EAlBR,CADO;;EAwBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,MAAuB,QAAtC,CAFY,CAIZ;IACA;IACA;;IAGA;AACR;AACA;AACA;AACA;AACA;;IACQ,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;MACjC,OAAOA,OAAO,KAAK,cAAZ,IAA8BA,OAAO,KAAK,gBAA1C,IAA8DA,OAAO,KAAK,gBAAjF;IACH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;MAC3B,IAAIH,kBAAkB,CAACG,IAAI,CAACC,MAAL,CAAYnB,IAAb,CAAtB,EAA0C;QACtC;MACH;;MAED,MAAMoB,YAAY,GAAGF,IAAI,CAACE,YAA1B;MACA,IAAIC,IAAJ;MAEAD,YAAY,CAACE,OAAb,CAAqBC,OAAO,IAAI;QAC5B,IAAIF,IAAI,IAAIA,IAAI,CAACG,GAAL,CAASC,GAAT,CAAaC,IAAb,KAAsBH,OAAO,CAACC,GAAR,CAAYG,KAAZ,CAAkBD,IAApD,EAA0D;UACtD,IAAIb,MAAM,IAAIQ,IAAI,CAACO,IAAf,IAAuBL,OAAO,CAACK,IAAnC,EAAyC;YACrChB,OAAO,CAACiB,MAAR,CAAe;cACXX,IADW;cAEXY,SAAS,EAAE,oBAFA;cAGXN,GAAG,EAAED,OAAO,CAACC,GAHF;cAIXO,GAAG,EAAEC,KAAK,IAAIA,KAAK,CAACC,gBAAN,CAAuBV,OAAvB,EAAgC,IAAhC;YAJH,CAAf;UAMH;QACJ;;QACDF,IAAI,GAAGE,OAAP;MACH,CAZD;IAaH,CA9CW,CAgDZ;IACA;IACA;;;IAEA,OAAO;MACHW,mBAAmB,EAAEjB;IADlB,CAAP;EAIH;;AAhFY,CAAjB"},"metadata":{},"sourceType":"script"}