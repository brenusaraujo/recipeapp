{"ast":null,"code":"/**\n * @fileoverview Common utils for AST.\n * @author Gyandeep Singh\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst esutils = require(\"esutils\");\n\nconst espree = require(\"espree\");\n\nconst escapeRegExp = require(\"escape-string-regexp\");\n\nconst {\n  breakableTypePattern,\n  createGlobalLinebreakMatcher,\n  lineBreakPattern,\n  shebangPattern\n} = require(\"../../shared/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst anyFunctionPattern = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression)$/u;\nconst anyLoopPattern = /^(?:DoWhile|For|ForIn|ForOf|While)Statement$/u;\nconst arrayOrTypedArrayPattern = /Array$/u;\nconst arrayMethodPattern = /^(?:every|filter|find|findIndex|forEach|map|some)$/u;\nconst bindOrCallOrApplyPattern = /^(?:bind|call|apply)$/u;\nconst thisTagPattern = /^[\\s*]*@this/mu;\nconst COMMENTS_IGNORE_PATTERN = /^\\s*(?:eslint|jshint\\s+|jslint\\s+|istanbul\\s+|globals?\\s+|exported\\s+|jscs)/u;\nconst LINEBREAKS = new Set([\"\\r\\n\", \"\\r\", \"\\n\", \"\\u2028\", \"\\u2029\"]); // A set of node types that can contain a list of statements\n\nconst STATEMENT_LIST_PARENTS = new Set([\"Program\", \"BlockStatement\", \"SwitchCase\"]);\nconst DECIMAL_INTEGER_PATTERN = /^(?:0|0[0-7]*[89]\\d*|[1-9](?:_?\\d)*)$/u; // Tests the presence of at least one LegacyOctalEscapeSequence or NonOctalDecimalEscapeSequence in a raw string\n\nconst OCTAL_OR_NON_OCTAL_DECIMAL_ESCAPE_PATTERN = /^(?:[^\\\\]|\\\\.)*\\\\(?:[1-9]|0[0-9])/su;\nconst LOGICAL_ASSIGNMENT_OPERATORS = new Set([\"&&=\", \"||=\", \"??=\"]);\n/**\n * Checks reference if is non initializer and writable.\n * @param {Reference} reference A reference to check.\n * @param {int} index The index of the reference in the references.\n * @param {Reference[]} references The array that the reference belongs to.\n * @returns {boolean} Success/Failure\n * @private\n */\n\nfunction isModifyingReference(reference, index, references) {\n  const identifier = reference.identifier;\n  /*\n   * Destructuring assignments can have multiple default value, so\n   * possibly there are multiple writeable references for the same\n   * identifier.\n   */\n\n  const modifyingDifferentIdentifier = index === 0 || references[index - 1].identifier !== identifier;\n  return identifier && reference.init === false && reference.isWrite() && modifyingDifferentIdentifier;\n}\n/**\n * Checks whether the given string starts with uppercase or not.\n * @param {string} s The string to check.\n * @returns {boolean} `true` if the string starts with uppercase.\n */\n\n\nfunction startsWithUpperCase(s) {\n  return s[0] !== s[0].toLocaleLowerCase();\n}\n/**\n * Checks whether or not a node is a constructor.\n * @param {ASTNode} node A function node to check.\n * @returns {boolean} Whether or not a node is a constructor.\n */\n\n\nfunction isES5Constructor(node) {\n  return node.id && startsWithUpperCase(node.id.name);\n}\n/**\n * Finds a function node from ancestors of a node.\n * @param {ASTNode} node A start node to find.\n * @returns {Node|null} A found function node.\n */\n\n\nfunction getUpperFunction(node) {\n  for (let currentNode = node; currentNode; currentNode = currentNode.parent) {\n    if (anyFunctionPattern.test(currentNode.type)) {\n      return currentNode;\n    }\n  }\n\n  return null;\n}\n/**\n * Checks whether a given node is a function node or not.\n * The following types are function nodes:\n *\n * - ArrowFunctionExpression\n * - FunctionDeclaration\n * - FunctionExpression\n * @param {ASTNode|null} node A node to check.\n * @returns {boolean} `true` if the node is a function node.\n */\n\n\nfunction isFunction(node) {\n  return Boolean(node && anyFunctionPattern.test(node.type));\n}\n/**\n * Checks whether a given node is a loop node or not.\n * The following types are loop nodes:\n *\n * - DoWhileStatement\n * - ForInStatement\n * - ForOfStatement\n * - ForStatement\n * - WhileStatement\n * @param {ASTNode|null} node A node to check.\n * @returns {boolean} `true` if the node is a loop node.\n */\n\n\nfunction isLoop(node) {\n  return Boolean(node && anyLoopPattern.test(node.type));\n}\n/**\n * Checks whether the given node is in a loop or not.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is in a loop.\n */\n\n\nfunction isInLoop(node) {\n  for (let currentNode = node; currentNode && !isFunction(currentNode); currentNode = currentNode.parent) {\n    if (isLoop(currentNode)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Determines whether the given node is a `null` literal.\n * @param {ASTNode} node The node to check\n * @returns {boolean} `true` if the node is a `null` literal\n */\n\n\nfunction isNullLiteral(node) {\n  /*\n   * Checking `node.value === null` does not guarantee that a literal is a null literal.\n   * When parsing values that cannot be represented in the current environment (e.g. unicode\n   * regexes in Node 4), `node.value` is set to `null` because it wouldn't be possible to\n   * set `node.value` to a unicode regex. To make sure a literal is actually `null`, check\n   * `node.regex` instead. Also see: https://github.com/eslint/eslint/issues/8020\n   */\n  return node.type === \"Literal\" && node.value === null && !node.regex && !node.bigint;\n}\n/**\n * Checks whether or not a node is `null` or `undefined`.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is a `null` or `undefined`.\n * @public\n */\n\n\nfunction isNullOrUndefined(node) {\n  return isNullLiteral(node) || node.type === \"Identifier\" && node.name === \"undefined\" || node.type === \"UnaryExpression\" && node.operator === \"void\";\n}\n/**\n * Checks whether or not a node is callee.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is callee.\n */\n\n\nfunction isCallee(node) {\n  return node.parent.type === \"CallExpression\" && node.parent.callee === node;\n}\n/**\n * Returns the result of the string conversion applied to the evaluated value of the given expression node,\n * if it can be determined statically.\n *\n * This function returns a `string` value for all `Literal` nodes and simple `TemplateLiteral` nodes only.\n * In all other cases, this function returns `null`.\n * @param {ASTNode} node Expression node.\n * @returns {string|null} String value if it can be determined. Otherwise, `null`.\n */\n\n\nfunction getStaticStringValue(node) {\n  switch (node.type) {\n    case \"Literal\":\n      if (node.value === null) {\n        if (isNullLiteral(node)) {\n          return String(node.value); // \"null\"\n        }\n\n        if (node.regex) {\n          return `/${node.regex.pattern}/${node.regex.flags}`;\n        }\n\n        if (node.bigint) {\n          return node.bigint;\n        } // Otherwise, this is an unknown literal. The function will return null.\n\n      } else {\n        return String(node.value);\n      }\n\n      break;\n\n    case \"TemplateLiteral\":\n      if (node.expressions.length === 0 && node.quasis.length === 1) {\n        return node.quasis[0].value.cooked;\n      }\n\n      break;\n    // no default\n  }\n\n  return null;\n}\n/**\n * Gets the property name of a given node.\n * The node can be a MemberExpression, a Property, or a MethodDefinition.\n *\n * If the name is dynamic, this returns `null`.\n *\n * For examples:\n *\n *     a.b           // => \"b\"\n *     a[\"b\"]        // => \"b\"\n *     a['b']        // => \"b\"\n *     a[`b`]        // => \"b\"\n *     a[100]        // => \"100\"\n *     a[b]          // => null\n *     a[\"a\" + \"b\"]  // => null\n *     a[tag`b`]     // => null\n *     a[`${b}`]     // => null\n *\n *     let a = {b: 1}            // => \"b\"\n *     let a = {[\"b\"]: 1}        // => \"b\"\n *     let a = {['b']: 1}        // => \"b\"\n *     let a = {[`b`]: 1}        // => \"b\"\n *     let a = {[100]: 1}        // => \"100\"\n *     let a = {[b]: 1}          // => null\n *     let a = {[\"a\" + \"b\"]: 1}  // => null\n *     let a = {[tag`b`]: 1}     // => null\n *     let a = {[`${b}`]: 1}     // => null\n * @param {ASTNode} node The node to get.\n * @returns {string|null} The property name if static. Otherwise, null.\n */\n\n\nfunction getStaticPropertyName(node) {\n  let prop;\n\n  switch (node && node.type) {\n    case \"ChainExpression\":\n      return getStaticPropertyName(node.expression);\n\n    case \"Property\":\n    case \"MethodDefinition\":\n      prop = node.key;\n      break;\n\n    case \"MemberExpression\":\n      prop = node.property;\n      break;\n    // no default\n  }\n\n  if (prop) {\n    if (prop.type === \"Identifier\" && !node.computed) {\n      return prop.name;\n    }\n\n    return getStaticStringValue(prop);\n  }\n\n  return null;\n}\n/**\n * Retrieve `ChainExpression#expression` value if the given node a `ChainExpression` node. Otherwise, pass through it.\n * @param {ASTNode} node The node to address.\n * @returns {ASTNode} The `ChainExpression#expression` value if the node is a `ChainExpression` node. Otherwise, the node.\n */\n\n\nfunction skipChainExpression(node) {\n  return node && node.type === \"ChainExpression\" ? node.expression : node;\n}\n/**\n * Check if the `actual` is an expected value.\n * @param {string} actual The string value to check.\n * @param {string | RegExp} expected The expected string value or pattern.\n * @returns {boolean} `true` if the `actual` is an expected value.\n */\n\n\nfunction checkText(actual, expected) {\n  return typeof expected === \"string\" ? actual === expected : expected.test(actual);\n}\n/**\n * Check if a given node is an Identifier node with a given name.\n * @param {ASTNode} node The node to check.\n * @param {string | RegExp} name The expected name or the expected pattern of the object name.\n * @returns {boolean} `true` if the node is an Identifier node with the name.\n */\n\n\nfunction isSpecificId(node, name) {\n  return node.type === \"Identifier\" && checkText(node.name, name);\n}\n/**\n * Check if a given node is member access with a given object name and property name pair.\n * This is regardless of optional or not.\n * @param {ASTNode} node The node to check.\n * @param {string | RegExp | null} objectName The expected name or the expected pattern of the object name. If this is nullish, this method doesn't check object.\n * @param {string | RegExp | null} propertyName The expected name or the expected pattern of the property name. If this is nullish, this method doesn't check property.\n * @returns {boolean} `true` if the node is member access with the object name and property name pair.\n * The node is a `MemberExpression` or `ChainExpression`.\n */\n\n\nfunction isSpecificMemberAccess(node, objectName, propertyName) {\n  const checkNode = skipChainExpression(node);\n\n  if (checkNode.type !== \"MemberExpression\") {\n    return false;\n  }\n\n  if (objectName && !isSpecificId(checkNode.object, objectName)) {\n    return false;\n  }\n\n  if (propertyName) {\n    const actualPropertyName = getStaticPropertyName(checkNode);\n\n    if (typeof actualPropertyName !== \"string\" || !checkText(actualPropertyName, propertyName)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Check if two literal nodes are the same value.\n * @param {ASTNode} left The Literal node to compare.\n * @param {ASTNode} right The other Literal node to compare.\n * @returns {boolean} `true` if the two literal nodes are the same value.\n */\n\n\nfunction equalLiteralValue(left, right) {\n  // RegExp literal.\n  if (left.regex || right.regex) {\n    return Boolean(left.regex && right.regex && left.regex.pattern === right.regex.pattern && left.regex.flags === right.regex.flags);\n  } // BigInt literal.\n\n\n  if (left.bigint || right.bigint) {\n    return left.bigint === right.bigint;\n  }\n\n  return left.value === right.value;\n}\n/**\n * Check if two expressions reference the same value. For example:\n *     a = a\n *     a.b = a.b\n *     a[0] = a[0]\n *     a['b'] = a['b']\n * @param {ASTNode} left The left side of the comparison.\n * @param {ASTNode} right The right side of the comparison.\n * @param {boolean} [disableStaticComputedKey] Don't address `a.b` and `a[\"b\"]` are the same if `true`. For backward compatibility.\n * @returns {boolean} `true` if both sides match and reference the same value.\n */\n\n\nfunction isSameReference(left, right) {\n  let disableStaticComputedKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (left.type !== right.type) {\n    // Handle `a.b` and `a?.b` are samely.\n    if (left.type === \"ChainExpression\") {\n      return isSameReference(left.expression, right, disableStaticComputedKey);\n    }\n\n    if (right.type === \"ChainExpression\") {\n      return isSameReference(left, right.expression, disableStaticComputedKey);\n    }\n\n    return false;\n  }\n\n  switch (left.type) {\n    case \"Super\":\n    case \"ThisExpression\":\n      return true;\n\n    case \"Identifier\":\n      return left.name === right.name;\n\n    case \"Literal\":\n      return equalLiteralValue(left, right);\n\n    case \"ChainExpression\":\n      return isSameReference(left.expression, right.expression, disableStaticComputedKey);\n\n    case \"MemberExpression\":\n      {\n        if (!disableStaticComputedKey) {\n          const nameA = getStaticPropertyName(left); // x.y = x[\"y\"]\n\n          if (nameA !== null) {\n            return isSameReference(left.object, right.object, disableStaticComputedKey) && nameA === getStaticPropertyName(right);\n          }\n        }\n        /*\n         * x[0] = x[0]\n         * x[y] = x[y]\n         * x.y = x.y\n         */\n\n\n        return left.computed === right.computed && isSameReference(left.object, right.object, disableStaticComputedKey) && isSameReference(left.property, right.property, disableStaticComputedKey);\n      }\n\n    default:\n      return false;\n  }\n}\n/**\n * Checks whether or not a node is `Reflect.apply`.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is a `Reflect.apply`.\n */\n\n\nfunction isReflectApply(node) {\n  return isSpecificMemberAccess(node, \"Reflect\", \"apply\");\n}\n/**\n * Checks whether or not a node is `Array.from`.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is a `Array.from`.\n */\n\n\nfunction isArrayFromMethod(node) {\n  return isSpecificMemberAccess(node, arrayOrTypedArrayPattern, \"from\");\n}\n/**\n * Checks whether or not a node is a method which has `thisArg`.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is a method which has `thisArg`.\n */\n\n\nfunction isMethodWhichHasThisArg(node) {\n  return isSpecificMemberAccess(node, null, arrayMethodPattern);\n}\n/**\n * Creates the negate function of the given function.\n * @param {Function} f The function to negate.\n * @returns {Function} Negated function.\n */\n\n\nfunction negate(f) {\n  return token => !f(token);\n}\n/**\n * Checks whether or not a node has a `@this` tag in its comments.\n * @param {ASTNode} node A node to check.\n * @param {SourceCode} sourceCode A SourceCode instance to get comments.\n * @returns {boolean} Whether or not the node has a `@this` tag in its comments.\n */\n\n\nfunction hasJSDocThisTag(node, sourceCode) {\n  const jsdocComment = sourceCode.getJSDocComment(node);\n\n  if (jsdocComment && thisTagPattern.test(jsdocComment.value)) {\n    return true;\n  } // Checks `@this` in its leading comments for callbacks,\n  // because callbacks don't have its JSDoc comment.\n  // e.g.\n  //     sinon.test(/* @this sinon.Sandbox */function() { this.spy(); });\n\n\n  return sourceCode.getCommentsBefore(node).some(comment => thisTagPattern.test(comment.value));\n}\n/**\n * Determines if a node is surrounded by parentheses.\n * @param {SourceCode} sourceCode The ESLint source code object\n * @param {ASTNode} node The node to be checked.\n * @returns {boolean} True if the node is parenthesised.\n * @private\n */\n\n\nfunction isParenthesised(sourceCode, node) {\n  const previousToken = sourceCode.getTokenBefore(node),\n        nextToken = sourceCode.getTokenAfter(node);\n  return Boolean(previousToken && nextToken) && previousToken.value === \"(\" && previousToken.range[1] <= node.range[0] && nextToken.value === \")\" && nextToken.range[0] >= node.range[1];\n}\n/**\n * Checks if the given token is an arrow token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is an arrow token.\n */\n\n\nfunction isArrowToken(token) {\n  return token.value === \"=>\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is a comma token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a comma token.\n */\n\n\nfunction isCommaToken(token) {\n  return token.value === \",\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is a dot token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a dot token.\n */\n\n\nfunction isDotToken(token) {\n  return token.value === \".\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is a `?.` token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a `?.` token.\n */\n\n\nfunction isQuestionDotToken(token) {\n  return token.value === \"?.\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is a semicolon token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a semicolon token.\n */\n\n\nfunction isSemicolonToken(token) {\n  return token.value === \";\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is a colon token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a colon token.\n */\n\n\nfunction isColonToken(token) {\n  return token.value === \":\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is an opening parenthesis token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is an opening parenthesis token.\n */\n\n\nfunction isOpeningParenToken(token) {\n  return token.value === \"(\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is a closing parenthesis token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a closing parenthesis token.\n */\n\n\nfunction isClosingParenToken(token) {\n  return token.value === \")\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is an opening square bracket token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is an opening square bracket token.\n */\n\n\nfunction isOpeningBracketToken(token) {\n  return token.value === \"[\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is a closing square bracket token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a closing square bracket token.\n */\n\n\nfunction isClosingBracketToken(token) {\n  return token.value === \"]\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is an opening brace token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is an opening brace token.\n */\n\n\nfunction isOpeningBraceToken(token) {\n  return token.value === \"{\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is a closing brace token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a closing brace token.\n */\n\n\nfunction isClosingBraceToken(token) {\n  return token.value === \"}\" && token.type === \"Punctuator\";\n}\n/**\n * Checks if the given token is a comment token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a comment token.\n */\n\n\nfunction isCommentToken(token) {\n  return token.type === \"Line\" || token.type === \"Block\" || token.type === \"Shebang\";\n}\n/**\n * Checks if the given token is a keyword token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a keyword token.\n */\n\n\nfunction isKeywordToken(token) {\n  return token.type === \"Keyword\";\n}\n/**\n * Gets the `(` token of the given function node.\n * @param {ASTNode} node The function node to get.\n * @param {SourceCode} sourceCode The source code object to get tokens.\n * @returns {Token} `(` token.\n */\n\n\nfunction getOpeningParenOfParams(node, sourceCode) {\n  return node.id ? sourceCode.getTokenAfter(node.id, isOpeningParenToken) : sourceCode.getFirstToken(node, isOpeningParenToken);\n}\n/**\n * Checks whether or not the tokens of two given nodes are same.\n * @param {ASTNode} left A node 1 to compare.\n * @param {ASTNode} right A node 2 to compare.\n * @param {SourceCode} sourceCode The ESLint source code object.\n * @returns {boolean} the source code for the given node.\n */\n\n\nfunction equalTokens(left, right, sourceCode) {\n  const tokensL = sourceCode.getTokens(left);\n  const tokensR = sourceCode.getTokens(right);\n\n  if (tokensL.length !== tokensR.length) {\n    return false;\n  }\n\n  for (let i = 0; i < tokensL.length; ++i) {\n    if (tokensL[i].type !== tokensR[i].type || tokensL[i].value !== tokensR[i].value) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Check if the given node is a true logical expression or not.\n *\n * The three binary expressions logical-or (`||`), logical-and (`&&`), and\n * coalesce (`??`) are known as `ShortCircuitExpression`.\n * But ESTree represents those by `LogicalExpression` node.\n *\n * This function rejects coalesce expressions of `LogicalExpression` node.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is `&&` or `||`.\n * @see https://tc39.es/ecma262/#prod-ShortCircuitExpression\n */\n\n\nfunction isLogicalExpression(node) {\n  return node.type === \"LogicalExpression\" && (node.operator === \"&&\" || node.operator === \"||\");\n}\n/**\n * Check if the given node is a nullish coalescing expression or not.\n *\n * The three binary expressions logical-or (`||`), logical-and (`&&`), and\n * coalesce (`??`) are known as `ShortCircuitExpression`.\n * But ESTree represents those by `LogicalExpression` node.\n *\n * This function finds only coalesce expressions of `LogicalExpression` node.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is `??`.\n */\n\n\nfunction isCoalesceExpression(node) {\n  return node.type === \"LogicalExpression\" && node.operator === \"??\";\n}\n/**\n * Check if given two nodes are the pair of a logical expression and a coalesce expression.\n * @param {ASTNode} left A node to check.\n * @param {ASTNode} right Another node to check.\n * @returns {boolean} `true` if the two nodes are the pair of a logical expression and a coalesce expression.\n */\n\n\nfunction isMixedLogicalAndCoalesceExpressions(left, right) {\n  return isLogicalExpression(left) && isCoalesceExpression(right) || isCoalesceExpression(left) && isLogicalExpression(right);\n}\n/**\n * Checks if the given operator is a logical assignment operator.\n * @param {string} operator The operator to check.\n * @returns {boolean} `true` if the operator is a logical assignment operator.\n */\n\n\nfunction isLogicalAssignmentOperator(operator) {\n  return LOGICAL_ASSIGNMENT_OPERATORS.has(operator);\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  COMMENTS_IGNORE_PATTERN,\n  LINEBREAKS,\n  LINEBREAK_MATCHER: lineBreakPattern,\n  SHEBANG_MATCHER: shebangPattern,\n  STATEMENT_LIST_PARENTS,\n\n  /**\n   * Determines whether two adjacent tokens are on the same line.\n   * @param {Object} left The left token object.\n   * @param {Object} right The right token object.\n   * @returns {boolean} Whether or not the tokens are on the same line.\n   * @public\n   */\n  isTokenOnSameLine(left, right) {\n    return left.loc.end.line === right.loc.start.line;\n  },\n\n  isNullOrUndefined,\n  isCallee,\n  isES5Constructor,\n  getUpperFunction,\n  isFunction,\n  isLoop,\n  isInLoop,\n  isArrayFromMethod,\n  isParenthesised,\n  createGlobalLinebreakMatcher,\n  equalTokens,\n  isArrowToken,\n  isClosingBraceToken,\n  isClosingBracketToken,\n  isClosingParenToken,\n  isColonToken,\n  isCommaToken,\n  isCommentToken,\n  isDotToken,\n  isQuestionDotToken,\n  isKeywordToken,\n  isNotClosingBraceToken: negate(isClosingBraceToken),\n  isNotClosingBracketToken: negate(isClosingBracketToken),\n  isNotClosingParenToken: negate(isClosingParenToken),\n  isNotColonToken: negate(isColonToken),\n  isNotCommaToken: negate(isCommaToken),\n  isNotDotToken: negate(isDotToken),\n  isNotQuestionDotToken: negate(isQuestionDotToken),\n  isNotOpeningBraceToken: negate(isOpeningBraceToken),\n  isNotOpeningBracketToken: negate(isOpeningBracketToken),\n  isNotOpeningParenToken: negate(isOpeningParenToken),\n  isNotSemicolonToken: negate(isSemicolonToken),\n  isOpeningBraceToken,\n  isOpeningBracketToken,\n  isOpeningParenToken,\n  isSemicolonToken,\n\n  /**\n   * Checks whether or not a given node is a string literal.\n   * @param {ASTNode} node A node to check.\n   * @returns {boolean} `true` if the node is a string literal.\n   */\n  isStringLiteral(node) {\n    return node.type === \"Literal\" && typeof node.value === \"string\" || node.type === \"TemplateLiteral\";\n  },\n\n  /**\n   * Checks whether a given node is a breakable statement or not.\n   * The node is breakable if the node is one of the following type:\n   *\n   * - DoWhileStatement\n   * - ForInStatement\n   * - ForOfStatement\n   * - ForStatement\n   * - SwitchStatement\n   * - WhileStatement\n   * @param {ASTNode} node A node to check.\n   * @returns {boolean} `true` if the node is breakable.\n   */\n  isBreakableStatement(node) {\n    return breakableTypePattern.test(node.type);\n  },\n\n  /**\n   * Gets references which are non initializer and writable.\n   * @param {Reference[]} references An array of references.\n   * @returns {Reference[]} An array of only references which are non initializer and writable.\n   * @public\n   */\n  getModifyingReferences(references) {\n    return references.filter(isModifyingReference);\n  },\n\n  /**\n   * Validate that a string passed in is surrounded by the specified character\n   * @param  {string} val The text to check.\n   * @param  {string} character The character to see if it's surrounded by.\n   * @returns {boolean} True if the text is surrounded by the character, false if not.\n   * @private\n   */\n  isSurroundedBy(val, character) {\n    return val[0] === character && val[val.length - 1] === character;\n  },\n\n  /**\n   * Returns whether the provided node is an ESLint directive comment or not\n   * @param {Line|Block} node The comment token to be checked\n   * @returns {boolean} `true` if the node is an ESLint directive comment\n   */\n  isDirectiveComment(node) {\n    const comment = node.value.trim();\n    return node.type === \"Line\" && comment.indexOf(\"eslint-\") === 0 || node.type === \"Block\" && (comment.indexOf(\"global \") === 0 || comment.indexOf(\"eslint \") === 0 || comment.indexOf(\"eslint-\") === 0);\n  },\n\n  /**\n   * Gets the trailing statement of a given node.\n   *\n   *     if (code)\n   *         consequent;\n   *\n   * When taking this `IfStatement`, returns `consequent;` statement.\n   * @param {ASTNode} A node to get.\n   * @returns {ASTNode|null} The trailing statement's node.\n   */\n  getTrailingStatement: esutils.ast.trailingStatement,\n\n  /**\n   * Finds the variable by a given name in a given scope and its upper scopes.\n   * @param {eslint-scope.Scope} initScope A scope to start find.\n   * @param {string} name A variable name to find.\n   * @returns {eslint-scope.Variable|null} A found variable or `null`.\n   */\n  getVariableByName(initScope, name) {\n    let scope = initScope;\n\n    while (scope) {\n      const variable = scope.set.get(name);\n\n      if (variable) {\n        return variable;\n      }\n\n      scope = scope.upper;\n    }\n\n    return null;\n  },\n\n  /**\n   * Checks whether or not a given function node is the default `this` binding.\n   *\n   * First, this checks the node:\n   *\n   * - The function name does not start with uppercase. It's a convention to capitalize the names\n   *   of constructor functions. This check is not performed if `capIsConstructor` is set to `false`.\n   * - The function does not have a JSDoc comment that has a @this tag.\n   *\n   * Next, this checks the location of the node.\n   * If the location is below, this judges `this` is valid.\n   *\n   * - The location is not on an object literal.\n   * - The location is not assigned to a variable which starts with an uppercase letter. Applies to anonymous\n   *   functions only, as the name of the variable is considered to be the name of the function in this case.\n   *   This check is not performed if `capIsConstructor` is set to `false`.\n   * - The location is not on an ES2015 class.\n   * - Its `bind`/`call`/`apply` method is not called directly.\n   * - The function is not a callback of array methods (such as `.forEach()`) if `thisArg` is given.\n   * @param {ASTNode} node A function node to check.\n   * @param {SourceCode} sourceCode A SourceCode instance to get comments.\n   * @param {boolean} [capIsConstructor = true] `false` disables the assumption that functions which name starts\n   * with an uppercase or are assigned to a variable which name starts with an uppercase are constructors.\n   * @returns {boolean} The function node is the default `this` binding.\n   */\n  isDefaultThisBinding(node, sourceCode) {\n    let {\n      capIsConstructor = true\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (capIsConstructor && isES5Constructor(node) || hasJSDocThisTag(node, sourceCode)) {\n      return false;\n    }\n\n    const isAnonymous = node.id === null;\n    let currentNode = node;\n\n    while (currentNode) {\n      const parent = currentNode.parent;\n\n      switch (parent.type) {\n        /*\n         * Looks up the destination.\n         * e.g., obj.foo = nativeFoo || function foo() { ... };\n         */\n        case \"LogicalExpression\":\n        case \"ConditionalExpression\":\n        case \"ChainExpression\":\n          currentNode = parent;\n          break;\n\n        /*\n         * If the upper function is IIFE, checks the destination of the return value.\n         * e.g.\n         *   obj.foo = (function() {\n         *     // setup...\n         *     return function foo() { ... };\n         *   })();\n         *   obj.foo = (() =>\n         *     function foo() { ... }\n         *   )();\n         */\n\n        case \"ReturnStatement\":\n          {\n            const func = getUpperFunction(parent);\n\n            if (func === null || !isCallee(func)) {\n              return true;\n            }\n\n            currentNode = func.parent;\n            break;\n          }\n\n        case \"ArrowFunctionExpression\":\n          if (currentNode !== parent.body || !isCallee(parent)) {\n            return true;\n          }\n\n          currentNode = parent.parent;\n          break;\n\n        /*\n         * e.g.\n         *   var obj = { foo() { ... } };\n         *   var obj = { foo: function() { ... } };\n         *   class A { constructor() { ... } }\n         *   class A { foo() { ... } }\n         *   class A { get foo() { ... } }\n         *   class A { set foo() { ... } }\n         *   class A { static foo() { ... } }\n         */\n\n        case \"Property\":\n        case \"MethodDefinition\":\n          return parent.value !== currentNode;\n\n        /*\n         * e.g.\n         *   obj.foo = function foo() { ... };\n         *   Foo = function() { ... };\n         *   [obj.foo = function foo() { ... }] = a;\n         *   [Foo = function() { ... }] = a;\n         */\n\n        case \"AssignmentExpression\":\n        case \"AssignmentPattern\":\n          if (parent.left.type === \"MemberExpression\") {\n            return false;\n          }\n\n          if (capIsConstructor && isAnonymous && parent.left.type === \"Identifier\" && startsWithUpperCase(parent.left.name)) {\n            return false;\n          }\n\n          return true;\n\n        /*\n         * e.g.\n         *   var Foo = function() { ... };\n         */\n\n        case \"VariableDeclarator\":\n          return !(capIsConstructor && isAnonymous && parent.init === currentNode && parent.id.type === \"Identifier\" && startsWithUpperCase(parent.id.name));\n\n        /*\n         * e.g.\n         *   var foo = function foo() { ... }.bind(obj);\n         *   (function foo() { ... }).call(obj);\n         *   (function foo() { ... }).apply(obj, []);\n         */\n\n        case \"MemberExpression\":\n          if (parent.object === currentNode && isSpecificMemberAccess(parent, null, bindOrCallOrApplyPattern)) {\n            const maybeCalleeNode = parent.parent.type === \"ChainExpression\" ? parent.parent : parent;\n            return !(isCallee(maybeCalleeNode) && maybeCalleeNode.parent.arguments.length >= 1 && !isNullOrUndefined(maybeCalleeNode.parent.arguments[0]));\n          }\n\n          return true;\n\n        /*\n         * e.g.\n         *   Reflect.apply(function() {}, obj, []);\n         *   Array.from([], function() {}, obj);\n         *   list.forEach(function() {}, obj);\n         */\n\n        case \"CallExpression\":\n          if (isReflectApply(parent.callee)) {\n            return parent.arguments.length !== 3 || parent.arguments[0] !== currentNode || isNullOrUndefined(parent.arguments[1]);\n          }\n\n          if (isArrayFromMethod(parent.callee)) {\n            return parent.arguments.length !== 3 || parent.arguments[1] !== currentNode || isNullOrUndefined(parent.arguments[2]);\n          }\n\n          if (isMethodWhichHasThisArg(parent.callee)) {\n            return parent.arguments.length !== 2 || parent.arguments[0] !== currentNode || isNullOrUndefined(parent.arguments[1]);\n          }\n\n          return true;\n        // Otherwise `this` is default.\n\n        default:\n          return true;\n      }\n    }\n    /* istanbul ignore next */\n\n\n    return true;\n  },\n\n  /**\n   * Get the precedence level based on the node type\n   * @param {ASTNode} node node to evaluate\n   * @returns {int} precedence level\n   * @private\n   */\n  getPrecedence(node) {\n    switch (node.type) {\n      case \"SequenceExpression\":\n        return 0;\n\n      case \"AssignmentExpression\":\n      case \"ArrowFunctionExpression\":\n      case \"YieldExpression\":\n        return 1;\n\n      case \"ConditionalExpression\":\n        return 3;\n\n      case \"LogicalExpression\":\n        switch (node.operator) {\n          case \"||\":\n          case \"??\":\n            return 4;\n\n          case \"&&\":\n            return 5;\n          // no default\n        }\n\n      /* falls through */\n\n      case \"BinaryExpression\":\n        switch (node.operator) {\n          case \"|\":\n            return 6;\n\n          case \"^\":\n            return 7;\n\n          case \"&\":\n            return 8;\n\n          case \"==\":\n          case \"!=\":\n          case \"===\":\n          case \"!==\":\n            return 9;\n\n          case \"<\":\n          case \"<=\":\n          case \">\":\n          case \">=\":\n          case \"in\":\n          case \"instanceof\":\n            return 10;\n\n          case \"<<\":\n          case \">>\":\n          case \">>>\":\n            return 11;\n\n          case \"+\":\n          case \"-\":\n            return 12;\n\n          case \"*\":\n          case \"/\":\n          case \"%\":\n            return 13;\n\n          case \"**\":\n            return 15;\n          // no default\n        }\n\n      /* falls through */\n\n      case \"UnaryExpression\":\n      case \"AwaitExpression\":\n        return 16;\n\n      case \"UpdateExpression\":\n        return 17;\n\n      case \"CallExpression\":\n      case \"ChainExpression\":\n      case \"ImportExpression\":\n        return 18;\n\n      case \"NewExpression\":\n        return 19;\n\n      default:\n        return 20;\n    }\n  },\n\n  /**\n   * Checks whether the given node is an empty block node or not.\n   * @param {ASTNode|null} node The node to check.\n   * @returns {boolean} `true` if the node is an empty block.\n   */\n  isEmptyBlock(node) {\n    return Boolean(node && node.type === \"BlockStatement\" && node.body.length === 0);\n  },\n\n  /**\n   * Checks whether the given node is an empty function node or not.\n   * @param {ASTNode|null} node The node to check.\n   * @returns {boolean} `true` if the node is an empty function.\n   */\n  isEmptyFunction(node) {\n    return isFunction(node) && module.exports.isEmptyBlock(node.body);\n  },\n\n  /**\n   * Get directives from directive prologue of a Program or Function node.\n   * @param {ASTNode} node The node to check.\n   * @returns {ASTNode[]} The directives found in the directive prologue.\n   */\n  getDirectivePrologue(node) {\n    const directives = []; // Directive prologues only occur at the top of files or functions.\n\n    if (node.type === \"Program\" || node.type === \"FunctionDeclaration\" || node.type === \"FunctionExpression\" ||\n    /*\n     * Do not check arrow functions with implicit return.\n     * `() => \"use strict\";` returns the string `\"use strict\"`.\n     */\n    node.type === \"ArrowFunctionExpression\" && node.body.type === \"BlockStatement\") {\n      const statements = node.type === \"Program\" ? node.body : node.body.body;\n\n      for (const statement of statements) {\n        if (statement.type === \"ExpressionStatement\" && statement.expression.type === \"Literal\") {\n          directives.push(statement);\n        } else {\n          break;\n        }\n      }\n    }\n\n    return directives;\n  },\n\n  /**\n   * Determines whether this node is a decimal integer literal. If a node is a decimal integer literal, a dot added\n   * after the node will be parsed as a decimal point, rather than a property-access dot.\n   * @param {ASTNode} node The node to check.\n   * @returns {boolean} `true` if this node is a decimal integer.\n   * @example\n   *\n   * 0         // true\n   * 5         // true\n   * 50        // true\n   * 5_000     // true\n   * 1_234_56  // true\n   * 08        // true\n   * 0192      // true\n   * 5.        // false\n   * .5        // false\n   * 5.0       // false\n   * 5.00_00   // false\n   * 05        // false\n   * 0x5       // false\n   * 0b101     // false\n   * 0b11_01   // false\n   * 0o5       // false\n   * 5e0       // false\n   * 5e1_000   // false\n   * 5n        // false\n   * 1_000n    // false\n   * '5'       // false\n   */\n  isDecimalInteger(node) {\n    return node.type === \"Literal\" && typeof node.value === \"number\" && DECIMAL_INTEGER_PATTERN.test(node.raw);\n  },\n\n  /**\n   * Determines whether this token is a decimal integer numeric token.\n   * This is similar to isDecimalInteger(), but for tokens.\n   * @param {Token} token The token to check.\n   * @returns {boolean} `true` if this token is a decimal integer.\n   */\n  isDecimalIntegerNumericToken(token) {\n    return token.type === \"Numeric\" && DECIMAL_INTEGER_PATTERN.test(token.value);\n  },\n\n  /**\n   * Gets the name and kind of the given function node.\n   *\n   * - `function foo() {}`  .................... `function 'foo'`\n   * - `(function foo() {})`  .................. `function 'foo'`\n   * - `(function() {})`  ...................... `function`\n   * - `function* foo() {}`  ................... `generator function 'foo'`\n   * - `(function* foo() {})`  ................. `generator function 'foo'`\n   * - `(function*() {})`  ..................... `generator function`\n   * - `() => {}`  ............................. `arrow function`\n   * - `async () => {}`  ....................... `async arrow function`\n   * - `({ foo: function foo() {} })`  ......... `method 'foo'`\n   * - `({ foo: function() {} })`  ............. `method 'foo'`\n   * - `({ ['foo']: function() {} })`  ......... `method 'foo'`\n   * - `({ [foo]: function() {} })`  ........... `method`\n   * - `({ foo() {} })`  ....................... `method 'foo'`\n   * - `({ foo: function* foo() {} })`  ........ `generator method 'foo'`\n   * - `({ foo: function*() {} })`  ............ `generator method 'foo'`\n   * - `({ ['foo']: function*() {} })`  ........ `generator method 'foo'`\n   * - `({ [foo]: function*() {} })`  .......... `generator method`\n   * - `({ *foo() {} })`  ...................... `generator method 'foo'`\n   * - `({ foo: async function foo() {} })`  ... `async method 'foo'`\n   * - `({ foo: async function() {} })`  ....... `async method 'foo'`\n   * - `({ ['foo']: async function() {} })`  ... `async method 'foo'`\n   * - `({ [foo]: async function() {} })`  ..... `async method`\n   * - `({ async foo() {} })`  ................. `async method 'foo'`\n   * - `({ get foo() {} })`  ................... `getter 'foo'`\n   * - `({ set foo(a) {} })`  .................. `setter 'foo'`\n   * - `class A { constructor() {} }`  ......... `constructor`\n   * - `class A { foo() {} }`  ................. `method 'foo'`\n   * - `class A { *foo() {} }`  ................ `generator method 'foo'`\n   * - `class A { async foo() {} }`  ........... `async method 'foo'`\n   * - `class A { ['foo']() {} }`  ............. `method 'foo'`\n   * - `class A { *['foo']() {} }`  ............ `generator method 'foo'`\n   * - `class A { async ['foo']() {} }`  ....... `async method 'foo'`\n   * - `class A { [foo]() {} }`  ............... `method`\n   * - `class A { *[foo]() {} }`  .............. `generator method`\n   * - `class A { async [foo]() {} }`  ......... `async method`\n   * - `class A { get foo() {} }`  ............. `getter 'foo'`\n   * - `class A { set foo(a) {} }`  ............ `setter 'foo'`\n   * - `class A { static foo() {} }`  .......... `static method 'foo'`\n   * - `class A { static *foo() {} }`  ......... `static generator method 'foo'`\n   * - `class A { static async foo() {} }`  .... `static async method 'foo'`\n   * - `class A { static get foo() {} }`  ...... `static getter 'foo'`\n   * - `class A { static set foo(a) {} }`  ..... `static setter 'foo'`\n   * @param {ASTNode} node The function node to get.\n   * @returns {string} The name and kind of the function node.\n   */\n  getFunctionNameWithKind(node) {\n    const parent = node.parent;\n    const tokens = [];\n\n    if (parent.type === \"MethodDefinition\" && parent.static) {\n      tokens.push(\"static\");\n    }\n\n    if (node.async) {\n      tokens.push(\"async\");\n    }\n\n    if (node.generator) {\n      tokens.push(\"generator\");\n    }\n\n    if (node.type === \"ArrowFunctionExpression\") {\n      tokens.push(\"arrow\", \"function\");\n    } else if (parent.type === \"Property\" || parent.type === \"MethodDefinition\") {\n      if (parent.kind === \"constructor\") {\n        return \"constructor\";\n      }\n\n      if (parent.kind === \"get\") {\n        tokens.push(\"getter\");\n      } else if (parent.kind === \"set\") {\n        tokens.push(\"setter\");\n      } else {\n        tokens.push(\"method\");\n      }\n    } else {\n      tokens.push(\"function\");\n    }\n\n    if (node.id) {\n      tokens.push(`'${node.id.name}'`);\n    } else {\n      const name = getStaticPropertyName(parent);\n\n      if (name !== null) {\n        tokens.push(`'${name}'`);\n      }\n    }\n\n    return tokens.join(\" \");\n  },\n\n  /**\n   * Gets the location of the given function node for reporting.\n   *\n   * - `function foo() {}`\n   *    ^^^^^^^^^^^^\n   * - `(function foo() {})`\n   *     ^^^^^^^^^^^^\n   * - `(function() {})`\n   *     ^^^^^^^^\n   * - `function* foo() {}`\n   *    ^^^^^^^^^^^^^\n   * - `(function* foo() {})`\n   *     ^^^^^^^^^^^^^\n   * - `(function*() {})`\n   *     ^^^^^^^^^\n   * - `() => {}`\n   *       ^^\n   * - `async () => {}`\n   *             ^^\n   * - `({ foo: function foo() {} })`\n   *       ^^^^^^^^^^^^^^^^^\n   * - `({ foo: function() {} })`\n   *       ^^^^^^^^^^^^^\n   * - `({ ['foo']: function() {} })`\n   *       ^^^^^^^^^^^^^^^^^\n   * - `({ [foo]: function() {} })`\n   *       ^^^^^^^^^^^^^^^\n   * - `({ foo() {} })`\n   *       ^^^\n   * - `({ foo: function* foo() {} })`\n   *       ^^^^^^^^^^^^^^^^^^\n   * - `({ foo: function*() {} })`\n   *       ^^^^^^^^^^^^^^\n   * - `({ ['foo']: function*() {} })`\n   *       ^^^^^^^^^^^^^^^^^^\n   * - `({ [foo]: function*() {} })`\n   *       ^^^^^^^^^^^^^^^^\n   * - `({ *foo() {} })`\n   *       ^^^^\n   * - `({ foo: async function foo() {} })`\n   *       ^^^^^^^^^^^^^^^^^^^^^^^\n   * - `({ foo: async function() {} })`\n   *       ^^^^^^^^^^^^^^^^^^^\n   * - `({ ['foo']: async function() {} })`\n   *       ^^^^^^^^^^^^^^^^^^^^^^^\n   * - `({ [foo]: async function() {} })`\n   *       ^^^^^^^^^^^^^^^^^^^^^\n   * - `({ async foo() {} })`\n   *       ^^^^^^^^^\n   * - `({ get foo() {} })`\n   *       ^^^^^^^\n   * - `({ set foo(a) {} })`\n   *       ^^^^^^^\n   * - `class A { constructor() {} }`\n   *              ^^^^^^^^^^^\n   * - `class A { foo() {} }`\n   *              ^^^\n   * - `class A { *foo() {} }`\n   *              ^^^^\n   * - `class A { async foo() {} }`\n   *              ^^^^^^^^^\n   * - `class A { ['foo']() {} }`\n   *              ^^^^^^^\n   * - `class A { *['foo']() {} }`\n   *              ^^^^^^^^\n   * - `class A { async ['foo']() {} }`\n   *              ^^^^^^^^^^^^^\n   * - `class A { [foo]() {} }`\n   *              ^^^^^\n   * - `class A { *[foo]() {} }`\n   *              ^^^^^^\n   * - `class A { async [foo]() {} }`\n   *              ^^^^^^^^^^^\n   * - `class A { get foo() {} }`\n   *              ^^^^^^^\n   * - `class A { set foo(a) {} }`\n   *              ^^^^^^^\n   * - `class A { static foo() {} }`\n   *              ^^^^^^^^^^\n   * - `class A { static *foo() {} }`\n   *              ^^^^^^^^^^^\n   * - `class A { static async foo() {} }`\n   *              ^^^^^^^^^^^^^^^^\n   * - `class A { static get foo() {} }`\n   *              ^^^^^^^^^^^^^^\n   * - `class A { static set foo(a) {} }`\n   *              ^^^^^^^^^^^^^^\n   * @param {ASTNode} node The function node to get.\n   * @param {SourceCode} sourceCode The source code object to get tokens.\n   * @returns {string} The location of the function node for reporting.\n   */\n  getFunctionHeadLoc(node, sourceCode) {\n    const parent = node.parent;\n    let start = null;\n    let end = null;\n\n    if (node.type === \"ArrowFunctionExpression\") {\n      const arrowToken = sourceCode.getTokenBefore(node.body, isArrowToken);\n      start = arrowToken.loc.start;\n      end = arrowToken.loc.end;\n    } else if (parent.type === \"Property\" || parent.type === \"MethodDefinition\") {\n      start = parent.loc.start;\n      end = getOpeningParenOfParams(node, sourceCode).loc.start;\n    } else {\n      start = node.loc.start;\n      end = getOpeningParenOfParams(node, sourceCode).loc.start;\n    }\n\n    return {\n      start: Object.assign({}, start),\n      end: Object.assign({}, end)\n    };\n  },\n\n  /**\n   * Gets next location when the result is not out of bound, otherwise returns null.\n   *\n   * Assumptions:\n   *\n   * - The given location represents a valid location in the given source code.\n   * - Columns are 0-based.\n   * - Lines are 1-based.\n   * - Column immediately after the last character in a line (not incl. linebreaks) is considered to be a valid location.\n   * - If the source code ends with a linebreak, `sourceCode.lines` array will have an extra element (empty string) at the end.\n   *   The start (column 0) of that extra line is considered to be a valid location.\n   *\n   * Examples of successive locations (line, column):\n   *\n   * code: foo\n   * locations: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3) -> null\n   *\n   * code: foo<LF>\n   * locations: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3) -> (2, 0) -> null\n   *\n   * code: foo<CR><LF>\n   * locations: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3) -> (2, 0) -> null\n   *\n   * code: a<LF>b\n   * locations: (1, 0) -> (1, 1) -> (2, 0) -> (2, 1) -> null\n   *\n   * code: a<LF>b<LF>\n   * locations: (1, 0) -> (1, 1) -> (2, 0) -> (2, 1) -> (3, 0) -> null\n   *\n   * code: a<CR><LF>b<CR><LF>\n   * locations: (1, 0) -> (1, 1) -> (2, 0) -> (2, 1) -> (3, 0) -> null\n   *\n   * code: a<LF><LF>\n   * locations: (1, 0) -> (1, 1) -> (2, 0) -> (3, 0) -> null\n   *\n   * code: <LF>\n   * locations: (1, 0) -> (2, 0) -> null\n   *\n   * code:\n   * locations: (1, 0) -> null\n   * @param {SourceCode} sourceCode The sourceCode\n   * @param {{line: number, column: number}} location The location\n   * @returns {{line: number, column: number} | null} Next location\n   */\n  getNextLocation(sourceCode, _ref) {\n    let {\n      line,\n      column\n    } = _ref;\n\n    if (column < sourceCode.lines[line - 1].length) {\n      return {\n        line,\n        column: column + 1\n      };\n    }\n\n    if (line < sourceCode.lines.length) {\n      return {\n        line: line + 1,\n        column: 0\n      };\n    }\n\n    return null;\n  },\n\n  /**\n   * Gets the parenthesized text of a node. This is similar to sourceCode.getText(node), but it also includes any parentheses\n   * surrounding the node.\n   * @param {SourceCode} sourceCode The source code object\n   * @param {ASTNode} node An expression node\n   * @returns {string} The text representing the node, with all surrounding parentheses included\n   */\n  getParenthesisedText(sourceCode, node) {\n    let leftToken = sourceCode.getFirstToken(node);\n    let rightToken = sourceCode.getLastToken(node);\n\n    while (sourceCode.getTokenBefore(leftToken) && sourceCode.getTokenBefore(leftToken).type === \"Punctuator\" && sourceCode.getTokenBefore(leftToken).value === \"(\" && sourceCode.getTokenAfter(rightToken) && sourceCode.getTokenAfter(rightToken).type === \"Punctuator\" && sourceCode.getTokenAfter(rightToken).value === \")\") {\n      leftToken = sourceCode.getTokenBefore(leftToken);\n      rightToken = sourceCode.getTokenAfter(rightToken);\n    }\n\n    return sourceCode.getText().slice(leftToken.range[0], rightToken.range[1]);\n  },\n\n  /*\n   * Determine if a node has a possibility to be an Error object\n   * @param  {ASTNode} node  ASTNode to check\n   * @returns {boolean} True if there is a chance it contains an Error obj\n   */\n  couldBeError(node) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"CallExpression\":\n      case \"NewExpression\":\n      case \"MemberExpression\":\n      case \"TaggedTemplateExpression\":\n      case \"YieldExpression\":\n      case \"AwaitExpression\":\n      case \"ChainExpression\":\n        return true;\n      // possibly an error object.\n\n      case \"AssignmentExpression\":\n        if ([\"=\", \"&&=\"].includes(node.operator)) {\n          return module.exports.couldBeError(node.right);\n        }\n\n        if ([\"||=\", \"??=\"].includes(node.operator)) {\n          return module.exports.couldBeError(node.left) || module.exports.couldBeError(node.right);\n        }\n        /**\n         * All other assignment operators are mathematical assignment operators (arithmetic or bitwise).\n         * An assignment expression with a mathematical operator can either evaluate to a primitive value,\n         * or throw, depending on the operands. Thus, it cannot evaluate to an `Error` object.\n         */\n\n\n        return false;\n\n      case \"SequenceExpression\":\n        {\n          const exprs = node.expressions;\n          return exprs.length !== 0 && module.exports.couldBeError(exprs[exprs.length - 1]);\n        }\n\n      case \"LogicalExpression\":\n        /*\n         * If the && operator short-circuits, the left side was falsy and therefore not an error, and if it\n         * doesn't short-circuit, it takes the value from the right side, so the right side must always be\n         * a plausible error. A future improvement could verify that the left side could be truthy by\n         * excluding falsy literals.\n         */\n        if (node.operator === \"&&\") {\n          return module.exports.couldBeError(node.right);\n        }\n\n        return module.exports.couldBeError(node.left) || module.exports.couldBeError(node.right);\n\n      case \"ConditionalExpression\":\n        return module.exports.couldBeError(node.consequent) || module.exports.couldBeError(node.alternate);\n\n      default:\n        return false;\n    }\n  },\n\n  /**\n   * Check if a given node is a numeric literal or not.\n   * @param {ASTNode} node The node to check.\n   * @returns {boolean} `true` if the node is a number or bigint literal.\n   */\n  isNumericLiteral(node) {\n    return node.type === \"Literal\" && (typeof node.value === \"number\" || Boolean(node.bigint));\n  },\n\n  /**\n   * Determines whether two tokens can safely be placed next to each other without merging into a single token\n   * @param {Token|string} leftValue The left token. If this is a string, it will be tokenized and the last token will be used.\n   * @param {Token|string} rightValue The right token. If this is a string, it will be tokenized and the first token will be used.\n   * @returns {boolean} If the tokens cannot be safely placed next to each other, returns `false`. If the tokens can be placed\n   * next to each other, behavior is undefined (although it should return `true` in most cases).\n   */\n  canTokensBeAdjacent(leftValue, rightValue) {\n    const espreeOptions = {\n      ecmaVersion: espree.latestEcmaVersion,\n      comment: true,\n      range: true\n    };\n    let leftToken;\n\n    if (typeof leftValue === \"string\") {\n      let tokens;\n\n      try {\n        tokens = espree.tokenize(leftValue, espreeOptions);\n      } catch {\n        return false;\n      }\n\n      const comments = tokens.comments;\n      leftToken = tokens[tokens.length - 1];\n\n      if (comments.length) {\n        const lastComment = comments[comments.length - 1];\n\n        if (lastComment.range[0] > leftToken.range[0]) {\n          leftToken = lastComment;\n        }\n      }\n    } else {\n      leftToken = leftValue;\n    }\n\n    if (leftToken.type === \"Shebang\") {\n      return false;\n    }\n\n    let rightToken;\n\n    if (typeof rightValue === \"string\") {\n      let tokens;\n\n      try {\n        tokens = espree.tokenize(rightValue, espreeOptions);\n      } catch {\n        return false;\n      }\n\n      const comments = tokens.comments;\n      rightToken = tokens[0];\n\n      if (comments.length) {\n        const firstComment = comments[0];\n\n        if (firstComment.range[0] < rightToken.range[0]) {\n          rightToken = firstComment;\n        }\n      }\n    } else {\n      rightToken = rightValue;\n    }\n\n    if (leftToken.type === \"Punctuator\" || rightToken.type === \"Punctuator\") {\n      if (leftToken.type === \"Punctuator\" && rightToken.type === \"Punctuator\") {\n        const PLUS_TOKENS = new Set([\"+\", \"++\"]);\n        const MINUS_TOKENS = new Set([\"-\", \"--\"]);\n        return !(PLUS_TOKENS.has(leftToken.value) && PLUS_TOKENS.has(rightToken.value) || MINUS_TOKENS.has(leftToken.value) && MINUS_TOKENS.has(rightToken.value));\n      }\n\n      if (leftToken.type === \"Punctuator\" && leftToken.value === \"/\") {\n        return ![\"Block\", \"Line\", \"RegularExpression\"].includes(rightToken.type);\n      }\n\n      return true;\n    }\n\n    if (leftToken.type === \"String\" || rightToken.type === \"String\" || leftToken.type === \"Template\" || rightToken.type === \"Template\") {\n      return true;\n    }\n\n    if (leftToken.type !== \"Numeric\" && rightToken.type === \"Numeric\" && rightToken.value.startsWith(\".\")) {\n      return true;\n    }\n\n    if (leftToken.type === \"Block\" || rightToken.type === \"Block\" || rightToken.type === \"Line\") {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Get the `loc` object of a given name in a `/*globals` directive comment.\n   * @param {SourceCode} sourceCode The source code to convert index to loc.\n   * @param {Comment} comment The `/*globals` directive comment which include the name.\n   * @param {string} name The name to find.\n   * @returns {SourceLocation} The `loc` object.\n   */\n  getNameLocationInGlobalDirectiveComment(sourceCode, comment, name) {\n    const namePattern = new RegExp(`[\\\\s,]${escapeRegExp(name)}(?:$|[\\\\s,:])`, \"gu\"); // To ignore the first text \"global\".\n\n    namePattern.lastIndex = comment.value.indexOf(\"global\") + 6; // Search a given variable name.\n\n    const match = namePattern.exec(comment.value); // Convert the index to loc.\n\n    const start = sourceCode.getLocFromIndex(comment.range[0] + \"/*\".length + (match ? match.index + 1 : 0));\n    const end = {\n      line: start.line,\n      column: start.column + (match ? name.length : 1)\n    };\n    return {\n      start,\n      end\n    };\n  },\n\n  /**\n   * Determines whether the given raw string contains an octal escape sequence\n   * or a non-octal decimal escape sequence (\"\\8\", \"\\9\").\n   *\n   * \"\\1\", \"\\2\" ... \"\\7\", \"\\8\", \"\\9\"\n   * \"\\00\", \"\\01\" ... \"\\07\", \"\\08\", \"\\09\"\n   *\n   * \"\\0\", when not followed by a digit, is not an octal escape sequence.\n   * @param {string} rawString A string in its raw representation.\n   * @returns {boolean} `true` if the string contains at least one octal escape sequence\n   * or at least one non-octal decimal escape sequence.\n   */\n  hasOctalOrNonOctalDecimalEscapeSequence(rawString) {\n    return OCTAL_OR_NON_OCTAL_DECIMAL_ESCAPE_PATTERN.test(rawString);\n  },\n\n  isLogicalExpression,\n  isCoalesceExpression,\n  isMixedLogicalAndCoalesceExpressions,\n  isNullLiteral,\n  getStaticStringValue,\n  getStaticPropertyName,\n  skipChainExpression,\n  isSpecificId,\n  isSpecificMemberAccess,\n  equalLiteralValue,\n  isSameReference,\n  isLogicalAssignmentOperator\n};","map":{"version":3,"names":["esutils","require","espree","escapeRegExp","breakableTypePattern","createGlobalLinebreakMatcher","lineBreakPattern","shebangPattern","anyFunctionPattern","anyLoopPattern","arrayOrTypedArrayPattern","arrayMethodPattern","bindOrCallOrApplyPattern","thisTagPattern","COMMENTS_IGNORE_PATTERN","LINEBREAKS","Set","STATEMENT_LIST_PARENTS","DECIMAL_INTEGER_PATTERN","OCTAL_OR_NON_OCTAL_DECIMAL_ESCAPE_PATTERN","LOGICAL_ASSIGNMENT_OPERATORS","isModifyingReference","reference","index","references","identifier","modifyingDifferentIdentifier","init","isWrite","startsWithUpperCase","s","toLocaleLowerCase","isES5Constructor","node","id","name","getUpperFunction","currentNode","parent","test","type","isFunction","Boolean","isLoop","isInLoop","isNullLiteral","value","regex","bigint","isNullOrUndefined","operator","isCallee","callee","getStaticStringValue","String","pattern","flags","expressions","length","quasis","cooked","getStaticPropertyName","prop","expression","key","property","computed","skipChainExpression","checkText","actual","expected","isSpecificId","isSpecificMemberAccess","objectName","propertyName","checkNode","object","actualPropertyName","equalLiteralValue","left","right","isSameReference","disableStaticComputedKey","nameA","isReflectApply","isArrayFromMethod","isMethodWhichHasThisArg","negate","f","token","hasJSDocThisTag","sourceCode","jsdocComment","getJSDocComment","getCommentsBefore","some","comment","isParenthesised","previousToken","getTokenBefore","nextToken","getTokenAfter","range","isArrowToken","isCommaToken","isDotToken","isQuestionDotToken","isSemicolonToken","isColonToken","isOpeningParenToken","isClosingParenToken","isOpeningBracketToken","isClosingBracketToken","isOpeningBraceToken","isClosingBraceToken","isCommentToken","isKeywordToken","getOpeningParenOfParams","getFirstToken","equalTokens","tokensL","getTokens","tokensR","i","isLogicalExpression","isCoalesceExpression","isMixedLogicalAndCoalesceExpressions","isLogicalAssignmentOperator","has","module","exports","LINEBREAK_MATCHER","SHEBANG_MATCHER","isTokenOnSameLine","loc","end","line","start","isNotClosingBraceToken","isNotClosingBracketToken","isNotClosingParenToken","isNotColonToken","isNotCommaToken","isNotDotToken","isNotQuestionDotToken","isNotOpeningBraceToken","isNotOpeningBracketToken","isNotOpeningParenToken","isNotSemicolonToken","isStringLiteral","isBreakableStatement","getModifyingReferences","filter","isSurroundedBy","val","character","isDirectiveComment","trim","indexOf","getTrailingStatement","ast","trailingStatement","getVariableByName","initScope","scope","variable","set","get","upper","isDefaultThisBinding","capIsConstructor","isAnonymous","func","body","maybeCalleeNode","arguments","getPrecedence","isEmptyBlock","isEmptyFunction","getDirectivePrologue","directives","statements","statement","push","isDecimalInteger","raw","isDecimalIntegerNumericToken","getFunctionNameWithKind","tokens","static","async","generator","kind","join","getFunctionHeadLoc","arrowToken","Object","assign","getNextLocation","column","lines","getParenthesisedText","leftToken","rightToken","getLastToken","getText","slice","couldBeError","includes","exprs","consequent","alternate","isNumericLiteral","canTokensBeAdjacent","leftValue","rightValue","espreeOptions","ecmaVersion","latestEcmaVersion","tokenize","comments","lastComment","firstComment","PLUS_TOKENS","MINUS_TOKENS","startsWith","getNameLocationInGlobalDirectiveComment","namePattern","RegExp","lastIndex","match","exec","getLocFromIndex","hasOctalOrNonOctalDecimalEscapeSequence","rawString"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/utils/ast-utils.js"],"sourcesContent":["/**\n * @fileoverview Common utils for AST.\n * @author Gyandeep Singh\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst esutils = require(\"esutils\");\nconst espree = require(\"espree\");\nconst escapeRegExp = require(\"escape-string-regexp\");\nconst {\n    breakableTypePattern,\n    createGlobalLinebreakMatcher,\n    lineBreakPattern,\n    shebangPattern\n} = require(\"../../shared/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst anyFunctionPattern = /^(?:Function(?:Declaration|Expression)|ArrowFunctionExpression)$/u;\nconst anyLoopPattern = /^(?:DoWhile|For|ForIn|ForOf|While)Statement$/u;\nconst arrayOrTypedArrayPattern = /Array$/u;\nconst arrayMethodPattern = /^(?:every|filter|find|findIndex|forEach|map|some)$/u;\nconst bindOrCallOrApplyPattern = /^(?:bind|call|apply)$/u;\nconst thisTagPattern = /^[\\s*]*@this/mu;\n\n\nconst COMMENTS_IGNORE_PATTERN = /^\\s*(?:eslint|jshint\\s+|jslint\\s+|istanbul\\s+|globals?\\s+|exported\\s+|jscs)/u;\nconst LINEBREAKS = new Set([\"\\r\\n\", \"\\r\", \"\\n\", \"\\u2028\", \"\\u2029\"]);\n\n// A set of node types that can contain a list of statements\nconst STATEMENT_LIST_PARENTS = new Set([\"Program\", \"BlockStatement\", \"SwitchCase\"]);\n\nconst DECIMAL_INTEGER_PATTERN = /^(?:0|0[0-7]*[89]\\d*|[1-9](?:_?\\d)*)$/u;\n\n// Tests the presence of at least one LegacyOctalEscapeSequence or NonOctalDecimalEscapeSequence in a raw string\nconst OCTAL_OR_NON_OCTAL_DECIMAL_ESCAPE_PATTERN = /^(?:[^\\\\]|\\\\.)*\\\\(?:[1-9]|0[0-9])/su;\n\nconst LOGICAL_ASSIGNMENT_OPERATORS = new Set([\"&&=\", \"||=\", \"??=\"]);\n\n/**\n * Checks reference if is non initializer and writable.\n * @param {Reference} reference A reference to check.\n * @param {int} index The index of the reference in the references.\n * @param {Reference[]} references The array that the reference belongs to.\n * @returns {boolean} Success/Failure\n * @private\n */\nfunction isModifyingReference(reference, index, references) {\n    const identifier = reference.identifier;\n\n    /*\n     * Destructuring assignments can have multiple default value, so\n     * possibly there are multiple writeable references for the same\n     * identifier.\n     */\n    const modifyingDifferentIdentifier = index === 0 ||\n        references[index - 1].identifier !== identifier;\n\n    return (identifier &&\n        reference.init === false &&\n        reference.isWrite() &&\n        modifyingDifferentIdentifier\n    );\n}\n\n/**\n * Checks whether the given string starts with uppercase or not.\n * @param {string} s The string to check.\n * @returns {boolean} `true` if the string starts with uppercase.\n */\nfunction startsWithUpperCase(s) {\n    return s[0] !== s[0].toLocaleLowerCase();\n}\n\n/**\n * Checks whether or not a node is a constructor.\n * @param {ASTNode} node A function node to check.\n * @returns {boolean} Whether or not a node is a constructor.\n */\nfunction isES5Constructor(node) {\n    return (node.id && startsWithUpperCase(node.id.name));\n}\n\n/**\n * Finds a function node from ancestors of a node.\n * @param {ASTNode} node A start node to find.\n * @returns {Node|null} A found function node.\n */\nfunction getUpperFunction(node) {\n    for (let currentNode = node; currentNode; currentNode = currentNode.parent) {\n        if (anyFunctionPattern.test(currentNode.type)) {\n            return currentNode;\n        }\n    }\n    return null;\n}\n\n/**\n * Checks whether a given node is a function node or not.\n * The following types are function nodes:\n *\n * - ArrowFunctionExpression\n * - FunctionDeclaration\n * - FunctionExpression\n * @param {ASTNode|null} node A node to check.\n * @returns {boolean} `true` if the node is a function node.\n */\nfunction isFunction(node) {\n    return Boolean(node && anyFunctionPattern.test(node.type));\n}\n\n/**\n * Checks whether a given node is a loop node or not.\n * The following types are loop nodes:\n *\n * - DoWhileStatement\n * - ForInStatement\n * - ForOfStatement\n * - ForStatement\n * - WhileStatement\n * @param {ASTNode|null} node A node to check.\n * @returns {boolean} `true` if the node is a loop node.\n */\nfunction isLoop(node) {\n    return Boolean(node && anyLoopPattern.test(node.type));\n}\n\n/**\n * Checks whether the given node is in a loop or not.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is in a loop.\n */\nfunction isInLoop(node) {\n    for (let currentNode = node; currentNode && !isFunction(currentNode); currentNode = currentNode.parent) {\n        if (isLoop(currentNode)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Determines whether the given node is a `null` literal.\n * @param {ASTNode} node The node to check\n * @returns {boolean} `true` if the node is a `null` literal\n */\nfunction isNullLiteral(node) {\n\n    /*\n     * Checking `node.value === null` does not guarantee that a literal is a null literal.\n     * When parsing values that cannot be represented in the current environment (e.g. unicode\n     * regexes in Node 4), `node.value` is set to `null` because it wouldn't be possible to\n     * set `node.value` to a unicode regex. To make sure a literal is actually `null`, check\n     * `node.regex` instead. Also see: https://github.com/eslint/eslint/issues/8020\n     */\n    return node.type === \"Literal\" && node.value === null && !node.regex && !node.bigint;\n}\n\n/**\n * Checks whether or not a node is `null` or `undefined`.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is a `null` or `undefined`.\n * @public\n */\nfunction isNullOrUndefined(node) {\n    return (\n        isNullLiteral(node) ||\n        (node.type === \"Identifier\" && node.name === \"undefined\") ||\n        (node.type === \"UnaryExpression\" && node.operator === \"void\")\n    );\n}\n\n/**\n * Checks whether or not a node is callee.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is callee.\n */\nfunction isCallee(node) {\n    return node.parent.type === \"CallExpression\" && node.parent.callee === node;\n}\n\n/**\n * Returns the result of the string conversion applied to the evaluated value of the given expression node,\n * if it can be determined statically.\n *\n * This function returns a `string` value for all `Literal` nodes and simple `TemplateLiteral` nodes only.\n * In all other cases, this function returns `null`.\n * @param {ASTNode} node Expression node.\n * @returns {string|null} String value if it can be determined. Otherwise, `null`.\n */\nfunction getStaticStringValue(node) {\n    switch (node.type) {\n        case \"Literal\":\n            if (node.value === null) {\n                if (isNullLiteral(node)) {\n                    return String(node.value); // \"null\"\n                }\n                if (node.regex) {\n                    return `/${node.regex.pattern}/${node.regex.flags}`;\n                }\n                if (node.bigint) {\n                    return node.bigint;\n                }\n\n                // Otherwise, this is an unknown literal. The function will return null.\n\n            } else {\n                return String(node.value);\n            }\n            break;\n        case \"TemplateLiteral\":\n            if (node.expressions.length === 0 && node.quasis.length === 1) {\n                return node.quasis[0].value.cooked;\n            }\n            break;\n\n            // no default\n    }\n\n    return null;\n}\n\n/**\n * Gets the property name of a given node.\n * The node can be a MemberExpression, a Property, or a MethodDefinition.\n *\n * If the name is dynamic, this returns `null`.\n *\n * For examples:\n *\n *     a.b           // => \"b\"\n *     a[\"b\"]        // => \"b\"\n *     a['b']        // => \"b\"\n *     a[`b`]        // => \"b\"\n *     a[100]        // => \"100\"\n *     a[b]          // => null\n *     a[\"a\" + \"b\"]  // => null\n *     a[tag`b`]     // => null\n *     a[`${b}`]     // => null\n *\n *     let a = {b: 1}            // => \"b\"\n *     let a = {[\"b\"]: 1}        // => \"b\"\n *     let a = {['b']: 1}        // => \"b\"\n *     let a = {[`b`]: 1}        // => \"b\"\n *     let a = {[100]: 1}        // => \"100\"\n *     let a = {[b]: 1}          // => null\n *     let a = {[\"a\" + \"b\"]: 1}  // => null\n *     let a = {[tag`b`]: 1}     // => null\n *     let a = {[`${b}`]: 1}     // => null\n * @param {ASTNode} node The node to get.\n * @returns {string|null} The property name if static. Otherwise, null.\n */\nfunction getStaticPropertyName(node) {\n    let prop;\n\n    switch (node && node.type) {\n        case \"ChainExpression\":\n            return getStaticPropertyName(node.expression);\n\n        case \"Property\":\n        case \"MethodDefinition\":\n            prop = node.key;\n            break;\n\n        case \"MemberExpression\":\n            prop = node.property;\n            break;\n\n            // no default\n    }\n\n    if (prop) {\n        if (prop.type === \"Identifier\" && !node.computed) {\n            return prop.name;\n        }\n\n        return getStaticStringValue(prop);\n    }\n\n    return null;\n}\n\n/**\n * Retrieve `ChainExpression#expression` value if the given node a `ChainExpression` node. Otherwise, pass through it.\n * @param {ASTNode} node The node to address.\n * @returns {ASTNode} The `ChainExpression#expression` value if the node is a `ChainExpression` node. Otherwise, the node.\n */\nfunction skipChainExpression(node) {\n    return node && node.type === \"ChainExpression\" ? node.expression : node;\n}\n\n/**\n * Check if the `actual` is an expected value.\n * @param {string} actual The string value to check.\n * @param {string | RegExp} expected The expected string value or pattern.\n * @returns {boolean} `true` if the `actual` is an expected value.\n */\nfunction checkText(actual, expected) {\n    return typeof expected === \"string\"\n        ? actual === expected\n        : expected.test(actual);\n}\n\n/**\n * Check if a given node is an Identifier node with a given name.\n * @param {ASTNode} node The node to check.\n * @param {string | RegExp} name The expected name or the expected pattern of the object name.\n * @returns {boolean} `true` if the node is an Identifier node with the name.\n */\nfunction isSpecificId(node, name) {\n    return node.type === \"Identifier\" && checkText(node.name, name);\n}\n\n/**\n * Check if a given node is member access with a given object name and property name pair.\n * This is regardless of optional or not.\n * @param {ASTNode} node The node to check.\n * @param {string | RegExp | null} objectName The expected name or the expected pattern of the object name. If this is nullish, this method doesn't check object.\n * @param {string | RegExp | null} propertyName The expected name or the expected pattern of the property name. If this is nullish, this method doesn't check property.\n * @returns {boolean} `true` if the node is member access with the object name and property name pair.\n * The node is a `MemberExpression` or `ChainExpression`.\n */\nfunction isSpecificMemberAccess(node, objectName, propertyName) {\n    const checkNode = skipChainExpression(node);\n\n    if (checkNode.type !== \"MemberExpression\") {\n        return false;\n    }\n\n    if (objectName && !isSpecificId(checkNode.object, objectName)) {\n        return false;\n    }\n\n    if (propertyName) {\n        const actualPropertyName = getStaticPropertyName(checkNode);\n\n        if (typeof actualPropertyName !== \"string\" || !checkText(actualPropertyName, propertyName)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Check if two literal nodes are the same value.\n * @param {ASTNode} left The Literal node to compare.\n * @param {ASTNode} right The other Literal node to compare.\n * @returns {boolean} `true` if the two literal nodes are the same value.\n */\nfunction equalLiteralValue(left, right) {\n\n    // RegExp literal.\n    if (left.regex || right.regex) {\n        return Boolean(\n            left.regex &&\n            right.regex &&\n            left.regex.pattern === right.regex.pattern &&\n            left.regex.flags === right.regex.flags\n        );\n    }\n\n    // BigInt literal.\n    if (left.bigint || right.bigint) {\n        return left.bigint === right.bigint;\n    }\n\n    return left.value === right.value;\n}\n\n/**\n * Check if two expressions reference the same value. For example:\n *     a = a\n *     a.b = a.b\n *     a[0] = a[0]\n *     a['b'] = a['b']\n * @param {ASTNode} left The left side of the comparison.\n * @param {ASTNode} right The right side of the comparison.\n * @param {boolean} [disableStaticComputedKey] Don't address `a.b` and `a[\"b\"]` are the same if `true`. For backward compatibility.\n * @returns {boolean} `true` if both sides match and reference the same value.\n */\nfunction isSameReference(left, right, disableStaticComputedKey = false) {\n    if (left.type !== right.type) {\n\n        // Handle `a.b` and `a?.b` are samely.\n        if (left.type === \"ChainExpression\") {\n            return isSameReference(left.expression, right, disableStaticComputedKey);\n        }\n        if (right.type === \"ChainExpression\") {\n            return isSameReference(left, right.expression, disableStaticComputedKey);\n        }\n\n        return false;\n    }\n\n    switch (left.type) {\n        case \"Super\":\n        case \"ThisExpression\":\n            return true;\n\n        case \"Identifier\":\n            return left.name === right.name;\n        case \"Literal\":\n            return equalLiteralValue(left, right);\n\n        case \"ChainExpression\":\n            return isSameReference(left.expression, right.expression, disableStaticComputedKey);\n\n        case \"MemberExpression\": {\n            if (!disableStaticComputedKey) {\n                const nameA = getStaticPropertyName(left);\n\n                // x.y = x[\"y\"]\n                if (nameA !== null) {\n                    return (\n                        isSameReference(left.object, right.object, disableStaticComputedKey) &&\n                        nameA === getStaticPropertyName(right)\n                    );\n                }\n            }\n\n            /*\n             * x[0] = x[0]\n             * x[y] = x[y]\n             * x.y = x.y\n             */\n            return (\n                left.computed === right.computed &&\n                isSameReference(left.object, right.object, disableStaticComputedKey) &&\n                isSameReference(left.property, right.property, disableStaticComputedKey)\n            );\n        }\n\n        default:\n            return false;\n    }\n}\n\n/**\n * Checks whether or not a node is `Reflect.apply`.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is a `Reflect.apply`.\n */\nfunction isReflectApply(node) {\n    return isSpecificMemberAccess(node, \"Reflect\", \"apply\");\n}\n\n/**\n * Checks whether or not a node is `Array.from`.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is a `Array.from`.\n */\nfunction isArrayFromMethod(node) {\n    return isSpecificMemberAccess(node, arrayOrTypedArrayPattern, \"from\");\n}\n\n/**\n * Checks whether or not a node is a method which has `thisArg`.\n * @param {ASTNode} node A node to check.\n * @returns {boolean} Whether or not the node is a method which has `thisArg`.\n */\nfunction isMethodWhichHasThisArg(node) {\n    return isSpecificMemberAccess(node, null, arrayMethodPattern);\n}\n\n/**\n * Creates the negate function of the given function.\n * @param {Function} f The function to negate.\n * @returns {Function} Negated function.\n */\nfunction negate(f) {\n    return token => !f(token);\n}\n\n/**\n * Checks whether or not a node has a `@this` tag in its comments.\n * @param {ASTNode} node A node to check.\n * @param {SourceCode} sourceCode A SourceCode instance to get comments.\n * @returns {boolean} Whether or not the node has a `@this` tag in its comments.\n */\nfunction hasJSDocThisTag(node, sourceCode) {\n    const jsdocComment = sourceCode.getJSDocComment(node);\n\n    if (jsdocComment && thisTagPattern.test(jsdocComment.value)) {\n        return true;\n    }\n\n    // Checks `@this` in its leading comments for callbacks,\n    // because callbacks don't have its JSDoc comment.\n    // e.g.\n    //     sinon.test(/* @this sinon.Sandbox */function() { this.spy(); });\n    return sourceCode.getCommentsBefore(node).some(comment => thisTagPattern.test(comment.value));\n}\n\n/**\n * Determines if a node is surrounded by parentheses.\n * @param {SourceCode} sourceCode The ESLint source code object\n * @param {ASTNode} node The node to be checked.\n * @returns {boolean} True if the node is parenthesised.\n * @private\n */\nfunction isParenthesised(sourceCode, node) {\n    const previousToken = sourceCode.getTokenBefore(node),\n        nextToken = sourceCode.getTokenAfter(node);\n\n    return Boolean(previousToken && nextToken) &&\n        previousToken.value === \"(\" && previousToken.range[1] <= node.range[0] &&\n        nextToken.value === \")\" && nextToken.range[0] >= node.range[1];\n}\n\n/**\n * Checks if the given token is an arrow token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is an arrow token.\n */\nfunction isArrowToken(token) {\n    return token.value === \"=>\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is a comma token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a comma token.\n */\nfunction isCommaToken(token) {\n    return token.value === \",\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is a dot token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a dot token.\n */\nfunction isDotToken(token) {\n    return token.value === \".\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is a `?.` token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a `?.` token.\n */\nfunction isQuestionDotToken(token) {\n    return token.value === \"?.\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is a semicolon token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a semicolon token.\n */\nfunction isSemicolonToken(token) {\n    return token.value === \";\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is a colon token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a colon token.\n */\nfunction isColonToken(token) {\n    return token.value === \":\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is an opening parenthesis token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is an opening parenthesis token.\n */\nfunction isOpeningParenToken(token) {\n    return token.value === \"(\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is a closing parenthesis token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a closing parenthesis token.\n */\nfunction isClosingParenToken(token) {\n    return token.value === \")\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is an opening square bracket token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is an opening square bracket token.\n */\nfunction isOpeningBracketToken(token) {\n    return token.value === \"[\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is a closing square bracket token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a closing square bracket token.\n */\nfunction isClosingBracketToken(token) {\n    return token.value === \"]\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is an opening brace token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is an opening brace token.\n */\nfunction isOpeningBraceToken(token) {\n    return token.value === \"{\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is a closing brace token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a closing brace token.\n */\nfunction isClosingBraceToken(token) {\n    return token.value === \"}\" && token.type === \"Punctuator\";\n}\n\n/**\n * Checks if the given token is a comment token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a comment token.\n */\nfunction isCommentToken(token) {\n    return token.type === \"Line\" || token.type === \"Block\" || token.type === \"Shebang\";\n}\n\n/**\n * Checks if the given token is a keyword token or not.\n * @param {Token} token The token to check.\n * @returns {boolean} `true` if the token is a keyword token.\n */\nfunction isKeywordToken(token) {\n    return token.type === \"Keyword\";\n}\n\n/**\n * Gets the `(` token of the given function node.\n * @param {ASTNode} node The function node to get.\n * @param {SourceCode} sourceCode The source code object to get tokens.\n * @returns {Token} `(` token.\n */\nfunction getOpeningParenOfParams(node, sourceCode) {\n    return node.id\n        ? sourceCode.getTokenAfter(node.id, isOpeningParenToken)\n        : sourceCode.getFirstToken(node, isOpeningParenToken);\n}\n\n/**\n * Checks whether or not the tokens of two given nodes are same.\n * @param {ASTNode} left A node 1 to compare.\n * @param {ASTNode} right A node 2 to compare.\n * @param {SourceCode} sourceCode The ESLint source code object.\n * @returns {boolean} the source code for the given node.\n */\nfunction equalTokens(left, right, sourceCode) {\n    const tokensL = sourceCode.getTokens(left);\n    const tokensR = sourceCode.getTokens(right);\n\n    if (tokensL.length !== tokensR.length) {\n        return false;\n    }\n    for (let i = 0; i < tokensL.length; ++i) {\n        if (tokensL[i].type !== tokensR[i].type ||\n            tokensL[i].value !== tokensR[i].value\n        ) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Check if the given node is a true logical expression or not.\n *\n * The three binary expressions logical-or (`||`), logical-and (`&&`), and\n * coalesce (`??`) are known as `ShortCircuitExpression`.\n * But ESTree represents those by `LogicalExpression` node.\n *\n * This function rejects coalesce expressions of `LogicalExpression` node.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is `&&` or `||`.\n * @see https://tc39.es/ecma262/#prod-ShortCircuitExpression\n */\nfunction isLogicalExpression(node) {\n    return (\n        node.type === \"LogicalExpression\" &&\n            (node.operator === \"&&\" || node.operator === \"||\")\n    );\n}\n\n/**\n * Check if the given node is a nullish coalescing expression or not.\n *\n * The three binary expressions logical-or (`||`), logical-and (`&&`), and\n * coalesce (`??`) are known as `ShortCircuitExpression`.\n * But ESTree represents those by `LogicalExpression` node.\n *\n * This function finds only coalesce expressions of `LogicalExpression` node.\n * @param {ASTNode} node The node to check.\n * @returns {boolean} `true` if the node is `??`.\n */\nfunction isCoalesceExpression(node) {\n    return node.type === \"LogicalExpression\" && node.operator === \"??\";\n}\n\n/**\n * Check if given two nodes are the pair of a logical expression and a coalesce expression.\n * @param {ASTNode} left A node to check.\n * @param {ASTNode} right Another node to check.\n * @returns {boolean} `true` if the two nodes are the pair of a logical expression and a coalesce expression.\n */\nfunction isMixedLogicalAndCoalesceExpressions(left, right) {\n    return (\n        (isLogicalExpression(left) && isCoalesceExpression(right)) ||\n            (isCoalesceExpression(left) && isLogicalExpression(right))\n    );\n}\n\n/**\n * Checks if the given operator is a logical assignment operator.\n * @param {string} operator The operator to check.\n * @returns {boolean} `true` if the operator is a logical assignment operator.\n */\nfunction isLogicalAssignmentOperator(operator) {\n    return LOGICAL_ASSIGNMENT_OPERATORS.has(operator);\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    COMMENTS_IGNORE_PATTERN,\n    LINEBREAKS,\n    LINEBREAK_MATCHER: lineBreakPattern,\n    SHEBANG_MATCHER: shebangPattern,\n    STATEMENT_LIST_PARENTS,\n\n    /**\n     * Determines whether two adjacent tokens are on the same line.\n     * @param {Object} left The left token object.\n     * @param {Object} right The right token object.\n     * @returns {boolean} Whether or not the tokens are on the same line.\n     * @public\n     */\n    isTokenOnSameLine(left, right) {\n        return left.loc.end.line === right.loc.start.line;\n    },\n\n    isNullOrUndefined,\n    isCallee,\n    isES5Constructor,\n    getUpperFunction,\n    isFunction,\n    isLoop,\n    isInLoop,\n    isArrayFromMethod,\n    isParenthesised,\n    createGlobalLinebreakMatcher,\n    equalTokens,\n\n    isArrowToken,\n    isClosingBraceToken,\n    isClosingBracketToken,\n    isClosingParenToken,\n    isColonToken,\n    isCommaToken,\n    isCommentToken,\n    isDotToken,\n    isQuestionDotToken,\n    isKeywordToken,\n    isNotClosingBraceToken: negate(isClosingBraceToken),\n    isNotClosingBracketToken: negate(isClosingBracketToken),\n    isNotClosingParenToken: negate(isClosingParenToken),\n    isNotColonToken: negate(isColonToken),\n    isNotCommaToken: negate(isCommaToken),\n    isNotDotToken: negate(isDotToken),\n    isNotQuestionDotToken: negate(isQuestionDotToken),\n    isNotOpeningBraceToken: negate(isOpeningBraceToken),\n    isNotOpeningBracketToken: negate(isOpeningBracketToken),\n    isNotOpeningParenToken: negate(isOpeningParenToken),\n    isNotSemicolonToken: negate(isSemicolonToken),\n    isOpeningBraceToken,\n    isOpeningBracketToken,\n    isOpeningParenToken,\n    isSemicolonToken,\n\n    /**\n     * Checks whether or not a given node is a string literal.\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} `true` if the node is a string literal.\n     */\n    isStringLiteral(node) {\n        return (\n            (node.type === \"Literal\" && typeof node.value === \"string\") ||\n            node.type === \"TemplateLiteral\"\n        );\n    },\n\n    /**\n     * Checks whether a given node is a breakable statement or not.\n     * The node is breakable if the node is one of the following type:\n     *\n     * - DoWhileStatement\n     * - ForInStatement\n     * - ForOfStatement\n     * - ForStatement\n     * - SwitchStatement\n     * - WhileStatement\n     * @param {ASTNode} node A node to check.\n     * @returns {boolean} `true` if the node is breakable.\n     */\n    isBreakableStatement(node) {\n        return breakableTypePattern.test(node.type);\n    },\n\n    /**\n     * Gets references which are non initializer and writable.\n     * @param {Reference[]} references An array of references.\n     * @returns {Reference[]} An array of only references which are non initializer and writable.\n     * @public\n     */\n    getModifyingReferences(references) {\n        return references.filter(isModifyingReference);\n    },\n\n    /**\n     * Validate that a string passed in is surrounded by the specified character\n     * @param  {string} val The text to check.\n     * @param  {string} character The character to see if it's surrounded by.\n     * @returns {boolean} True if the text is surrounded by the character, false if not.\n     * @private\n     */\n    isSurroundedBy(val, character) {\n        return val[0] === character && val[val.length - 1] === character;\n    },\n\n    /**\n     * Returns whether the provided node is an ESLint directive comment or not\n     * @param {Line|Block} node The comment token to be checked\n     * @returns {boolean} `true` if the node is an ESLint directive comment\n     */\n    isDirectiveComment(node) {\n        const comment = node.value.trim();\n\n        return (\n            node.type === \"Line\" && comment.indexOf(\"eslint-\") === 0 ||\n            node.type === \"Block\" && (\n                comment.indexOf(\"global \") === 0 ||\n                comment.indexOf(\"eslint \") === 0 ||\n                comment.indexOf(\"eslint-\") === 0\n            )\n        );\n    },\n\n    /**\n     * Gets the trailing statement of a given node.\n     *\n     *     if (code)\n     *         consequent;\n     *\n     * When taking this `IfStatement`, returns `consequent;` statement.\n     * @param {ASTNode} A node to get.\n     * @returns {ASTNode|null} The trailing statement's node.\n     */\n    getTrailingStatement: esutils.ast.trailingStatement,\n\n    /**\n     * Finds the variable by a given name in a given scope and its upper scopes.\n     * @param {eslint-scope.Scope} initScope A scope to start find.\n     * @param {string} name A variable name to find.\n     * @returns {eslint-scope.Variable|null} A found variable or `null`.\n     */\n    getVariableByName(initScope, name) {\n        let scope = initScope;\n\n        while (scope) {\n            const variable = scope.set.get(name);\n\n            if (variable) {\n                return variable;\n            }\n\n            scope = scope.upper;\n        }\n\n        return null;\n    },\n\n    /**\n     * Checks whether or not a given function node is the default `this` binding.\n     *\n     * First, this checks the node:\n     *\n     * - The function name does not start with uppercase. It's a convention to capitalize the names\n     *   of constructor functions. This check is not performed if `capIsConstructor` is set to `false`.\n     * - The function does not have a JSDoc comment that has a @this tag.\n     *\n     * Next, this checks the location of the node.\n     * If the location is below, this judges `this` is valid.\n     *\n     * - The location is not on an object literal.\n     * - The location is not assigned to a variable which starts with an uppercase letter. Applies to anonymous\n     *   functions only, as the name of the variable is considered to be the name of the function in this case.\n     *   This check is not performed if `capIsConstructor` is set to `false`.\n     * - The location is not on an ES2015 class.\n     * - Its `bind`/`call`/`apply` method is not called directly.\n     * - The function is not a callback of array methods (such as `.forEach()`) if `thisArg` is given.\n     * @param {ASTNode} node A function node to check.\n     * @param {SourceCode} sourceCode A SourceCode instance to get comments.\n     * @param {boolean} [capIsConstructor = true] `false` disables the assumption that functions which name starts\n     * with an uppercase or are assigned to a variable which name starts with an uppercase are constructors.\n     * @returns {boolean} The function node is the default `this` binding.\n     */\n    isDefaultThisBinding(node, sourceCode, { capIsConstructor = true } = {}) {\n        if (\n            (capIsConstructor && isES5Constructor(node)) ||\n            hasJSDocThisTag(node, sourceCode)\n        ) {\n            return false;\n        }\n        const isAnonymous = node.id === null;\n        let currentNode = node;\n\n        while (currentNode) {\n            const parent = currentNode.parent;\n\n            switch (parent.type) {\n\n                /*\n                 * Looks up the destination.\n                 * e.g., obj.foo = nativeFoo || function foo() { ... };\n                 */\n                case \"LogicalExpression\":\n                case \"ConditionalExpression\":\n                case \"ChainExpression\":\n                    currentNode = parent;\n                    break;\n\n                /*\n                 * If the upper function is IIFE, checks the destination of the return value.\n                 * e.g.\n                 *   obj.foo = (function() {\n                 *     // setup...\n                 *     return function foo() { ... };\n                 *   })();\n                 *   obj.foo = (() =>\n                 *     function foo() { ... }\n                 *   )();\n                 */\n                case \"ReturnStatement\": {\n                    const func = getUpperFunction(parent);\n\n                    if (func === null || !isCallee(func)) {\n                        return true;\n                    }\n                    currentNode = func.parent;\n                    break;\n                }\n                case \"ArrowFunctionExpression\":\n                    if (currentNode !== parent.body || !isCallee(parent)) {\n                        return true;\n                    }\n                    currentNode = parent.parent;\n                    break;\n\n                /*\n                 * e.g.\n                 *   var obj = { foo() { ... } };\n                 *   var obj = { foo: function() { ... } };\n                 *   class A { constructor() { ... } }\n                 *   class A { foo() { ... } }\n                 *   class A { get foo() { ... } }\n                 *   class A { set foo() { ... } }\n                 *   class A { static foo() { ... } }\n                 */\n                case \"Property\":\n                case \"MethodDefinition\":\n                    return parent.value !== currentNode;\n\n                /*\n                 * e.g.\n                 *   obj.foo = function foo() { ... };\n                 *   Foo = function() { ... };\n                 *   [obj.foo = function foo() { ... }] = a;\n                 *   [Foo = function() { ... }] = a;\n                 */\n                case \"AssignmentExpression\":\n                case \"AssignmentPattern\":\n                    if (parent.left.type === \"MemberExpression\") {\n                        return false;\n                    }\n                    if (\n                        capIsConstructor &&\n                        isAnonymous &&\n                        parent.left.type === \"Identifier\" &&\n                        startsWithUpperCase(parent.left.name)\n                    ) {\n                        return false;\n                    }\n                    return true;\n\n                /*\n                 * e.g.\n                 *   var Foo = function() { ... };\n                 */\n                case \"VariableDeclarator\":\n                    return !(\n                        capIsConstructor &&\n                        isAnonymous &&\n                        parent.init === currentNode &&\n                        parent.id.type === \"Identifier\" &&\n                        startsWithUpperCase(parent.id.name)\n                    );\n\n                /*\n                 * e.g.\n                 *   var foo = function foo() { ... }.bind(obj);\n                 *   (function foo() { ... }).call(obj);\n                 *   (function foo() { ... }).apply(obj, []);\n                 */\n                case \"MemberExpression\":\n                    if (\n                        parent.object === currentNode &&\n                        isSpecificMemberAccess(parent, null, bindOrCallOrApplyPattern)\n                    ) {\n                        const maybeCalleeNode = parent.parent.type === \"ChainExpression\"\n                            ? parent.parent\n                            : parent;\n\n                        return !(\n                            isCallee(maybeCalleeNode) &&\n                            maybeCalleeNode.parent.arguments.length >= 1 &&\n                            !isNullOrUndefined(maybeCalleeNode.parent.arguments[0])\n                        );\n                    }\n                    return true;\n\n                /*\n                 * e.g.\n                 *   Reflect.apply(function() {}, obj, []);\n                 *   Array.from([], function() {}, obj);\n                 *   list.forEach(function() {}, obj);\n                 */\n                case \"CallExpression\":\n                    if (isReflectApply(parent.callee)) {\n                        return (\n                            parent.arguments.length !== 3 ||\n                            parent.arguments[0] !== currentNode ||\n                            isNullOrUndefined(parent.arguments[1])\n                        );\n                    }\n                    if (isArrayFromMethod(parent.callee)) {\n                        return (\n                            parent.arguments.length !== 3 ||\n                            parent.arguments[1] !== currentNode ||\n                            isNullOrUndefined(parent.arguments[2])\n                        );\n                    }\n                    if (isMethodWhichHasThisArg(parent.callee)) {\n                        return (\n                            parent.arguments.length !== 2 ||\n                            parent.arguments[0] !== currentNode ||\n                            isNullOrUndefined(parent.arguments[1])\n                        );\n                    }\n                    return true;\n\n                // Otherwise `this` is default.\n                default:\n                    return true;\n            }\n        }\n\n        /* istanbul ignore next */\n        return true;\n    },\n\n    /**\n     * Get the precedence level based on the node type\n     * @param {ASTNode} node node to evaluate\n     * @returns {int} precedence level\n     * @private\n     */\n    getPrecedence(node) {\n        switch (node.type) {\n            case \"SequenceExpression\":\n                return 0;\n\n            case \"AssignmentExpression\":\n            case \"ArrowFunctionExpression\":\n            case \"YieldExpression\":\n                return 1;\n\n            case \"ConditionalExpression\":\n                return 3;\n\n            case \"LogicalExpression\":\n                switch (node.operator) {\n                    case \"||\":\n                    case \"??\":\n                        return 4;\n                    case \"&&\":\n                        return 5;\n\n                    // no default\n                }\n\n                /* falls through */\n\n            case \"BinaryExpression\":\n\n                switch (node.operator) {\n                    case \"|\":\n                        return 6;\n                    case \"^\":\n                        return 7;\n                    case \"&\":\n                        return 8;\n                    case \"==\":\n                    case \"!=\":\n                    case \"===\":\n                    case \"!==\":\n                        return 9;\n                    case \"<\":\n                    case \"<=\":\n                    case \">\":\n                    case \">=\":\n                    case \"in\":\n                    case \"instanceof\":\n                        return 10;\n                    case \"<<\":\n                    case \">>\":\n                    case \">>>\":\n                        return 11;\n                    case \"+\":\n                    case \"-\":\n                        return 12;\n                    case \"*\":\n                    case \"/\":\n                    case \"%\":\n                        return 13;\n                    case \"**\":\n                        return 15;\n\n                    // no default\n                }\n\n                /* falls through */\n\n            case \"UnaryExpression\":\n            case \"AwaitExpression\":\n                return 16;\n\n            case \"UpdateExpression\":\n                return 17;\n\n            case \"CallExpression\":\n            case \"ChainExpression\":\n            case \"ImportExpression\":\n                return 18;\n\n            case \"NewExpression\":\n                return 19;\n\n            default:\n                return 20;\n        }\n    },\n\n    /**\n     * Checks whether the given node is an empty block node or not.\n     * @param {ASTNode|null} node The node to check.\n     * @returns {boolean} `true` if the node is an empty block.\n     */\n    isEmptyBlock(node) {\n        return Boolean(node && node.type === \"BlockStatement\" && node.body.length === 0);\n    },\n\n    /**\n     * Checks whether the given node is an empty function node or not.\n     * @param {ASTNode|null} node The node to check.\n     * @returns {boolean} `true` if the node is an empty function.\n     */\n    isEmptyFunction(node) {\n        return isFunction(node) && module.exports.isEmptyBlock(node.body);\n    },\n\n    /**\n     * Get directives from directive prologue of a Program or Function node.\n     * @param {ASTNode} node The node to check.\n     * @returns {ASTNode[]} The directives found in the directive prologue.\n     */\n    getDirectivePrologue(node) {\n        const directives = [];\n\n        // Directive prologues only occur at the top of files or functions.\n        if (\n            node.type === \"Program\" ||\n            node.type === \"FunctionDeclaration\" ||\n            node.type === \"FunctionExpression\" ||\n\n            /*\n             * Do not check arrow functions with implicit return.\n             * `() => \"use strict\";` returns the string `\"use strict\"`.\n             */\n            (node.type === \"ArrowFunctionExpression\" && node.body.type === \"BlockStatement\")\n        ) {\n            const statements = node.type === \"Program\" ? node.body : node.body.body;\n\n            for (const statement of statements) {\n                if (\n                    statement.type === \"ExpressionStatement\" &&\n                    statement.expression.type === \"Literal\"\n                ) {\n                    directives.push(statement);\n                } else {\n                    break;\n                }\n            }\n        }\n\n        return directives;\n    },\n\n\n    /**\n     * Determines whether this node is a decimal integer literal. If a node is a decimal integer literal, a dot added\n     * after the node will be parsed as a decimal point, rather than a property-access dot.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} `true` if this node is a decimal integer.\n     * @example\n     *\n     * 0         // true\n     * 5         // true\n     * 50        // true\n     * 5_000     // true\n     * 1_234_56  // true\n     * 08        // true\n     * 0192      // true\n     * 5.        // false\n     * .5        // false\n     * 5.0       // false\n     * 5.00_00   // false\n     * 05        // false\n     * 0x5       // false\n     * 0b101     // false\n     * 0b11_01   // false\n     * 0o5       // false\n     * 5e0       // false\n     * 5e1_000   // false\n     * 5n        // false\n     * 1_000n    // false\n     * '5'       // false\n     */\n    isDecimalInteger(node) {\n        return node.type === \"Literal\" && typeof node.value === \"number\" &&\n            DECIMAL_INTEGER_PATTERN.test(node.raw);\n    },\n\n    /**\n     * Determines whether this token is a decimal integer numeric token.\n     * This is similar to isDecimalInteger(), but for tokens.\n     * @param {Token} token The token to check.\n     * @returns {boolean} `true` if this token is a decimal integer.\n     */\n    isDecimalIntegerNumericToken(token) {\n        return token.type === \"Numeric\" && DECIMAL_INTEGER_PATTERN.test(token.value);\n    },\n\n    /**\n     * Gets the name and kind of the given function node.\n     *\n     * - `function foo() {}`  .................... `function 'foo'`\n     * - `(function foo() {})`  .................. `function 'foo'`\n     * - `(function() {})`  ...................... `function`\n     * - `function* foo() {}`  ................... `generator function 'foo'`\n     * - `(function* foo() {})`  ................. `generator function 'foo'`\n     * - `(function*() {})`  ..................... `generator function`\n     * - `() => {}`  ............................. `arrow function`\n     * - `async () => {}`  ....................... `async arrow function`\n     * - `({ foo: function foo() {} })`  ......... `method 'foo'`\n     * - `({ foo: function() {} })`  ............. `method 'foo'`\n     * - `({ ['foo']: function() {} })`  ......... `method 'foo'`\n     * - `({ [foo]: function() {} })`  ........... `method`\n     * - `({ foo() {} })`  ....................... `method 'foo'`\n     * - `({ foo: function* foo() {} })`  ........ `generator method 'foo'`\n     * - `({ foo: function*() {} })`  ............ `generator method 'foo'`\n     * - `({ ['foo']: function*() {} })`  ........ `generator method 'foo'`\n     * - `({ [foo]: function*() {} })`  .......... `generator method`\n     * - `({ *foo() {} })`  ...................... `generator method 'foo'`\n     * - `({ foo: async function foo() {} })`  ... `async method 'foo'`\n     * - `({ foo: async function() {} })`  ....... `async method 'foo'`\n     * - `({ ['foo']: async function() {} })`  ... `async method 'foo'`\n     * - `({ [foo]: async function() {} })`  ..... `async method`\n     * - `({ async foo() {} })`  ................. `async method 'foo'`\n     * - `({ get foo() {} })`  ................... `getter 'foo'`\n     * - `({ set foo(a) {} })`  .................. `setter 'foo'`\n     * - `class A { constructor() {} }`  ......... `constructor`\n     * - `class A { foo() {} }`  ................. `method 'foo'`\n     * - `class A { *foo() {} }`  ................ `generator method 'foo'`\n     * - `class A { async foo() {} }`  ........... `async method 'foo'`\n     * - `class A { ['foo']() {} }`  ............. `method 'foo'`\n     * - `class A { *['foo']() {} }`  ............ `generator method 'foo'`\n     * - `class A { async ['foo']() {} }`  ....... `async method 'foo'`\n     * - `class A { [foo]() {} }`  ............... `method`\n     * - `class A { *[foo]() {} }`  .............. `generator method`\n     * - `class A { async [foo]() {} }`  ......... `async method`\n     * - `class A { get foo() {} }`  ............. `getter 'foo'`\n     * - `class A { set foo(a) {} }`  ............ `setter 'foo'`\n     * - `class A { static foo() {} }`  .......... `static method 'foo'`\n     * - `class A { static *foo() {} }`  ......... `static generator method 'foo'`\n     * - `class A { static async foo() {} }`  .... `static async method 'foo'`\n     * - `class A { static get foo() {} }`  ...... `static getter 'foo'`\n     * - `class A { static set foo(a) {} }`  ..... `static setter 'foo'`\n     * @param {ASTNode} node The function node to get.\n     * @returns {string} The name and kind of the function node.\n     */\n    getFunctionNameWithKind(node) {\n        const parent = node.parent;\n        const tokens = [];\n\n        if (parent.type === \"MethodDefinition\" && parent.static) {\n            tokens.push(\"static\");\n        }\n        if (node.async) {\n            tokens.push(\"async\");\n        }\n        if (node.generator) {\n            tokens.push(\"generator\");\n        }\n\n        if (node.type === \"ArrowFunctionExpression\") {\n            tokens.push(\"arrow\", \"function\");\n        } else if (parent.type === \"Property\" || parent.type === \"MethodDefinition\") {\n            if (parent.kind === \"constructor\") {\n                return \"constructor\";\n            }\n            if (parent.kind === \"get\") {\n                tokens.push(\"getter\");\n            } else if (parent.kind === \"set\") {\n                tokens.push(\"setter\");\n            } else {\n                tokens.push(\"method\");\n            }\n        } else {\n            tokens.push(\"function\");\n        }\n\n        if (node.id) {\n            tokens.push(`'${node.id.name}'`);\n        } else {\n            const name = getStaticPropertyName(parent);\n\n            if (name !== null) {\n                tokens.push(`'${name}'`);\n            }\n        }\n\n        return tokens.join(\" \");\n    },\n\n    /**\n     * Gets the location of the given function node for reporting.\n     *\n     * - `function foo() {}`\n     *    ^^^^^^^^^^^^\n     * - `(function foo() {})`\n     *     ^^^^^^^^^^^^\n     * - `(function() {})`\n     *     ^^^^^^^^\n     * - `function* foo() {}`\n     *    ^^^^^^^^^^^^^\n     * - `(function* foo() {})`\n     *     ^^^^^^^^^^^^^\n     * - `(function*() {})`\n     *     ^^^^^^^^^\n     * - `() => {}`\n     *       ^^\n     * - `async () => {}`\n     *             ^^\n     * - `({ foo: function foo() {} })`\n     *       ^^^^^^^^^^^^^^^^^\n     * - `({ foo: function() {} })`\n     *       ^^^^^^^^^^^^^\n     * - `({ ['foo']: function() {} })`\n     *       ^^^^^^^^^^^^^^^^^\n     * - `({ [foo]: function() {} })`\n     *       ^^^^^^^^^^^^^^^\n     * - `({ foo() {} })`\n     *       ^^^\n     * - `({ foo: function* foo() {} })`\n     *       ^^^^^^^^^^^^^^^^^^\n     * - `({ foo: function*() {} })`\n     *       ^^^^^^^^^^^^^^\n     * - `({ ['foo']: function*() {} })`\n     *       ^^^^^^^^^^^^^^^^^^\n     * - `({ [foo]: function*() {} })`\n     *       ^^^^^^^^^^^^^^^^\n     * - `({ *foo() {} })`\n     *       ^^^^\n     * - `({ foo: async function foo() {} })`\n     *       ^^^^^^^^^^^^^^^^^^^^^^^\n     * - `({ foo: async function() {} })`\n     *       ^^^^^^^^^^^^^^^^^^^\n     * - `({ ['foo']: async function() {} })`\n     *       ^^^^^^^^^^^^^^^^^^^^^^^\n     * - `({ [foo]: async function() {} })`\n     *       ^^^^^^^^^^^^^^^^^^^^^\n     * - `({ async foo() {} })`\n     *       ^^^^^^^^^\n     * - `({ get foo() {} })`\n     *       ^^^^^^^\n     * - `({ set foo(a) {} })`\n     *       ^^^^^^^\n     * - `class A { constructor() {} }`\n     *              ^^^^^^^^^^^\n     * - `class A { foo() {} }`\n     *              ^^^\n     * - `class A { *foo() {} }`\n     *              ^^^^\n     * - `class A { async foo() {} }`\n     *              ^^^^^^^^^\n     * - `class A { ['foo']() {} }`\n     *              ^^^^^^^\n     * - `class A { *['foo']() {} }`\n     *              ^^^^^^^^\n     * - `class A { async ['foo']() {} }`\n     *              ^^^^^^^^^^^^^\n     * - `class A { [foo]() {} }`\n     *              ^^^^^\n     * - `class A { *[foo]() {} }`\n     *              ^^^^^^\n     * - `class A { async [foo]() {} }`\n     *              ^^^^^^^^^^^\n     * - `class A { get foo() {} }`\n     *              ^^^^^^^\n     * - `class A { set foo(a) {} }`\n     *              ^^^^^^^\n     * - `class A { static foo() {} }`\n     *              ^^^^^^^^^^\n     * - `class A { static *foo() {} }`\n     *              ^^^^^^^^^^^\n     * - `class A { static async foo() {} }`\n     *              ^^^^^^^^^^^^^^^^\n     * - `class A { static get foo() {} }`\n     *              ^^^^^^^^^^^^^^\n     * - `class A { static set foo(a) {} }`\n     *              ^^^^^^^^^^^^^^\n     * @param {ASTNode} node The function node to get.\n     * @param {SourceCode} sourceCode The source code object to get tokens.\n     * @returns {string} The location of the function node for reporting.\n     */\n    getFunctionHeadLoc(node, sourceCode) {\n        const parent = node.parent;\n        let start = null;\n        let end = null;\n\n        if (node.type === \"ArrowFunctionExpression\") {\n            const arrowToken = sourceCode.getTokenBefore(node.body, isArrowToken);\n\n            start = arrowToken.loc.start;\n            end = arrowToken.loc.end;\n        } else if (parent.type === \"Property\" || parent.type === \"MethodDefinition\") {\n            start = parent.loc.start;\n            end = getOpeningParenOfParams(node, sourceCode).loc.start;\n        } else {\n            start = node.loc.start;\n            end = getOpeningParenOfParams(node, sourceCode).loc.start;\n        }\n\n        return {\n            start: Object.assign({}, start),\n            end: Object.assign({}, end)\n        };\n    },\n\n    /**\n     * Gets next location when the result is not out of bound, otherwise returns null.\n     *\n     * Assumptions:\n     *\n     * - The given location represents a valid location in the given source code.\n     * - Columns are 0-based.\n     * - Lines are 1-based.\n     * - Column immediately after the last character in a line (not incl. linebreaks) is considered to be a valid location.\n     * - If the source code ends with a linebreak, `sourceCode.lines` array will have an extra element (empty string) at the end.\n     *   The start (column 0) of that extra line is considered to be a valid location.\n     *\n     * Examples of successive locations (line, column):\n     *\n     * code: foo\n     * locations: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3) -> null\n     *\n     * code: foo<LF>\n     * locations: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3) -> (2, 0) -> null\n     *\n     * code: foo<CR><LF>\n     * locations: (1, 0) -> (1, 1) -> (1, 2) -> (1, 3) -> (2, 0) -> null\n     *\n     * code: a<LF>b\n     * locations: (1, 0) -> (1, 1) -> (2, 0) -> (2, 1) -> null\n     *\n     * code: a<LF>b<LF>\n     * locations: (1, 0) -> (1, 1) -> (2, 0) -> (2, 1) -> (3, 0) -> null\n     *\n     * code: a<CR><LF>b<CR><LF>\n     * locations: (1, 0) -> (1, 1) -> (2, 0) -> (2, 1) -> (3, 0) -> null\n     *\n     * code: a<LF><LF>\n     * locations: (1, 0) -> (1, 1) -> (2, 0) -> (3, 0) -> null\n     *\n     * code: <LF>\n     * locations: (1, 0) -> (2, 0) -> null\n     *\n     * code:\n     * locations: (1, 0) -> null\n     * @param {SourceCode} sourceCode The sourceCode\n     * @param {{line: number, column: number}} location The location\n     * @returns {{line: number, column: number} | null} Next location\n     */\n    getNextLocation(sourceCode, { line, column }) {\n        if (column < sourceCode.lines[line - 1].length) {\n            return {\n                line,\n                column: column + 1\n            };\n        }\n\n        if (line < sourceCode.lines.length) {\n            return {\n                line: line + 1,\n                column: 0\n            };\n        }\n\n        return null;\n    },\n\n    /**\n     * Gets the parenthesized text of a node. This is similar to sourceCode.getText(node), but it also includes any parentheses\n     * surrounding the node.\n     * @param {SourceCode} sourceCode The source code object\n     * @param {ASTNode} node An expression node\n     * @returns {string} The text representing the node, with all surrounding parentheses included\n     */\n    getParenthesisedText(sourceCode, node) {\n        let leftToken = sourceCode.getFirstToken(node);\n        let rightToken = sourceCode.getLastToken(node);\n\n        while (\n            sourceCode.getTokenBefore(leftToken) &&\n            sourceCode.getTokenBefore(leftToken).type === \"Punctuator\" &&\n            sourceCode.getTokenBefore(leftToken).value === \"(\" &&\n            sourceCode.getTokenAfter(rightToken) &&\n            sourceCode.getTokenAfter(rightToken).type === \"Punctuator\" &&\n            sourceCode.getTokenAfter(rightToken).value === \")\"\n        ) {\n            leftToken = sourceCode.getTokenBefore(leftToken);\n            rightToken = sourceCode.getTokenAfter(rightToken);\n        }\n\n        return sourceCode.getText().slice(leftToken.range[0], rightToken.range[1]);\n    },\n\n    /*\n     * Determine if a node has a possibility to be an Error object\n     * @param  {ASTNode} node  ASTNode to check\n     * @returns {boolean} True if there is a chance it contains an Error obj\n     */\n    couldBeError(node) {\n        switch (node.type) {\n            case \"Identifier\":\n            case \"CallExpression\":\n            case \"NewExpression\":\n            case \"MemberExpression\":\n            case \"TaggedTemplateExpression\":\n            case \"YieldExpression\":\n            case \"AwaitExpression\":\n            case \"ChainExpression\":\n                return true; // possibly an error object.\n\n            case \"AssignmentExpression\":\n                if ([\"=\", \"&&=\"].includes(node.operator)) {\n                    return module.exports.couldBeError(node.right);\n                }\n\n                if ([\"||=\", \"??=\"].includes(node.operator)) {\n                    return module.exports.couldBeError(node.left) || module.exports.couldBeError(node.right);\n                }\n\n                /**\n                 * All other assignment operators are mathematical assignment operators (arithmetic or bitwise).\n                 * An assignment expression with a mathematical operator can either evaluate to a primitive value,\n                 * or throw, depending on the operands. Thus, it cannot evaluate to an `Error` object.\n                 */\n                return false;\n\n            case \"SequenceExpression\": {\n                const exprs = node.expressions;\n\n                return exprs.length !== 0 && module.exports.couldBeError(exprs[exprs.length - 1]);\n            }\n\n            case \"LogicalExpression\":\n\n                /*\n                 * If the && operator short-circuits, the left side was falsy and therefore not an error, and if it\n                 * doesn't short-circuit, it takes the value from the right side, so the right side must always be\n                 * a plausible error. A future improvement could verify that the left side could be truthy by\n                 * excluding falsy literals.\n                 */\n                if (node.operator === \"&&\") {\n                    return module.exports.couldBeError(node.right);\n                }\n\n                return module.exports.couldBeError(node.left) || module.exports.couldBeError(node.right);\n\n            case \"ConditionalExpression\":\n                return module.exports.couldBeError(node.consequent) || module.exports.couldBeError(node.alternate);\n\n            default:\n                return false;\n        }\n    },\n\n    /**\n     * Check if a given node is a numeric literal or not.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} `true` if the node is a number or bigint literal.\n     */\n    isNumericLiteral(node) {\n        return (\n            node.type === \"Literal\" &&\n            (typeof node.value === \"number\" || Boolean(node.bigint))\n        );\n    },\n\n    /**\n     * Determines whether two tokens can safely be placed next to each other without merging into a single token\n     * @param {Token|string} leftValue The left token. If this is a string, it will be tokenized and the last token will be used.\n     * @param {Token|string} rightValue The right token. If this is a string, it will be tokenized and the first token will be used.\n     * @returns {boolean} If the tokens cannot be safely placed next to each other, returns `false`. If the tokens can be placed\n     * next to each other, behavior is undefined (although it should return `true` in most cases).\n     */\n    canTokensBeAdjacent(leftValue, rightValue) {\n        const espreeOptions = {\n            ecmaVersion: espree.latestEcmaVersion,\n            comment: true,\n            range: true\n        };\n\n        let leftToken;\n\n        if (typeof leftValue === \"string\") {\n            let tokens;\n\n            try {\n                tokens = espree.tokenize(leftValue, espreeOptions);\n            } catch {\n                return false;\n            }\n\n            const comments = tokens.comments;\n\n            leftToken = tokens[tokens.length - 1];\n            if (comments.length) {\n                const lastComment = comments[comments.length - 1];\n\n                if (lastComment.range[0] > leftToken.range[0]) {\n                    leftToken = lastComment;\n                }\n            }\n        } else {\n            leftToken = leftValue;\n        }\n\n        if (leftToken.type === \"Shebang\") {\n            return false;\n        }\n\n        let rightToken;\n\n        if (typeof rightValue === \"string\") {\n            let tokens;\n\n            try {\n                tokens = espree.tokenize(rightValue, espreeOptions);\n            } catch {\n                return false;\n            }\n\n            const comments = tokens.comments;\n\n            rightToken = tokens[0];\n            if (comments.length) {\n                const firstComment = comments[0];\n\n                if (firstComment.range[0] < rightToken.range[0]) {\n                    rightToken = firstComment;\n                }\n            }\n        } else {\n            rightToken = rightValue;\n        }\n\n        if (leftToken.type === \"Punctuator\" || rightToken.type === \"Punctuator\") {\n            if (leftToken.type === \"Punctuator\" && rightToken.type === \"Punctuator\") {\n                const PLUS_TOKENS = new Set([\"+\", \"++\"]);\n                const MINUS_TOKENS = new Set([\"-\", \"--\"]);\n\n                return !(\n                    PLUS_TOKENS.has(leftToken.value) && PLUS_TOKENS.has(rightToken.value) ||\n                    MINUS_TOKENS.has(leftToken.value) && MINUS_TOKENS.has(rightToken.value)\n                );\n            }\n            if (leftToken.type === \"Punctuator\" && leftToken.value === \"/\") {\n                return ![\"Block\", \"Line\", \"RegularExpression\"].includes(rightToken.type);\n            }\n            return true;\n        }\n\n        if (\n            leftToken.type === \"String\" || rightToken.type === \"String\" ||\n            leftToken.type === \"Template\" || rightToken.type === \"Template\"\n        ) {\n            return true;\n        }\n\n        if (leftToken.type !== \"Numeric\" && rightToken.type === \"Numeric\" && rightToken.value.startsWith(\".\")) {\n            return true;\n        }\n\n        if (leftToken.type === \"Block\" || rightToken.type === \"Block\" || rightToken.type === \"Line\") {\n            return true;\n        }\n\n        return false;\n    },\n\n    /**\n     * Get the `loc` object of a given name in a `/*globals` directive comment.\n     * @param {SourceCode} sourceCode The source code to convert index to loc.\n     * @param {Comment} comment The `/*globals` directive comment which include the name.\n     * @param {string} name The name to find.\n     * @returns {SourceLocation} The `loc` object.\n     */\n    getNameLocationInGlobalDirectiveComment(sourceCode, comment, name) {\n        const namePattern = new RegExp(`[\\\\s,]${escapeRegExp(name)}(?:$|[\\\\s,:])`, \"gu\");\n\n        // To ignore the first text \"global\".\n        namePattern.lastIndex = comment.value.indexOf(\"global\") + 6;\n\n        // Search a given variable name.\n        const match = namePattern.exec(comment.value);\n\n        // Convert the index to loc.\n        const start = sourceCode.getLocFromIndex(\n            comment.range[0] +\n            \"/*\".length +\n            (match ? match.index + 1 : 0)\n        );\n        const end = {\n            line: start.line,\n            column: start.column + (match ? name.length : 1)\n        };\n\n        return { start, end };\n    },\n\n    /**\n     * Determines whether the given raw string contains an octal escape sequence\n     * or a non-octal decimal escape sequence (\"\\8\", \"\\9\").\n     *\n     * \"\\1\", \"\\2\" ... \"\\7\", \"\\8\", \"\\9\"\n     * \"\\00\", \"\\01\" ... \"\\07\", \"\\08\", \"\\09\"\n     *\n     * \"\\0\", when not followed by a digit, is not an octal escape sequence.\n     * @param {string} rawString A string in its raw representation.\n     * @returns {boolean} `true` if the string contains at least one octal escape sequence\n     * or at least one non-octal decimal escape sequence.\n     */\n    hasOctalOrNonOctalDecimalEscapeSequence(rawString) {\n        return OCTAL_OR_NON_OCTAL_DECIMAL_ESCAPE_PATTERN.test(rawString);\n    },\n\n    isLogicalExpression,\n    isCoalesceExpression,\n    isMixedLogicalAndCoalesceExpressions,\n    isNullLiteral,\n    getStaticStringValue,\n    getStaticPropertyName,\n    skipChainExpression,\n    isSpecificId,\n    isSpecificMemberAccess,\n    equalLiteralValue,\n    isSameReference,\n    isLogicalAssignmentOperator\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAM;EACFG,oBADE;EAEFC,4BAFE;EAGFC,gBAHE;EAIFC;AAJE,IAKFN,OAAO,CAAC,wBAAD,CALX,C,CAOA;AACA;AACA;;;AAEA,MAAMO,kBAAkB,GAAG,mEAA3B;AACA,MAAMC,cAAc,GAAG,+CAAvB;AACA,MAAMC,wBAAwB,GAAG,SAAjC;AACA,MAAMC,kBAAkB,GAAG,qDAA3B;AACA,MAAMC,wBAAwB,GAAG,wBAAjC;AACA,MAAMC,cAAc,GAAG,gBAAvB;AAGA,MAAMC,uBAAuB,GAAG,8EAAhC;AACA,MAAMC,UAAU,GAAG,IAAIC,GAAJ,CAAQ,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,EAAqB,QAArB,EAA+B,QAA/B,CAAR,CAAnB,C,CAEA;;AACA,MAAMC,sBAAsB,GAAG,IAAID,GAAJ,CAAQ,CAAC,SAAD,EAAY,gBAAZ,EAA8B,YAA9B,CAAR,CAA/B;AAEA,MAAME,uBAAuB,GAAG,wCAAhC,C,CAEA;;AACA,MAAMC,yCAAyC,GAAG,qCAAlD;AAEA,MAAMC,4BAA4B,GAAG,IAAIJ,GAAJ,CAAQ,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAAR,CAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASK,oBAAT,CAA8BC,SAA9B,EAAyCC,KAAzC,EAAgDC,UAAhD,EAA4D;EACxD,MAAMC,UAAU,GAAGH,SAAS,CAACG,UAA7B;EAEA;AACJ;AACA;AACA;AACA;;EACI,MAAMC,4BAA4B,GAAGH,KAAK,KAAK,CAAV,IACjCC,UAAU,CAACD,KAAK,GAAG,CAAT,CAAV,CAAsBE,UAAtB,KAAqCA,UADzC;EAGA,OAAQA,UAAU,IACdH,SAAS,CAACK,IAAV,KAAmB,KADf,IAEJL,SAAS,CAACM,OAAV,EAFI,IAGJF,4BAHJ;AAKH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASG,mBAAT,CAA6BC,CAA7B,EAAgC;EAC5B,OAAOA,CAAC,CAAC,CAAD,CAAD,KAASA,CAAC,CAAC,CAAD,CAAD,CAAKC,iBAAL,EAAhB;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;EAC5B,OAAQA,IAAI,CAACC,EAAL,IAAWL,mBAAmB,CAACI,IAAI,CAACC,EAAL,CAAQC,IAAT,CAAtC;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BH,IAA1B,EAAgC;EAC5B,KAAK,IAAII,WAAW,GAAGJ,IAAvB,EAA6BI,WAA7B,EAA0CA,WAAW,GAAGA,WAAW,CAACC,MAApE,EAA4E;IACxE,IAAI9B,kBAAkB,CAAC+B,IAAnB,CAAwBF,WAAW,CAACG,IAApC,CAAJ,EAA+C;MAC3C,OAAOH,WAAP;IACH;EACJ;;EACD,OAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,UAAT,CAAoBR,IAApB,EAA0B;EACtB,OAAOS,OAAO,CAACT,IAAI,IAAIzB,kBAAkB,CAAC+B,IAAnB,CAAwBN,IAAI,CAACO,IAA7B,CAAT,CAAd;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,MAAT,CAAgBV,IAAhB,EAAsB;EAClB,OAAOS,OAAO,CAACT,IAAI,IAAIxB,cAAc,CAAC8B,IAAf,CAAoBN,IAAI,CAACO,IAAzB,CAAT,CAAd;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASI,QAAT,CAAkBX,IAAlB,EAAwB;EACpB,KAAK,IAAII,WAAW,GAAGJ,IAAvB,EAA6BI,WAAW,IAAI,CAACI,UAAU,CAACJ,WAAD,CAAvD,EAAsEA,WAAW,GAAGA,WAAW,CAACC,MAAhG,EAAwG;IACpG,IAAIK,MAAM,CAACN,WAAD,CAAV,EAAyB;MACrB,OAAO,IAAP;IACH;EACJ;;EAED,OAAO,KAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASQ,aAAT,CAAuBZ,IAAvB,EAA6B;EAEzB;AACJ;AACA;AACA;AACA;AACA;AACA;EACI,OAAOA,IAAI,CAACO,IAAL,KAAc,SAAd,IAA2BP,IAAI,CAACa,KAAL,KAAe,IAA1C,IAAkD,CAACb,IAAI,CAACc,KAAxD,IAAiE,CAACd,IAAI,CAACe,MAA9E;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BhB,IAA3B,EAAiC;EAC7B,OACIY,aAAa,CAACZ,IAAD,CAAb,IACCA,IAAI,CAACO,IAAL,KAAc,YAAd,IAA8BP,IAAI,CAACE,IAAL,KAAc,WAD7C,IAECF,IAAI,CAACO,IAAL,KAAc,iBAAd,IAAmCP,IAAI,CAACiB,QAAL,KAAkB,MAH1D;AAKH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBlB,IAAlB,EAAwB;EACpB,OAAOA,IAAI,CAACK,MAAL,CAAYE,IAAZ,KAAqB,gBAArB,IAAyCP,IAAI,CAACK,MAAL,CAAYc,MAAZ,KAAuBnB,IAAvE;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoB,oBAAT,CAA8BpB,IAA9B,EAAoC;EAChC,QAAQA,IAAI,CAACO,IAAb;IACI,KAAK,SAAL;MACI,IAAIP,IAAI,CAACa,KAAL,KAAe,IAAnB,EAAyB;QACrB,IAAID,aAAa,CAACZ,IAAD,CAAjB,EAAyB;UACrB,OAAOqB,MAAM,CAACrB,IAAI,CAACa,KAAN,CAAb,CADqB,CACM;QAC9B;;QACD,IAAIb,IAAI,CAACc,KAAT,EAAgB;UACZ,OAAQ,IAAGd,IAAI,CAACc,KAAL,CAAWQ,OAAQ,IAAGtB,IAAI,CAACc,KAAL,CAAWS,KAAM,EAAlD;QACH;;QACD,IAAIvB,IAAI,CAACe,MAAT,EAAiB;UACb,OAAOf,IAAI,CAACe,MAAZ;QACH,CAToB,CAWrB;;MAEH,CAbD,MAaO;QACH,OAAOM,MAAM,CAACrB,IAAI,CAACa,KAAN,CAAb;MACH;;MACD;;IACJ,KAAK,iBAAL;MACI,IAAIb,IAAI,CAACwB,WAAL,CAAiBC,MAAjB,KAA4B,CAA5B,IAAiCzB,IAAI,CAAC0B,MAAL,CAAYD,MAAZ,KAAuB,CAA5D,EAA+D;QAC3D,OAAOzB,IAAI,CAAC0B,MAAL,CAAY,CAAZ,EAAeb,KAAf,CAAqBc,MAA5B;MACH;;MACD;IAEA;EAzBR;;EA4BA,OAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,qBAAT,CAA+B5B,IAA/B,EAAqC;EACjC,IAAI6B,IAAJ;;EAEA,QAAQ7B,IAAI,IAAIA,IAAI,CAACO,IAArB;IACI,KAAK,iBAAL;MACI,OAAOqB,qBAAqB,CAAC5B,IAAI,CAAC8B,UAAN,CAA5B;;IAEJ,KAAK,UAAL;IACA,KAAK,kBAAL;MACID,IAAI,GAAG7B,IAAI,CAAC+B,GAAZ;MACA;;IAEJ,KAAK,kBAAL;MACIF,IAAI,GAAG7B,IAAI,CAACgC,QAAZ;MACA;IAEA;EAbR;;EAgBA,IAAIH,IAAJ,EAAU;IACN,IAAIA,IAAI,CAACtB,IAAL,KAAc,YAAd,IAA8B,CAACP,IAAI,CAACiC,QAAxC,EAAkD;MAC9C,OAAOJ,IAAI,CAAC3B,IAAZ;IACH;;IAED,OAAOkB,oBAAoB,CAACS,IAAD,CAA3B;EACH;;EAED,OAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASK,mBAAT,CAA6BlC,IAA7B,EAAmC;EAC/B,OAAOA,IAAI,IAAIA,IAAI,CAACO,IAAL,KAAc,iBAAtB,GAA0CP,IAAI,CAAC8B,UAA/C,GAA4D9B,IAAnE;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmC,SAAT,CAAmBC,MAAnB,EAA2BC,QAA3B,EAAqC;EACjC,OAAO,OAAOA,QAAP,KAAoB,QAApB,GACDD,MAAM,KAAKC,QADV,GAEDA,QAAQ,CAAC/B,IAAT,CAAc8B,MAAd,CAFN;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,YAAT,CAAsBtC,IAAtB,EAA4BE,IAA5B,EAAkC;EAC9B,OAAOF,IAAI,CAACO,IAAL,KAAc,YAAd,IAA8B4B,SAAS,CAACnC,IAAI,CAACE,IAAN,EAAYA,IAAZ,CAA9C;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqC,sBAAT,CAAgCvC,IAAhC,EAAsCwC,UAAtC,EAAkDC,YAAlD,EAAgE;EAC5D,MAAMC,SAAS,GAAGR,mBAAmB,CAAClC,IAAD,CAArC;;EAEA,IAAI0C,SAAS,CAACnC,IAAV,KAAmB,kBAAvB,EAA2C;IACvC,OAAO,KAAP;EACH;;EAED,IAAIiC,UAAU,IAAI,CAACF,YAAY,CAACI,SAAS,CAACC,MAAX,EAAmBH,UAAnB,CAA/B,EAA+D;IAC3D,OAAO,KAAP;EACH;;EAED,IAAIC,YAAJ,EAAkB;IACd,MAAMG,kBAAkB,GAAGhB,qBAAqB,CAACc,SAAD,CAAhD;;IAEA,IAAI,OAAOE,kBAAP,KAA8B,QAA9B,IAA0C,CAACT,SAAS,CAACS,kBAAD,EAAqBH,YAArB,CAAxD,EAA4F;MACxF,OAAO,KAAP;IACH;EACJ;;EAED,OAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,iBAAT,CAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;EAEpC;EACA,IAAID,IAAI,CAAChC,KAAL,IAAciC,KAAK,CAACjC,KAAxB,EAA+B;IAC3B,OAAOL,OAAO,CACVqC,IAAI,CAAChC,KAAL,IACAiC,KAAK,CAACjC,KADN,IAEAgC,IAAI,CAAChC,KAAL,CAAWQ,OAAX,KAAuByB,KAAK,CAACjC,KAAN,CAAYQ,OAFnC,IAGAwB,IAAI,CAAChC,KAAL,CAAWS,KAAX,KAAqBwB,KAAK,CAACjC,KAAN,CAAYS,KAJvB,CAAd;EAMH,CAVmC,CAYpC;;;EACA,IAAIuB,IAAI,CAAC/B,MAAL,IAAegC,KAAK,CAAChC,MAAzB,EAAiC;IAC7B,OAAO+B,IAAI,CAAC/B,MAAL,KAAgBgC,KAAK,CAAChC,MAA7B;EACH;;EAED,OAAO+B,IAAI,CAACjC,KAAL,KAAekC,KAAK,CAAClC,KAA5B;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmC,eAAT,CAAyBF,IAAzB,EAA+BC,KAA/B,EAAwE;EAAA,IAAlCE,wBAAkC,uEAAP,KAAO;;EACpE,IAAIH,IAAI,CAACvC,IAAL,KAAcwC,KAAK,CAACxC,IAAxB,EAA8B;IAE1B;IACA,IAAIuC,IAAI,CAACvC,IAAL,KAAc,iBAAlB,EAAqC;MACjC,OAAOyC,eAAe,CAACF,IAAI,CAAChB,UAAN,EAAkBiB,KAAlB,EAAyBE,wBAAzB,CAAtB;IACH;;IACD,IAAIF,KAAK,CAACxC,IAAN,KAAe,iBAAnB,EAAsC;MAClC,OAAOyC,eAAe,CAACF,IAAD,EAAOC,KAAK,CAACjB,UAAb,EAAyBmB,wBAAzB,CAAtB;IACH;;IAED,OAAO,KAAP;EACH;;EAED,QAAQH,IAAI,CAACvC,IAAb;IACI,KAAK,OAAL;IACA,KAAK,gBAAL;MACI,OAAO,IAAP;;IAEJ,KAAK,YAAL;MACI,OAAOuC,IAAI,CAAC5C,IAAL,KAAc6C,KAAK,CAAC7C,IAA3B;;IACJ,KAAK,SAAL;MACI,OAAO2C,iBAAiB,CAACC,IAAD,EAAOC,KAAP,CAAxB;;IAEJ,KAAK,iBAAL;MACI,OAAOC,eAAe,CAACF,IAAI,CAAChB,UAAN,EAAkBiB,KAAK,CAACjB,UAAxB,EAAoCmB,wBAApC,CAAtB;;IAEJ,KAAK,kBAAL;MAAyB;QACrB,IAAI,CAACA,wBAAL,EAA+B;UAC3B,MAAMC,KAAK,GAAGtB,qBAAqB,CAACkB,IAAD,CAAnC,CAD2B,CAG3B;;UACA,IAAII,KAAK,KAAK,IAAd,EAAoB;YAChB,OACIF,eAAe,CAACF,IAAI,CAACH,MAAN,EAAcI,KAAK,CAACJ,MAApB,EAA4BM,wBAA5B,CAAf,IACAC,KAAK,KAAKtB,qBAAqB,CAACmB,KAAD,CAFnC;UAIH;QACJ;QAED;AACZ;AACA;AACA;AACA;;;QACY,OACID,IAAI,CAACb,QAAL,KAAkBc,KAAK,CAACd,QAAxB,IACAe,eAAe,CAACF,IAAI,CAACH,MAAN,EAAcI,KAAK,CAACJ,MAApB,EAA4BM,wBAA5B,CADf,IAEAD,eAAe,CAACF,IAAI,CAACd,QAAN,EAAgBe,KAAK,CAACf,QAAtB,EAAgCiB,wBAAhC,CAHnB;MAKH;;IAED;MACI,OAAO,KAAP;EAvCR;AAyCH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,CAAwBnD,IAAxB,EAA8B;EAC1B,OAAOuC,sBAAsB,CAACvC,IAAD,EAAO,SAAP,EAAkB,OAAlB,CAA7B;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASoD,iBAAT,CAA2BpD,IAA3B,EAAiC;EAC7B,OAAOuC,sBAAsB,CAACvC,IAAD,EAAOvB,wBAAP,EAAiC,MAAjC,CAA7B;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS4E,uBAAT,CAAiCrD,IAAjC,EAAuC;EACnC,OAAOuC,sBAAsB,CAACvC,IAAD,EAAO,IAAP,EAAatB,kBAAb,CAA7B;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS4E,MAAT,CAAgBC,CAAhB,EAAmB;EACf,OAAOC,KAAK,IAAI,CAACD,CAAC,CAACC,KAAD,CAAlB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,eAAT,CAAyBzD,IAAzB,EAA+B0D,UAA/B,EAA2C;EACvC,MAAMC,YAAY,GAAGD,UAAU,CAACE,eAAX,CAA2B5D,IAA3B,CAArB;;EAEA,IAAI2D,YAAY,IAAI/E,cAAc,CAAC0B,IAAf,CAAoBqD,YAAY,CAAC9C,KAAjC,CAApB,EAA6D;IACzD,OAAO,IAAP;EACH,CALsC,CAOvC;EACA;EACA;EACA;;;EACA,OAAO6C,UAAU,CAACG,iBAAX,CAA6B7D,IAA7B,EAAmC8D,IAAnC,CAAwCC,OAAO,IAAInF,cAAc,CAAC0B,IAAf,CAAoByD,OAAO,CAAClD,KAA5B,CAAnD,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmD,eAAT,CAAyBN,UAAzB,EAAqC1D,IAArC,EAA2C;EACvC,MAAMiE,aAAa,GAAGP,UAAU,CAACQ,cAAX,CAA0BlE,IAA1B,CAAtB;EAAA,MACImE,SAAS,GAAGT,UAAU,CAACU,aAAX,CAAyBpE,IAAzB,CADhB;EAGA,OAAOS,OAAO,CAACwD,aAAa,IAAIE,SAAlB,CAAP,IACHF,aAAa,CAACpD,KAAd,KAAwB,GADrB,IAC4BoD,aAAa,CAACI,KAAd,CAAoB,CAApB,KAA0BrE,IAAI,CAACqE,KAAL,CAAW,CAAX,CADtD,IAEHF,SAAS,CAACtD,KAAV,KAAoB,GAFjB,IAEwBsD,SAAS,CAACE,KAAV,CAAgB,CAAhB,KAAsBrE,IAAI,CAACqE,KAAL,CAAW,CAAX,CAFrD;AAGH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,YAAT,CAAsBd,KAAtB,EAA6B;EACzB,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,IAAhB,IAAwB2C,KAAK,CAACjD,IAAN,KAAe,YAA9C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASgE,YAAT,CAAsBf,KAAtB,EAA6B;EACzB,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASiE,UAAT,CAAoBhB,KAApB,EAA2B;EACvB,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASkE,kBAAT,CAA4BjB,KAA5B,EAAmC;EAC/B,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,IAAhB,IAAwB2C,KAAK,CAACjD,IAAN,KAAe,YAA9C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASmE,gBAAT,CAA0BlB,KAA1B,EAAiC;EAC7B,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASoE,YAAT,CAAsBnB,KAAtB,EAA6B;EACzB,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASqE,mBAAT,CAA6BpB,KAA7B,EAAoC;EAChC,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASsE,mBAAT,CAA6BrB,KAA7B,EAAoC;EAChC,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASuE,qBAAT,CAA+BtB,KAA/B,EAAsC;EAClC,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASwE,qBAAT,CAA+BvB,KAA/B,EAAsC;EAClC,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASyE,mBAAT,CAA6BxB,KAA7B,EAAoC;EAChC,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS0E,mBAAT,CAA6BzB,KAA7B,EAAoC;EAChC,OAAOA,KAAK,CAAC3C,KAAN,KAAgB,GAAhB,IAAuB2C,KAAK,CAACjD,IAAN,KAAe,YAA7C;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS2E,cAAT,CAAwB1B,KAAxB,EAA+B;EAC3B,OAAOA,KAAK,CAACjD,IAAN,KAAe,MAAf,IAAyBiD,KAAK,CAACjD,IAAN,KAAe,OAAxC,IAAmDiD,KAAK,CAACjD,IAAN,KAAe,SAAzE;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS4E,cAAT,CAAwB3B,KAAxB,EAA+B;EAC3B,OAAOA,KAAK,CAACjD,IAAN,KAAe,SAAtB;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6E,uBAAT,CAAiCpF,IAAjC,EAAuC0D,UAAvC,EAAmD;EAC/C,OAAO1D,IAAI,CAACC,EAAL,GACDyD,UAAU,CAACU,aAAX,CAAyBpE,IAAI,CAACC,EAA9B,EAAkC2E,mBAAlC,CADC,GAEDlB,UAAU,CAAC2B,aAAX,CAAyBrF,IAAzB,EAA+B4E,mBAA/B,CAFN;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,WAAT,CAAqBxC,IAArB,EAA2BC,KAA3B,EAAkCW,UAAlC,EAA8C;EAC1C,MAAM6B,OAAO,GAAG7B,UAAU,CAAC8B,SAAX,CAAqB1C,IAArB,CAAhB;EACA,MAAM2C,OAAO,GAAG/B,UAAU,CAAC8B,SAAX,CAAqBzC,KAArB,CAAhB;;EAEA,IAAIwC,OAAO,CAAC9D,MAAR,KAAmBgE,OAAO,CAAChE,MAA/B,EAAuC;IACnC,OAAO,KAAP;EACH;;EACD,KAAK,IAAIiE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAAC9D,MAA5B,EAAoC,EAAEiE,CAAtC,EAAyC;IACrC,IAAIH,OAAO,CAACG,CAAD,CAAP,CAAWnF,IAAX,KAAoBkF,OAAO,CAACC,CAAD,CAAP,CAAWnF,IAA/B,IACAgF,OAAO,CAACG,CAAD,CAAP,CAAW7E,KAAX,KAAqB4E,OAAO,CAACC,CAAD,CAAP,CAAW7E,KADpC,EAEE;MACE,OAAO,KAAP;IACH;EACJ;;EAED,OAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS8E,mBAAT,CAA6B3F,IAA7B,EAAmC;EAC/B,OACIA,IAAI,CAACO,IAAL,KAAc,mBAAd,KACKP,IAAI,CAACiB,QAAL,KAAkB,IAAlB,IAA0BjB,IAAI,CAACiB,QAAL,KAAkB,IADjD,CADJ;AAIH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2E,oBAAT,CAA8B5F,IAA9B,EAAoC;EAChC,OAAOA,IAAI,CAACO,IAAL,KAAc,mBAAd,IAAqCP,IAAI,CAACiB,QAAL,KAAkB,IAA9D;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4E,oCAAT,CAA8C/C,IAA9C,EAAoDC,KAApD,EAA2D;EACvD,OACK4C,mBAAmB,CAAC7C,IAAD,CAAnB,IAA6B8C,oBAAoB,CAAC7C,KAAD,CAAlD,IACK6C,oBAAoB,CAAC9C,IAAD,CAApB,IAA8B6C,mBAAmB,CAAC5C,KAAD,CAF1D;AAIH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAS+C,2BAAT,CAAqC7E,QAArC,EAA+C;EAC3C,OAAO9B,4BAA4B,CAAC4G,GAA7B,CAAiC9E,QAAjC,CAAP;AACH,C,CAED;AACA;AACA;;;AAEA+E,MAAM,CAACC,OAAP,GAAiB;EACbpH,uBADa;EAEbC,UAFa;EAGboH,iBAAiB,EAAE7H,gBAHN;EAIb8H,eAAe,EAAE7H,cAJJ;EAKbU,sBALa;;EAOb;AACJ;AACA;AACA;AACA;AACA;AACA;EACIoH,iBAAiB,CAACtD,IAAD,EAAOC,KAAP,EAAc;IAC3B,OAAOD,IAAI,CAACuD,GAAL,CAASC,GAAT,CAAaC,IAAb,KAAsBxD,KAAK,CAACsD,GAAN,CAAUG,KAAV,CAAgBD,IAA7C;EACH,CAhBY;;EAkBbvF,iBAlBa;EAmBbE,QAnBa;EAoBbnB,gBApBa;EAqBbI,gBArBa;EAsBbK,UAtBa;EAuBbE,MAvBa;EAwBbC,QAxBa;EAyBbyC,iBAzBa;EA0BbY,eA1Ba;EA2Bb5F,4BA3Ba;EA4BbkH,WA5Ba;EA8BbhB,YA9Ba;EA+BbW,mBA/Ba;EAgCbF,qBAhCa;EAiCbF,mBAjCa;EAkCbF,YAlCa;EAmCbJ,YAnCa;EAoCbW,cApCa;EAqCbV,UArCa;EAsCbC,kBAtCa;EAuCbU,cAvCa;EAwCbsB,sBAAsB,EAAEnD,MAAM,CAAC2B,mBAAD,CAxCjB;EAyCbyB,wBAAwB,EAAEpD,MAAM,CAACyB,qBAAD,CAzCnB;EA0Cb4B,sBAAsB,EAAErD,MAAM,CAACuB,mBAAD,CA1CjB;EA2Cb+B,eAAe,EAAEtD,MAAM,CAACqB,YAAD,CA3CV;EA4CbkC,eAAe,EAAEvD,MAAM,CAACiB,YAAD,CA5CV;EA6CbuC,aAAa,EAAExD,MAAM,CAACkB,UAAD,CA7CR;EA8CbuC,qBAAqB,EAAEzD,MAAM,CAACmB,kBAAD,CA9ChB;EA+CbuC,sBAAsB,EAAE1D,MAAM,CAAC0B,mBAAD,CA/CjB;EAgDbiC,wBAAwB,EAAE3D,MAAM,CAACwB,qBAAD,CAhDnB;EAiDboC,sBAAsB,EAAE5D,MAAM,CAACsB,mBAAD,CAjDjB;EAkDbuC,mBAAmB,EAAE7D,MAAM,CAACoB,gBAAD,CAlDd;EAmDbM,mBAnDa;EAoDbF,qBApDa;EAqDbF,mBArDa;EAsDbF,gBAtDa;;EAwDb;AACJ;AACA;AACA;AACA;EACI0C,eAAe,CAACpH,IAAD,EAAO;IAClB,OACKA,IAAI,CAACO,IAAL,KAAc,SAAd,IAA2B,OAAOP,IAAI,CAACa,KAAZ,KAAsB,QAAlD,IACAb,IAAI,CAACO,IAAL,KAAc,iBAFlB;EAIH,CAlEY;;EAoEb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI8G,oBAAoB,CAACrH,IAAD,EAAO;IACvB,OAAO7B,oBAAoB,CAACmC,IAArB,CAA0BN,IAAI,CAACO,IAA/B,CAAP;EACH,CAnFY;;EAqFb;AACJ;AACA;AACA;AACA;AACA;EACI+G,sBAAsB,CAAC/H,UAAD,EAAa;IAC/B,OAAOA,UAAU,CAACgI,MAAX,CAAkBnI,oBAAlB,CAAP;EACH,CA7FY;;EA+Fb;AACJ;AACA;AACA;AACA;AACA;AACA;EACIoI,cAAc,CAACC,GAAD,EAAMC,SAAN,EAAiB;IAC3B,OAAOD,GAAG,CAAC,CAAD,CAAH,KAAWC,SAAX,IAAwBD,GAAG,CAACA,GAAG,CAAChG,MAAJ,GAAa,CAAd,CAAH,KAAwBiG,SAAvD;EACH,CAxGY;;EA0Gb;AACJ;AACA;AACA;AACA;EACIC,kBAAkB,CAAC3H,IAAD,EAAO;IACrB,MAAM+D,OAAO,GAAG/D,IAAI,CAACa,KAAL,CAAW+G,IAAX,EAAhB;IAEA,OACI5H,IAAI,CAACO,IAAL,KAAc,MAAd,IAAwBwD,OAAO,CAAC8D,OAAR,CAAgB,SAAhB,MAA+B,CAAvD,IACA7H,IAAI,CAACO,IAAL,KAAc,OAAd,KACIwD,OAAO,CAAC8D,OAAR,CAAgB,SAAhB,MAA+B,CAA/B,IACA9D,OAAO,CAAC8D,OAAR,CAAgB,SAAhB,MAA+B,CAD/B,IAEA9D,OAAO,CAAC8D,OAAR,CAAgB,SAAhB,MAA+B,CAHnC,CAFJ;EAQH,CA1HY;;EA4Hb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,oBAAoB,EAAE/J,OAAO,CAACgK,GAAR,CAAYC,iBAtIrB;;EAwIb;AACJ;AACA;AACA;AACA;AACA;EACIC,iBAAiB,CAACC,SAAD,EAAYhI,IAAZ,EAAkB;IAC/B,IAAIiI,KAAK,GAAGD,SAAZ;;IAEA,OAAOC,KAAP,EAAc;MACV,MAAMC,QAAQ,GAAGD,KAAK,CAACE,GAAN,CAAUC,GAAV,CAAcpI,IAAd,CAAjB;;MAEA,IAAIkI,QAAJ,EAAc;QACV,OAAOA,QAAP;MACH;;MAEDD,KAAK,GAAGA,KAAK,CAACI,KAAd;IACH;;IAED,OAAO,IAAP;EACH,CA5JY;;EA8Jb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,oBAAoB,CAACxI,IAAD,EAAO0D,UAAP,EAAqD;IAAA,IAAlC;MAAE+E,gBAAgB,GAAG;IAArB,CAAkC,uEAAJ,EAAI;;IACrE,IACKA,gBAAgB,IAAI1I,gBAAgB,CAACC,IAAD,CAArC,IACAyD,eAAe,CAACzD,IAAD,EAAO0D,UAAP,CAFnB,EAGE;MACE,OAAO,KAAP;IACH;;IACD,MAAMgF,WAAW,GAAG1I,IAAI,CAACC,EAAL,KAAY,IAAhC;IACA,IAAIG,WAAW,GAAGJ,IAAlB;;IAEA,OAAOI,WAAP,EAAoB;MAChB,MAAMC,MAAM,GAAGD,WAAW,CAACC,MAA3B;;MAEA,QAAQA,MAAM,CAACE,IAAf;QAEI;AAChB;AACA;AACA;QACgB,KAAK,mBAAL;QACA,KAAK,uBAAL;QACA,KAAK,iBAAL;UACIH,WAAW,GAAGC,MAAd;UACA;;QAEJ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QACgB,KAAK,iBAAL;UAAwB;YACpB,MAAMsI,IAAI,GAAGxI,gBAAgB,CAACE,MAAD,CAA7B;;YAEA,IAAIsI,IAAI,KAAK,IAAT,IAAiB,CAACzH,QAAQ,CAACyH,IAAD,CAA9B,EAAsC;cAClC,OAAO,IAAP;YACH;;YACDvI,WAAW,GAAGuI,IAAI,CAACtI,MAAnB;YACA;UACH;;QACD,KAAK,yBAAL;UACI,IAAID,WAAW,KAAKC,MAAM,CAACuI,IAAvB,IAA+B,CAAC1H,QAAQ,CAACb,MAAD,CAA5C,EAAsD;YAClD,OAAO,IAAP;UACH;;UACDD,WAAW,GAAGC,MAAM,CAACA,MAArB;UACA;;QAEJ;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QACgB,KAAK,UAAL;QACA,KAAK,kBAAL;UACI,OAAOA,MAAM,CAACQ,KAAP,KAAiBT,WAAxB;;QAEJ;AAChB;AACA;AACA;AACA;AACA;AACA;;QACgB,KAAK,sBAAL;QACA,KAAK,mBAAL;UACI,IAAIC,MAAM,CAACyC,IAAP,CAAYvC,IAAZ,KAAqB,kBAAzB,EAA6C;YACzC,OAAO,KAAP;UACH;;UACD,IACIkI,gBAAgB,IAChBC,WADA,IAEArI,MAAM,CAACyC,IAAP,CAAYvC,IAAZ,KAAqB,YAFrB,IAGAX,mBAAmB,CAACS,MAAM,CAACyC,IAAP,CAAY5C,IAAb,CAJvB,EAKE;YACE,OAAO,KAAP;UACH;;UACD,OAAO,IAAP;;QAEJ;AAChB;AACA;AACA;;QACgB,KAAK,oBAAL;UACI,OAAO,EACHuI,gBAAgB,IAChBC,WADA,IAEArI,MAAM,CAACX,IAAP,KAAgBU,WAFhB,IAGAC,MAAM,CAACJ,EAAP,CAAUM,IAAV,KAAmB,YAHnB,IAIAX,mBAAmB,CAACS,MAAM,CAACJ,EAAP,CAAUC,IAAX,CALhB,CAAP;;QAQJ;AAChB;AACA;AACA;AACA;AACA;;QACgB,KAAK,kBAAL;UACI,IACIG,MAAM,CAACsC,MAAP,KAAkBvC,WAAlB,IACAmC,sBAAsB,CAAClC,MAAD,EAAS,IAAT,EAAe1B,wBAAf,CAF1B,EAGE;YACE,MAAMkK,eAAe,GAAGxI,MAAM,CAACA,MAAP,CAAcE,IAAd,KAAuB,iBAAvB,GAClBF,MAAM,CAACA,MADW,GAElBA,MAFN;YAIA,OAAO,EACHa,QAAQ,CAAC2H,eAAD,CAAR,IACAA,eAAe,CAACxI,MAAhB,CAAuByI,SAAvB,CAAiCrH,MAAjC,IAA2C,CAD3C,IAEA,CAACT,iBAAiB,CAAC6H,eAAe,CAACxI,MAAhB,CAAuByI,SAAvB,CAAiC,CAAjC,CAAD,CAHf,CAAP;UAKH;;UACD,OAAO,IAAP;;QAEJ;AAChB;AACA;AACA;AACA;AACA;;QACgB,KAAK,gBAAL;UACI,IAAI3F,cAAc,CAAC9C,MAAM,CAACc,MAAR,CAAlB,EAAmC;YAC/B,OACId,MAAM,CAACyI,SAAP,CAAiBrH,MAAjB,KAA4B,CAA5B,IACApB,MAAM,CAACyI,SAAP,CAAiB,CAAjB,MAAwB1I,WADxB,IAEAY,iBAAiB,CAACX,MAAM,CAACyI,SAAP,CAAiB,CAAjB,CAAD,CAHrB;UAKH;;UACD,IAAI1F,iBAAiB,CAAC/C,MAAM,CAACc,MAAR,CAArB,EAAsC;YAClC,OACId,MAAM,CAACyI,SAAP,CAAiBrH,MAAjB,KAA4B,CAA5B,IACApB,MAAM,CAACyI,SAAP,CAAiB,CAAjB,MAAwB1I,WADxB,IAEAY,iBAAiB,CAACX,MAAM,CAACyI,SAAP,CAAiB,CAAjB,CAAD,CAHrB;UAKH;;UACD,IAAIzF,uBAAuB,CAAChD,MAAM,CAACc,MAAR,CAA3B,EAA4C;YACxC,OACId,MAAM,CAACyI,SAAP,CAAiBrH,MAAjB,KAA4B,CAA5B,IACApB,MAAM,CAACyI,SAAP,CAAiB,CAAjB,MAAwB1I,WADxB,IAEAY,iBAAiB,CAACX,MAAM,CAACyI,SAAP,CAAiB,CAAjB,CAAD,CAHrB;UAKH;;UACD,OAAO,IAAP;QAEJ;;QACA;UACI,OAAO,IAAP;MA/IR;IAiJH;IAED;;;IACA,OAAO,IAAP;EACH,CAzVY;;EA2Vb;AACJ;AACA;AACA;AACA;AACA;EACIC,aAAa,CAAC/I,IAAD,EAAO;IAChB,QAAQA,IAAI,CAACO,IAAb;MACI,KAAK,oBAAL;QACI,OAAO,CAAP;;MAEJ,KAAK,sBAAL;MACA,KAAK,yBAAL;MACA,KAAK,iBAAL;QACI,OAAO,CAAP;;MAEJ,KAAK,uBAAL;QACI,OAAO,CAAP;;MAEJ,KAAK,mBAAL;QACI,QAAQP,IAAI,CAACiB,QAAb;UACI,KAAK,IAAL;UACA,KAAK,IAAL;YACI,OAAO,CAAP;;UACJ,KAAK,IAAL;YACI,OAAO,CAAP;UAEJ;QAPJ;;MAUA;;MAEJ,KAAK,kBAAL;QAEI,QAAQjB,IAAI,CAACiB,QAAb;UACI,KAAK,GAAL;YACI,OAAO,CAAP;;UACJ,KAAK,GAAL;YACI,OAAO,CAAP;;UACJ,KAAK,GAAL;YACI,OAAO,CAAP;;UACJ,KAAK,IAAL;UACA,KAAK,IAAL;UACA,KAAK,KAAL;UACA,KAAK,KAAL;YACI,OAAO,CAAP;;UACJ,KAAK,GAAL;UACA,KAAK,IAAL;UACA,KAAK,GAAL;UACA,KAAK,IAAL;UACA,KAAK,IAAL;UACA,KAAK,YAAL;YACI,OAAO,EAAP;;UACJ,KAAK,IAAL;UACA,KAAK,IAAL;UACA,KAAK,KAAL;YACI,OAAO,EAAP;;UACJ,KAAK,GAAL;UACA,KAAK,GAAL;YACI,OAAO,EAAP;;UACJ,KAAK,GAAL;UACA,KAAK,GAAL;UACA,KAAK,GAAL;YACI,OAAO,EAAP;;UACJ,KAAK,IAAL;YACI,OAAO,EAAP;UAEJ;QAjCJ;;MAoCA;;MAEJ,KAAK,iBAAL;MACA,KAAK,iBAAL;QACI,OAAO,EAAP;;MAEJ,KAAK,kBAAL;QACI,OAAO,EAAP;;MAEJ,KAAK,gBAAL;MACA,KAAK,iBAAL;MACA,KAAK,kBAAL;QACI,OAAO,EAAP;;MAEJ,KAAK,eAAL;QACI,OAAO,EAAP;;MAEJ;QACI,OAAO,EAAP;IAjFR;EAmFH,CArbY;;EAubb;AACJ;AACA;AACA;AACA;EACI+H,YAAY,CAAChJ,IAAD,EAAO;IACf,OAAOS,OAAO,CAACT,IAAI,IAAIA,IAAI,CAACO,IAAL,KAAc,gBAAtB,IAA0CP,IAAI,CAAC4I,IAAL,CAAUnH,MAAV,KAAqB,CAAhE,CAAd;EACH,CA9bY;;EAgcb;AACJ;AACA;AACA;AACA;EACIwH,eAAe,CAACjJ,IAAD,EAAO;IAClB,OAAOQ,UAAU,CAACR,IAAD,CAAV,IAAoBgG,MAAM,CAACC,OAAP,CAAe+C,YAAf,CAA4BhJ,IAAI,CAAC4I,IAAjC,CAA3B;EACH,CAvcY;;EAycb;AACJ;AACA;AACA;AACA;EACIM,oBAAoB,CAAClJ,IAAD,EAAO;IACvB,MAAMmJ,UAAU,GAAG,EAAnB,CADuB,CAGvB;;IACA,IACInJ,IAAI,CAACO,IAAL,KAAc,SAAd,IACAP,IAAI,CAACO,IAAL,KAAc,qBADd,IAEAP,IAAI,CAACO,IAAL,KAAc,oBAFd;IAIA;AACZ;AACA;AACA;IACaP,IAAI,CAACO,IAAL,KAAc,yBAAd,IAA2CP,IAAI,CAAC4I,IAAL,CAAUrI,IAAV,KAAmB,gBATnE,EAUE;MACE,MAAM6I,UAAU,GAAGpJ,IAAI,CAACO,IAAL,KAAc,SAAd,GAA0BP,IAAI,CAAC4I,IAA/B,GAAsC5I,IAAI,CAAC4I,IAAL,CAAUA,IAAnE;;MAEA,KAAK,MAAMS,SAAX,IAAwBD,UAAxB,EAAoC;QAChC,IACIC,SAAS,CAAC9I,IAAV,KAAmB,qBAAnB,IACA8I,SAAS,CAACvH,UAAV,CAAqBvB,IAArB,KAA8B,SAFlC,EAGE;UACE4I,UAAU,CAACG,IAAX,CAAgBD,SAAhB;QACH,CALD,MAKO;UACH;QACH;MACJ;IACJ;;IAED,OAAOF,UAAP;EACH,CA5eY;;EA+eb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACII,gBAAgB,CAACvJ,IAAD,EAAO;IACnB,OAAOA,IAAI,CAACO,IAAL,KAAc,SAAd,IAA2B,OAAOP,IAAI,CAACa,KAAZ,KAAsB,QAAjD,IACH5B,uBAAuB,CAACqB,IAAxB,CAA6BN,IAAI,CAACwJ,GAAlC,CADJ;EAEH,CA/gBY;;EAihBb;AACJ;AACA;AACA;AACA;AACA;EACIC,4BAA4B,CAACjG,KAAD,EAAQ;IAChC,OAAOA,KAAK,CAACjD,IAAN,KAAe,SAAf,IAA4BtB,uBAAuB,CAACqB,IAAxB,CAA6BkD,KAAK,CAAC3C,KAAnC,CAAnC;EACH,CAzhBY;;EA2hBb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI6I,uBAAuB,CAAC1J,IAAD,EAAO;IAC1B,MAAMK,MAAM,GAAGL,IAAI,CAACK,MAApB;IACA,MAAMsJ,MAAM,GAAG,EAAf;;IAEA,IAAItJ,MAAM,CAACE,IAAP,KAAgB,kBAAhB,IAAsCF,MAAM,CAACuJ,MAAjD,EAAyD;MACrDD,MAAM,CAACL,IAAP,CAAY,QAAZ;IACH;;IACD,IAAItJ,IAAI,CAAC6J,KAAT,EAAgB;MACZF,MAAM,CAACL,IAAP,CAAY,OAAZ;IACH;;IACD,IAAItJ,IAAI,CAAC8J,SAAT,EAAoB;MAChBH,MAAM,CAACL,IAAP,CAAY,WAAZ;IACH;;IAED,IAAItJ,IAAI,CAACO,IAAL,KAAc,yBAAlB,EAA6C;MACzCoJ,MAAM,CAACL,IAAP,CAAY,OAAZ,EAAqB,UAArB;IACH,CAFD,MAEO,IAAIjJ,MAAM,CAACE,IAAP,KAAgB,UAAhB,IAA8BF,MAAM,CAACE,IAAP,KAAgB,kBAAlD,EAAsE;MACzE,IAAIF,MAAM,CAAC0J,IAAP,KAAgB,aAApB,EAAmC;QAC/B,OAAO,aAAP;MACH;;MACD,IAAI1J,MAAM,CAAC0J,IAAP,KAAgB,KAApB,EAA2B;QACvBJ,MAAM,CAACL,IAAP,CAAY,QAAZ;MACH,CAFD,MAEO,IAAIjJ,MAAM,CAAC0J,IAAP,KAAgB,KAApB,EAA2B;QAC9BJ,MAAM,CAACL,IAAP,CAAY,QAAZ;MACH,CAFM,MAEA;QACHK,MAAM,CAACL,IAAP,CAAY,QAAZ;MACH;IACJ,CAXM,MAWA;MACHK,MAAM,CAACL,IAAP,CAAY,UAAZ;IACH;;IAED,IAAItJ,IAAI,CAACC,EAAT,EAAa;MACT0J,MAAM,CAACL,IAAP,CAAa,IAAGtJ,IAAI,CAACC,EAAL,CAAQC,IAAK,GAA7B;IACH,CAFD,MAEO;MACH,MAAMA,IAAI,GAAG0B,qBAAqB,CAACvB,MAAD,CAAlC;;MAEA,IAAIH,IAAI,KAAK,IAAb,EAAmB;QACfyJ,MAAM,CAACL,IAAP,CAAa,IAAGpJ,IAAK,GAArB;MACH;IACJ;;IAED,OAAOyJ,MAAM,CAACK,IAAP,CAAY,GAAZ,CAAP;EACH,CArnBY;;EAunBb;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,kBAAkB,CAACjK,IAAD,EAAO0D,UAAP,EAAmB;IACjC,MAAMrD,MAAM,GAAGL,IAAI,CAACK,MAApB;IACA,IAAImG,KAAK,GAAG,IAAZ;IACA,IAAIF,GAAG,GAAG,IAAV;;IAEA,IAAItG,IAAI,CAACO,IAAL,KAAc,yBAAlB,EAA6C;MACzC,MAAM2J,UAAU,GAAGxG,UAAU,CAACQ,cAAX,CAA0BlE,IA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"},"metadata":{},"sourceType":"script"}