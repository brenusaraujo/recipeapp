{"ast":null,"code":"/**\n * @fileoverview Rule to validate spacing before function paren.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing before `function` definition opening parenthesis\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/space-before-function-paren\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      oneOf: [{\n        enum: [\"always\", \"never\"]\n      }, {\n        type: \"object\",\n        properties: {\n          anonymous: {\n            enum: [\"always\", \"never\", \"ignore\"]\n          },\n          named: {\n            enum: [\"always\", \"never\", \"ignore\"]\n          },\n          asyncArrow: {\n            enum: [\"always\", \"never\", \"ignore\"]\n          }\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      unexpectedSpace: \"Unexpected space before function parentheses.\",\n      missingSpace: \"Missing space before function parentheses.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const baseConfig = typeof context.options[0] === \"string\" ? context.options[0] : \"always\";\n    const overrideConfig = typeof context.options[0] === \"object\" ? context.options[0] : {};\n    /**\n     * Determines whether a function has a name.\n     * @param {ASTNode} node The function node.\n     * @returns {boolean} Whether the function has a name.\n     */\n\n    function isNamedFunction(node) {\n      if (node.id) {\n        return true;\n      }\n\n      const parent = node.parent;\n      return parent.type === \"MethodDefinition\" || parent.type === \"Property\" && (parent.kind === \"get\" || parent.kind === \"set\" || parent.method);\n    }\n    /**\n     * Gets the config for a given function\n     * @param {ASTNode} node The function node\n     * @returns {string} \"always\", \"never\", or \"ignore\"\n     */\n\n\n    function getConfigForFunction(node) {\n      if (node.type === \"ArrowFunctionExpression\") {\n        // Always ignore non-async functions and arrow functions without parens, e.g. async foo => bar\n        if (node.async && astUtils.isOpeningParenToken(sourceCode.getFirstToken(node, {\n          skip: 1\n        }))) {\n          return overrideConfig.asyncArrow || baseConfig;\n        }\n      } else if (isNamedFunction(node)) {\n        return overrideConfig.named || baseConfig; // `generator-star-spacing` should warn anonymous generators. E.g. `function* () {}`\n      } else if (!node.generator) {\n        return overrideConfig.anonymous || baseConfig;\n      }\n\n      return \"ignore\";\n    }\n    /**\n     * Checks the parens of a function node\n     * @param {ASTNode} node A function node\n     * @returns {void}\n     */\n\n\n    function checkFunction(node) {\n      const functionConfig = getConfigForFunction(node);\n\n      if (functionConfig === \"ignore\") {\n        return;\n      }\n\n      const rightToken = sourceCode.getFirstToken(node, astUtils.isOpeningParenToken);\n      const leftToken = sourceCode.getTokenBefore(rightToken);\n      const hasSpacing = sourceCode.isSpaceBetweenTokens(leftToken, rightToken);\n\n      if (hasSpacing && functionConfig === \"never\") {\n        context.report({\n          node,\n          loc: {\n            start: leftToken.loc.end,\n            end: rightToken.loc.start\n          },\n          messageId: \"unexpectedSpace\",\n\n          fix(fixer) {\n            const comments = sourceCode.getCommentsBefore(rightToken); // Don't fix anything if there's a single line comment between the left and the right token\n\n            if (comments.some(comment => comment.type === \"Line\")) {\n              return null;\n            }\n\n            return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], comments.reduce((text, comment) => text + sourceCode.getText(comment), \"\"));\n          }\n\n        });\n      } else if (!hasSpacing && functionConfig === \"always\") {\n        context.report({\n          node,\n          loc: rightToken.loc,\n          messageId: \"missingSpace\",\n          fix: fixer => fixer.insertTextAfter(leftToken, \" \")\n        });\n      }\n    }\n\n    return {\n      ArrowFunctionExpression: checkFunction,\n      FunctionDeclaration: checkFunction,\n      FunctionExpression: checkFunction\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","oneOf","enum","properties","anonymous","named","asyncArrow","additionalProperties","messages","unexpectedSpace","missingSpace","create","context","sourceCode","getSourceCode","baseConfig","options","overrideConfig","isNamedFunction","node","id","parent","kind","method","getConfigForFunction","async","isOpeningParenToken","getFirstToken","skip","generator","checkFunction","functionConfig","rightToken","leftToken","getTokenBefore","hasSpacing","isSpaceBetweenTokens","report","loc","start","end","messageId","fix","fixer","comments","getCommentsBefore","some","comment","replaceTextRange","range","reduce","text","getText","insertTextAfter","ArrowFunctionExpression","FunctionDeclaration","FunctionExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/space-before-function-paren.js"],"sourcesContent":["/**\n * @fileoverview Rule to validate spacing before function paren.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing before `function` definition opening parenthesis\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/space-before-function-paren\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"always\", \"never\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            anonymous: {\n                                enum: [\"always\", \"never\", \"ignore\"]\n                            },\n                            named: {\n                                enum: [\"always\", \"never\", \"ignore\"]\n                            },\n                            asyncArrow: {\n                                enum: [\"always\", \"never\", \"ignore\"]\n                            }\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            unexpectedSpace: \"Unexpected space before function parentheses.\",\n            missingSpace: \"Missing space before function parentheses.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const baseConfig = typeof context.options[0] === \"string\" ? context.options[0] : \"always\";\n        const overrideConfig = typeof context.options[0] === \"object\" ? context.options[0] : {};\n\n        /**\n         * Determines whether a function has a name.\n         * @param {ASTNode} node The function node.\n         * @returns {boolean} Whether the function has a name.\n         */\n        function isNamedFunction(node) {\n            if (node.id) {\n                return true;\n            }\n\n            const parent = node.parent;\n\n            return parent.type === \"MethodDefinition\" ||\n                (parent.type === \"Property\" &&\n                    (\n                        parent.kind === \"get\" ||\n                        parent.kind === \"set\" ||\n                        parent.method\n                    )\n                );\n        }\n\n        /**\n         * Gets the config for a given function\n         * @param {ASTNode} node The function node\n         * @returns {string} \"always\", \"never\", or \"ignore\"\n         */\n        function getConfigForFunction(node) {\n            if (node.type === \"ArrowFunctionExpression\") {\n\n                // Always ignore non-async functions and arrow functions without parens, e.g. async foo => bar\n                if (node.async && astUtils.isOpeningParenToken(sourceCode.getFirstToken(node, { skip: 1 }))) {\n                    return overrideConfig.asyncArrow || baseConfig;\n                }\n            } else if (isNamedFunction(node)) {\n                return overrideConfig.named || baseConfig;\n\n            // `generator-star-spacing` should warn anonymous generators. E.g. `function* () {}`\n            } else if (!node.generator) {\n                return overrideConfig.anonymous || baseConfig;\n            }\n\n            return \"ignore\";\n        }\n\n        /**\n         * Checks the parens of a function node\n         * @param {ASTNode} node A function node\n         * @returns {void}\n         */\n        function checkFunction(node) {\n            const functionConfig = getConfigForFunction(node);\n\n            if (functionConfig === \"ignore\") {\n                return;\n            }\n\n            const rightToken = sourceCode.getFirstToken(node, astUtils.isOpeningParenToken);\n            const leftToken = sourceCode.getTokenBefore(rightToken);\n            const hasSpacing = sourceCode.isSpaceBetweenTokens(leftToken, rightToken);\n\n            if (hasSpacing && functionConfig === \"never\") {\n                context.report({\n                    node,\n                    loc: {\n                        start: leftToken.loc.end,\n                        end: rightToken.loc.start\n                    },\n                    messageId: \"unexpectedSpace\",\n                    fix(fixer) {\n                        const comments = sourceCode.getCommentsBefore(rightToken);\n\n                        // Don't fix anything if there's a single line comment between the left and the right token\n                        if (comments.some(comment => comment.type === \"Line\")) {\n                            return null;\n                        }\n                        return fixer.replaceTextRange(\n                            [leftToken.range[1], rightToken.range[0]],\n                            comments.reduce((text, comment) => text + sourceCode.getText(comment), \"\")\n                        );\n                    }\n                });\n            } else if (!hasSpacing && functionConfig === \"always\") {\n                context.report({\n                    node,\n                    loc: rightToken.loc,\n                    messageId: \"missingSpace\",\n                    fix: fixer => fixer.insertTextAfter(leftToken, \" \")\n                });\n            }\n        }\n\n        return {\n            ArrowFunctionExpression: checkFunction,\n            FunctionDeclaration: checkFunction,\n            FunctionExpression: checkFunction\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}