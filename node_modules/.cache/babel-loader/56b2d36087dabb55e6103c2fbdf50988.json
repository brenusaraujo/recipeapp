{"ast":null,"code":"/**\n * @fileoverview Rule to flag comparison where left part is the same as the right\n * part.\n * @author Ilya Volodin\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow comparisons where both sides are exactly the same\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-self-compare\"\n    },\n    schema: [],\n    messages: {\n      comparingToSelf: \"Comparing to itself is potentially pointless.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    /**\n     * Determines whether two nodes are composed of the same tokens.\n     * @param {ASTNode} nodeA The first node\n     * @param {ASTNode} nodeB The second node\n     * @returns {boolean} true if the nodes have identical token representations\n     */\n\n    function hasSameTokens(nodeA, nodeB) {\n      const tokensA = sourceCode.getTokens(nodeA);\n      const tokensB = sourceCode.getTokens(nodeB);\n      return tokensA.length === tokensB.length && tokensA.every((token, index) => token.type === tokensB[index].type && token.value === tokensB[index].value);\n    }\n\n    return {\n      BinaryExpression(node) {\n        const operators = new Set([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"]);\n\n        if (operators.has(node.operator) && hasSameTokens(node.left, node.right)) {\n          context.report({\n            node,\n            messageId: \"comparingToSelf\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","comparingToSelf","create","context","sourceCode","getSourceCode","hasSameTokens","nodeA","nodeB","tokensA","getTokens","tokensB","length","every","token","index","value","BinaryExpression","node","operators","Set","has","operator","left","right","report","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-self-compare.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag comparison where left part is the same as the right\n * part.\n * @author Ilya Volodin\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow comparisons where both sides are exactly the same\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-self-compare\"\n        },\n\n        schema: [],\n\n        messages: {\n            comparingToSelf: \"Comparing to itself is potentially pointless.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether two nodes are composed of the same tokens.\n         * @param {ASTNode} nodeA The first node\n         * @param {ASTNode} nodeB The second node\n         * @returns {boolean} true if the nodes have identical token representations\n         */\n        function hasSameTokens(nodeA, nodeB) {\n            const tokensA = sourceCode.getTokens(nodeA);\n            const tokensB = sourceCode.getTokens(nodeB);\n\n            return tokensA.length === tokensB.length &&\n                tokensA.every((token, index) => token.type === tokensB[index].type && token.value === tokensB[index].value);\n        }\n\n        return {\n\n            BinaryExpression(node) {\n                const operators = new Set([\"===\", \"==\", \"!==\", \"!=\", \">\", \"<\", \">=\", \"<=\"]);\n\n                if (operators.has(node.operator) && hasSameTokens(node.left, node.right)) {\n                    context.report({ node, messageId: \"comparingToSelf\" });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,4DADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,eAAe,EAAE;IADX;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IAEA;AACR;AACA;AACA;AACA;AACA;;IACQ,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;MACjC,MAAMC,OAAO,GAAGL,UAAU,CAACM,SAAX,CAAqBH,KAArB,CAAhB;MACA,MAAMI,OAAO,GAAGP,UAAU,CAACM,SAAX,CAAqBF,KAArB,CAAhB;MAEA,OAAOC,OAAO,CAACG,MAAR,KAAmBD,OAAO,CAACC,MAA3B,IACHH,OAAO,CAACI,KAAR,CAAc,CAACC,KAAD,EAAQC,KAAR,KAAkBD,KAAK,CAACrB,IAAN,KAAekB,OAAO,CAACI,KAAD,CAAP,CAAetB,IAA9B,IAAsCqB,KAAK,CAACE,KAAN,KAAgBL,OAAO,CAACI,KAAD,CAAP,CAAeC,KAArG,CADJ;IAEH;;IAED,OAAO;MAEHC,gBAAgB,CAACC,IAAD,EAAO;QACnB,MAAMC,SAAS,GAAG,IAAIC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,IAArB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,IAArC,EAA2C,IAA3C,CAAR,CAAlB;;QAEA,IAAID,SAAS,CAACE,GAAV,CAAcH,IAAI,CAACI,QAAnB,KAAgChB,aAAa,CAACY,IAAI,CAACK,IAAN,EAAYL,IAAI,CAACM,KAAjB,CAAjD,EAA0E;UACtErB,OAAO,CAACsB,MAAR,CAAe;YAAEP,IAAF;YAAQQ,SAAS,EAAE;UAAnB,CAAf;QACH;MACJ;;IARE,CAAP;EAWH;;AA9CY,CAAjB"},"metadata":{},"sourceType":"script"}