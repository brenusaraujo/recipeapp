{"ast":null,"code":"/**\n * @fileoverview Rule to disallow returning values from Promise executor functions\n * @author Milos Djermanovic\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n  findVariable\n} = require(\"eslint-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst functionTypesToCheck = new Set([\"ArrowFunctionExpression\", \"FunctionExpression\"]);\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\n\nfunction isGlobalReference(node, scope) {\n  const variable = findVariable(scope, node);\n  return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\n\n\nfunction getOuterScope(scope) {\n  const upper = scope.upper;\n\n  if (upper.type === \"function-expression-name\") {\n    return upper.upper;\n  }\n\n  return upper;\n}\n/**\n * Determines whether the given function node is used as a Promise executor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Function's own scope.\n * @returns {boolean} `true` if the node is a Promise executor.\n */\n\n\nfunction isPromiseExecutor(node, scope) {\n  const parent = node.parent;\n  return parent.type === \"NewExpression\" && parent.arguments[0] === node && parent.callee.type === \"Identifier\" && parent.callee.name === \"Promise\" && isGlobalReference(parent.callee, getOuterScope(scope));\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow returning values from Promise executor functions\",\n      category: \"Possible Errors\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-promise-executor-return\"\n    },\n    schema: [],\n    messages: {\n      returnsValue: \"Return values from promise executor functions cannot be read.\"\n    }\n  },\n\n  create(context) {\n    let funcInfo = null;\n    /**\n     * Reports the given node.\n     * @param {ASTNode} node Node to report.\n     * @returns {void}\n     */\n\n    function report(node) {\n      context.report({\n        node,\n        messageId: \"returnsValue\"\n      });\n    }\n\n    return {\n      onCodePathStart(_, node) {\n        funcInfo = {\n          upper: funcInfo,\n          shouldCheck: functionTypesToCheck.has(node.type) && isPromiseExecutor(node, context.getScope())\n        };\n\n        if (funcInfo.shouldCheck && node.type === \"ArrowFunctionExpression\" && node.expression) {\n          report(node.body);\n        }\n      },\n\n      onCodePathEnd() {\n        funcInfo = funcInfo.upper;\n      },\n\n      ReturnStatement(node) {\n        if (funcInfo.shouldCheck && node.argument) {\n          report(node);\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["findVariable","require","functionTypesToCheck","Set","isGlobalReference","node","scope","variable","type","defs","length","getOuterScope","upper","isPromiseExecutor","parent","arguments","callee","name","module","exports","meta","docs","description","category","recommended","url","schema","messages","returnsValue","create","context","funcInfo","report","messageId","onCodePathStart","_","shouldCheck","has","getScope","expression","body","onCodePathEnd","ReturnStatement","argument"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-promise-executor-return.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow returning values from Promise executor functions\n * @author Milos Djermanovic\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst { findVariable } = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst functionTypesToCheck = new Set([\"ArrowFunctionExpression\", \"FunctionExpression\"]);\n\n/**\n * Determines whether the given identifier node is a reference to a global variable.\n * @param {ASTNode} node `Identifier` node to check.\n * @param {Scope} scope Scope to which the node belongs.\n * @returns {boolean} True if the identifier is a reference to a global variable.\n */\nfunction isGlobalReference(node, scope) {\n    const variable = findVariable(scope, node);\n\n    return variable !== null && variable.scope.type === \"global\" && variable.defs.length === 0;\n}\n\n/**\n * Finds function's outer scope.\n * @param {Scope} scope Function's own scope.\n * @returns {Scope} Function's outer scope.\n */\nfunction getOuterScope(scope) {\n    const upper = scope.upper;\n\n    if (upper.type === \"function-expression-name\") {\n        return upper.upper;\n    }\n    return upper;\n}\n\n/**\n * Determines whether the given function node is used as a Promise executor.\n * @param {ASTNode} node The node to check.\n * @param {Scope} scope Function's own scope.\n * @returns {boolean} `true` if the node is a Promise executor.\n */\nfunction isPromiseExecutor(node, scope) {\n    const parent = node.parent;\n\n    return parent.type === \"NewExpression\" &&\n        parent.arguments[0] === node &&\n        parent.callee.type === \"Identifier\" &&\n        parent.callee.name === \"Promise\" &&\n        isGlobalReference(parent.callee, getOuterScope(scope));\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow returning values from Promise executor functions\",\n            category: \"Possible Errors\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-promise-executor-return\"\n        },\n\n        schema: [],\n\n        messages: {\n            returnsValue: \"Return values from promise executor functions cannot be read.\"\n        }\n    },\n\n    create(context) {\n\n        let funcInfo = null;\n\n        /**\n         * Reports the given node.\n         * @param {ASTNode} node Node to report.\n         * @returns {void}\n         */\n        function report(node) {\n            context.report({ node, messageId: \"returnsValue\" });\n        }\n\n        return {\n\n            onCodePathStart(_, node) {\n                funcInfo = {\n                    upper: funcInfo,\n                    shouldCheck: functionTypesToCheck.has(node.type) && isPromiseExecutor(node, context.getScope())\n                };\n\n                if (funcInfo.shouldCheck && node.type === \"ArrowFunctionExpression\" && node.expression) {\n                    report(node.body);\n                }\n            },\n\n            onCodePathEnd() {\n                funcInfo = funcInfo.upper;\n            },\n\n            ReturnStatement(node) {\n                if (funcInfo.shouldCheck && node.argument) {\n                    report(node);\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAM;EAAEA;AAAF,IAAmBC,OAAO,CAAC,cAAD,CAAhC,C,CAEA;AACA;AACA;;;AAEA,MAAMC,oBAAoB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,yBAAD,EAA4B,oBAA5B,CAAR,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;EACpC,MAAMC,QAAQ,GAAGP,YAAY,CAACM,KAAD,EAAQD,IAAR,CAA7B;EAEA,OAAOE,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAACD,KAAT,CAAeE,IAAf,KAAwB,QAA7C,IAAyDD,QAAQ,CAACE,IAAT,CAAcC,MAAd,KAAyB,CAAzF;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBL,KAAvB,EAA8B;EAC1B,MAAMM,KAAK,GAAGN,KAAK,CAACM,KAApB;;EAEA,IAAIA,KAAK,CAACJ,IAAN,KAAe,0BAAnB,EAA+C;IAC3C,OAAOI,KAAK,CAACA,KAAb;EACH;;EACD,OAAOA,KAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,iBAAT,CAA2BR,IAA3B,EAAiCC,KAAjC,EAAwC;EACpC,MAAMQ,MAAM,GAAGT,IAAI,CAACS,MAApB;EAEA,OAAOA,MAAM,CAACN,IAAP,KAAgB,eAAhB,IACHM,MAAM,CAACC,SAAP,CAAiB,CAAjB,MAAwBV,IADrB,IAEHS,MAAM,CAACE,MAAP,CAAcR,IAAd,KAAuB,YAFpB,IAGHM,MAAM,CAACE,MAAP,CAAcC,IAAd,KAAuB,SAHpB,IAIHb,iBAAiB,CAACU,MAAM,CAACE,MAAR,EAAgBL,aAAa,CAACL,KAAD,CAA7B,CAJrB;AAKH,C,CAED;AACA;AACA;;;AAEAY,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFZ,IAAI,EAAE,SADJ;IAGFa,IAAI,EAAE;MACFC,WAAW,EAAE,2DADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,YAAY,EAAE;IADR;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,IAAIC,QAAQ,GAAG,IAAf;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASC,MAAT,CAAgB3B,IAAhB,EAAsB;MAClByB,OAAO,CAACE,MAAR,CAAe;QAAE3B,IAAF;QAAQ4B,SAAS,EAAE;MAAnB,CAAf;IACH;;IAED,OAAO;MAEHC,eAAe,CAACC,CAAD,EAAI9B,IAAJ,EAAU;QACrB0B,QAAQ,GAAG;UACPnB,KAAK,EAAEmB,QADA;UAEPK,WAAW,EAAElC,oBAAoB,CAACmC,GAArB,CAAyBhC,IAAI,CAACG,IAA9B,KAAuCK,iBAAiB,CAACR,IAAD,EAAOyB,OAAO,CAACQ,QAAR,EAAP;QAF9D,CAAX;;QAKA,IAAIP,QAAQ,CAACK,WAAT,IAAwB/B,IAAI,CAACG,IAAL,KAAc,yBAAtC,IAAmEH,IAAI,CAACkC,UAA5E,EAAwF;UACpFP,MAAM,CAAC3B,IAAI,CAACmC,IAAN,CAAN;QACH;MACJ,CAXE;;MAaHC,aAAa,GAAG;QACZV,QAAQ,GAAGA,QAAQ,CAACnB,KAApB;MACH,CAfE;;MAiBH8B,eAAe,CAACrC,IAAD,EAAO;QAClB,IAAI0B,QAAQ,CAACK,WAAT,IAAwB/B,IAAI,CAACsC,QAAjC,EAA2C;UACvCX,MAAM,CAAC3B,IAAD,CAAN;QACH;MACJ;;IArBE,CAAP;EAuBH;;AAtDY,CAAjB"},"metadata":{},"sourceType":"script"}