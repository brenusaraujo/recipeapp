{"ast":null,"code":"/**\n * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`.\n * @author Toru Nagashima\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.call()`/`.apply()`.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.call()`/`.apply()`.\n */\n\n\nfunction isCallOrNonVariadicApply(node) {\n  const callee = astUtils.skipChainExpression(node.callee);\n  return callee.type === \"MemberExpression\" && callee.property.type === \"Identifier\" && callee.computed === false && (callee.property.name === \"call\" && node.arguments.length >= 1 || callee.property.name === \"apply\" && node.arguments.length === 2 && node.arguments[1].type === \"ArrayExpression\");\n}\n/**\n * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.call()`/`.apply()`.\n * @param {SourceCode} sourceCode The ESLint source code object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n */\n\n\nfunction isValidThisArg(expectedThis, thisArg, sourceCode) {\n  if (!expectedThis) {\n    return astUtils.isNullOrUndefined(thisArg);\n  }\n\n  return astUtils.equalTokens(expectedThis, thisArg, sourceCode);\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary calls to `.call()` and `.apply()`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-useless-call\"\n    },\n    schema: [],\n    messages: {\n      unnecessaryCall: \"Unnecessary '.{{name}}()'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      CallExpression(node) {\n        if (!isCallOrNonVariadicApply(node)) {\n          return;\n        }\n\n        const callee = astUtils.skipChainExpression(node.callee);\n        const applied = astUtils.skipChainExpression(callee.object);\n        const expectedThis = applied.type === \"MemberExpression\" ? applied.object : null;\n        const thisArg = node.arguments[0];\n\n        if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n          context.report({\n            node,\n            messageId: \"unnecessaryCall\",\n            data: {\n              name: callee.property.name\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","isCallOrNonVariadicApply","node","callee","skipChainExpression","type","property","computed","name","arguments","length","isValidThisArg","expectedThis","thisArg","sourceCode","isNullOrUndefined","equalTokens","module","exports","meta","docs","description","category","recommended","url","schema","messages","unnecessaryCall","create","context","getSourceCode","CallExpression","applied","object","report","messageId","data"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-useless-call.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow unnecessary `.call()` and `.apply()`.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a `.call()`/`.apply()`.\n * @param {ASTNode} node A CallExpression node to check.\n * @returns {boolean} Whether or not the node is a `.call()`/`.apply()`.\n */\nfunction isCallOrNonVariadicApply(node) {\n    const callee = astUtils.skipChainExpression(node.callee);\n\n    return (\n        callee.type === \"MemberExpression\" &&\n        callee.property.type === \"Identifier\" &&\n        callee.computed === false &&\n        (\n            (callee.property.name === \"call\" && node.arguments.length >= 1) ||\n            (callee.property.name === \"apply\" && node.arguments.length === 2 && node.arguments[1].type === \"ArrayExpression\")\n        )\n    );\n}\n\n\n/**\n * Checks whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n * @param {ASTNode|null} expectedThis The node that is the owner of the applied function.\n * @param {ASTNode} thisArg The node that is given to the first argument of the `.call()`/`.apply()`.\n * @param {SourceCode} sourceCode The ESLint source code object.\n * @returns {boolean} Whether or not `thisArg` is not changed by `.call()`/`.apply()`.\n */\nfunction isValidThisArg(expectedThis, thisArg, sourceCode) {\n    if (!expectedThis) {\n        return astUtils.isNullOrUndefined(thisArg);\n    }\n    return astUtils.equalTokens(expectedThis, thisArg, sourceCode);\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary calls to `.call()` and `.apply()`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-useless-call\"\n        },\n\n        schema: [],\n\n        messages: {\n            unnecessaryCall: \"Unnecessary '.{{name}}()'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n            CallExpression(node) {\n                if (!isCallOrNonVariadicApply(node)) {\n                    return;\n                }\n\n                const callee = astUtils.skipChainExpression(node.callee);\n                const applied = astUtils.skipChainExpression(callee.object);\n                const expectedThis = (applied.type === \"MemberExpression\") ? applied.object : null;\n                const thisArg = node.arguments[0];\n\n                if (isValidThisArg(expectedThis, thisArg, sourceCode)) {\n                    context.report({ node, messageId: \"unnecessaryCall\", data: { name: callee.property.name } });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,wBAAT,CAAkCC,IAAlC,EAAwC;EACpC,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,mBAAT,CAA6BF,IAAI,CAACC,MAAlC,CAAf;EAEA,OACIA,MAAM,CAACE,IAAP,KAAgB,kBAAhB,IACAF,MAAM,CAACG,QAAP,CAAgBD,IAAhB,KAAyB,YADzB,IAEAF,MAAM,CAACI,QAAP,KAAoB,KAFpB,KAIKJ,MAAM,CAACG,QAAP,CAAgBE,IAAhB,KAAyB,MAAzB,IAAmCN,IAAI,CAACO,SAAL,CAAeC,MAAf,IAAyB,CAA7D,IACCP,MAAM,CAACG,QAAP,CAAgBE,IAAhB,KAAyB,OAAzB,IAAoCN,IAAI,CAACO,SAAL,CAAeC,MAAf,KAA0B,CAA9D,IAAmER,IAAI,CAACO,SAAL,CAAe,CAAf,EAAkBJ,IAAlB,KAA2B,iBALnG,CADJ;AASH;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,cAAT,CAAwBC,YAAxB,EAAsCC,OAAtC,EAA+CC,UAA/C,EAA2D;EACvD,IAAI,CAACF,YAAL,EAAmB;IACf,OAAOb,QAAQ,CAACgB,iBAAT,CAA2BF,OAA3B,CAAP;EACH;;EACD,OAAOd,QAAQ,CAACiB,WAAT,CAAqBJ,YAArB,EAAmCC,OAAnC,EAA4CC,UAA5C,CAAP;AACH,C,CAED;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFd,IAAI,EAAE,YADJ;IAGFe,IAAI,EAAE;MACFC,WAAW,EAAE,wDADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,eAAe,EAAE;IADX;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMf,UAAU,GAAGe,OAAO,CAACC,aAAR,EAAnB;IAEA,OAAO;MACHC,cAAc,CAAC7B,IAAD,EAAO;QACjB,IAAI,CAACD,wBAAwB,CAACC,IAAD,CAA7B,EAAqC;UACjC;QACH;;QAED,MAAMC,MAAM,GAAGJ,QAAQ,CAACK,mBAAT,CAA6BF,IAAI,CAACC,MAAlC,CAAf;QACA,MAAM6B,OAAO,GAAGjC,QAAQ,CAACK,mBAAT,CAA6BD,MAAM,CAAC8B,MAApC,CAAhB;QACA,MAAMrB,YAAY,GAAIoB,OAAO,CAAC3B,IAAR,KAAiB,kBAAlB,GAAwC2B,OAAO,CAACC,MAAhD,GAAyD,IAA9E;QACA,MAAMpB,OAAO,GAAGX,IAAI,CAACO,SAAL,CAAe,CAAf,CAAhB;;QAEA,IAAIE,cAAc,CAACC,YAAD,EAAeC,OAAf,EAAwBC,UAAxB,CAAlB,EAAuD;UACnDe,OAAO,CAACK,MAAR,CAAe;YAAEhC,IAAF;YAAQiC,SAAS,EAAE,iBAAnB;YAAsCC,IAAI,EAAE;cAAE5B,IAAI,EAAEL,MAAM,CAACG,QAAP,CAAgBE;YAAxB;UAA5C,CAAf;QACH;MACJ;;IAdE,CAAP;EAgBH;;AArCY,CAAjB"},"metadata":{},"sourceType":"script"}