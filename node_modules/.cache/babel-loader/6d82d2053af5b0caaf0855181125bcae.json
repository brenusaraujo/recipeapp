{"ast":null,"code":"/**\n * @fileoverview Specify the maximum number of statements allowed per line.\n * @author Kenneth Williams\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce a maximum number of statements allowed per line\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/max-statements-per-line\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        max: {\n          type: \"integer\",\n          minimum: 1,\n          default: 1\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      exceed: \"This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(),\n          options = context.options[0] || {},\n          maxStatementsPerLine = typeof options.max !== \"undefined\" ? options.max : 1;\n    let lastStatementLine = 0,\n        numberOfStatementsOnThisLine = 0,\n        firstExtraStatement; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    const SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/u;\n    /**\n     * Reports with the first extra statement, and clears it.\n     * @returns {void}\n     */\n\n    function reportFirstExtraStatementAndClear() {\n      if (firstExtraStatement) {\n        context.report({\n          node: firstExtraStatement,\n          messageId: \"exceed\",\n          data: {\n            numberOfStatementsOnThisLine,\n            maxStatementsPerLine,\n            statements: numberOfStatementsOnThisLine === 1 ? \"statement\" : \"statements\"\n          }\n        });\n      }\n\n      firstExtraStatement = null;\n    }\n    /**\n     * Gets the actual last token of a given node.\n     * @param {ASTNode} node A node to get. This is a node except EmptyStatement.\n     * @returns {Token} The actual last token.\n     */\n\n\n    function getActualLastToken(node) {\n      return sourceCode.getLastToken(node, astUtils.isNotSemicolonToken);\n    }\n    /**\n     * Addresses a given node.\n     * It updates the state of this rule, then reports the node if the node violated this rule.\n     * @param {ASTNode} node A node to check.\n     * @returns {void}\n     */\n\n\n    function enterStatement(node) {\n      const line = node.loc.start.line;\n      /*\n       * Skip to allow non-block statements if this is direct child of control statements.\n       * `if (a) foo();` is counted as 1.\n       * But `if (a) foo(); else foo();` should be counted as 2.\n       */\n\n      if (SINGLE_CHILD_ALLOWED.test(node.parent.type) && node.parent.alternate !== node) {\n        return;\n      } // Update state.\n\n\n      if (line === lastStatementLine) {\n        numberOfStatementsOnThisLine += 1;\n      } else {\n        reportFirstExtraStatementAndClear();\n        numberOfStatementsOnThisLine = 1;\n        lastStatementLine = line;\n      } // Reports if the node violated this rule.\n\n\n      if (numberOfStatementsOnThisLine === maxStatementsPerLine + 1) {\n        firstExtraStatement = firstExtraStatement || node;\n      }\n    }\n    /**\n     * Updates the state of this rule with the end line of leaving node to check with the next statement.\n     * @param {ASTNode} node A node to check.\n     * @returns {void}\n     */\n\n\n    function leaveStatement(node) {\n      const line = getActualLastToken(node).loc.end.line; // Update state.\n\n      if (line !== lastStatementLine) {\n        reportFirstExtraStatementAndClear();\n        numberOfStatementsOnThisLine = 1;\n        lastStatementLine = line;\n      }\n    } //--------------------------------------------------------------------------\n    // Public API\n    //--------------------------------------------------------------------------\n\n\n    return {\n      BreakStatement: enterStatement,\n      ClassDeclaration: enterStatement,\n      ContinueStatement: enterStatement,\n      DebuggerStatement: enterStatement,\n      DoWhileStatement: enterStatement,\n      ExpressionStatement: enterStatement,\n      ForInStatement: enterStatement,\n      ForOfStatement: enterStatement,\n      ForStatement: enterStatement,\n      FunctionDeclaration: enterStatement,\n      IfStatement: enterStatement,\n      ImportDeclaration: enterStatement,\n      LabeledStatement: enterStatement,\n      ReturnStatement: enterStatement,\n      SwitchStatement: enterStatement,\n      ThrowStatement: enterStatement,\n      TryStatement: enterStatement,\n      VariableDeclaration: enterStatement,\n      WhileStatement: enterStatement,\n      WithStatement: enterStatement,\n      ExportNamedDeclaration: enterStatement,\n      ExportDefaultDeclaration: enterStatement,\n      ExportAllDeclaration: enterStatement,\n      \"BreakStatement:exit\": leaveStatement,\n      \"ClassDeclaration:exit\": leaveStatement,\n      \"ContinueStatement:exit\": leaveStatement,\n      \"DebuggerStatement:exit\": leaveStatement,\n      \"DoWhileStatement:exit\": leaveStatement,\n      \"ExpressionStatement:exit\": leaveStatement,\n      \"ForInStatement:exit\": leaveStatement,\n      \"ForOfStatement:exit\": leaveStatement,\n      \"ForStatement:exit\": leaveStatement,\n      \"FunctionDeclaration:exit\": leaveStatement,\n      \"IfStatement:exit\": leaveStatement,\n      \"ImportDeclaration:exit\": leaveStatement,\n      \"LabeledStatement:exit\": leaveStatement,\n      \"ReturnStatement:exit\": leaveStatement,\n      \"SwitchStatement:exit\": leaveStatement,\n      \"ThrowStatement:exit\": leaveStatement,\n      \"TryStatement:exit\": leaveStatement,\n      \"VariableDeclaration:exit\": leaveStatement,\n      \"WhileStatement:exit\": leaveStatement,\n      \"WithStatement:exit\": leaveStatement,\n      \"ExportNamedDeclaration:exit\": leaveStatement,\n      \"ExportDefaultDeclaration:exit\": leaveStatement,\n      \"ExportAllDeclaration:exit\": leaveStatement,\n      \"Program:exit\": reportFirstExtraStatementAndClear\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","max","minimum","default","additionalProperties","messages","exceed","create","context","sourceCode","getSourceCode","options","maxStatementsPerLine","lastStatementLine","numberOfStatementsOnThisLine","firstExtraStatement","SINGLE_CHILD_ALLOWED","reportFirstExtraStatementAndClear","report","node","messageId","data","statements","getActualLastToken","getLastToken","isNotSemicolonToken","enterStatement","line","loc","start","test","parent","alternate","leaveStatement","end","BreakStatement","ClassDeclaration","ContinueStatement","DebuggerStatement","DoWhileStatement","ExpressionStatement","ForInStatement","ForOfStatement","ForStatement","FunctionDeclaration","IfStatement","ImportDeclaration","LabeledStatement","ReturnStatement","SwitchStatement","ThrowStatement","TryStatement","VariableDeclaration","WhileStatement","WithStatement","ExportNamedDeclaration","ExportDefaultDeclaration","ExportAllDeclaration"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/max-statements-per-line.js"],"sourcesContent":["/**\n * @fileoverview Specify the maximum number of statements allowed per line.\n * @author Kenneth Williams\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce a maximum number of statements allowed per line\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/max-statements-per-line\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    max: {\n                        type: \"integer\",\n                        minimum: 1,\n                        default: 1\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            exceed: \"This line has {{numberOfStatementsOnThisLine}} {{statements}}. Maximum allowed is {{maxStatementsPerLine}}.\"\n        }\n    },\n\n    create(context) {\n\n        const sourceCode = context.getSourceCode(),\n            options = context.options[0] || {},\n            maxStatementsPerLine = typeof options.max !== \"undefined\" ? options.max : 1;\n\n        let lastStatementLine = 0,\n            numberOfStatementsOnThisLine = 0,\n            firstExtraStatement;\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        const SINGLE_CHILD_ALLOWED = /^(?:(?:DoWhile|For|ForIn|ForOf|If|Labeled|While)Statement|Export(?:Default|Named)Declaration)$/u;\n\n        /**\n         * Reports with the first extra statement, and clears it.\n         * @returns {void}\n         */\n        function reportFirstExtraStatementAndClear() {\n            if (firstExtraStatement) {\n                context.report({\n                    node: firstExtraStatement,\n                    messageId: \"exceed\",\n                    data: {\n                        numberOfStatementsOnThisLine,\n                        maxStatementsPerLine,\n                        statements: numberOfStatementsOnThisLine === 1 ? \"statement\" : \"statements\"\n                    }\n                });\n            }\n            firstExtraStatement = null;\n        }\n\n        /**\n         * Gets the actual last token of a given node.\n         * @param {ASTNode} node A node to get. This is a node except EmptyStatement.\n         * @returns {Token} The actual last token.\n         */\n        function getActualLastToken(node) {\n            return sourceCode.getLastToken(node, astUtils.isNotSemicolonToken);\n        }\n\n        /**\n         * Addresses a given node.\n         * It updates the state of this rule, then reports the node if the node violated this rule.\n         * @param {ASTNode} node A node to check.\n         * @returns {void}\n         */\n        function enterStatement(node) {\n            const line = node.loc.start.line;\n\n            /*\n             * Skip to allow non-block statements if this is direct child of control statements.\n             * `if (a) foo();` is counted as 1.\n             * But `if (a) foo(); else foo();` should be counted as 2.\n             */\n            if (SINGLE_CHILD_ALLOWED.test(node.parent.type) &&\n                node.parent.alternate !== node\n            ) {\n                return;\n            }\n\n            // Update state.\n            if (line === lastStatementLine) {\n                numberOfStatementsOnThisLine += 1;\n            } else {\n                reportFirstExtraStatementAndClear();\n                numberOfStatementsOnThisLine = 1;\n                lastStatementLine = line;\n            }\n\n            // Reports if the node violated this rule.\n            if (numberOfStatementsOnThisLine === maxStatementsPerLine + 1) {\n                firstExtraStatement = firstExtraStatement || node;\n            }\n        }\n\n        /**\n         * Updates the state of this rule with the end line of leaving node to check with the next statement.\n         * @param {ASTNode} node A node to check.\n         * @returns {void}\n         */\n        function leaveStatement(node) {\n            const line = getActualLastToken(node).loc.end.line;\n\n            // Update state.\n            if (line !== lastStatementLine) {\n                reportFirstExtraStatementAndClear();\n                numberOfStatementsOnThisLine = 1;\n                lastStatementLine = line;\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public API\n        //--------------------------------------------------------------------------\n\n        return {\n            BreakStatement: enterStatement,\n            ClassDeclaration: enterStatement,\n            ContinueStatement: enterStatement,\n            DebuggerStatement: enterStatement,\n            DoWhileStatement: enterStatement,\n            ExpressionStatement: enterStatement,\n            ForInStatement: enterStatement,\n            ForOfStatement: enterStatement,\n            ForStatement: enterStatement,\n            FunctionDeclaration: enterStatement,\n            IfStatement: enterStatement,\n            ImportDeclaration: enterStatement,\n            LabeledStatement: enterStatement,\n            ReturnStatement: enterStatement,\n            SwitchStatement: enterStatement,\n            ThrowStatement: enterStatement,\n            TryStatement: enterStatement,\n            VariableDeclaration: enterStatement,\n            WhileStatement: enterStatement,\n            WithStatement: enterStatement,\n            ExportNamedDeclaration: enterStatement,\n            ExportDefaultDeclaration: enterStatement,\n            ExportAllDeclaration: enterStatement,\n\n            \"BreakStatement:exit\": leaveStatement,\n            \"ClassDeclaration:exit\": leaveStatement,\n            \"ContinueStatement:exit\": leaveStatement,\n            \"DebuggerStatement:exit\": leaveStatement,\n            \"DoWhileStatement:exit\": leaveStatement,\n            \"ExpressionStatement:exit\": leaveStatement,\n            \"ForInStatement:exit\": leaveStatement,\n            \"ForOfStatement:exit\": leaveStatement,\n            \"ForStatement:exit\": leaveStatement,\n            \"FunctionDeclaration:exit\": leaveStatement,\n            \"IfStatement:exit\": leaveStatement,\n            \"ImportDeclaration:exit\": leaveStatement,\n            \"LabeledStatement:exit\": leaveStatement,\n            \"ReturnStatement:exit\": leaveStatement,\n            \"SwitchStatement:exit\": leaveStatement,\n            \"ThrowStatement:exit\": leaveStatement,\n            \"TryStatement:exit\": leaveStatement,\n            \"VariableDeclaration:exit\": leaveStatement,\n            \"WhileStatement:exit\": leaveStatement,\n            \"WithStatement:exit\": leaveStatement,\n            \"ExportNamedDeclaration:exit\": leaveStatement,\n            \"ExportDefaultDeclaration:exit\": leaveStatement,\n            \"ExportAllDeclaration:exit\": leaveStatement,\n            \"Program:exit\": reportFirstExtraStatementAndClear\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}