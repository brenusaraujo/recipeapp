{"ast":null,"code":"'use strict';\n\nvar common = require('../common');\n\nvar Type = require('../type');\n\nvar YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers\n'^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2\n// special case, seems not from spec\n'|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // 20:59\n'|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*' + // .inf\n'|[-+]?\\\\.(?:inf|Inf|INF)' + // .nan\n'|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`\n  // Probably should update regexp & check speed\n  data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign, base, digits;\n  value = data.replace(/_/g, '').toLowerCase();\n  sign = value[0] === '-' ? -1 : 1;\n  digits = [];\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  } else if (value === '.nan') {\n    return NaN;\n  } else if (value.indexOf(':') >= 0) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseFloat(v, 10));\n    });\n    value = 0.0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n\n  return sign * parseFloat(value, 10);\n}\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase':\n        return '.nan';\n\n      case 'uppercase':\n        return '.NAN';\n\n      case 'camelcase':\n        return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '.inf';\n\n      case 'uppercase':\n        return '.INF';\n\n      case 'camelcase':\n        return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '-.inf';\n\n      case 'uppercase':\n        return '-.INF';\n\n      case 'camelcase':\n        return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});","map":{"version":3,"names":["common","require","Type","YAML_FLOAT_PATTERN","RegExp","resolveYamlFloat","data","test","length","constructYamlFloat","value","sign","base","digits","replace","toLowerCase","indexOf","slice","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","NaN","split","forEach","v","unshift","parseFloat","d","SCIENTIFIC_WITHOUT_DOT","representYamlFloat","object","style","res","isNaN","isNegativeZero","toString","isFloat","Object","prototype","call","module","exports","kind","resolve","construct","predicate","represent","defaultStyle"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/js-yaml/lib/js-yaml/type/float.js"],"sourcesContent":["'use strict';\n\nvar common = require('../common');\nvar Type   = require('../type');\n\nvar YAML_FLOAT_PATTERN = new RegExp(\n  // 2.5e4, 2.5 and integers\n  '^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n  // .2e4, .2\n  // special case, seems not from spec\n  '|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n  // 20:59\n  '|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*' +\n  // .inf\n  '|[-+]?\\\\.(?:inf|Inf|INF)' +\n  // .nan\n  '|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) ||\n      // Quick hack to not allow integers end with `_`\n      // Probably should update regexp & check speed\n      data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign, base, digits;\n\n  value  = data.replace(/_/g, '').toLowerCase();\n  sign   = value[0] === '-' ? -1 : 1;\n  digits = [];\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return (sign === 1) ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n\n  } else if (value === '.nan') {\n    return NaN;\n\n  } else if (value.indexOf(':') >= 0) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseFloat(v, 10));\n    });\n\n    value = 0.0;\n    base = 1;\n\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n\n    return sign * value;\n\n  }\n  return sign * parseFloat(value, 10);\n}\n\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase': return '.nan';\n      case 'uppercase': return '.NAN';\n      case 'camelcase': return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '.inf';\n      case 'uppercase': return '.INF';\n      case 'camelcase': return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase': return '-.inf';\n      case 'uppercase': return '-.INF';\n      case 'camelcase': return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10);\n\n  // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return (Object.prototype.toString.call(object) === '[object Number]') &&\n         (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}