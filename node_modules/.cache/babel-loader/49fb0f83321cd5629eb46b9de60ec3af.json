{"ast":null,"code":"/**\n * @fileoverview Tracks performance of individual rules.\n * @author Brandon Mills\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n\n/**\n * Align the string to left\n * @param {string} str string to evaluate\n * @param {int} len length of the string\n * @param {string} ch delimiter character\n * @returns {string} modified string\n * @private\n */\n\nfunction alignLeft(str, len, ch) {\n  return str + new Array(len - str.length + 1).join(ch || \" \");\n}\n/* istanbul ignore next */\n\n/**\n * Align the string to right\n * @param {string} str string to evaluate\n * @param {int} len length of the string\n * @param {string} ch delimiter character\n * @returns {string} modified string\n * @private\n */\n\n\nfunction alignRight(str, len, ch) {\n  return new Array(len - str.length + 1).join(ch || \" \") + str;\n} //------------------------------------------------------------------------------\n// Module definition\n//------------------------------------------------------------------------------\n\n\nconst enabled = !!process.env.TIMING;\nconst HEADERS = [\"Rule\", \"Time (ms)\", \"Relative\"];\nconst ALIGN = [alignLeft, alignRight, alignRight];\n/**\n * Decide how many rules to show in the output list.\n * @returns {number} the number of rules to show\n */\n\nfunction getListSize() {\n  const MINIMUM_SIZE = 10;\n\n  if (typeof process.env.TIMING !== \"string\") {\n    return MINIMUM_SIZE;\n  }\n\n  if (process.env.TIMING.toLowerCase() === \"all\") {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  const TIMING_ENV_VAR_AS_INTEGER = Number.parseInt(process.env.TIMING, 10);\n  return TIMING_ENV_VAR_AS_INTEGER > 10 ? TIMING_ENV_VAR_AS_INTEGER : MINIMUM_SIZE;\n}\n/* istanbul ignore next */\n\n/**\n * display the data\n * @param {Object} data Data object to be displayed\n * @returns {void} prints modified string with console.log\n * @private\n */\n\n\nfunction display(data) {\n  let total = 0;\n  const rows = Object.keys(data).map(key => {\n    const time = data[key];\n    total += time;\n    return [key, time];\n  }).sort((a, b) => b[1] - a[1]).slice(0, getListSize());\n  rows.forEach(row => {\n    row.push(`${(row[1] * 100 / total).toFixed(1)}%`);\n    row[1] = row[1].toFixed(3);\n  });\n  rows.unshift(HEADERS);\n  const widths = [];\n  rows.forEach(row => {\n    const len = row.length;\n\n    for (let i = 0; i < len; i++) {\n      const n = row[i].length;\n\n      if (!widths[i] || n > widths[i]) {\n        widths[i] = n;\n      }\n    }\n  });\n  const table = rows.map(row => row.map((cell, index) => ALIGN[index](cell, widths[index])).join(\" | \"));\n  table.splice(1, 0, widths.map((width, index) => {\n    const extraAlignment = index !== 0 && index !== widths.length - 1 ? 2 : 1;\n    return ALIGN[index](\":\", width + extraAlignment, \"-\");\n  }).join(\"|\"));\n  console.log(table.join(\"\\n\")); // eslint-disable-line no-console\n}\n/* istanbul ignore next */\n\n\nmodule.exports = function () {\n  const data = Object.create(null);\n  /**\n   * Time the run\n   * @param {*} key key from the data object\n   * @param {Function} fn function to be called\n   * @returns {Function} function to be executed\n   * @private\n   */\n\n  function time(key, fn) {\n    if (typeof data[key] === \"undefined\") {\n      data[key] = 0;\n    }\n\n    return function () {\n      let t = process.hrtime();\n      fn(...arguments);\n      t = process.hrtime(t);\n      data[key] += t[0] * 1e3 + t[1] / 1e6;\n    };\n  }\n\n  if (enabled) {\n    process.on(\"exit\", () => {\n      display(data);\n    });\n  }\n\n  return {\n    time,\n    enabled,\n    getListSize\n  };\n}();","map":{"version":3,"names":["alignLeft","str","len","ch","Array","length","join","alignRight","enabled","process","env","TIMING","HEADERS","ALIGN","getListSize","MINIMUM_SIZE","toLowerCase","Number","POSITIVE_INFINITY","TIMING_ENV_VAR_AS_INTEGER","parseInt","display","data","total","rows","Object","keys","map","key","time","sort","a","b","slice","forEach","row","push","toFixed","unshift","widths","i","n","table","cell","index","splice","width","extraAlignment","console","log","module","exports","create","fn","t","hrtime","on"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/linter/timing.js"],"sourcesContent":["/**\n * @fileoverview Tracks performance of individual rules.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n/**\n * Align the string to left\n * @param {string} str string to evaluate\n * @param {int} len length of the string\n * @param {string} ch delimiter character\n * @returns {string} modified string\n * @private\n */\nfunction alignLeft(str, len, ch) {\n    return str + new Array(len - str.length + 1).join(ch || \" \");\n}\n\n/* istanbul ignore next */\n/**\n * Align the string to right\n * @param {string} str string to evaluate\n * @param {int} len length of the string\n * @param {string} ch delimiter character\n * @returns {string} modified string\n * @private\n */\nfunction alignRight(str, len, ch) {\n    return new Array(len - str.length + 1).join(ch || \" \") + str;\n}\n\n//------------------------------------------------------------------------------\n// Module definition\n//------------------------------------------------------------------------------\n\nconst enabled = !!process.env.TIMING;\n\nconst HEADERS = [\"Rule\", \"Time (ms)\", \"Relative\"];\nconst ALIGN = [alignLeft, alignRight, alignRight];\n\n/**\n * Decide how many rules to show in the output list.\n * @returns {number} the number of rules to show\n */\nfunction getListSize() {\n    const MINIMUM_SIZE = 10;\n\n    if (typeof process.env.TIMING !== \"string\") {\n        return MINIMUM_SIZE;\n    }\n\n    if (process.env.TIMING.toLowerCase() === \"all\") {\n        return Number.POSITIVE_INFINITY;\n    }\n\n    const TIMING_ENV_VAR_AS_INTEGER = Number.parseInt(process.env.TIMING, 10);\n\n    return TIMING_ENV_VAR_AS_INTEGER > 10 ? TIMING_ENV_VAR_AS_INTEGER : MINIMUM_SIZE;\n}\n\n/* istanbul ignore next */\n/**\n * display the data\n * @param {Object} data Data object to be displayed\n * @returns {void} prints modified string with console.log\n * @private\n */\nfunction display(data) {\n    let total = 0;\n    const rows = Object.keys(data)\n        .map(key => {\n            const time = data[key];\n\n            total += time;\n            return [key, time];\n        })\n        .sort((a, b) => b[1] - a[1])\n        .slice(0, getListSize());\n\n    rows.forEach(row => {\n        row.push(`${(row[1] * 100 / total).toFixed(1)}%`);\n        row[1] = row[1].toFixed(3);\n    });\n\n    rows.unshift(HEADERS);\n\n    const widths = [];\n\n    rows.forEach(row => {\n        const len = row.length;\n\n        for (let i = 0; i < len; i++) {\n            const n = row[i].length;\n\n            if (!widths[i] || n > widths[i]) {\n                widths[i] = n;\n            }\n        }\n    });\n\n    const table = rows.map(row => (\n        row\n            .map((cell, index) => ALIGN[index](cell, widths[index]))\n            .join(\" | \")\n    ));\n\n    table.splice(1, 0, widths.map((width, index) => {\n        const extraAlignment = index !== 0 && index !== widths.length - 1 ? 2 : 1;\n\n        return ALIGN[index](\":\", width + extraAlignment, \"-\");\n    }).join(\"|\"));\n\n    console.log(table.join(\"\\n\")); // eslint-disable-line no-console\n}\n\n/* istanbul ignore next */\nmodule.exports = (function() {\n\n    const data = Object.create(null);\n\n    /**\n     * Time the run\n     * @param {*} key key from the data object\n     * @param {Function} fn function to be called\n     * @returns {Function} function to be executed\n     * @private\n     */\n    function time(key, fn) {\n        if (typeof data[key] === \"undefined\") {\n            data[key] = 0;\n        }\n\n        return function(...args) {\n            let t = process.hrtime();\n\n            fn(...args);\n            t = process.hrtime(t);\n            data[key] += t[0] * 1e3 + t[1] / 1e6;\n        };\n    }\n\n    if (enabled) {\n        process.on(\"exit\", () => {\n            display(data);\n        });\n    }\n\n    return {\n        time,\n        enabled,\n        getListSize\n    };\n\n}());\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}