{"ast":null,"code":"/**\n * @fileoverview Rule to check the spacing around the * in generator functions.\n * @author Jamund Ferguson\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst OVERRIDE_SCHEMA = {\n  oneOf: [{\n    enum: [\"before\", \"after\", \"both\", \"neither\"]\n  }, {\n    type: \"object\",\n    properties: {\n      before: {\n        type: \"boolean\"\n      },\n      after: {\n        type: \"boolean\"\n      }\n    },\n    additionalProperties: false\n  }]\n};\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing around `*` operators in generator functions\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/generator-star-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      oneOf: [{\n        enum: [\"before\", \"after\", \"both\", \"neither\"]\n      }, {\n        type: \"object\",\n        properties: {\n          before: {\n            type: \"boolean\"\n          },\n          after: {\n            type: \"boolean\"\n          },\n          named: OVERRIDE_SCHEMA,\n          anonymous: OVERRIDE_SCHEMA,\n          method: OVERRIDE_SCHEMA\n        },\n        additionalProperties: false\n      }]\n    }],\n    messages: {\n      missingBefore: \"Missing space before *.\",\n      missingAfter: \"Missing space after *.\",\n      unexpectedBefore: \"Unexpected space before *.\",\n      unexpectedAfter: \"Unexpected space after *.\"\n    }\n  },\n\n  create(context) {\n    const optionDefinitions = {\n      before: {\n        before: true,\n        after: false\n      },\n      after: {\n        before: false,\n        after: true\n      },\n      both: {\n        before: true,\n        after: true\n      },\n      neither: {\n        before: false,\n        after: false\n      }\n    };\n    /**\n     * Returns resolved option definitions based on an option and defaults\n     * @param {any} option The option object or string value\n     * @param {Object} defaults The defaults to use if options are not present\n     * @returns {Object} the resolved object definition\n     */\n\n    function optionToDefinition(option, defaults) {\n      if (!option) {\n        return defaults;\n      }\n\n      return typeof option === \"string\" ? optionDefinitions[option] : Object.assign({}, defaults, option);\n    }\n\n    const modes = function (option) {\n      const defaults = optionToDefinition(option, optionDefinitions.before);\n      return {\n        named: optionToDefinition(option.named, defaults),\n        anonymous: optionToDefinition(option.anonymous, defaults),\n        method: optionToDefinition(option.method, defaults)\n      };\n    }(context.options[0] || {});\n\n    const sourceCode = context.getSourceCode();\n    /**\n     * Checks if the given token is a star token or not.\n     * @param {Token} token The token to check.\n     * @returns {boolean} `true` if the token is a star token.\n     */\n\n    function isStarToken(token) {\n      return token.value === \"*\" && token.type === \"Punctuator\";\n    }\n    /**\n     * Gets the generator star token of the given function node.\n     * @param {ASTNode} node The function node to get.\n     * @returns {Token} Found star token.\n     */\n\n\n    function getStarToken(node) {\n      return sourceCode.getFirstToken(node.parent.method || node.parent.type === \"MethodDefinition\" ? node.parent : node, isStarToken);\n    }\n    /**\n     * capitalize a given string.\n     * @param {string} str the given string.\n     * @returns {string} the capitalized string.\n     */\n\n\n    function capitalize(str) {\n      return str[0].toUpperCase() + str.slice(1);\n    }\n    /**\n     * Checks the spacing between two tokens before or after the star token.\n     * @param {string} kind Either \"named\", \"anonymous\", or \"method\"\n     * @param {string} side Either \"before\" or \"after\".\n     * @param {Token} leftToken `function` keyword token if side is \"before\", or\n     *     star token if side is \"after\".\n     * @param {Token} rightToken Star token if side is \"before\", or identifier\n     *     token if side is \"after\".\n     * @returns {void}\n     */\n\n\n    function checkSpacing(kind, side, leftToken, rightToken) {\n      if (!!(rightToken.range[0] - leftToken.range[1]) !== modes[kind][side]) {\n        const after = leftToken.value === \"*\";\n        const spaceRequired = modes[kind][side];\n        const node = after ? leftToken : rightToken;\n        const messageId = `${spaceRequired ? \"missing\" : \"unexpected\"}${capitalize(side)}`;\n        context.report({\n          node,\n          messageId,\n\n          fix(fixer) {\n            if (spaceRequired) {\n              if (after) {\n                return fixer.insertTextAfter(node, \" \");\n              }\n\n              return fixer.insertTextBefore(node, \" \");\n            }\n\n            return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n          }\n\n        });\n      }\n    }\n    /**\n     * Enforces the spacing around the star if node is a generator function.\n     * @param {ASTNode} node A function expression or declaration node.\n     * @returns {void}\n     */\n\n\n    function checkFunction(node) {\n      if (!node.generator) {\n        return;\n      }\n\n      const starToken = getStarToken(node);\n      const prevToken = sourceCode.getTokenBefore(starToken);\n      const nextToken = sourceCode.getTokenAfter(starToken);\n      let kind = \"named\";\n\n      if (node.parent.type === \"MethodDefinition\" || node.parent.type === \"Property\" && node.parent.method) {\n        kind = \"method\";\n      } else if (!node.id) {\n        kind = \"anonymous\";\n      } // Only check before when preceded by `function`|`static` keyword\n\n\n      if (!(kind === \"method\" && starToken === sourceCode.getFirstToken(node.parent))) {\n        checkSpacing(kind, \"before\", prevToken, starToken);\n      }\n\n      checkSpacing(kind, \"after\", starToken, nextToken);\n    }\n\n    return {\n      FunctionDeclaration: checkFunction,\n      FunctionExpression: checkFunction\n    };\n  }\n\n};","map":{"version":3,"names":["OVERRIDE_SCHEMA","oneOf","enum","type","properties","before","after","additionalProperties","module","exports","meta","docs","description","category","recommended","url","fixable","schema","named","anonymous","method","messages","missingBefore","missingAfter","unexpectedBefore","unexpectedAfter","create","context","optionDefinitions","both","neither","optionToDefinition","option","defaults","Object","assign","modes","options","sourceCode","getSourceCode","isStarToken","token","value","getStarToken","node","getFirstToken","parent","capitalize","str","toUpperCase","slice","checkSpacing","kind","side","leftToken","rightToken","range","spaceRequired","messageId","report","fix","fixer","insertTextAfter","insertTextBefore","removeRange","checkFunction","generator","starToken","prevToken","getTokenBefore","nextToken","getTokenAfter","id","FunctionDeclaration","FunctionExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/generator-star-spacing.js"],"sourcesContent":["/**\n * @fileoverview Rule to check the spacing around the * in generator functions.\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst OVERRIDE_SCHEMA = {\n    oneOf: [\n        {\n            enum: [\"before\", \"after\", \"both\", \"neither\"]\n        },\n        {\n            type: \"object\",\n            properties: {\n                before: { type: \"boolean\" },\n                after: { type: \"boolean\" }\n            },\n            additionalProperties: false\n        }\n    ]\n};\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing around `*` operators in generator functions\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/generator-star-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                oneOf: [\n                    {\n                        enum: [\"before\", \"after\", \"both\", \"neither\"]\n                    },\n                    {\n                        type: \"object\",\n                        properties: {\n                            before: { type: \"boolean\" },\n                            after: { type: \"boolean\" },\n                            named: OVERRIDE_SCHEMA,\n                            anonymous: OVERRIDE_SCHEMA,\n                            method: OVERRIDE_SCHEMA\n                        },\n                        additionalProperties: false\n                    }\n                ]\n            }\n        ],\n\n        messages: {\n            missingBefore: \"Missing space before *.\",\n            missingAfter: \"Missing space after *.\",\n            unexpectedBefore: \"Unexpected space before *.\",\n            unexpectedAfter: \"Unexpected space after *.\"\n        }\n    },\n\n    create(context) {\n\n        const optionDefinitions = {\n            before: { before: true, after: false },\n            after: { before: false, after: true },\n            both: { before: true, after: true },\n            neither: { before: false, after: false }\n        };\n\n        /**\n         * Returns resolved option definitions based on an option and defaults\n         * @param {any} option The option object or string value\n         * @param {Object} defaults The defaults to use if options are not present\n         * @returns {Object} the resolved object definition\n         */\n        function optionToDefinition(option, defaults) {\n            if (!option) {\n                return defaults;\n            }\n\n            return typeof option === \"string\"\n                ? optionDefinitions[option]\n                : Object.assign({}, defaults, option);\n        }\n\n        const modes = (function(option) {\n            const defaults = optionToDefinition(option, optionDefinitions.before);\n\n            return {\n                named: optionToDefinition(option.named, defaults),\n                anonymous: optionToDefinition(option.anonymous, defaults),\n                method: optionToDefinition(option.method, defaults)\n            };\n        }(context.options[0] || {}));\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Checks if the given token is a star token or not.\n         * @param {Token} token The token to check.\n         * @returns {boolean} `true` if the token is a star token.\n         */\n        function isStarToken(token) {\n            return token.value === \"*\" && token.type === \"Punctuator\";\n        }\n\n        /**\n         * Gets the generator star token of the given function node.\n         * @param {ASTNode} node The function node to get.\n         * @returns {Token} Found star token.\n         */\n        function getStarToken(node) {\n            return sourceCode.getFirstToken(\n                (node.parent.method || node.parent.type === \"MethodDefinition\") ? node.parent : node,\n                isStarToken\n            );\n        }\n\n        /**\n         * capitalize a given string.\n         * @param {string} str the given string.\n         * @returns {string} the capitalized string.\n         */\n        function capitalize(str) {\n            return str[0].toUpperCase() + str.slice(1);\n        }\n\n        /**\n         * Checks the spacing between two tokens before or after the star token.\n         * @param {string} kind Either \"named\", \"anonymous\", or \"method\"\n         * @param {string} side Either \"before\" or \"after\".\n         * @param {Token} leftToken `function` keyword token if side is \"before\", or\n         *     star token if side is \"after\".\n         * @param {Token} rightToken Star token if side is \"before\", or identifier\n         *     token if side is \"after\".\n         * @returns {void}\n         */\n        function checkSpacing(kind, side, leftToken, rightToken) {\n            if (!!(rightToken.range[0] - leftToken.range[1]) !== modes[kind][side]) {\n                const after = leftToken.value === \"*\";\n                const spaceRequired = modes[kind][side];\n                const node = after ? leftToken : rightToken;\n                const messageId = `${spaceRequired ? \"missing\" : \"unexpected\"}${capitalize(side)}`;\n\n                context.report({\n                    node,\n                    messageId,\n                    fix(fixer) {\n                        if (spaceRequired) {\n                            if (after) {\n                                return fixer.insertTextAfter(node, \" \");\n                            }\n                            return fixer.insertTextBefore(node, \" \");\n                        }\n                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Enforces the spacing around the star if node is a generator function.\n         * @param {ASTNode} node A function expression or declaration node.\n         * @returns {void}\n         */\n        function checkFunction(node) {\n            if (!node.generator) {\n                return;\n            }\n\n            const starToken = getStarToken(node);\n            const prevToken = sourceCode.getTokenBefore(starToken);\n            const nextToken = sourceCode.getTokenAfter(starToken);\n\n            let kind = \"named\";\n\n            if (node.parent.type === \"MethodDefinition\" || (node.parent.type === \"Property\" && node.parent.method)) {\n                kind = \"method\";\n            } else if (!node.id) {\n                kind = \"anonymous\";\n            }\n\n            // Only check before when preceded by `function`|`static` keyword\n            if (!(kind === \"method\" && starToken === sourceCode.getFirstToken(node.parent))) {\n                checkSpacing(kind, \"before\", prevToken, starToken);\n            }\n\n            checkSpacing(kind, \"after\", starToken, nextToken);\n        }\n\n        return {\n            FunctionDeclaration: checkFunction,\n            FunctionExpression: checkFunction\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}