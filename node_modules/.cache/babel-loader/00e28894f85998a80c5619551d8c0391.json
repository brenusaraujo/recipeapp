{"ast":null,"code":"/**\n * @fileoverview Enforce spacing between rest and spread operators and their expressions.\n * @author Kai Cataldo\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce spacing between rest and spread operators and their expressions\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/rest-spread-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }],\n    messages: {\n      unexpectedWhitespace: \"Unexpected whitespace after {{type}} operator.\",\n      expectedWhitespace: \"Expected whitespace after {{type}} operator.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(),\n          alwaysSpace = context.options[0] === \"always\"; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Checks whitespace between rest/spread operators and their expressions\n     * @param {ASTNode} node The node to check\n     * @returns {void}\n     */\n\n    function checkWhiteSpace(node) {\n      const operator = sourceCode.getFirstToken(node),\n            nextToken = sourceCode.getTokenAfter(operator),\n            hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);\n      let type;\n\n      switch (node.type) {\n        case \"SpreadElement\":\n          type = \"spread\";\n\n          if (node.parent.type === \"ObjectExpression\") {\n            type += \" property\";\n          }\n\n          break;\n\n        case \"RestElement\":\n          type = \"rest\";\n\n          if (node.parent.type === \"ObjectPattern\") {\n            type += \" property\";\n          }\n\n          break;\n\n        case \"ExperimentalSpreadProperty\":\n          type = \"spread property\";\n          break;\n\n        case \"ExperimentalRestProperty\":\n          type = \"rest property\";\n          break;\n\n        default:\n          return;\n      }\n\n      if (alwaysSpace && !hasWhitespace) {\n        context.report({\n          node,\n          loc: operator.loc,\n          messageId: \"expectedWhitespace\",\n          data: {\n            type\n          },\n\n          fix(fixer) {\n            return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], \" \");\n          }\n\n        });\n      } else if (!alwaysSpace && hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: operator.loc.end,\n            end: nextToken.loc.start\n          },\n          messageId: \"unexpectedWhitespace\",\n          data: {\n            type\n          },\n\n          fix(fixer) {\n            return fixer.removeRange([operator.range[1], nextToken.range[0]]);\n          }\n\n        });\n      }\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      SpreadElement: checkWhiteSpace,\n      RestElement: checkWhiteSpace,\n      ExperimentalSpreadProperty: checkWhiteSpace,\n      ExperimentalRestProperty: checkWhiteSpace\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","unexpectedWhitespace","expectedWhitespace","create","context","sourceCode","getSourceCode","alwaysSpace","options","checkWhiteSpace","node","operator","getFirstToken","nextToken","getTokenAfter","hasWhitespace","isSpaceBetweenTokens","parent","report","loc","messageId","data","fix","fixer","replaceTextRange","range","start","end","removeRange","SpreadElement","RestElement","ExperimentalSpreadProperty","ExperimentalRestProperty"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/rest-spread-spacing.js"],"sourcesContent":["/**\n * @fileoverview Enforce spacing between rest and spread operators and their expressions.\n * @author Kai Cataldo\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce spacing between rest and spread operators and their expressions\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/rest-spread-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            }\n        ],\n\n        messages: {\n            unexpectedWhitespace: \"Unexpected whitespace after {{type}} operator.\",\n            expectedWhitespace: \"Expected whitespace after {{type}} operator.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode(),\n            alwaysSpace = context.options[0] === \"always\";\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Checks whitespace between rest/spread operators and their expressions\n         * @param {ASTNode} node The node to check\n         * @returns {void}\n         */\n        function checkWhiteSpace(node) {\n            const operator = sourceCode.getFirstToken(node),\n                nextToken = sourceCode.getTokenAfter(operator),\n                hasWhitespace = sourceCode.isSpaceBetweenTokens(operator, nextToken);\n            let type;\n\n            switch (node.type) {\n                case \"SpreadElement\":\n                    type = \"spread\";\n                    if (node.parent.type === \"ObjectExpression\") {\n                        type += \" property\";\n                    }\n                    break;\n                case \"RestElement\":\n                    type = \"rest\";\n                    if (node.parent.type === \"ObjectPattern\") {\n                        type += \" property\";\n                    }\n                    break;\n                case \"ExperimentalSpreadProperty\":\n                    type = \"spread property\";\n                    break;\n                case \"ExperimentalRestProperty\":\n                    type = \"rest property\";\n                    break;\n                default:\n                    return;\n            }\n\n            if (alwaysSpace && !hasWhitespace) {\n                context.report({\n                    node,\n                    loc: operator.loc,\n                    messageId: \"expectedWhitespace\",\n                    data: {\n                        type\n                    },\n                    fix(fixer) {\n                        return fixer.replaceTextRange([operator.range[1], nextToken.range[0]], \" \");\n                    }\n                });\n            } else if (!alwaysSpace && hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: operator.loc.end,\n                        end: nextToken.loc.start\n                    },\n                    messageId: \"unexpectedWhitespace\",\n                    data: {\n                        type\n                    },\n                    fix(fixer) {\n                        return fixer.removeRange([operator.range[1], nextToken.range[0]]);\n                    }\n                });\n            }\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            SpreadElement: checkWhiteSpace,\n            RestElement: checkWhiteSpace,\n            ExperimentalSpreadProperty: checkWhiteSpace,\n            ExperimentalRestProperty: checkWhiteSpace\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}