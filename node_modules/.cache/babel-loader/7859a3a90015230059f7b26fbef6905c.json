{"ast":null,"code":"/**\n * @fileoverview Rule to enforce the use of `u` flag on RegExp.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n  CALL,\n  CONSTRUCT,\n  ReferenceTracker,\n  getStringIfConstant\n} = require(\"eslint-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"enforce the use of `u` flag on RegExp\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/require-unicode-regexp\"\n    },\n    messages: {\n      requireUFlag: \"Use the 'u' flag.\"\n    },\n    schema: []\n  },\n\n  create(context) {\n    return {\n      \"Literal[regex]\"(node) {\n        const flags = node.regex.flags || \"\";\n\n        if (!flags.includes(\"u\")) {\n          context.report({\n            node,\n            messageId: \"requireUFlag\"\n          });\n        }\n      },\n\n      Program() {\n        const scope = context.getScope();\n        const tracker = new ReferenceTracker(scope);\n        const trackMap = {\n          RegExp: {\n            [CALL]: true,\n            [CONSTRUCT]: true\n          }\n        };\n\n        for (const {\n          node\n        } of tracker.iterateGlobalReferences(trackMap)) {\n          const flagsNode = node.arguments[1];\n          const flags = getStringIfConstant(flagsNode, scope);\n\n          if (!flagsNode || typeof flags === \"string\" && !flags.includes(\"u\")) {\n            context.report({\n              node,\n              messageId: \"requireUFlag\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["CALL","CONSTRUCT","ReferenceTracker","getStringIfConstant","require","module","exports","meta","type","docs","description","category","recommended","url","messages","requireUFlag","schema","create","context","node","flags","regex","includes","report","messageId","Program","scope","getScope","tracker","trackMap","RegExp","iterateGlobalReferences","flagsNode","arguments"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/require-unicode-regexp.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce the use of `u` flag on RegExp.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    CALL,\n    CONSTRUCT,\n    ReferenceTracker,\n    getStringIfConstant\n} = require(\"eslint-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"enforce the use of `u` flag on RegExp\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/require-unicode-regexp\"\n        },\n\n        messages: {\n            requireUFlag: \"Use the 'u' flag.\"\n        },\n\n        schema: []\n    },\n\n    create(context) {\n        return {\n            \"Literal[regex]\"(node) {\n                const flags = node.regex.flags || \"\";\n\n                if (!flags.includes(\"u\")) {\n                    context.report({ node, messageId: \"requireUFlag\" });\n                }\n            },\n\n            Program() {\n                const scope = context.getScope();\n                const tracker = new ReferenceTracker(scope);\n                const trackMap = {\n                    RegExp: { [CALL]: true, [CONSTRUCT]: true }\n                };\n\n                for (const { node } of tracker.iterateGlobalReferences(trackMap)) {\n                    const flagsNode = node.arguments[1];\n                    const flags = getStringIfConstant(flagsNode, scope);\n\n                    if (!flagsNode || (typeof flags === \"string\" && !flags.includes(\"u\"))) {\n                        context.report({ node, messageId: \"requireUFlag\" });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAM;EACFA,IADE;EAEFC,SAFE;EAGFC,gBAHE;EAIFC;AAJE,IAKFC,OAAO,CAAC,cAAD,CALX,C,CAOA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,uCADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,QAAQ,EAAE;MACNC,YAAY,EAAE;IADR,CAVR;IAcFC,MAAM,EAAE;EAdN,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IACZ,OAAO;MACH,iBAAiBC,IAAjB,EAAuB;QACnB,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAWD,KAAX,IAAoB,EAAlC;;QAEA,IAAI,CAACA,KAAK,CAACE,QAAN,CAAe,GAAf,CAAL,EAA0B;UACtBJ,OAAO,CAACK,MAAR,CAAe;YAAEJ,IAAF;YAAQK,SAAS,EAAE;UAAnB,CAAf;QACH;MACJ,CAPE;;MASHC,OAAO,GAAG;QACN,MAAMC,KAAK,GAAGR,OAAO,CAACS,QAAR,EAAd;QACA,MAAMC,OAAO,GAAG,IAAI1B,gBAAJ,CAAqBwB,KAArB,CAAhB;QACA,MAAMG,QAAQ,GAAG;UACbC,MAAM,EAAE;YAAE,CAAC9B,IAAD,GAAQ,IAAV;YAAgB,CAACC,SAAD,GAAa;UAA7B;QADK,CAAjB;;QAIA,KAAK,MAAM;UAAEkB;QAAF,CAAX,IAAuBS,OAAO,CAACG,uBAAR,CAAgCF,QAAhC,CAAvB,EAAkE;UAC9D,MAAMG,SAAS,GAAGb,IAAI,CAACc,SAAL,CAAe,CAAf,CAAlB;UACA,MAAMb,KAAK,GAAGjB,mBAAmB,CAAC6B,SAAD,EAAYN,KAAZ,CAAjC;;UAEA,IAAI,CAACM,SAAD,IAAe,OAAOZ,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAK,CAACE,QAAN,CAAe,GAAf,CAAjD,EAAuE;YACnEJ,OAAO,CAACK,MAAR,CAAe;cAAEJ,IAAF;cAAQK,SAAS,EAAE;YAAnB,CAAf;UACH;QACJ;MACJ;;IAxBE,CAAP;EA0BH;;AA7CY,CAAjB"},"metadata":{},"sourceType":"script"}