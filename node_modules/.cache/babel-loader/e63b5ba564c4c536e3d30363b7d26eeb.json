{"ast":null,"code":"/**\n * @fileoverview Rule to disallow a negated condition\n * @author Alberto Rodríguez\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow negated conditions\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-negated-condition\"\n    },\n    schema: [],\n    messages: {\n      unexpectedNegated: \"Unexpected negated condition.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Determines if a given node is an if-else without a condition on the else\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node has an else without an if.\n     * @private\n     */\n    function hasElseWithoutCondition(node) {\n      return node.alternate && node.alternate.type !== \"IfStatement\";\n    }\n    /**\n     * Determines if a given node is a negated unary expression\n     * @param {Object} test The test object to check.\n     * @returns {boolean} True if the node is a negated unary expression.\n     * @private\n     */\n\n\n    function isNegatedUnaryExpression(test) {\n      return test.type === \"UnaryExpression\" && test.operator === \"!\";\n    }\n    /**\n     * Determines if a given node is a negated binary expression\n     * @param {Test} test The test to check.\n     * @returns {boolean} True if the node is a negated binary expression.\n     * @private\n     */\n\n\n    function isNegatedBinaryExpression(test) {\n      return test.type === \"BinaryExpression\" && (test.operator === \"!=\" || test.operator === \"!==\");\n    }\n    /**\n     * Determines if a given node has a negated if expression\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} True if the node has a negated if expression.\n     * @private\n     */\n\n\n    function isNegatedIf(node) {\n      return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\n    }\n\n    return {\n      IfStatement(node) {\n        if (!hasElseWithoutCondition(node)) {\n          return;\n        }\n\n        if (isNegatedIf(node)) {\n          context.report({\n            node,\n            messageId: \"unexpectedNegated\"\n          });\n        }\n      },\n\n      ConditionalExpression(node) {\n        if (isNegatedIf(node)) {\n          context.report({\n            node,\n            messageId: \"unexpectedNegated\"\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpectedNegated","create","context","hasElseWithoutCondition","node","alternate","isNegatedUnaryExpression","test","operator","isNegatedBinaryExpression","isNegatedIf","IfStatement","report","messageId","ConditionalExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-negated-condition.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow a negated condition\n * @author Alberto Rodríguez\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow negated conditions\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-negated-condition\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpectedNegated: \"Unexpected negated condition.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Determines if a given node is an if-else without a condition on the else\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node has an else without an if.\n         * @private\n         */\n        function hasElseWithoutCondition(node) {\n            return node.alternate && node.alternate.type !== \"IfStatement\";\n        }\n\n        /**\n         * Determines if a given node is a negated unary expression\n         * @param {Object} test The test object to check.\n         * @returns {boolean} True if the node is a negated unary expression.\n         * @private\n         */\n        function isNegatedUnaryExpression(test) {\n            return test.type === \"UnaryExpression\" && test.operator === \"!\";\n        }\n\n        /**\n         * Determines if a given node is a negated binary expression\n         * @param {Test} test The test to check.\n         * @returns {boolean} True if the node is a negated binary expression.\n         * @private\n         */\n        function isNegatedBinaryExpression(test) {\n            return test.type === \"BinaryExpression\" &&\n                (test.operator === \"!=\" || test.operator === \"!==\");\n        }\n\n        /**\n         * Determines if a given node has a negated if expression\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} True if the node has a negated if expression.\n         * @private\n         */\n        function isNegatedIf(node) {\n            return isNegatedUnaryExpression(node.test) || isNegatedBinaryExpression(node.test);\n        }\n\n        return {\n            IfStatement(node) {\n                if (!hasElseWithoutCondition(node)) {\n                    return;\n                }\n\n                if (isNegatedIf(node)) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedNegated\"\n                    });\n                }\n            },\n            ConditionalExpression(node) {\n                if (isNegatedIf(node)) {\n                    context.report({\n                        node,\n                        messageId: \"unexpectedNegated\"\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,6BADX;MAEFC,QAAQ,EAAE,kBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,iBAAiB,EAAE;IADb;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;AACA;IACQ,SAASC,uBAAT,CAAiCC,IAAjC,EAAuC;MACnC,OAAOA,IAAI,CAACC,SAAL,IAAkBD,IAAI,CAACC,SAAL,CAAeb,IAAf,KAAwB,aAAjD;IACH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASc,wBAAT,CAAkCC,IAAlC,EAAwC;MACpC,OAAOA,IAAI,CAACf,IAAL,KAAc,iBAAd,IAAmCe,IAAI,CAACC,QAAL,KAAkB,GAA5D;IACH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASC,yBAAT,CAAmCF,IAAnC,EAAyC;MACrC,OAAOA,IAAI,CAACf,IAAL,KAAc,kBAAd,KACFe,IAAI,CAACC,QAAL,KAAkB,IAAlB,IAA0BD,IAAI,CAACC,QAAL,KAAkB,KAD1C,CAAP;IAEH;IAED;AACR;AACA;AACA;AACA;AACA;;;IACQ,SAASE,WAAT,CAAqBN,IAArB,EAA2B;MACvB,OAAOE,wBAAwB,CAACF,IAAI,CAACG,IAAN,CAAxB,IAAuCE,yBAAyB,CAACL,IAAI,CAACG,IAAN,CAAvE;IACH;;IAED,OAAO;MACHI,WAAW,CAACP,IAAD,EAAO;QACd,IAAI,CAACD,uBAAuB,CAACC,IAAD,CAA5B,EAAoC;UAChC;QACH;;QAED,IAAIM,WAAW,CAACN,IAAD,CAAf,EAAuB;UACnBF,OAAO,CAACU,MAAR,CAAe;YACXR,IADW;YAEXS,SAAS,EAAE;UAFA,CAAf;QAIH;MACJ,CAZE;;MAaHC,qBAAqB,CAACV,IAAD,EAAO;QACxB,IAAIM,WAAW,CAACN,IAAD,CAAf,EAAuB;UACnBF,OAAO,CAACU,MAAR,CAAe;YACXR,IADW;YAEXS,SAAS,EAAE;UAFA,CAAf;QAIH;MACJ;;IApBE,CAAP;EAsBH;;AAnFY,CAAjB"},"metadata":{},"sourceType":"script"}