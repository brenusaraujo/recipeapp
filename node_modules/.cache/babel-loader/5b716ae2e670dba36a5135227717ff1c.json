{"ast":null,"code":"/**\n * @fileoverview Rule to disallow unnecessary labels\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow unnecessary labels\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-extra-label\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      unexpected: \"This label '{{name}}' is unnecessary.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    let scopeInfo = null;\n    /**\n     * Creates a new scope with a breakable statement.\n     * @param {ASTNode} node A node to create. This is a BreakableStatement.\n     * @returns {void}\n     */\n\n    function enterBreakableStatement(node) {\n      scopeInfo = {\n        label: node.parent.type === \"LabeledStatement\" ? node.parent.label : null,\n        breakable: true,\n        upper: scopeInfo\n      };\n    }\n    /**\n     * Removes the top scope of the stack.\n     * @returns {void}\n     */\n\n\n    function exitBreakableStatement() {\n      scopeInfo = scopeInfo.upper;\n    }\n    /**\n     * Creates a new scope with a labeled statement.\n     *\n     * This ignores it if the body is a breakable statement.\n     * In this case it's handled in the `enterBreakableStatement` function.\n     * @param {ASTNode} node A node to create. This is a LabeledStatement.\n     * @returns {void}\n     */\n\n\n    function enterLabeledStatement(node) {\n      if (!astUtils.isBreakableStatement(node.body)) {\n        scopeInfo = {\n          label: node.label,\n          breakable: false,\n          upper: scopeInfo\n        };\n      }\n    }\n    /**\n     * Removes the top scope of the stack.\n     *\n     * This ignores it if the body is a breakable statement.\n     * In this case it's handled in the `exitBreakableStatement` function.\n     * @param {ASTNode} node A node. This is a LabeledStatement.\n     * @returns {void}\n     */\n\n\n    function exitLabeledStatement(node) {\n      if (!astUtils.isBreakableStatement(node.body)) {\n        scopeInfo = scopeInfo.upper;\n      }\n    }\n    /**\n     * Reports a given control node if it's unnecessary.\n     * @param {ASTNode} node A node. This is a BreakStatement or a\n     *      ContinueStatement.\n     * @returns {void}\n     */\n\n\n    function reportIfUnnecessary(node) {\n      if (!node.label) {\n        return;\n      }\n\n      const labelNode = node.label;\n\n      for (let info = scopeInfo; info !== null; info = info.upper) {\n        if (info.breakable || info.label && info.label.name === labelNode.name) {\n          if (info.breakable && info.label && info.label.name === labelNode.name) {\n            context.report({\n              node: labelNode,\n              messageId: \"unexpected\",\n              data: labelNode,\n\n              fix(fixer) {\n                const breakOrContinueToken = sourceCode.getFirstToken(node);\n\n                if (sourceCode.commentsExistBetween(breakOrContinueToken, labelNode)) {\n                  return null;\n                }\n\n                return fixer.removeRange([breakOrContinueToken.range[1], labelNode.range[1]]);\n              }\n\n            });\n          }\n\n          return;\n        }\n      }\n    }\n\n    return {\n      WhileStatement: enterBreakableStatement,\n      \"WhileStatement:exit\": exitBreakableStatement,\n      DoWhileStatement: enterBreakableStatement,\n      \"DoWhileStatement:exit\": exitBreakableStatement,\n      ForStatement: enterBreakableStatement,\n      \"ForStatement:exit\": exitBreakableStatement,\n      ForInStatement: enterBreakableStatement,\n      \"ForInStatement:exit\": exitBreakableStatement,\n      ForOfStatement: enterBreakableStatement,\n      \"ForOfStatement:exit\": exitBreakableStatement,\n      SwitchStatement: enterBreakableStatement,\n      \"SwitchStatement:exit\": exitBreakableStatement,\n      LabeledStatement: enterLabeledStatement,\n      \"LabeledStatement:exit\": exitLabeledStatement,\n      BreakStatement: reportIfUnnecessary,\n      ContinueStatement: reportIfUnnecessary\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","fixable","messages","unexpected","create","context","sourceCode","getSourceCode","scopeInfo","enterBreakableStatement","node","label","parent","breakable","upper","exitBreakableStatement","enterLabeledStatement","isBreakableStatement","body","exitLabeledStatement","reportIfUnnecessary","labelNode","info","name","report","messageId","data","fix","fixer","breakOrContinueToken","getFirstToken","commentsExistBetween","removeRange","range","WhileStatement","DoWhileStatement","ForStatement","ForInStatement","ForOfStatement","SwitchStatement","LabeledStatement","BreakStatement","ContinueStatement"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-extra-label.js"],"sourcesContent":["/**\n * @fileoverview Rule to disallow unnecessary labels\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow unnecessary labels\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-extra-label\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            unexpected: \"This label '{{name}}' is unnecessary.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        let scopeInfo = null;\n\n        /**\n         * Creates a new scope with a breakable statement.\n         * @param {ASTNode} node A node to create. This is a BreakableStatement.\n         * @returns {void}\n         */\n        function enterBreakableStatement(node) {\n            scopeInfo = {\n                label: node.parent.type === \"LabeledStatement\" ? node.parent.label : null,\n                breakable: true,\n                upper: scopeInfo\n            };\n        }\n\n        /**\n         * Removes the top scope of the stack.\n         * @returns {void}\n         */\n        function exitBreakableStatement() {\n            scopeInfo = scopeInfo.upper;\n        }\n\n        /**\n         * Creates a new scope with a labeled statement.\n         *\n         * This ignores it if the body is a breakable statement.\n         * In this case it's handled in the `enterBreakableStatement` function.\n         * @param {ASTNode} node A node to create. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function enterLabeledStatement(node) {\n            if (!astUtils.isBreakableStatement(node.body)) {\n                scopeInfo = {\n                    label: node.label,\n                    breakable: false,\n                    upper: scopeInfo\n                };\n            }\n        }\n\n        /**\n         * Removes the top scope of the stack.\n         *\n         * This ignores it if the body is a breakable statement.\n         * In this case it's handled in the `exitBreakableStatement` function.\n         * @param {ASTNode} node A node. This is a LabeledStatement.\n         * @returns {void}\n         */\n        function exitLabeledStatement(node) {\n            if (!astUtils.isBreakableStatement(node.body)) {\n                scopeInfo = scopeInfo.upper;\n            }\n        }\n\n        /**\n         * Reports a given control node if it's unnecessary.\n         * @param {ASTNode} node A node. This is a BreakStatement or a\n         *      ContinueStatement.\n         * @returns {void}\n         */\n        function reportIfUnnecessary(node) {\n            if (!node.label) {\n                return;\n            }\n\n            const labelNode = node.label;\n\n            for (let info = scopeInfo; info !== null; info = info.upper) {\n                if (info.breakable || info.label && info.label.name === labelNode.name) {\n                    if (info.breakable && info.label && info.label.name === labelNode.name) {\n                        context.report({\n                            node: labelNode,\n                            messageId: \"unexpected\",\n                            data: labelNode,\n                            fix(fixer) {\n                                const breakOrContinueToken = sourceCode.getFirstToken(node);\n\n                                if (sourceCode.commentsExistBetween(breakOrContinueToken, labelNode)) {\n                                    return null;\n                                }\n\n                                return fixer.removeRange([breakOrContinueToken.range[1], labelNode.range[1]]);\n                            }\n                        });\n                    }\n                    return;\n                }\n            }\n        }\n\n        return {\n            WhileStatement: enterBreakableStatement,\n            \"WhileStatement:exit\": exitBreakableStatement,\n            DoWhileStatement: enterBreakableStatement,\n            \"DoWhileStatement:exit\": exitBreakableStatement,\n            ForStatement: enterBreakableStatement,\n            \"ForStatement:exit\": exitBreakableStatement,\n            ForInStatement: enterBreakableStatement,\n            \"ForInStatement:exit\": exitBreakableStatement,\n            ForOfStatement: enterBreakableStatement,\n            \"ForOfStatement:exit\": exitBreakableStatement,\n            SwitchStatement: enterBreakableStatement,\n            \"SwitchStatement:exit\": exitBreakableStatement,\n            LabeledStatement: enterLabeledStatement,\n            \"LabeledStatement:exit\": exitLabeledStatement,\n            BreakStatement: reportIfUnnecessary,\n            ContinueStatement: reportIfUnnecessary\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}