{"ast":null,"code":"/**\n * @fileoverview Disallows or enforces spaces inside of object literals.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent spacing inside braces\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/object-curly-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"always\", \"never\"]\n    }, {\n      type: \"object\",\n      properties: {\n        arraysInObjects: {\n          type: \"boolean\"\n        },\n        objectsInObjects: {\n          type: \"boolean\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      requireSpaceBefore: \"A space is required before '{{token}}'.\",\n      requireSpaceAfter: \"A space is required after '{{token}}'.\",\n      unexpectedSpaceBefore: \"There should be no space before '{{token}}'.\",\n      unexpectedSpaceAfter: \"There should be no space after '{{token}}'.\"\n    }\n  },\n\n  create(context) {\n    const spaced = context.options[0] === \"always\",\n          sourceCode = context.getSourceCode();\n    /**\n     * Determines whether an option is set, relative to the spacing option.\n     * If spaced is \"always\", then check whether option is set to false.\n     * If spaced is \"never\", then check whether option is set to true.\n     * @param {Object} option The option to exclude.\n     * @returns {boolean} Whether or not the property is excluded.\n     */\n\n    function isOptionSet(option) {\n      return context.options[1] ? context.options[1][option] === !spaced : false;\n    }\n\n    const options = {\n      spaced,\n      arraysInObjectsException: isOptionSet(\"arraysInObjects\"),\n      objectsInObjectsException: isOptionSet(\"objectsInObjects\")\n    }; //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Reports that there shouldn't be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n    function reportNoBeginningSpace(node, token) {\n      const nextToken = context.getSourceCode().getTokenAfter(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: token.loc.end,\n          end: nextToken.loc.start\n        },\n        messageId: \"unexpectedSpaceAfter\",\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([token.range[1], nextToken.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there shouldn't be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportNoEndingSpace(node, token) {\n      const previousToken = context.getSourceCode().getTokenBefore(token, {\n        includeComments: true\n      });\n      context.report({\n        node,\n        loc: {\n          start: previousToken.loc.end,\n          end: token.loc.start\n        },\n        messageId: \"unexpectedSpaceBefore\",\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.removeRange([previousToken.range[1], token.range[0]]);\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space after the first token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredBeginningSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"requireSpaceAfter\",\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextAfter(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Reports that there should be a space before the last token\n     * @param {ASTNode} node The node to report in the event of an error.\n     * @param {Token} token The token to use for the report.\n     * @returns {void}\n     */\n\n\n    function reportRequiredEndingSpace(node, token) {\n      context.report({\n        node,\n        loc: token.loc,\n        messageId: \"requireSpaceBefore\",\n        data: {\n          token: token.value\n        },\n\n        fix(fixer) {\n          return fixer.insertTextBefore(token, \" \");\n        }\n\n      });\n    }\n    /**\n     * Determines if spacing in curly braces is valid.\n     * @param {ASTNode} node The AST node to check.\n     * @param {Token} first The first token to check (should be the opening brace)\n     * @param {Token} second The second token to check (should be first after the opening brace)\n     * @param {Token} penultimate The penultimate token to check (should be last before closing brace)\n     * @param {Token} last The last token to check (should be closing brace)\n     * @returns {void}\n     */\n\n\n    function validateBraceSpacing(node, first, second, penultimate, last) {\n      if (astUtils.isTokenOnSameLine(first, second)) {\n        const firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);\n\n        if (options.spaced && !firstSpaced) {\n          reportRequiredBeginningSpace(node, first);\n        }\n\n        if (!options.spaced && firstSpaced && second.type !== \"Line\") {\n          reportNoBeginningSpace(node, first);\n        }\n      }\n\n      if (astUtils.isTokenOnSameLine(penultimate, last)) {\n        const shouldCheckPenultimate = options.arraysInObjectsException && astUtils.isClosingBracketToken(penultimate) || options.objectsInObjectsException && astUtils.isClosingBraceToken(penultimate);\n        const penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.range[0]).type;\n        const closingCurlyBraceMustBeSpaced = options.arraysInObjectsException && penultimateType === \"ArrayExpression\" || options.objectsInObjectsException && (penultimateType === \"ObjectExpression\" || penultimateType === \"ObjectPattern\") ? !options.spaced : options.spaced;\n        const lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);\n\n        if (closingCurlyBraceMustBeSpaced && !lastSpaced) {\n          reportRequiredEndingSpace(node, last);\n        }\n\n        if (!closingCurlyBraceMustBeSpaced && lastSpaced) {\n          reportNoEndingSpace(node, last);\n        }\n      }\n    }\n    /**\n     * Gets '}' token of an object node.\n     *\n     * Because the last token of object patterns might be a type annotation,\n     * this traverses tokens preceded by the last property, then returns the\n     * first '}' token.\n     * @param {ASTNode} node The node to get. This node is an\n     *      ObjectExpression or an ObjectPattern. And this node has one or\n     *      more properties.\n     * @returns {Token} '}' token.\n     */\n\n\n    function getClosingBraceOfObject(node) {\n      const lastProperty = node.properties[node.properties.length - 1];\n      return sourceCode.getTokenAfter(lastProperty, astUtils.isClosingBraceToken);\n    }\n    /**\n     * Reports a given object node if spacing in curly braces is invalid.\n     * @param {ASTNode} node An ObjectExpression or ObjectPattern node to check.\n     * @returns {void}\n     */\n\n\n    function checkForObject(node) {\n      if (node.properties.length === 0) {\n        return;\n      }\n\n      const first = sourceCode.getFirstToken(node),\n            last = getClosingBraceOfObject(node),\n            second = sourceCode.getTokenAfter(first, {\n        includeComments: true\n      }),\n            penultimate = sourceCode.getTokenBefore(last, {\n        includeComments: true\n      });\n      validateBraceSpacing(node, first, second, penultimate, last);\n    }\n    /**\n     * Reports a given import node if spacing in curly braces is invalid.\n     * @param {ASTNode} node An ImportDeclaration node to check.\n     * @returns {void}\n     */\n\n\n    function checkForImport(node) {\n      if (node.specifiers.length === 0) {\n        return;\n      }\n\n      let firstSpecifier = node.specifiers[0];\n      const lastSpecifier = node.specifiers[node.specifiers.length - 1];\n\n      if (lastSpecifier.type !== \"ImportSpecifier\") {\n        return;\n      }\n\n      if (firstSpecifier.type !== \"ImportSpecifier\") {\n        firstSpecifier = node.specifiers[1];\n      }\n\n      const first = sourceCode.getTokenBefore(firstSpecifier),\n            last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n            second = sourceCode.getTokenAfter(first, {\n        includeComments: true\n      }),\n            penultimate = sourceCode.getTokenBefore(last, {\n        includeComments: true\n      });\n      validateBraceSpacing(node, first, second, penultimate, last);\n    }\n    /**\n     * Reports a given export node if spacing in curly braces is invalid.\n     * @param {ASTNode} node An ExportNamedDeclaration node to check.\n     * @returns {void}\n     */\n\n\n    function checkForExport(node) {\n      if (node.specifiers.length === 0) {\n        return;\n      }\n\n      const firstSpecifier = node.specifiers[0],\n            lastSpecifier = node.specifiers[node.specifiers.length - 1],\n            first = sourceCode.getTokenBefore(firstSpecifier),\n            last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n            second = sourceCode.getTokenAfter(first, {\n        includeComments: true\n      }),\n            penultimate = sourceCode.getTokenBefore(last, {\n        includeComments: true\n      });\n      validateBraceSpacing(node, first, second, penultimate, last);\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      // var {x} = y;\n      ObjectPattern: checkForObject,\n      // var y = {x: 'y'}\n      ObjectExpression: checkForObject,\n      // import {y} from 'x';\n      ImportDeclaration: checkForImport,\n      // export {name} from 'yo';\n      ExportNamedDeclaration: checkForExport\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","properties","arraysInObjects","objectsInObjects","additionalProperties","messages","requireSpaceBefore","requireSpaceAfter","unexpectedSpaceBefore","unexpectedSpaceAfter","create","context","spaced","options","sourceCode","getSourceCode","isOptionSet","option","arraysInObjectsException","objectsInObjectsException","reportNoBeginningSpace","node","token","nextToken","getTokenAfter","includeComments","report","loc","start","end","messageId","data","value","fix","fixer","removeRange","range","reportNoEndingSpace","previousToken","getTokenBefore","reportRequiredBeginningSpace","insertTextAfter","reportRequiredEndingSpace","insertTextBefore","validateBraceSpacing","first","second","penultimate","last","isTokenOnSameLine","firstSpaced","isSpaceBetweenTokens","shouldCheckPenultimate","isClosingBracketToken","isClosingBraceToken","penultimateType","getNodeByRangeIndex","closingCurlyBraceMustBeSpaced","lastSpaced","getClosingBraceOfObject","lastProperty","length","checkForObject","getFirstToken","checkForImport","specifiers","firstSpecifier","lastSpecifier","isNotCommaToken","checkForExport","ObjectPattern","ObjectExpression","ImportDeclaration","ExportNamedDeclaration"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/object-curly-spacing.js"],"sourcesContent":["/**\n * @fileoverview Disallows or enforces spaces inside of object literals.\n * @author Jamund Ferguson\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent spacing inside braces\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/object-curly-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"always\", \"never\"]\n            },\n            {\n                type: \"object\",\n                properties: {\n                    arraysInObjects: {\n                        type: \"boolean\"\n                    },\n                    objectsInObjects: {\n                        type: \"boolean\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            requireSpaceBefore: \"A space is required before '{{token}}'.\",\n            requireSpaceAfter: \"A space is required after '{{token}}'.\",\n            unexpectedSpaceBefore: \"There should be no space before '{{token}}'.\",\n            unexpectedSpaceAfter: \"There should be no space after '{{token}}'.\"\n        }\n    },\n\n    create(context) {\n        const spaced = context.options[0] === \"always\",\n            sourceCode = context.getSourceCode();\n\n        /**\n         * Determines whether an option is set, relative to the spacing option.\n         * If spaced is \"always\", then check whether option is set to false.\n         * If spaced is \"never\", then check whether option is set to true.\n         * @param {Object} option The option to exclude.\n         * @returns {boolean} Whether or not the property is excluded.\n         */\n        function isOptionSet(option) {\n            return context.options[1] ? context.options[1][option] === !spaced : false;\n        }\n\n        const options = {\n            spaced,\n            arraysInObjectsException: isOptionSet(\"arraysInObjects\"),\n            objectsInObjectsException: isOptionSet(\"objectsInObjects\")\n        };\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Reports that there shouldn't be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoBeginningSpace(node, token) {\n            const nextToken = context.getSourceCode().getTokenAfter(token, { includeComments: true });\n\n            context.report({\n                node,\n                loc: { start: token.loc.end, end: nextToken.loc.start },\n                messageId: \"unexpectedSpaceAfter\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([token.range[1], nextToken.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there shouldn't be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportNoEndingSpace(node, token) {\n            const previousToken = context.getSourceCode().getTokenBefore(token, { includeComments: true });\n\n            context.report({\n                node,\n                loc: { start: previousToken.loc.end, end: token.loc.start },\n                messageId: \"unexpectedSpaceBefore\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.removeRange([previousToken.range[1], token.range[0]]);\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space after the first token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredBeginningSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"requireSpaceAfter\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextAfter(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Reports that there should be a space before the last token\n         * @param {ASTNode} node The node to report in the event of an error.\n         * @param {Token} token The token to use for the report.\n         * @returns {void}\n         */\n        function reportRequiredEndingSpace(node, token) {\n            context.report({\n                node,\n                loc: token.loc,\n                messageId: \"requireSpaceBefore\",\n                data: {\n                    token: token.value\n                },\n                fix(fixer) {\n                    return fixer.insertTextBefore(token, \" \");\n                }\n            });\n        }\n\n        /**\n         * Determines if spacing in curly braces is valid.\n         * @param {ASTNode} node The AST node to check.\n         * @param {Token} first The first token to check (should be the opening brace)\n         * @param {Token} second The second token to check (should be first after the opening brace)\n         * @param {Token} penultimate The penultimate token to check (should be last before closing brace)\n         * @param {Token} last The last token to check (should be closing brace)\n         * @returns {void}\n         */\n        function validateBraceSpacing(node, first, second, penultimate, last) {\n            if (astUtils.isTokenOnSameLine(first, second)) {\n                const firstSpaced = sourceCode.isSpaceBetweenTokens(first, second);\n\n                if (options.spaced && !firstSpaced) {\n                    reportRequiredBeginningSpace(node, first);\n                }\n                if (!options.spaced && firstSpaced && second.type !== \"Line\") {\n                    reportNoBeginningSpace(node, first);\n                }\n            }\n\n            if (astUtils.isTokenOnSameLine(penultimate, last)) {\n                const shouldCheckPenultimate = (\n                    options.arraysInObjectsException && astUtils.isClosingBracketToken(penultimate) ||\n                    options.objectsInObjectsException && astUtils.isClosingBraceToken(penultimate)\n                );\n                const penultimateType = shouldCheckPenultimate && sourceCode.getNodeByRangeIndex(penultimate.range[0]).type;\n\n                const closingCurlyBraceMustBeSpaced = (\n                    options.arraysInObjectsException && penultimateType === \"ArrayExpression\" ||\n                    options.objectsInObjectsException && (penultimateType === \"ObjectExpression\" || penultimateType === \"ObjectPattern\")\n                ) ? !options.spaced : options.spaced;\n\n                const lastSpaced = sourceCode.isSpaceBetweenTokens(penultimate, last);\n\n                if (closingCurlyBraceMustBeSpaced && !lastSpaced) {\n                    reportRequiredEndingSpace(node, last);\n                }\n                if (!closingCurlyBraceMustBeSpaced && lastSpaced) {\n                    reportNoEndingSpace(node, last);\n                }\n            }\n        }\n\n        /**\n         * Gets '}' token of an object node.\n         *\n         * Because the last token of object patterns might be a type annotation,\n         * this traverses tokens preceded by the last property, then returns the\n         * first '}' token.\n         * @param {ASTNode} node The node to get. This node is an\n         *      ObjectExpression or an ObjectPattern. And this node has one or\n         *      more properties.\n         * @returns {Token} '}' token.\n         */\n        function getClosingBraceOfObject(node) {\n            const lastProperty = node.properties[node.properties.length - 1];\n\n            return sourceCode.getTokenAfter(lastProperty, astUtils.isClosingBraceToken);\n        }\n\n        /**\n         * Reports a given object node if spacing in curly braces is invalid.\n         * @param {ASTNode} node An ObjectExpression or ObjectPattern node to check.\n         * @returns {void}\n         */\n        function checkForObject(node) {\n            if (node.properties.length === 0) {\n                return;\n            }\n\n            const first = sourceCode.getFirstToken(node),\n                last = getClosingBraceOfObject(node),\n                second = sourceCode.getTokenAfter(first, { includeComments: true }),\n                penultimate = sourceCode.getTokenBefore(last, { includeComments: true });\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        /**\n         * Reports a given import node if spacing in curly braces is invalid.\n         * @param {ASTNode} node An ImportDeclaration node to check.\n         * @returns {void}\n         */\n        function checkForImport(node) {\n            if (node.specifiers.length === 0) {\n                return;\n            }\n\n            let firstSpecifier = node.specifiers[0];\n            const lastSpecifier = node.specifiers[node.specifiers.length - 1];\n\n            if (lastSpecifier.type !== \"ImportSpecifier\") {\n                return;\n            }\n            if (firstSpecifier.type !== \"ImportSpecifier\") {\n                firstSpecifier = node.specifiers[1];\n            }\n\n            const first = sourceCode.getTokenBefore(firstSpecifier),\n                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n                second = sourceCode.getTokenAfter(first, { includeComments: true }),\n                penultimate = sourceCode.getTokenBefore(last, { includeComments: true });\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        /**\n         * Reports a given export node if spacing in curly braces is invalid.\n         * @param {ASTNode} node An ExportNamedDeclaration node to check.\n         * @returns {void}\n         */\n        function checkForExport(node) {\n            if (node.specifiers.length === 0) {\n                return;\n            }\n\n            const firstSpecifier = node.specifiers[0],\n                lastSpecifier = node.specifiers[node.specifiers.length - 1],\n                first = sourceCode.getTokenBefore(firstSpecifier),\n                last = sourceCode.getTokenAfter(lastSpecifier, astUtils.isNotCommaToken),\n                second = sourceCode.getTokenAfter(first, { includeComments: true }),\n                penultimate = sourceCode.getTokenBefore(last, { includeComments: true });\n\n            validateBraceSpacing(node, first, second, penultimate, last);\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            // var {x} = y;\n            ObjectPattern: checkForObject,\n\n            // var y = {x: 'y'}\n            ObjectExpression: checkForObject,\n\n            // import {y} from 'x';\n            ImportDeclaration: checkForImport,\n\n            // export {name} from 'yo';\n            ExportNamedDeclaration: checkForExport\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}