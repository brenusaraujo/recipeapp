{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PagingDots = exports.getDotIndexes = exports.NextButton = exports.nextButtonDisabled = exports.PreviousButton = exports.prevButtonDisabled = void 0;\n\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\n\nconst react_1 = require(\"react\");\n\nconst types_1 = require(\"./types\");\n\nconst utils_1 = require(\"./utils\");\n\nconst defaultButtonStyles = disabled => ({\n  border: 0,\n  background: 'rgba(0,0,0,0.4)',\n  color: 'white',\n  padding: 10,\n  textTransform: 'uppercase',\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? 'not-allowed' : 'pointer'\n});\n\nconst prevButtonDisabled = _ref => {\n  let {\n    cellAlign,\n    currentSlide,\n    slidesToShow,\n    wrapAround\n  } = _ref;\n\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  } // disable if displaying the leftmost slide\n\n\n  if (currentSlide === 0) {\n    return true;\n  } // remainder scroll mode\n\n\n  if (cellAlign === 'right' && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.prevButtonDisabled = prevButtonDisabled;\n\nconst PreviousButton = _ref2 => {\n  let {\n    previousSlide,\n    defaultControlsConfig: {\n      prevButtonClassName,\n      prevButtonStyle = {},\n      prevButtonText,\n      prevButtonOnClick\n    },\n    onUserNavigation,\n    previousDisabled: disabled\n  } = _ref2;\n\n  const handleClick = event => {\n    prevButtonOnClick === null || prevButtonOnClick === void 0 ? void 0 : prevButtonOnClick(event);\n    if (event.defaultPrevented) return;\n    onUserNavigation(event);\n    event.preventDefault();\n    previousSlide();\n  };\n\n  return (0, jsx_runtime_1.jsx)(\"button\", Object.assign({\n    className: prevButtonClassName,\n    style: Object.assign(Object.assign({}, defaultButtonStyles(disabled)), prevButtonStyle),\n    disabled: disabled,\n    onClick: handleClick,\n    \"aria-label\": \"previous\",\n    type: \"button\"\n  }, {\n    children: prevButtonText || 'Prev'\n  }));\n};\n\nexports.PreviousButton = PreviousButton;\n\nconst nextButtonDisabled = _ref3 => {\n  let {\n    cellAlign,\n    currentSlide,\n    slideCount,\n    slidesToShow,\n    wrapAround\n  } = _ref3;\n\n  // inifite carousel\n  if (wrapAround) {\n    return false;\n  } // If we are at the last possible slide without wrap, disable\n\n\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  } // remainder scroll mode\n\n\n  if (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n\n  return false;\n};\n\nexports.nextButtonDisabled = nextButtonDisabled;\n\nconst NextButton = _ref4 => {\n  let {\n    nextSlide,\n    defaultControlsConfig: {\n      nextButtonClassName,\n      nextButtonStyle = {},\n      nextButtonText,\n      nextButtonOnClick\n    },\n    nextDisabled: disabled,\n    onUserNavigation\n  } = _ref4;\n\n  const handleClick = event => {\n    nextButtonOnClick === null || nextButtonOnClick === void 0 ? void 0 : nextButtonOnClick(event);\n    if (event.defaultPrevented) return;\n    onUserNavigation(event);\n    event.preventDefault();\n    nextSlide();\n  };\n\n  return (0, jsx_runtime_1.jsx)(\"button\", Object.assign({\n    className: nextButtonClassName,\n    style: Object.assign(Object.assign({}, defaultButtonStyles(disabled)), nextButtonStyle),\n    disabled: disabled,\n    onClick: handleClick,\n    \"aria-label\": \"next\",\n    type: \"button\"\n  }, {\n    children: nextButtonText || 'Next'\n  }));\n};\n\nexports.NextButton = NextButton;\n/**\n * Calculate the indices that each dot will jump to when clicked\n */\n\nconst getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign) => {\n  const dotIndexes = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'center') {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'left') {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n\n    if (scrollMode === types_1.ScrollMode.remainder) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n\n    return dotIndexes;\n  }\n\n  if (cellAlign === 'right') {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n\n    if (scrollMode === types_1.ScrollMode.remainder) {\n      for (let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides) {\n        dotIndexes.push(i);\n      }\n\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides) {\n        dotIndexes.push(i);\n      }\n\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n      dotIndexes.reverse();\n    }\n\n    return dotIndexes;\n  } // We should never reach this, because the if statements above cover all\n  // possible values of cellAlign\n\n\n  return dotIndexes;\n};\n\nexports.getDotIndexes = getDotIndexes;\n\nconst PagingDots = _ref5 => {\n  let {\n    pagingDotsIndices,\n    defaultControlsConfig: {\n      pagingDotsContainerClassName,\n      pagingDotsClassName,\n      pagingDotsStyle = {},\n      pagingDotsOnClick\n    },\n    currentSlide,\n    onUserNavigation,\n    slideCount,\n    goToSlide\n  } = _ref5;\n  const listStyles = {\n    position: 'relative',\n    top: -10,\n    display: 'flex',\n    margin: 0,\n    padding: 0,\n    listStyleType: 'none'\n  };\n  const getButtonStyles = (0, react_1.useCallback)(active => ({\n    cursor: 'pointer',\n    opacity: active ? 1 : 0.5,\n    background: 'transparent',\n    border: 'none',\n    fill: 'black'\n  }), []);\n  const currentSlideBounded = (0, utils_1.getBoundedIndex)(currentSlide, slideCount);\n  return (0, jsx_runtime_1.jsx)(\"ul\", Object.assign({\n    className: pagingDotsContainerClassName,\n    style: listStyles\n  }, {\n    children: pagingDotsIndices.map((slideIndex, i) => {\n      const isActive = currentSlideBounded === slideIndex || // sets navigation dots active if the current slide falls in the current index range\n      currentSlideBounded < slideIndex && (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]);\n      return (0, jsx_runtime_1.jsx)(\"li\", Object.assign({\n        className: isActive ? 'paging-item active' : 'paging-item'\n      }, {\n        children: (0, jsx_runtime_1.jsx)(\"button\", Object.assign({\n          className: pagingDotsClassName,\n          type: \"button\",\n          style: Object.assign(Object.assign({}, getButtonStyles(isActive)), pagingDotsStyle),\n          onClick: event => {\n            pagingDotsOnClick === null || pagingDotsOnClick === void 0 ? void 0 : pagingDotsOnClick(event);\n            if (event.defaultPrevented) return;\n            onUserNavigation(event);\n            goToSlide(slideIndex);\n          },\n          \"aria-label\": `slide ${slideIndex + 1} bullet`,\n          \"aria-selected\": isActive\n        }, {\n          children: (0, jsx_runtime_1.jsx)(\"svg\", Object.assign({\n            className: \"paging-dot\",\n            width: \"6\",\n            height: \"6\",\n            \"aria-hidden\": \"true\",\n            focusable: \"false\",\n            viewBox: \"0 0 6 6\"\n          }, {\n            children: (0, jsx_runtime_1.jsx)(\"circle\", {\n              cx: \"3\",\n              cy: \"3\",\n              r: \"3\"\n            })\n          }))\n        }))\n      }), slideIndex);\n    })\n  }));\n};\n\nexports.PagingDots = PagingDots;","map":{"version":3,"sources":["../src/default-controls.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PagingDots = exports.getDotIndexes = exports.NextButton = exports.nextButtonDisabled = exports.PreviousButton = exports.prevButtonDisabled = void 0;\nconst jsx_runtime_1 = require(\"react/jsx-runtime\");\nconst react_1 = require(\"react\");\nconst types_1 = require(\"./types\");\nconst utils_1 = require(\"./utils\");\nconst defaultButtonStyles = (disabled) => ({\n    border: 0,\n    background: 'rgba(0,0,0,0.4)',\n    color: 'white',\n    padding: 10,\n    textTransform: 'uppercase',\n    opacity: disabled ? 0.3 : 1,\n    cursor: disabled ? 'not-allowed' : 'pointer',\n});\nconst prevButtonDisabled = ({ cellAlign, currentSlide, slidesToShow, wrapAround, }) => {\n    // inifite carousel\n    if (wrapAround) {\n        return false;\n    }\n    // disable if displaying the leftmost slide\n    if (currentSlide === 0) {\n        return true;\n    }\n    // remainder scroll mode\n    if (cellAlign === 'right' && currentSlide <= slidesToShow - 1) {\n        return true;\n    }\n    return false;\n};\nexports.prevButtonDisabled = prevButtonDisabled;\nconst PreviousButton = ({ previousSlide, defaultControlsConfig: { prevButtonClassName, prevButtonStyle = {}, prevButtonText, prevButtonOnClick, }, onUserNavigation, previousDisabled: disabled, }) => {\n    const handleClick = (event) => {\n        prevButtonOnClick === null || prevButtonOnClick === void 0 ? void 0 : prevButtonOnClick(event);\n        if (event.defaultPrevented)\n            return;\n        onUserNavigation(event);\n        event.preventDefault();\n        previousSlide();\n    };\n    return ((0, jsx_runtime_1.jsx)(\"button\", Object.assign({ className: prevButtonClassName, style: Object.assign(Object.assign({}, defaultButtonStyles(disabled)), prevButtonStyle), disabled: disabled, onClick: handleClick, \"aria-label\": \"previous\", type: \"button\" }, { children: prevButtonText || 'Prev' })));\n};\nexports.PreviousButton = PreviousButton;\nconst nextButtonDisabled = ({ cellAlign, currentSlide, slideCount, slidesToShow, wrapAround, }) => {\n    // inifite carousel\n    if (wrapAround) {\n        return false;\n    }\n    // If we are at the last possible slide without wrap, disable\n    if (currentSlide >= slideCount - 1) {\n        return true;\n    }\n    // remainder scroll mode\n    if (cellAlign === 'left' && currentSlide >= slideCount - slidesToShow) {\n        return true;\n    }\n    return false;\n};\nexports.nextButtonDisabled = nextButtonDisabled;\nconst NextButton = ({ nextSlide, defaultControlsConfig: { nextButtonClassName, nextButtonStyle = {}, nextButtonText, nextButtonOnClick, }, nextDisabled: disabled, onUserNavigation, }) => {\n    const handleClick = (event) => {\n        nextButtonOnClick === null || nextButtonOnClick === void 0 ? void 0 : nextButtonOnClick(event);\n        if (event.defaultPrevented)\n            return;\n        onUserNavigation(event);\n        event.preventDefault();\n        nextSlide();\n    };\n    return ((0, jsx_runtime_1.jsx)(\"button\", Object.assign({ className: nextButtonClassName, style: Object.assign(Object.assign({}, defaultButtonStyles(disabled)), nextButtonStyle), disabled: disabled, onClick: handleClick, \"aria-label\": \"next\", type: \"button\" }, { children: nextButtonText || 'Next' })));\n};\nexports.NextButton = NextButton;\n/**\n * Calculate the indices that each dot will jump to when clicked\n */\nconst getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign) => {\n    const dotIndexes = [];\n    const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n    if (wrapAround) {\n        for (let i = 0; i < slideCount; i += scrollSlides) {\n            dotIndexes.push(i);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === 'center') {\n        for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n            dotIndexes.push(i);\n        }\n        if (slideCount > 0) {\n            dotIndexes.push(slideCount - 1);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === 'left') {\n        if (slidesToShow >= slideCount) {\n            return [0];\n        }\n        const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n        for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n            dotIndexes.push(i);\n        }\n        if (scrollMode === types_1.ScrollMode.remainder) {\n            dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n        }\n        else {\n            dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n        }\n        return dotIndexes;\n    }\n    if (cellAlign === 'right') {\n        if (slidesToShow >= slideCount) {\n            return [slideCount - 1];\n        }\n        const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n        if (scrollMode === types_1.ScrollMode.remainder) {\n            for (let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides) {\n                dotIndexes.push(i);\n            }\n            dotIndexes.push(slideCount - 1);\n        }\n        else {\n            for (let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides) {\n                dotIndexes.push(i);\n            }\n            dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n            dotIndexes.reverse();\n        }\n        return dotIndexes;\n    }\n    // We should never reach this, because the if statements above cover all\n    // possible values of cellAlign\n    return dotIndexes;\n};\nexports.getDotIndexes = getDotIndexes;\nconst PagingDots = ({ pagingDotsIndices, defaultControlsConfig: { pagingDotsContainerClassName, pagingDotsClassName, pagingDotsStyle = {}, pagingDotsOnClick, }, currentSlide, onUserNavigation, slideCount, goToSlide, }) => {\n    const listStyles = {\n        position: 'relative',\n        top: -10,\n        display: 'flex',\n        margin: 0,\n        padding: 0,\n        listStyleType: 'none',\n    };\n    const getButtonStyles = (0, react_1.useCallback)((active) => ({\n        cursor: 'pointer',\n        opacity: active ? 1 : 0.5,\n        background: 'transparent',\n        border: 'none',\n        fill: 'black',\n    }), []);\n    const currentSlideBounded = (0, utils_1.getBoundedIndex)(currentSlide, slideCount);\n    return ((0, jsx_runtime_1.jsx)(\"ul\", Object.assign({ className: pagingDotsContainerClassName, style: listStyles }, { children: pagingDotsIndices.map((slideIndex, i) => {\n            const isActive = currentSlideBounded === slideIndex ||\n                // sets navigation dots active if the current slide falls in the current index range\n                (currentSlideBounded < slideIndex &&\n                    (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]));\n            return ((0, jsx_runtime_1.jsx)(\"li\", Object.assign({ className: isActive ? 'paging-item active' : 'paging-item' }, { children: (0, jsx_runtime_1.jsx)(\"button\", Object.assign({ className: pagingDotsClassName, type: \"button\", style: Object.assign(Object.assign({}, getButtonStyles(isActive)), pagingDotsStyle), onClick: (event) => {\n                        pagingDotsOnClick === null || pagingDotsOnClick === void 0 ? void 0 : pagingDotsOnClick(event);\n                        if (event.defaultPrevented)\n                            return;\n                        onUserNavigation(event);\n                        goToSlide(slideIndex);\n                    }, \"aria-label\": `slide ${slideIndex + 1} bullet`, \"aria-selected\": isActive }, { children: (0, jsx_runtime_1.jsx)(\"svg\", Object.assign({ className: \"paging-dot\", width: \"6\", height: \"6\", \"aria-hidden\": \"true\", focusable: \"false\", viewBox: \"0 0 6 6\" }, { children: (0, jsx_runtime_1.jsx)(\"circle\", { cx: \"3\", cy: \"3\", r: \"3\" }) })) })) }), slideIndex));\n        }) })));\n};\nexports.PagingDots = PagingDots;\n"]},"metadata":{},"sourceType":"script"}