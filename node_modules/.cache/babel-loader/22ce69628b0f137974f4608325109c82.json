{"ast":null,"code":"/**\n * @fileoverview Rule to control spacing within function calls\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require or disallow spacing between function identifiers and their invocations\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/func-call-spacing\"\n    },\n    fixable: \"whitespace\",\n    schema: {\n      anyOf: [{\n        type: \"array\",\n        items: [{\n          enum: [\"never\"]\n        }],\n        minItems: 0,\n        maxItems: 1\n      }, {\n        type: \"array\",\n        items: [{\n          enum: [\"always\"]\n        }, {\n          type: \"object\",\n          properties: {\n            allowNewlines: {\n              type: \"boolean\"\n            }\n          },\n          additionalProperties: false\n        }],\n        minItems: 0,\n        maxItems: 2\n      }]\n    },\n    messages: {\n      unexpectedWhitespace: \"Unexpected whitespace between function name and paren.\",\n      unexpectedNewline: \"Unexpected newline between function name and paren.\",\n      missing: \"Missing space between function name and paren.\"\n    }\n  },\n\n  create(context) {\n    const never = context.options[0] !== \"always\";\n    const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;\n    const sourceCode = context.getSourceCode();\n    const text = sourceCode.getText();\n    /**\n     * Check if open space is present in a function name\n     * @param {ASTNode} node node to evaluate\n     * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.\n     * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.\n     * @returns {void}\n     * @private\n     */\n\n    function checkSpacing(node, leftToken, rightToken) {\n      const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, \"\");\n      const hasWhitespace = /\\s/u.test(textBetweenTokens);\n      const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\n      /*\n       * never allowNewlines hasWhitespace hasNewline message\n       * F     F             F             F          Missing space between function name and paren.\n       * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * F     F             T             T          Unexpected newline between function name and paren.\n       * F     F             T             F          (OK)\n       * F     T             T             F          (OK)\n       * F     T             T             T          (OK)\n       * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * F     T             F             F          Missing space between function name and paren.\n       * T     T             F             F          (Invalid `never && allowNewlines`)\n       * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * T     T             T             T          (Invalid `never && allowNewlines`)\n       * T     T             T             F          (Invalid `never && allowNewlines`)\n       * T     F             T             F          Unexpected space between function name and paren.\n       * T     F             T             T          Unexpected space between function name and paren.\n       * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n       * T     F             F             F          (OK)\n       *\n       * T                   T                        Unexpected space between function name and paren.\n       * F                   F                        Missing space between function name and paren.\n       * F     F                           T          Unexpected newline between function name and paren.\n       */\n\n      if (never && hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: leftToken.loc.end,\n            end: {\n              line: rightToken.loc.start.line,\n              column: rightToken.loc.start.column - 1\n            }\n          },\n          messageId: \"unexpectedWhitespace\",\n\n          fix(fixer) {\n            // Don't remove comments.\n            if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n              return null;\n            } // If `?.` exists, it doesn't hide no-unexpected-multiline errors\n\n\n            if (node.optional) {\n              return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \"?.\");\n            }\n            /*\n             * Only autofix if there is no newline\n             * https://github.com/eslint/eslint/issues/7787\n             */\n\n\n            if (hasNewline) {\n              return null;\n            }\n\n            return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n          }\n\n        });\n      } else if (!never && !hasWhitespace) {\n        context.report({\n          node,\n          loc: {\n            start: {\n              line: leftToken.loc.end.line,\n              column: leftToken.loc.end.column - 1\n            },\n            end: rightToken.loc.start\n          },\n          messageId: \"missing\",\n\n          fix(fixer) {\n            if (node.optional) {\n              return null; // Not sure if inserting a space to either before/after `?.` token.\n            }\n\n            return fixer.insertTextBefore(rightToken, \" \");\n          }\n\n        });\n      } else if (!never && !allowNewlines && hasNewline) {\n        context.report({\n          node,\n          loc: {\n            start: leftToken.loc.end,\n            end: rightToken.loc.start\n          },\n          messageId: \"unexpectedNewline\",\n\n          fix(fixer) {\n            /*\n             * Only autofix if there is no newline\n             * https://github.com/eslint/eslint/issues/7787\n             * But if `?.` exists, it doesn't hide no-unexpected-multiline errors\n             */\n            if (!node.optional) {\n              return null;\n            } // Don't remove comments.\n\n\n            if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n              return null;\n            }\n\n            const range = [leftToken.range[1], rightToken.range[0]];\n            const qdToken = sourceCode.getTokenAfter(leftToken);\n\n            if (qdToken.range[0] === leftToken.range[1]) {\n              return fixer.replaceTextRange(range, \"?. \");\n            }\n\n            if (qdToken.range[1] === rightToken.range[0]) {\n              return fixer.replaceTextRange(range, \" ?.\");\n            }\n\n            return fixer.replaceTextRange(range, \" ?. \");\n          }\n\n        });\n      }\n    }\n\n    return {\n      \"CallExpression, NewExpression\"(node) {\n        const lastToken = sourceCode.getLastToken(node);\n        const lastCalleeToken = sourceCode.getLastToken(node.callee);\n        const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);\n        const prevToken = parenToken && sourceCode.getTokenBefore(parenToken, astUtils.isNotQuestionDotToken); // Parens in NewExpression are optional\n\n        if (!(parenToken && parenToken.range[1] < node.range[1])) {\n          return;\n        }\n\n        checkSpacing(node, prevToken, parenToken);\n      },\n\n      ImportExpression(node) {\n        const leftToken = sourceCode.getFirstToken(node);\n        const rightToken = sourceCode.getTokenAfter(leftToken);\n        checkSpacing(node, leftToken, rightToken);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","anyOf","items","enum","minItems","maxItems","properties","allowNewlines","additionalProperties","messages","unexpectedWhitespace","unexpectedNewline","missing","create","context","never","options","sourceCode","getSourceCode","text","getText","checkSpacing","node","leftToken","rightToken","textBetweenTokens","slice","range","replace","hasWhitespace","test","hasNewline","LINEBREAK_MATCHER","report","loc","start","end","line","column","messageId","fix","fixer","commentsExistBetween","optional","replaceTextRange","removeRange","insertTextBefore","qdToken","getTokenAfter","lastToken","getLastToken","lastCalleeToken","callee","parenToken","getFirstTokenBetween","isOpeningParenToken","prevToken","getTokenBefore","isNotQuestionDotToken","ImportExpression","getFirstToken"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/func-call-spacing.js"],"sourcesContent":["/**\n * @fileoverview Rule to control spacing within function calls\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require or disallow spacing between function identifiers and their invocations\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/func-call-spacing\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: {\n            anyOf: [\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"never\"]\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 1\n                },\n                {\n                    type: \"array\",\n                    items: [\n                        {\n                            enum: [\"always\"]\n                        },\n                        {\n                            type: \"object\",\n                            properties: {\n                                allowNewlines: {\n                                    type: \"boolean\"\n                                }\n                            },\n                            additionalProperties: false\n                        }\n                    ],\n                    minItems: 0,\n                    maxItems: 2\n                }\n            ]\n        },\n\n        messages: {\n            unexpectedWhitespace: \"Unexpected whitespace between function name and paren.\",\n            unexpectedNewline: \"Unexpected newline between function name and paren.\",\n            missing: \"Missing space between function name and paren.\"\n        }\n    },\n\n    create(context) {\n\n        const never = context.options[0] !== \"always\";\n        const allowNewlines = !never && context.options[1] && context.options[1].allowNewlines;\n        const sourceCode = context.getSourceCode();\n        const text = sourceCode.getText();\n\n        /**\n         * Check if open space is present in a function name\n         * @param {ASTNode} node node to evaluate\n         * @param {Token} leftToken The last token of the callee. This may be the closing parenthesis that encloses the callee.\n         * @param {Token} rightToken Tha first token of the arguments. this is the opening parenthesis that encloses the arguments.\n         * @returns {void}\n         * @private\n         */\n        function checkSpacing(node, leftToken, rightToken) {\n            const textBetweenTokens = text.slice(leftToken.range[1], rightToken.range[0]).replace(/\\/\\*.*?\\*\\//gu, \"\");\n            const hasWhitespace = /\\s/u.test(textBetweenTokens);\n            const hasNewline = hasWhitespace && astUtils.LINEBREAK_MATCHER.test(textBetweenTokens);\n\n            /*\n             * never allowNewlines hasWhitespace hasNewline message\n             * F     F             F             F          Missing space between function name and paren.\n             * F     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * F     F             T             T          Unexpected newline between function name and paren.\n             * F     F             T             F          (OK)\n             * F     T             T             F          (OK)\n             * F     T             T             T          (OK)\n             * F     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * F     T             F             F          Missing space between function name and paren.\n             * T     T             F             F          (Invalid `never && allowNewlines`)\n             * T     T             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * T     T             T             T          (Invalid `never && allowNewlines`)\n             * T     T             T             F          (Invalid `never && allowNewlines`)\n             * T     F             T             F          Unexpected space between function name and paren.\n             * T     F             T             T          Unexpected space between function name and paren.\n             * T     F             F             T          (Invalid `!hasWhitespace && hasNewline`)\n             * T     F             F             F          (OK)\n             *\n             * T                   T                        Unexpected space between function name and paren.\n             * F                   F                        Missing space between function name and paren.\n             * F     F                           T          Unexpected newline between function name and paren.\n             */\n\n            if (never && hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: leftToken.loc.end,\n                        end: {\n                            line: rightToken.loc.start.line,\n                            column: rightToken.loc.start.column - 1\n                        }\n                    },\n                    messageId: \"unexpectedWhitespace\",\n                    fix(fixer) {\n\n                        // Don't remove comments.\n                        if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n                            return null;\n                        }\n\n                        // If `?.` exists, it doesn't hide no-unexpected-multiline errors\n                        if (node.optional) {\n                            return fixer.replaceTextRange([leftToken.range[1], rightToken.range[0]], \"?.\");\n                        }\n\n                        /*\n                         * Only autofix if there is no newline\n                         * https://github.com/eslint/eslint/issues/7787\n                         */\n                        if (hasNewline) {\n                            return null;\n                        }\n                        return fixer.removeRange([leftToken.range[1], rightToken.range[0]]);\n                    }\n                });\n            } else if (!never && !hasWhitespace) {\n                context.report({\n                    node,\n                    loc: {\n                        start: {\n                            line: leftToken.loc.end.line,\n                            column: leftToken.loc.end.column - 1\n                        },\n                        end: rightToken.loc.start\n                    },\n                    messageId: \"missing\",\n                    fix(fixer) {\n                        if (node.optional) {\n                            return null; // Not sure if inserting a space to either before/after `?.` token.\n                        }\n                        return fixer.insertTextBefore(rightToken, \" \");\n                    }\n                });\n            } else if (!never && !allowNewlines && hasNewline) {\n                context.report({\n                    node,\n                    loc: {\n                        start: leftToken.loc.end,\n                        end: rightToken.loc.start\n                    },\n                    messageId: \"unexpectedNewline\",\n                    fix(fixer) {\n\n                        /*\n                         * Only autofix if there is no newline\n                         * https://github.com/eslint/eslint/issues/7787\n                         * But if `?.` exists, it doesn't hide no-unexpected-multiline errors\n                         */\n                        if (!node.optional) {\n                            return null;\n                        }\n\n                        // Don't remove comments.\n                        if (sourceCode.commentsExistBetween(leftToken, rightToken)) {\n                            return null;\n                        }\n\n                        const range = [leftToken.range[1], rightToken.range[0]];\n                        const qdToken = sourceCode.getTokenAfter(leftToken);\n\n                        if (qdToken.range[0] === leftToken.range[1]) {\n                            return fixer.replaceTextRange(range, \"?. \");\n                        }\n                        if (qdToken.range[1] === rightToken.range[0]) {\n                            return fixer.replaceTextRange(range, \" ?.\");\n                        }\n                        return fixer.replaceTextRange(range, \" ?. \");\n                    }\n                });\n            }\n        }\n\n        return {\n            \"CallExpression, NewExpression\"(node) {\n                const lastToken = sourceCode.getLastToken(node);\n                const lastCalleeToken = sourceCode.getLastToken(node.callee);\n                const parenToken = sourceCode.getFirstTokenBetween(lastCalleeToken, lastToken, astUtils.isOpeningParenToken);\n                const prevToken = parenToken && sourceCode.getTokenBefore(parenToken, astUtils.isNotQuestionDotToken);\n\n                // Parens in NewExpression are optional\n                if (!(parenToken && parenToken.range[1] < node.range[1])) {\n                    return;\n                }\n\n                checkSpacing(node, prevToken, parenToken);\n            },\n\n            ImportExpression(node) {\n                const leftToken = sourceCode.getFirstToken(node);\n                const rightToken = sourceCode.getTokenAfter(leftToken);\n\n                checkSpacing(node, leftToken, rightToken);\n            }\n        };\n\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}