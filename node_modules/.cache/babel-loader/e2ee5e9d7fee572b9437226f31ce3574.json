{"ast":null,"code":"/**\n * @fileoverview A rule to ensure consistent quotes used in jsx syntax.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n\nconst QUOTE_SETTINGS = {\n  \"prefer-double\": {\n    quote: \"\\\"\",\n    description: \"singlequote\",\n\n    convert(str) {\n      return str.replace(/'/gu, \"\\\"\");\n    }\n\n  },\n  \"prefer-single\": {\n    quote: \"'\",\n    description: \"doublequote\",\n\n    convert(str) {\n      return str.replace(/\"/gu, \"'\");\n    }\n\n  }\n}; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce the consistent use of either double or single quotes in JSX attributes\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/jsx-quotes\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"prefer-single\", \"prefer-double\"]\n    }],\n    messages: {\n      unexpected: \"Unexpected usage of {{description}}.\"\n    }\n  },\n\n  create(context) {\n    const quoteOption = context.options[0] || \"prefer-double\",\n          setting = QUOTE_SETTINGS[quoteOption];\n    /**\n     * Checks if the given string literal node uses the expected quotes\n     * @param {ASTNode} node A string literal node.\n     * @returns {boolean} Whether or not the string literal used the expected quotes.\n     * @public\n     */\n\n    function usesExpectedQuotes(node) {\n      return node.value.indexOf(setting.quote) !== -1 || astUtils.isSurroundedBy(node.raw, setting.quote);\n    }\n\n    return {\n      JSXAttribute(node) {\n        const attributeValue = node.value;\n\n        if (attributeValue && astUtils.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {\n          context.report({\n            node: attributeValue,\n            messageId: \"unexpected\",\n            data: {\n              description: setting.description\n            },\n\n            fix(fixer) {\n              return fixer.replaceText(attributeValue, setting.convert(attributeValue.raw));\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","QUOTE_SETTINGS","quote","description","convert","str","replace","module","exports","meta","type","docs","category","recommended","url","fixable","schema","enum","messages","unexpected","create","context","quoteOption","options","setting","usesExpectedQuotes","node","value","indexOf","isSurroundedBy","raw","JSXAttribute","attributeValue","isStringLiteral","report","messageId","data","fix","fixer","replaceText"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/jsx-quotes.js"],"sourcesContent":["/**\n * @fileoverview A rule to ensure consistent quotes used in jsx syntax.\n * @author Mathias Schreck <https://github.com/lo1tuma>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\nconst QUOTE_SETTINGS = {\n    \"prefer-double\": {\n        quote: \"\\\"\",\n        description: \"singlequote\",\n        convert(str) {\n            return str.replace(/'/gu, \"\\\"\");\n        }\n    },\n    \"prefer-single\": {\n        quote: \"'\",\n        description: \"doublequote\",\n        convert(str) {\n            return str.replace(/\"/gu, \"'\");\n        }\n    }\n};\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce the consistent use of either double or single quotes in JSX attributes\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/jsx-quotes\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"prefer-single\", \"prefer-double\"]\n            }\n        ],\n        messages: {\n            unexpected: \"Unexpected usage of {{description}}.\"\n        }\n    },\n\n    create(context) {\n        const quoteOption = context.options[0] || \"prefer-double\",\n            setting = QUOTE_SETTINGS[quoteOption];\n\n        /**\n         * Checks if the given string literal node uses the expected quotes\n         * @param {ASTNode} node A string literal node.\n         * @returns {boolean} Whether or not the string literal used the expected quotes.\n         * @public\n         */\n        function usesExpectedQuotes(node) {\n            return node.value.indexOf(setting.quote) !== -1 || astUtils.isSurroundedBy(node.raw, setting.quote);\n        }\n\n        return {\n            JSXAttribute(node) {\n                const attributeValue = node.value;\n\n                if (attributeValue && astUtils.isStringLiteral(attributeValue) && !usesExpectedQuotes(attributeValue)) {\n                    context.report({\n                        node: attributeValue,\n                        messageId: \"unexpected\",\n                        data: {\n                            description: setting.description\n                        },\n                        fix(fixer) {\n                            return fixer.replaceText(attributeValue, setting.convert(attributeValue.raw));\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEA,MAAMC,cAAc,GAAG;EACnB,iBAAiB;IACbC,KAAK,EAAE,IADM;IAEbC,WAAW,EAAE,aAFA;;IAGbC,OAAO,CAACC,GAAD,EAAM;MACT,OAAOA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,IAAnB,CAAP;IACH;;EALY,CADE;EAQnB,iBAAiB;IACbJ,KAAK,EAAE,GADM;IAEbC,WAAW,EAAE,aAFA;;IAGbC,OAAO,CAACC,GAAD,EAAM;MACT,OAAOA,GAAG,CAACC,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,CAAP;IACH;;EALY;AARE,CAAvB,C,CAiBA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QADJ;IAGFC,IAAI,EAAE;MACFR,WAAW,EAAE,gFADX;MAEFS,QAAQ,EAAE,kBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,OAAO,EAAE,YAVP;IAYFC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,eAAD,EAAkB,eAAlB;IADV,CADI,CAZN;IAiBFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAjBR,CADO;;EAuBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,WAAW,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,eAA1C;IAAA,MACIC,OAAO,GAAGvB,cAAc,CAACqB,WAAD,CAD5B;IAGA;AACR;AACA;AACA;AACA;AACA;;IACQ,SAASG,kBAAT,CAA4BC,IAA5B,EAAkC;MAC9B,OAAOA,IAAI,CAACC,KAAL,CAAWC,OAAX,CAAmBJ,OAAO,CAACtB,KAA3B,MAAsC,CAAC,CAAvC,IAA4CH,QAAQ,CAAC8B,cAAT,CAAwBH,IAAI,CAACI,GAA7B,EAAkCN,OAAO,CAACtB,KAA1C,CAAnD;IACH;;IAED,OAAO;MACH6B,YAAY,CAACL,IAAD,EAAO;QACf,MAAMM,cAAc,GAAGN,IAAI,CAACC,KAA5B;;QAEA,IAAIK,cAAc,IAAIjC,QAAQ,CAACkC,eAAT,CAAyBD,cAAzB,CAAlB,IAA8D,CAACP,kBAAkB,CAACO,cAAD,CAArF,EAAuG;UACnGX,OAAO,CAACa,MAAR,CAAe;YACXR,IAAI,EAAEM,cADK;YAEXG,SAAS,EAAE,YAFA;YAGXC,IAAI,EAAE;cACFjC,WAAW,EAAEqB,OAAO,CAACrB;YADnB,CAHK;;YAMXkC,GAAG,CAACC,KAAD,EAAQ;cACP,OAAOA,KAAK,CAACC,WAAN,CAAkBP,cAAlB,EAAkCR,OAAO,CAACpB,OAAR,CAAgB4B,cAAc,CAACF,GAA/B,CAAlC,CAAP;YACH;;UARU,CAAf;QAUH;MACJ;;IAhBE,CAAP;EAkBH;;AAvDY,CAAjB"},"metadata":{},"sourceType":"script"}