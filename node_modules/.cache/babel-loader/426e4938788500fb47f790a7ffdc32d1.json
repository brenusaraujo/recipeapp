{"ast":null,"code":"/**\n * @fileoverview Rule to enforce a single linebreak style.\n * @author Erik Mueller\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent linebreak style\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/linebreak-style\"\n    },\n    fixable: \"whitespace\",\n    schema: [{\n      enum: [\"unix\", \"windows\"]\n    }],\n    messages: {\n      expectedLF: \"Expected linebreaks to be 'LF' but found 'CRLF'.\",\n      expectedCRLF: \"Expected linebreaks to be 'CRLF' but found 'LF'.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Builds a fix function that replaces text at the specified range in the source text.\n     * @param {int[]} range The range to replace\n     * @param {string} text The text to insert.\n     * @returns {Function} Fixer function\n     * @private\n     */\n\n    function createFix(range, text) {\n      return function (fixer) {\n        return fixer.replaceTextRange(range, text);\n      };\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Program: function checkForLinebreakStyle(node) {\n        const linebreakStyle = context.options[0] || \"unix\",\n              expectedLF = linebreakStyle === \"unix\",\n              expectedLFChars = expectedLF ? \"\\n\" : \"\\r\\n\",\n              source = sourceCode.getText(),\n              pattern = astUtils.createGlobalLinebreakMatcher();\n        let match;\n        let i = 0;\n\n        while ((match = pattern.exec(source)) !== null) {\n          i++;\n\n          if (match[0] === expectedLFChars) {\n            continue;\n          }\n\n          const index = match.index;\n          const range = [index, index + match[0].length];\n          context.report({\n            node,\n            loc: {\n              start: {\n                line: i,\n                column: sourceCode.lines[i - 1].length\n              },\n              end: {\n                line: i + 1,\n                column: 0\n              }\n            },\n            messageId: expectedLF ? \"expectedLF\" : \"expectedCRLF\",\n            fix: createFix(range, expectedLFChars)\n          });\n        }\n      }\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","enum","messages","expectedLF","expectedCRLF","create","context","sourceCode","getSourceCode","createFix","range","text","fixer","replaceTextRange","Program","checkForLinebreakStyle","node","linebreakStyle","options","expectedLFChars","source","getText","pattern","createGlobalLinebreakMatcher","match","i","exec","index","length","report","loc","start","line","column","lines","end","messageId","fix"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/linebreak-style.js"],"sourcesContent":["/**\n * @fileoverview Rule to enforce a single linebreak style.\n * @author Erik Mueller\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent linebreak style\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/linebreak-style\"\n        },\n\n        fixable: \"whitespace\",\n\n        schema: [\n            {\n                enum: [\"unix\", \"windows\"]\n            }\n        ],\n        messages: {\n            expectedLF: \"Expected linebreaks to be 'LF' but found 'CRLF'.\",\n            expectedCRLF: \"Expected linebreaks to be 'CRLF' but found 'LF'.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Builds a fix function that replaces text at the specified range in the source text.\n         * @param {int[]} range The range to replace\n         * @param {string} text The text to insert.\n         * @returns {Function} Fixer function\n         * @private\n         */\n        function createFix(range, text) {\n            return function(fixer) {\n                return fixer.replaceTextRange(range, text);\n            };\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program: function checkForLinebreakStyle(node) {\n                const linebreakStyle = context.options[0] || \"unix\",\n                    expectedLF = linebreakStyle === \"unix\",\n                    expectedLFChars = expectedLF ? \"\\n\" : \"\\r\\n\",\n                    source = sourceCode.getText(),\n                    pattern = astUtils.createGlobalLinebreakMatcher();\n                let match;\n\n                let i = 0;\n\n                while ((match = pattern.exec(source)) !== null) {\n                    i++;\n                    if (match[0] === expectedLFChars) {\n                        continue;\n                    }\n\n                    const index = match.index;\n                    const range = [index, index + match[0].length];\n\n                    context.report({\n                        node,\n                        loc: {\n                            start: {\n                                line: i,\n                                column: sourceCode.lines[i - 1].length\n                            },\n                            end: {\n                                line: i + 1,\n                                column: 0\n                            }\n                        },\n                        messageId: expectedLF ? \"expectedLF\" : \"expectedCRLF\",\n                        fix: createFix(range, expectedLFChars)\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,oCADX;MAEFC,QAAQ,EAAE,kBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,OAAO,EAAE,YAVP;IAYFC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,MAAD,EAAS,SAAT;IADV,CADI,CAZN;IAiBFC,QAAQ,EAAE;MACNC,UAAU,EAAE,kDADN;MAENC,YAAY,EAAE;IAFR;EAjBR,CADO;;EAwBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB,CADY,CAGZ;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQ,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,IAA1B,EAAgC;MAC5B,OAAO,UAASC,KAAT,EAAgB;QACnB,OAAOA,KAAK,CAACC,gBAAN,CAAuBH,KAAvB,EAA8BC,IAA9B,CAAP;MACH,CAFD;IAGH,CAlBW,CAoBZ;IACA;IACA;;;IAEA,OAAO;MACHG,OAAO,EAAE,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;QAC3C,MAAMC,cAAc,GAAGX,OAAO,CAACY,OAAR,CAAgB,CAAhB,KAAsB,MAA7C;QAAA,MACIf,UAAU,GAAGc,cAAc,KAAK,MADpC;QAAA,MAEIE,eAAe,GAAGhB,UAAU,GAAG,IAAH,GAAU,MAF1C;QAAA,MAGIiB,MAAM,GAAGb,UAAU,CAACc,OAAX,EAHb;QAAA,MAIIC,OAAO,GAAGlC,QAAQ,CAACmC,4BAAT,EAJd;QAKA,IAAIC,KAAJ;QAEA,IAAIC,CAAC,GAAG,CAAR;;QAEA,OAAO,CAACD,KAAK,GAAGF,OAAO,CAACI,IAAR,CAAaN,MAAb,CAAT,MAAmC,IAA1C,EAAgD;UAC5CK,CAAC;;UACD,IAAID,KAAK,CAAC,CAAD,CAAL,KAAaL,eAAjB,EAAkC;YAC9B;UACH;;UAED,MAAMQ,KAAK,GAAGH,KAAK,CAACG,KAApB;UACA,MAAMjB,KAAK,GAAG,CAACiB,KAAD,EAAQA,KAAK,GAAGH,KAAK,CAAC,CAAD,CAAL,CAASI,MAAzB,CAAd;UAEAtB,OAAO,CAACuB,MAAR,CAAe;YACXb,IADW;YAEXc,GAAG,EAAE;cACDC,KAAK,EAAE;gBACHC,IAAI,EAAEP,CADH;gBAEHQ,MAAM,EAAE1B,UAAU,CAAC2B,KAAX,CAAiBT,CAAC,GAAG,CAArB,EAAwBG;cAF7B,CADN;cAKDO,GAAG,EAAE;gBACDH,IAAI,EAAEP,CAAC,GAAG,CADT;gBAEDQ,MAAM,EAAE;cAFP;YALJ,CAFM;YAYXG,SAAS,EAAEjC,UAAU,GAAG,YAAH,GAAkB,cAZ5B;YAaXkC,GAAG,EAAE5B,SAAS,CAACC,KAAD,EAAQS,eAAR;UAbH,CAAf;QAeH;MACJ;IApCE,CAAP;EAsCH;;AAtFY,CAAjB"},"metadata":{},"sourceType":"script"}