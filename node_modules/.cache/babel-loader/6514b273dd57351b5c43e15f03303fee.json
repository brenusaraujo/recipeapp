{"ast":null,"code":"/**\n * @fileoverview A rule to warn against using arrow functions when they could be\n * confused with comparisons\n * @author Jxck <https://github.com/Jxck>\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils.js\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a conditional expression.\n * @param {ASTNode} node node to test\n * @returns {boolean} `true` if the node is a conditional expression.\n */\n\n\nfunction isConditional(node) {\n  return node && node.type === \"ConditionalExpression\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow arrow functions where they could be confused with comparisons\",\n      category: \"ECMAScript 6\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-confusing-arrow\"\n    },\n    fixable: \"code\",\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowParens: {\n          type: \"boolean\",\n          default: true\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      confusing: \"Arrow function used ambiguously with a conditional expression.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0] || {};\n    const allowParens = config.allowParens || config.allowParens === void 0;\n    const sourceCode = context.getSourceCode();\n    /**\n     * Reports if an arrow function contains an ambiguous conditional.\n     * @param {ASTNode} node A node to check and report.\n     * @returns {void}\n     */\n\n    function checkArrowFunc(node) {\n      const body = node.body;\n\n      if (isConditional(body) && !(allowParens && astUtils.isParenthesised(sourceCode, body))) {\n        context.report({\n          node,\n          messageId: \"confusing\",\n\n          fix(fixer) {\n            // if `allowParens` is not set to true don't bother wrapping in parens\n            return allowParens && fixer.replaceText(node.body, `(${sourceCode.getText(node.body)})`);\n          }\n\n        });\n      }\n    }\n\n    return {\n      ArrowFunctionExpression: checkArrowFunc\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","isConditional","node","type","module","exports","meta","docs","description","category","recommended","url","fixable","schema","properties","allowParens","default","additionalProperties","messages","confusing","create","context","config","options","sourceCode","getSourceCode","checkArrowFunc","body","isParenthesised","report","messageId","fix","fixer","replaceText","getText","ArrowFunctionExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-confusing-arrow.js"],"sourcesContent":["/**\n * @fileoverview A rule to warn against using arrow functions when they could be\n * confused with comparisons\n * @author Jxck <https://github.com/Jxck>\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils.js\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks whether or not a node is a conditional expression.\n * @param {ASTNode} node node to test\n * @returns {boolean} `true` if the node is a conditional expression.\n */\nfunction isConditional(node) {\n    return node && node.type === \"ConditionalExpression\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow arrow functions where they could be confused with comparisons\",\n            category: \"ECMAScript 6\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-confusing-arrow\"\n        },\n\n        fixable: \"code\",\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                allowParens: { type: \"boolean\", default: true }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            confusing: \"Arrow function used ambiguously with a conditional expression.\"\n        }\n    },\n\n    create(context) {\n        const config = context.options[0] || {};\n        const allowParens = config.allowParens || (config.allowParens === void 0);\n        const sourceCode = context.getSourceCode();\n\n\n        /**\n         * Reports if an arrow function contains an ambiguous conditional.\n         * @param {ASTNode} node A node to check and report.\n         * @returns {void}\n         */\n        function checkArrowFunc(node) {\n            const body = node.body;\n\n            if (isConditional(body) && !(allowParens && astUtils.isParenthesised(sourceCode, body))) {\n                context.report({\n                    node,\n                    messageId: \"confusing\",\n                    fix(fixer) {\n\n                        // if `allowParens` is not set to true don't bother wrapping in parens\n                        return allowParens && fixer.replaceText(node.body, `(${sourceCode.getText(node.body)})`);\n                    }\n                });\n            }\n        }\n\n        return {\n            ArrowFunctionExpression: checkArrowFunc\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAxB,C,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EACzB,OAAOA,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAc,uBAA7B;AACH,C,CAED;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFH,IAAI,EAAE,YADJ;IAGFI,IAAI,EAAE;MACFC,WAAW,EAAE,wEADX;MAEFC,QAAQ,EAAE,cAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,OAAO,EAAE,MAVP;IAYFC,MAAM,EAAE,CAAC;MACLV,IAAI,EAAE,QADD;MAELW,UAAU,EAAE;QACRC,WAAW,EAAE;UAAEZ,IAAI,EAAE,SAAR;UAAmBa,OAAO,EAAE;QAA5B;MADL,CAFP;MAKLC,oBAAoB,EAAE;IALjB,CAAD,CAZN;IAoBFC,QAAQ,EAAE;MACNC,SAAS,EAAE;IADL;EApBR,CADO;;EA0BbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,EAArC;IACA,MAAMR,WAAW,GAAGO,MAAM,CAACP,WAAP,IAAuBO,MAAM,CAACP,WAAP,KAAuB,KAAK,CAAvE;IACA,MAAMS,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB;IAGA;AACR;AACA;AACA;AACA;;IACQ,SAASC,cAAT,CAAwBxB,IAAxB,EAA8B;MAC1B,MAAMyB,IAAI,GAAGzB,IAAI,CAACyB,IAAlB;;MAEA,IAAI1B,aAAa,CAAC0B,IAAD,CAAb,IAAuB,EAAEZ,WAAW,IAAIhB,QAAQ,CAAC6B,eAAT,CAAyBJ,UAAzB,EAAqCG,IAArC,CAAjB,CAA3B,EAAyF;QACrFN,OAAO,CAACQ,MAAR,CAAe;UACX3B,IADW;UAEX4B,SAAS,EAAE,WAFA;;UAGXC,GAAG,CAACC,KAAD,EAAQ;YAEP;YACA,OAAOjB,WAAW,IAAIiB,KAAK,CAACC,WAAN,CAAkB/B,IAAI,CAACyB,IAAvB,EAA8B,IAAGH,UAAU,CAACU,OAAX,CAAmBhC,IAAI,CAACyB,IAAxB,CAA8B,GAA/D,CAAtB;UACH;;QAPU,CAAf;MASH;IACJ;;IAED,OAAO;MACHQ,uBAAuB,EAAET;IADtB,CAAP;EAGH;;AAxDY,CAAjB"},"metadata":{},"sourceType":"script"}