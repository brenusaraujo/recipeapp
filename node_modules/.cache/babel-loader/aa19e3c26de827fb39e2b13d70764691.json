{"ast":null,"code":"/**\n * @fileoverview Restrict usage of specified node modules.\n * @author Christian Schulz\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst ignore = require(\"ignore\");\n\nconst arrayOfStrings = {\n  type: \"array\",\n  items: {\n    type: \"string\"\n  },\n  uniqueItems: true\n};\nconst arrayOfStringsOrObjects = {\n  type: \"array\",\n  items: {\n    anyOf: [{\n      type: \"string\"\n    }, {\n      type: \"object\",\n      properties: {\n        name: {\n          type: \"string\"\n        },\n        message: {\n          type: \"string\",\n          minLength: 1\n        }\n      },\n      additionalProperties: false,\n      required: [\"name\"]\n    }]\n  },\n  uniqueItems: true\n};\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow specified modules when loaded by `require`\",\n      category: \"Node.js and CommonJS\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-restricted-modules\"\n    },\n    schema: {\n      anyOf: [arrayOfStringsOrObjects, {\n        type: \"array\",\n        items: {\n          type: \"object\",\n          properties: {\n            paths: arrayOfStringsOrObjects,\n            patterns: arrayOfStrings\n          },\n          additionalProperties: false\n        },\n        additionalItems: false\n      }]\n    },\n    messages: {\n      defaultMessage: \"'{{name}}' module is restricted from being used.\",\n      // eslint-disable-next-line eslint-plugin/report-message-format\n      customMessage: \"'{{name}}' module is restricted from being used. {{customMessage}}\",\n      patternMessage: \"'{{name}}' module is restricted from being used by a pattern.\"\n    }\n  },\n\n  create(context) {\n    const options = Array.isArray(context.options) ? context.options : [];\n    const isPathAndPatternsObject = typeof options[0] === \"object\" && (Object.prototype.hasOwnProperty.call(options[0], \"paths\") || Object.prototype.hasOwnProperty.call(options[0], \"patterns\"));\n    const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];\n    const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];\n    const restrictedPathMessages = restrictedPaths.reduce((memo, importName) => {\n      if (typeof importName === \"string\") {\n        memo[importName] = null;\n      } else {\n        memo[importName.name] = importName.message;\n      }\n\n      return memo;\n    }, {}); // if no imports are restricted we don\"t need to check\n\n    if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) {\n      return {};\n    }\n\n    const ig = ignore().add(restrictedPatterns);\n    /**\n     * Function to check if a node is a string literal.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} If the node is a string literal.\n     */\n\n    function isStringLiteral(node) {\n      return node && node.type === \"Literal\" && typeof node.value === \"string\";\n    }\n    /**\n     * Function to check if a node is a static string template literal.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} If the node is a string template literal.\n     */\n\n\n    function isStaticTemplateLiteral(node) {\n      return node && node.type === \"TemplateLiteral\" && node.expressions.length === 0;\n    }\n    /**\n     * Function to check if a node is a require call.\n     * @param {ASTNode} node The node to check.\n     * @returns {boolean} If the node is a require call.\n     */\n\n\n    function isRequireCall(node) {\n      return node.callee.type === \"Identifier\" && node.callee.name === \"require\";\n    }\n    /**\n     * Extract string from Literal or TemplateLiteral node\n     * @param {ASTNode} node The node to extract from\n     * @returns {string|null} Extracted string or null if node doesn't represent a string\n     */\n\n\n    function getFirstArgumentString(node) {\n      if (isStringLiteral(node)) {\n        return node.value.trim();\n      }\n\n      if (isStaticTemplateLiteral(node)) {\n        return node.quasis[0].value.cooked.trim();\n      }\n\n      return null;\n    }\n    /**\n     * Report a restricted path.\n     * @param {node} node representing the restricted path reference\n     * @param {string} name restricted path\n     * @returns {void}\n     * @private\n     */\n\n\n    function reportPath(node, name) {\n      const customMessage = restrictedPathMessages[name];\n      const messageId = customMessage ? \"customMessage\" : \"defaultMessage\";\n      context.report({\n        node,\n        messageId,\n        data: {\n          name,\n          customMessage\n        }\n      });\n    }\n    /**\n     * Check if the given name is a restricted path name\n     * @param {string} name name of a variable\n     * @returns {boolean} whether the variable is a restricted path or not\n     * @private\n     */\n\n\n    function isRestrictedPath(name) {\n      return Object.prototype.hasOwnProperty.call(restrictedPathMessages, name);\n    }\n\n    return {\n      CallExpression(node) {\n        if (isRequireCall(node)) {\n          // node has arguments\n          if (node.arguments.length) {\n            const name = getFirstArgumentString(node.arguments[0]); // if first argument is a string literal or a static string template literal\n\n            if (name) {\n              // check if argument value is in restricted modules array\n              if (isRestrictedPath(name)) {\n                reportPath(node, name);\n              }\n\n              if (restrictedPatterns.length > 0 && ig.ignores(name)) {\n                context.report({\n                  node,\n                  messageId: \"patternMessage\",\n                  data: {\n                    name\n                  }\n                });\n              }\n            }\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["ignore","require","arrayOfStrings","type","items","uniqueItems","arrayOfStringsOrObjects","anyOf","properties","name","message","minLength","additionalProperties","required","module","exports","meta","deprecated","replacedBy","docs","description","category","recommended","url","schema","paths","patterns","additionalItems","messages","defaultMessage","customMessage","patternMessage","create","context","options","Array","isArray","isPathAndPatternsObject","Object","prototype","hasOwnProperty","call","restrictedPaths","restrictedPatterns","restrictedPathMessages","reduce","memo","importName","keys","length","ig","add","isStringLiteral","node","value","isStaticTemplateLiteral","expressions","isRequireCall","callee","getFirstArgumentString","trim","quasis","cooked","reportPath","messageId","report","data","isRestrictedPath","CallExpression","arguments","ignores"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-restricted-modules.js"],"sourcesContent":["/**\n * @fileoverview Restrict usage of specified node modules.\n * @author Christian Schulz\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst ignore = require(\"ignore\");\n\nconst arrayOfStrings = {\n    type: \"array\",\n    items: { type: \"string\" },\n    uniqueItems: true\n};\n\nconst arrayOfStringsOrObjects = {\n    type: \"array\",\n    items: {\n        anyOf: [\n            { type: \"string\" },\n            {\n                type: \"object\",\n                properties: {\n                    name: { type: \"string\" },\n                    message: {\n                        type: \"string\",\n                        minLength: 1\n                    }\n                },\n                additionalProperties: false,\n                required: [\"name\"]\n            }\n        ]\n    },\n    uniqueItems: true\n};\n\nmodule.exports = {\n    meta: {\n        deprecated: true,\n\n        replacedBy: [],\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow specified modules when loaded by `require`\",\n            category: \"Node.js and CommonJS\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-restricted-modules\"\n        },\n\n        schema: {\n            anyOf: [\n                arrayOfStringsOrObjects,\n                {\n                    type: \"array\",\n                    items: {\n                        type: \"object\",\n                        properties: {\n                            paths: arrayOfStringsOrObjects,\n                            patterns: arrayOfStrings\n                        },\n                        additionalProperties: false\n                    },\n                    additionalItems: false\n                }\n            ]\n        },\n\n        messages: {\n            defaultMessage: \"'{{name}}' module is restricted from being used.\",\n            // eslint-disable-next-line eslint-plugin/report-message-format\n            customMessage: \"'{{name}}' module is restricted from being used. {{customMessage}}\",\n            patternMessage: \"'{{name}}' module is restricted from being used by a pattern.\"\n        }\n    },\n\n    create(context) {\n        const options = Array.isArray(context.options) ? context.options : [];\n        const isPathAndPatternsObject =\n            typeof options[0] === \"object\" &&\n            (Object.prototype.hasOwnProperty.call(options[0], \"paths\") || Object.prototype.hasOwnProperty.call(options[0], \"patterns\"));\n\n        const restrictedPaths = (isPathAndPatternsObject ? options[0].paths : context.options) || [];\n        const restrictedPatterns = (isPathAndPatternsObject ? options[0].patterns : []) || [];\n\n        const restrictedPathMessages = restrictedPaths.reduce((memo, importName) => {\n            if (typeof importName === \"string\") {\n                memo[importName] = null;\n            } else {\n                memo[importName.name] = importName.message;\n            }\n            return memo;\n        }, {});\n\n        // if no imports are restricted we don\"t need to check\n        if (Object.keys(restrictedPaths).length === 0 && restrictedPatterns.length === 0) {\n            return {};\n        }\n\n        const ig = ignore().add(restrictedPatterns);\n\n\n        /**\n         * Function to check if a node is a string literal.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} If the node is a string literal.\n         */\n        function isStringLiteral(node) {\n            return node && node.type === \"Literal\" && typeof node.value === \"string\";\n        }\n\n        /**\n         * Function to check if a node is a static string template literal.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} If the node is a string template literal.\n         */\n        function isStaticTemplateLiteral(node) {\n            return node && node.type === \"TemplateLiteral\" && node.expressions.length === 0;\n        }\n\n        /**\n         * Function to check if a node is a require call.\n         * @param {ASTNode} node The node to check.\n         * @returns {boolean} If the node is a require call.\n         */\n        function isRequireCall(node) {\n            return node.callee.type === \"Identifier\" && node.callee.name === \"require\";\n        }\n\n        /**\n         * Extract string from Literal or TemplateLiteral node\n         * @param {ASTNode} node The node to extract from\n         * @returns {string|null} Extracted string or null if node doesn't represent a string\n         */\n        function getFirstArgumentString(node) {\n            if (isStringLiteral(node)) {\n                return node.value.trim();\n            }\n\n            if (isStaticTemplateLiteral(node)) {\n                return node.quasis[0].value.cooked.trim();\n            }\n\n            return null;\n        }\n\n        /**\n         * Report a restricted path.\n         * @param {node} node representing the restricted path reference\n         * @param {string} name restricted path\n         * @returns {void}\n         * @private\n         */\n        function reportPath(node, name) {\n            const customMessage = restrictedPathMessages[name];\n            const messageId = customMessage\n                ? \"customMessage\"\n                : \"defaultMessage\";\n\n            context.report({\n                node,\n                messageId,\n                data: {\n                    name,\n                    customMessage\n                }\n            });\n        }\n\n        /**\n         * Check if the given name is a restricted path name\n         * @param {string} name name of a variable\n         * @returns {boolean} whether the variable is a restricted path or not\n         * @private\n         */\n        function isRestrictedPath(name) {\n            return Object.prototype.hasOwnProperty.call(restrictedPathMessages, name);\n        }\n\n        return {\n            CallExpression(node) {\n                if (isRequireCall(node)) {\n\n                    // node has arguments\n                    if (node.arguments.length) {\n                        const name = getFirstArgumentString(node.arguments[0]);\n\n                        // if first argument is a string literal or a static string template literal\n                        if (name) {\n\n                            // check if argument value is in restricted modules array\n                            if (isRestrictedPath(name)) {\n                                reportPath(node, name);\n                            }\n\n                            if (restrictedPatterns.length > 0 && ig.ignores(name)) {\n                                context.report({\n                                    node,\n                                    messageId: \"patternMessage\",\n                                    data: { name }\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}