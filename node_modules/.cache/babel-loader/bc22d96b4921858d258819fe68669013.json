{"ast":null,"code":"/*\n * STOP!!! DO NOT MODIFY.\n *\n * This file is part of the ongoing work to move the eslintrc-style config\n * system into the @eslint/eslintrc package. This file needs to remain\n * unchanged in order for this work to proceed.\n *\n * If you think you need to change this file, please contact @nzakas first.\n *\n * Thanks in advance for your cooperation.\n */\n\n/**\n * @fileoverview Validates configs.\n * @author Brandon Mills\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst util = require(\"util\"),\n      configSchema = require(\"../../conf/config-schema\"),\n      BuiltInEnvironments = require(\"@eslint/eslintrc/conf/environments\"),\n      BuiltInRules = require(\"../rules\"),\n      ConfigOps = require(\"@eslint/eslintrc/lib/shared/config-ops\"),\n      {\n  emitDeprecationWarning\n} = require(\"./deprecation-warnings\");\n\nconst ajv = require(\"./ajv\")();\n\nconst ruleValidators = new WeakMap();\nconst noop = Function.prototype; //------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\n\nlet validateSchema;\nconst severityMap = {\n  error: 2,\n  warn: 1,\n  off: 0\n};\n/**\n * Gets a complete options schema for a rule.\n * @param {{create: Function, schema: (Array|null)}} rule A new-style rule object\n * @returns {Object} JSON Schema for the rule's options.\n */\n\nfunction getRuleOptionsSchema(rule) {\n  if (!rule) {\n    return null;\n  }\n\n  const schema = rule.schema || rule.meta && rule.meta.schema; // Given a tuple of schemas, insert warning level at the beginning\n\n  if (Array.isArray(schema)) {\n    if (schema.length) {\n      return {\n        type: \"array\",\n        items: schema,\n        minItems: 0,\n        maxItems: schema.length\n      };\n    }\n\n    return {\n      type: \"array\",\n      minItems: 0,\n      maxItems: 0\n    };\n  } // Given a full schema, leave it alone\n\n\n  return schema || null;\n}\n/**\n * Validates a rule's severity and returns the severity value. Throws an error if the severity is invalid.\n * @param {options} options The given options for the rule.\n * @returns {number|string} The rule's severity value\n */\n\n\nfunction validateRuleSeverity(options) {\n  const severity = Array.isArray(options) ? options[0] : options;\n  const normSeverity = typeof severity === \"string\" ? severityMap[severity.toLowerCase()] : severity;\n\n  if (normSeverity === 0 || normSeverity === 1 || normSeverity === 2) {\n    return normSeverity;\n  }\n\n  throw new Error(`\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '${util.inspect(severity).replace(/'/gu, \"\\\"\").replace(/\\n/gu, \"\")}').\\n`);\n}\n/**\n * Validates the non-severity options passed to a rule, based on its schema.\n * @param {{create: Function}} rule The rule to validate\n * @param {Array} localOptions The options for the rule, excluding severity\n * @returns {void}\n */\n\n\nfunction validateRuleSchema(rule, localOptions) {\n  if (!ruleValidators.has(rule)) {\n    const schema = getRuleOptionsSchema(rule);\n\n    if (schema) {\n      ruleValidators.set(rule, ajv.compile(schema));\n    }\n  }\n\n  const validateRule = ruleValidators.get(rule);\n\n  if (validateRule) {\n    validateRule(localOptions);\n\n    if (validateRule.errors) {\n      throw new Error(validateRule.errors.map(error => `\\tValue ${JSON.stringify(error.data)} ${error.message}.\\n`).join(\"\"));\n    }\n  }\n}\n/**\n * Validates a rule's options against its schema.\n * @param {{create: Function}|null} rule The rule that the config is being validated for\n * @param {string} ruleId The rule's unique name.\n * @param {Array|number} options The given options for the rule.\n * @param {string|null} source The name of the configuration source to report in any errors. If null or undefined,\n * no source is prepended to the message.\n * @returns {void}\n */\n\n\nfunction validateRuleOptions(rule, ruleId, options) {\n  let source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  try {\n    const severity = validateRuleSeverity(options);\n\n    if (severity !== 0) {\n      validateRuleSchema(rule, Array.isArray(options) ? options.slice(1) : []);\n    }\n  } catch (err) {\n    const enhancedMessage = `Configuration for rule \"${ruleId}\" is invalid:\\n${err.message}`;\n\n    if (typeof source === \"string\") {\n      throw new Error(`${source}:\\n\\t${enhancedMessage}`);\n    } else {\n      throw new Error(enhancedMessage);\n    }\n  }\n}\n/**\n * Validates an environment object\n * @param {Object} environment The environment config object to validate.\n * @param {string} source The name of the configuration source to report in any errors.\n * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded environments.\n * @returns {void}\n */\n\n\nfunction validateEnvironment(environment, source) {\n  let getAdditionalEnv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n  // not having an environment is ok\n  if (!environment) {\n    return;\n  }\n\n  Object.keys(environment).forEach(id => {\n    const env = getAdditionalEnv(id) || BuiltInEnvironments.get(id) || null;\n\n    if (!env) {\n      const message = `${source}:\\n\\tEnvironment key \"${id}\" is unknown\\n`;\n      throw new Error(message);\n    }\n  });\n}\n/**\n * Validates a rules config object\n * @param {Object} rulesConfig The rules config object to validate.\n * @param {string} source The name of the configuration source to report in any errors.\n * @param {function(ruleId:string): Object} getAdditionalRule A map from strings to loaded rules\n * @returns {void}\n */\n\n\nfunction validateRules(rulesConfig, source) {\n  let getAdditionalRule = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop;\n\n  if (!rulesConfig) {\n    return;\n  }\n\n  Object.keys(rulesConfig).forEach(id => {\n    const rule = getAdditionalRule(id) || BuiltInRules.get(id) || null;\n    validateRuleOptions(rule, id, rulesConfig[id], source);\n  });\n}\n/**\n * Validates a `globals` section of a config file\n * @param {Object} globalsConfig The `globals` section\n * @param {string|null} source The name of the configuration source to report in the event of an error.\n * @returns {void}\n */\n\n\nfunction validateGlobals(globalsConfig) {\n  let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!globalsConfig) {\n    return;\n  }\n\n  Object.entries(globalsConfig).forEach(_ref => {\n    let [configuredGlobal, configuredValue] = _ref;\n\n    try {\n      ConfigOps.normalizeConfigGlobal(configuredValue);\n    } catch (err) {\n      throw new Error(`ESLint configuration of global '${configuredGlobal}' in ${source} is invalid:\\n${err.message}`);\n    }\n  });\n}\n/**\n * Validate `processor` configuration.\n * @param {string|undefined} processorName The processor name.\n * @param {string} source The name of config file.\n * @param {function(id:string): Processor} getProcessor The getter of defined processors.\n * @returns {void}\n */\n\n\nfunction validateProcessor(processorName, source, getProcessor) {\n  if (processorName && !getProcessor(processorName)) {\n    throw new Error(`ESLint configuration of processor in '${source}' is invalid: '${processorName}' was not found.`);\n  }\n}\n/**\n * Formats an array of schema validation errors.\n * @param {Array} errors An array of error messages to format.\n * @returns {string} Formatted error message\n */\n\n\nfunction formatErrors(errors) {\n  return errors.map(error => {\n    if (error.keyword === \"additionalProperties\") {\n      const formattedPropertyPath = error.dataPath.length ? `${error.dataPath.slice(1)}.${error.params.additionalProperty}` : error.params.additionalProperty;\n      return `Unexpected top-level property \"${formattedPropertyPath}\"`;\n    }\n\n    if (error.keyword === \"type\") {\n      const formattedField = error.dataPath.slice(1);\n      const formattedExpectedType = Array.isArray(error.schema) ? error.schema.join(\"/\") : error.schema;\n      const formattedValue = JSON.stringify(error.data);\n      return `Property \"${formattedField}\" is the wrong type (expected ${formattedExpectedType} but got \\`${formattedValue}\\`)`;\n    }\n\n    const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n    return `\"${field}\" ${error.message}. Value: ${JSON.stringify(error.data)}`;\n  }).map(message => `\\t- ${message}.\\n`).join(\"\");\n}\n/**\n * Validates the top level properties of the config object.\n * @param {Object} config The config object to validate.\n * @param {string} source The name of the configuration source to report in any errors.\n * @returns {void}\n */\n\n\nfunction validateConfigSchema(config) {\n  let source = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  validateSchema = validateSchema || ajv.compile(configSchema);\n\n  if (!validateSchema(config)) {\n    throw new Error(`ESLint configuration in ${source} is invalid:\\n${formatErrors(validateSchema.errors)}`);\n  }\n\n  if (Object.hasOwnProperty.call(config, \"ecmaFeatures\")) {\n    emitDeprecationWarning(source, \"ESLINT_LEGACY_ECMAFEATURES\");\n  }\n}\n/**\n * Validates an entire config object.\n * @param {Object} config The config object to validate.\n * @param {string} source The name of the configuration source to report in any errors.\n * @param {function(ruleId:string): Object} [getAdditionalRule] A map from strings to loaded rules.\n * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded envs.\n * @returns {void}\n */\n\n\nfunction validate(config, source, getAdditionalRule, getAdditionalEnv) {\n  validateConfigSchema(config, source);\n  validateRules(config.rules, source, getAdditionalRule);\n  validateEnvironment(config.env, source, getAdditionalEnv);\n  validateGlobals(config.globals, source);\n\n  for (const override of config.overrides || []) {\n    validateRules(override.rules, source, getAdditionalRule);\n    validateEnvironment(override.env, source, getAdditionalEnv);\n    validateGlobals(config.globals, source);\n  }\n}\n\nconst validated = new WeakSet();\n/**\n * Validate config array object.\n * @param {ConfigArray} configArray The config array to validate.\n * @returns {void}\n */\n\nfunction validateConfigArray(configArray) {\n  const getPluginEnv = Map.prototype.get.bind(configArray.pluginEnvironments);\n  const getPluginProcessor = Map.prototype.get.bind(configArray.pluginProcessors);\n  const getPluginRule = Map.prototype.get.bind(configArray.pluginRules); // Validate.\n\n  for (const element of configArray) {\n    if (validated.has(element)) {\n      continue;\n    }\n\n    validated.add(element);\n    validateEnvironment(element.env, element.name, getPluginEnv);\n    validateGlobals(element.globals, element.name);\n    validateProcessor(element.processor, element.name, getPluginProcessor);\n    validateRules(element.rules, element.name, getPluginRule);\n  }\n} //------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  getRuleOptionsSchema,\n  validate,\n  validateConfigArray,\n  validateConfigSchema,\n  validateRuleOptions\n};","map":{"version":3,"names":["util","require","configSchema","BuiltInEnvironments","BuiltInRules","ConfigOps","emitDeprecationWarning","ajv","ruleValidators","WeakMap","noop","Function","prototype","validateSchema","severityMap","error","warn","off","getRuleOptionsSchema","rule","schema","meta","Array","isArray","length","type","items","minItems","maxItems","validateRuleSeverity","options","severity","normSeverity","toLowerCase","Error","inspect","replace","validateRuleSchema","localOptions","has","set","compile","validateRule","get","errors","map","JSON","stringify","data","message","join","validateRuleOptions","ruleId","source","slice","err","enhancedMessage","validateEnvironment","environment","getAdditionalEnv","Object","keys","forEach","id","env","validateRules","rulesConfig","getAdditionalRule","validateGlobals","globalsConfig","entries","configuredGlobal","configuredValue","normalizeConfigGlobal","validateProcessor","processorName","getProcessor","formatErrors","keyword","formattedPropertyPath","dataPath","params","additionalProperty","formattedField","formattedExpectedType","formattedValue","field","validateConfigSchema","config","hasOwnProperty","call","validate","rules","globals","override","overrides","validated","WeakSet","validateConfigArray","configArray","getPluginEnv","Map","bind","pluginEnvironments","getPluginProcessor","pluginProcessors","getPluginRule","pluginRules","element","add","name","processor","module","exports"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/shared/config-validator.js"],"sourcesContent":["/*\n * STOP!!! DO NOT MODIFY.\n *\n * This file is part of the ongoing work to move the eslintrc-style config\n * system into the @eslint/eslintrc package. This file needs to remain\n * unchanged in order for this work to proceed.\n *\n * If you think you need to change this file, please contact @nzakas first.\n *\n * Thanks in advance for your cooperation.\n */\n\n/**\n * @fileoverview Validates configs.\n * @author Brandon Mills\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst\n    util = require(\"util\"),\n    configSchema = require(\"../../conf/config-schema\"),\n    BuiltInEnvironments = require(\"@eslint/eslintrc/conf/environments\"),\n    BuiltInRules = require(\"../rules\"),\n    ConfigOps = require(\"@eslint/eslintrc/lib/shared/config-ops\"),\n    { emitDeprecationWarning } = require(\"./deprecation-warnings\");\n\nconst ajv = require(\"./ajv\")();\nconst ruleValidators = new WeakMap();\nconst noop = Function.prototype;\n\n//------------------------------------------------------------------------------\n// Private\n//------------------------------------------------------------------------------\nlet validateSchema;\nconst severityMap = {\n    error: 2,\n    warn: 1,\n    off: 0\n};\n\n/**\n * Gets a complete options schema for a rule.\n * @param {{create: Function, schema: (Array|null)}} rule A new-style rule object\n * @returns {Object} JSON Schema for the rule's options.\n */\nfunction getRuleOptionsSchema(rule) {\n    if (!rule) {\n        return null;\n    }\n\n    const schema = rule.schema || rule.meta && rule.meta.schema;\n\n    // Given a tuple of schemas, insert warning level at the beginning\n    if (Array.isArray(schema)) {\n        if (schema.length) {\n            return {\n                type: \"array\",\n                items: schema,\n                minItems: 0,\n                maxItems: schema.length\n            };\n        }\n        return {\n            type: \"array\",\n            minItems: 0,\n            maxItems: 0\n        };\n\n    }\n\n    // Given a full schema, leave it alone\n    return schema || null;\n}\n\n/**\n * Validates a rule's severity and returns the severity value. Throws an error if the severity is invalid.\n * @param {options} options The given options for the rule.\n * @returns {number|string} The rule's severity value\n */\nfunction validateRuleSeverity(options) {\n    const severity = Array.isArray(options) ? options[0] : options;\n    const normSeverity = typeof severity === \"string\" ? severityMap[severity.toLowerCase()] : severity;\n\n    if (normSeverity === 0 || normSeverity === 1 || normSeverity === 2) {\n        return normSeverity;\n    }\n\n    throw new Error(`\\tSeverity should be one of the following: 0 = off, 1 = warn, 2 = error (you passed '${util.inspect(severity).replace(/'/gu, \"\\\"\").replace(/\\n/gu, \"\")}').\\n`);\n\n}\n\n/**\n * Validates the non-severity options passed to a rule, based on its schema.\n * @param {{create: Function}} rule The rule to validate\n * @param {Array} localOptions The options for the rule, excluding severity\n * @returns {void}\n */\nfunction validateRuleSchema(rule, localOptions) {\n    if (!ruleValidators.has(rule)) {\n        const schema = getRuleOptionsSchema(rule);\n\n        if (schema) {\n            ruleValidators.set(rule, ajv.compile(schema));\n        }\n    }\n\n    const validateRule = ruleValidators.get(rule);\n\n    if (validateRule) {\n        validateRule(localOptions);\n        if (validateRule.errors) {\n            throw new Error(validateRule.errors.map(\n                error => `\\tValue ${JSON.stringify(error.data)} ${error.message}.\\n`\n            ).join(\"\"));\n        }\n    }\n}\n\n/**\n * Validates a rule's options against its schema.\n * @param {{create: Function}|null} rule The rule that the config is being validated for\n * @param {string} ruleId The rule's unique name.\n * @param {Array|number} options The given options for the rule.\n * @param {string|null} source The name of the configuration source to report in any errors. If null or undefined,\n * no source is prepended to the message.\n * @returns {void}\n */\nfunction validateRuleOptions(rule, ruleId, options, source = null) {\n    try {\n        const severity = validateRuleSeverity(options);\n\n        if (severity !== 0) {\n            validateRuleSchema(rule, Array.isArray(options) ? options.slice(1) : []);\n        }\n    } catch (err) {\n        const enhancedMessage = `Configuration for rule \"${ruleId}\" is invalid:\\n${err.message}`;\n\n        if (typeof source === \"string\") {\n            throw new Error(`${source}:\\n\\t${enhancedMessage}`);\n        } else {\n            throw new Error(enhancedMessage);\n        }\n    }\n}\n\n/**\n * Validates an environment object\n * @param {Object} environment The environment config object to validate.\n * @param {string} source The name of the configuration source to report in any errors.\n * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded environments.\n * @returns {void}\n */\nfunction validateEnvironment(\n    environment,\n    source,\n    getAdditionalEnv = noop\n) {\n\n    // not having an environment is ok\n    if (!environment) {\n        return;\n    }\n\n    Object.keys(environment).forEach(id => {\n        const env = getAdditionalEnv(id) || BuiltInEnvironments.get(id) || null;\n\n        if (!env) {\n            const message = `${source}:\\n\\tEnvironment key \"${id}\" is unknown\\n`;\n\n            throw new Error(message);\n        }\n    });\n}\n\n/**\n * Validates a rules config object\n * @param {Object} rulesConfig The rules config object to validate.\n * @param {string} source The name of the configuration source to report in any errors.\n * @param {function(ruleId:string): Object} getAdditionalRule A map from strings to loaded rules\n * @returns {void}\n */\nfunction validateRules(\n    rulesConfig,\n    source,\n    getAdditionalRule = noop\n) {\n    if (!rulesConfig) {\n        return;\n    }\n\n    Object.keys(rulesConfig).forEach(id => {\n        const rule = getAdditionalRule(id) || BuiltInRules.get(id) || null;\n\n        validateRuleOptions(rule, id, rulesConfig[id], source);\n    });\n}\n\n/**\n * Validates a `globals` section of a config file\n * @param {Object} globalsConfig The `globals` section\n * @param {string|null} source The name of the configuration source to report in the event of an error.\n * @returns {void}\n */\nfunction validateGlobals(globalsConfig, source = null) {\n    if (!globalsConfig) {\n        return;\n    }\n\n    Object.entries(globalsConfig)\n        .forEach(([configuredGlobal, configuredValue]) => {\n            try {\n                ConfigOps.normalizeConfigGlobal(configuredValue);\n            } catch (err) {\n                throw new Error(`ESLint configuration of global '${configuredGlobal}' in ${source} is invalid:\\n${err.message}`);\n            }\n        });\n}\n\n/**\n * Validate `processor` configuration.\n * @param {string|undefined} processorName The processor name.\n * @param {string} source The name of config file.\n * @param {function(id:string): Processor} getProcessor The getter of defined processors.\n * @returns {void}\n */\nfunction validateProcessor(processorName, source, getProcessor) {\n    if (processorName && !getProcessor(processorName)) {\n        throw new Error(`ESLint configuration of processor in '${source}' is invalid: '${processorName}' was not found.`);\n    }\n}\n\n/**\n * Formats an array of schema validation errors.\n * @param {Array} errors An array of error messages to format.\n * @returns {string} Formatted error message\n */\nfunction formatErrors(errors) {\n    return errors.map(error => {\n        if (error.keyword === \"additionalProperties\") {\n            const formattedPropertyPath = error.dataPath.length ? `${error.dataPath.slice(1)}.${error.params.additionalProperty}` : error.params.additionalProperty;\n\n            return `Unexpected top-level property \"${formattedPropertyPath}\"`;\n        }\n        if (error.keyword === \"type\") {\n            const formattedField = error.dataPath.slice(1);\n            const formattedExpectedType = Array.isArray(error.schema) ? error.schema.join(\"/\") : error.schema;\n            const formattedValue = JSON.stringify(error.data);\n\n            return `Property \"${formattedField}\" is the wrong type (expected ${formattedExpectedType} but got \\`${formattedValue}\\`)`;\n        }\n\n        const field = error.dataPath[0] === \".\" ? error.dataPath.slice(1) : error.dataPath;\n\n        return `\"${field}\" ${error.message}. Value: ${JSON.stringify(error.data)}`;\n    }).map(message => `\\t- ${message}.\\n`).join(\"\");\n}\n\n/**\n * Validates the top level properties of the config object.\n * @param {Object} config The config object to validate.\n * @param {string} source The name of the configuration source to report in any errors.\n * @returns {void}\n */\nfunction validateConfigSchema(config, source = null) {\n    validateSchema = validateSchema || ajv.compile(configSchema);\n\n    if (!validateSchema(config)) {\n        throw new Error(`ESLint configuration in ${source} is invalid:\\n${formatErrors(validateSchema.errors)}`);\n    }\n\n    if (Object.hasOwnProperty.call(config, \"ecmaFeatures\")) {\n        emitDeprecationWarning(source, \"ESLINT_LEGACY_ECMAFEATURES\");\n    }\n}\n\n/**\n * Validates an entire config object.\n * @param {Object} config The config object to validate.\n * @param {string} source The name of the configuration source to report in any errors.\n * @param {function(ruleId:string): Object} [getAdditionalRule] A map from strings to loaded rules.\n * @param {function(envId:string): Object} [getAdditionalEnv] A map from strings to loaded envs.\n * @returns {void}\n */\nfunction validate(config, source, getAdditionalRule, getAdditionalEnv) {\n    validateConfigSchema(config, source);\n    validateRules(config.rules, source, getAdditionalRule);\n    validateEnvironment(config.env, source, getAdditionalEnv);\n    validateGlobals(config.globals, source);\n\n    for (const override of config.overrides || []) {\n        validateRules(override.rules, source, getAdditionalRule);\n        validateEnvironment(override.env, source, getAdditionalEnv);\n        validateGlobals(config.globals, source);\n    }\n}\n\nconst validated = new WeakSet();\n\n/**\n * Validate config array object.\n * @param {ConfigArray} configArray The config array to validate.\n * @returns {void}\n */\nfunction validateConfigArray(configArray) {\n    const getPluginEnv = Map.prototype.get.bind(configArray.pluginEnvironments);\n    const getPluginProcessor = Map.prototype.get.bind(configArray.pluginProcessors);\n    const getPluginRule = Map.prototype.get.bind(configArray.pluginRules);\n\n    // Validate.\n    for (const element of configArray) {\n        if (validated.has(element)) {\n            continue;\n        }\n        validated.add(element);\n\n        validateEnvironment(element.env, element.name, getPluginEnv);\n        validateGlobals(element.globals, element.name);\n        validateProcessor(element.processor, element.name, getPluginProcessor);\n        validateRules(element.rules, element.name, getPluginRule);\n    }\n}\n\n//------------------------------------------------------------------------------\n// Public Interface\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    getRuleOptionsSchema,\n    validate,\n    validateConfigArray,\n    validateConfigSchema,\n    validateRuleOptions\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEA,MACIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CADlB;AAAA,MAEIC,YAAY,GAAGD,OAAO,CAAC,0BAAD,CAF1B;AAAA,MAGIE,mBAAmB,GAAGF,OAAO,CAAC,oCAAD,CAHjC;AAAA,MAIIG,YAAY,GAAGH,OAAO,CAAC,UAAD,CAJ1B;AAAA,MAKII,SAAS,GAAGJ,OAAO,CAAC,wCAAD,CALvB;AAAA,MAMI;EAAEK;AAAF,IAA6BL,OAAO,CAAC,wBAAD,CANxC;;AAQA,MAAMM,GAAG,GAAGN,OAAO,CAAC,OAAD,CAAP,EAAZ;;AACA,MAAMO,cAAc,GAAG,IAAIC,OAAJ,EAAvB;AACA,MAAMC,IAAI,GAAGC,QAAQ,CAACC,SAAtB,C,CAEA;AACA;AACA;;AACA,IAAIC,cAAJ;AACA,MAAMC,WAAW,GAAG;EAChBC,KAAK,EAAE,CADS;EAEhBC,IAAI,EAAE,CAFU;EAGhBC,GAAG,EAAE;AAHW,CAApB;AAMA;AACA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;EAChC,IAAI,CAACA,IAAL,EAAW;IACP,OAAO,IAAP;EACH;;EAED,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAAL,IAAeD,IAAI,CAACE,IAAL,IAAaF,IAAI,CAACE,IAAL,CAAUD,MAArD,CALgC,CAOhC;;EACA,IAAIE,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;IACvB,IAAIA,MAAM,CAACI,MAAX,EAAmB;MACf,OAAO;QACHC,IAAI,EAAE,OADH;QAEHC,KAAK,EAAEN,MAFJ;QAGHO,QAAQ,EAAE,CAHP;QAIHC,QAAQ,EAAER,MAAM,CAACI;MAJd,CAAP;IAMH;;IACD,OAAO;MACHC,IAAI,EAAE,OADH;MAEHE,QAAQ,EAAE,CAFP;MAGHC,QAAQ,EAAE;IAHP,CAAP;EAMH,CAvB+B,CAyBhC;;;EACA,OAAOR,MAAM,IAAI,IAAjB;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASS,oBAAT,CAA8BC,OAA9B,EAAuC;EACnC,MAAMC,QAAQ,GAAGT,KAAK,CAACC,OAAN,CAAcO,OAAd,IAAyBA,OAAO,CAAC,CAAD,CAAhC,GAAsCA,OAAvD;EACA,MAAME,YAAY,GAAG,OAAOD,QAAP,KAAoB,QAApB,GAA+BjB,WAAW,CAACiB,QAAQ,CAACE,WAAT,EAAD,CAA1C,GAAqEF,QAA1F;;EAEA,IAAIC,YAAY,KAAK,CAAjB,IAAsBA,YAAY,KAAK,CAAvC,IAA4CA,YAAY,KAAK,CAAjE,EAAoE;IAChE,OAAOA,YAAP;EACH;;EAED,MAAM,IAAIE,KAAJ,CAAW,wFAAuFlC,IAAI,CAACmC,OAAL,CAAaJ,QAAb,EAAuBK,OAAvB,CAA+B,KAA/B,EAAsC,IAAtC,EAA4CA,OAA5C,CAAoD,MAApD,EAA4D,EAA5D,CAAgE,OAAlK,CAAN;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,kBAAT,CAA4BlB,IAA5B,EAAkCmB,YAAlC,EAAgD;EAC5C,IAAI,CAAC9B,cAAc,CAAC+B,GAAf,CAAmBpB,IAAnB,CAAL,EAA+B;IAC3B,MAAMC,MAAM,GAAGF,oBAAoB,CAACC,IAAD,CAAnC;;IAEA,IAAIC,MAAJ,EAAY;MACRZ,cAAc,CAACgC,GAAf,CAAmBrB,IAAnB,EAAyBZ,GAAG,CAACkC,OAAJ,CAAYrB,MAAZ,CAAzB;IACH;EACJ;;EAED,MAAMsB,YAAY,GAAGlC,cAAc,CAACmC,GAAf,CAAmBxB,IAAnB,CAArB;;EAEA,IAAIuB,YAAJ,EAAkB;IACdA,YAAY,CAACJ,YAAD,CAAZ;;IACA,IAAII,YAAY,CAACE,MAAjB,EAAyB;MACrB,MAAM,IAAIV,KAAJ,CAAUQ,YAAY,CAACE,MAAb,CAAoBC,GAApB,CACZ9B,KAAK,IAAK,WAAU+B,IAAI,CAACC,SAAL,CAAehC,KAAK,CAACiC,IAArB,CAA2B,IAAGjC,KAAK,CAACkC,OAAQ,KADpD,EAEdC,IAFc,CAET,EAFS,CAAV,CAAN;IAGH;EACJ;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,mBAAT,CAA6BhC,IAA7B,EAAmCiC,MAAnC,EAA2CtB,OAA3C,EAAmE;EAAA,IAAfuB,MAAe,uEAAN,IAAM;;EAC/D,IAAI;IACA,MAAMtB,QAAQ,GAAGF,oBAAoB,CAACC,OAAD,CAArC;;IAEA,IAAIC,QAAQ,KAAK,CAAjB,EAAoB;MAChBM,kBAAkB,CAAClB,IAAD,EAAOG,KAAK,CAACC,OAAN,CAAcO,OAAd,IAAyBA,OAAO,CAACwB,KAAR,CAAc,CAAd,CAAzB,GAA4C,EAAnD,CAAlB;IACH;EACJ,CAND,CAME,OAAOC,GAAP,EAAY;IACV,MAAMC,eAAe,GAAI,2BAA0BJ,MAAO,kBAAiBG,GAAG,CAACN,OAAQ,EAAvF;;IAEA,IAAI,OAAOI,MAAP,KAAkB,QAAtB,EAAgC;MAC5B,MAAM,IAAInB,KAAJ,CAAW,GAAEmB,MAAO,QAAOG,eAAgB,EAA3C,CAAN;IACH,CAFD,MAEO;MACH,MAAM,IAAItB,KAAJ,CAAUsB,eAAV,CAAN;IACH;EACJ;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,mBAAT,CACIC,WADJ,EAEIL,MAFJ,EAIE;EAAA,IADEM,gBACF,uEADqBjD,IACrB;;EAEE;EACA,IAAI,CAACgD,WAAL,EAAkB;IACd;EACH;;EAEDE,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBI,OAAzB,CAAiCC,EAAE,IAAI;IACnC,MAAMC,GAAG,GAAGL,gBAAgB,CAACI,EAAD,CAAhB,IAAwB5D,mBAAmB,CAACwC,GAApB,CAAwBoB,EAAxB,CAAxB,IAAuD,IAAnE;;IAEA,IAAI,CAACC,GAAL,EAAU;MACN,MAAMf,OAAO,GAAI,GAAEI,MAAO,yBAAwBU,EAAG,gBAArD;MAEA,MAAM,IAAI7B,KAAJ,CAAUe,OAAV,CAAN;IACH;EACJ,CARD;AASH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,aAAT,CACIC,WADJ,EAEIb,MAFJ,EAIE;EAAA,IADEc,iBACF,uEADsBzD,IACtB;;EACE,IAAI,CAACwD,WAAL,EAAkB;IACd;EACH;;EAEDN,MAAM,CAACC,IAAP,CAAYK,WAAZ,EAAyBJ,OAAzB,CAAiCC,EAAE,IAAI;IACnC,MAAM5C,IAAI,GAAGgD,iBAAiB,CAACJ,EAAD,CAAjB,IAAyB3D,YAAY,CAACuC,GAAb,CAAiBoB,EAAjB,CAAzB,IAAiD,IAA9D;IAEAZ,mBAAmB,CAAChC,IAAD,EAAO4C,EAAP,EAAWG,WAAW,CAACH,EAAD,CAAtB,EAA4BV,MAA5B,CAAnB;EACH,CAJD;AAKH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,eAAT,CAAyBC,aAAzB,EAAuD;EAAA,IAAfhB,MAAe,uEAAN,IAAM;;EACnD,IAAI,CAACgB,aAAL,EAAoB;IAChB;EACH;;EAEDT,MAAM,CAACU,OAAP,CAAeD,aAAf,EACKP,OADL,CACa,QAAyC;IAAA,IAAxC,CAACS,gBAAD,EAAmBC,eAAnB,CAAwC;;IAC9C,IAAI;MACAnE,SAAS,CAACoE,qBAAV,CAAgCD,eAAhC;IACH,CAFD,CAEE,OAAOjB,GAAP,EAAY;MACV,MAAM,IAAIrB,KAAJ,CAAW,mCAAkCqC,gBAAiB,QAAOlB,MAAO,iBAAgBE,GAAG,CAACN,OAAQ,EAAxG,CAAN;IACH;EACJ,CAPL;AAQH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyB,iBAAT,CAA2BC,aAA3B,EAA0CtB,MAA1C,EAAkDuB,YAAlD,EAAgE;EAC5D,IAAID,aAAa,IAAI,CAACC,YAAY,CAACD,aAAD,CAAlC,EAAmD;IAC/C,MAAM,IAAIzC,KAAJ,CAAW,yCAAwCmB,MAAO,kBAAiBsB,aAAc,kBAAzF,CAAN;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASE,YAAT,CAAsBjC,MAAtB,EAA8B;EAC1B,OAAOA,MAAM,CAACC,GAAP,CAAW9B,KAAK,IAAI;IACvB,IAAIA,KAAK,CAAC+D,OAAN,KAAkB,sBAAtB,EAA8C;MAC1C,MAAMC,qBAAqB,GAAGhE,KAAK,CAACiE,QAAN,CAAexD,MAAf,GAAyB,GAAET,KAAK,CAACiE,QAAN,CAAe1B,KAAf,CAAqB,CAArB,CAAwB,IAAGvC,KAAK,CAACkE,MAAN,CAAaC,kBAAmB,EAAtF,GAA0FnE,KAAK,CAACkE,MAAN,CAAaC,kBAArI;MAEA,OAAQ,kCAAiCH,qBAAsB,GAA/D;IACH;;IACD,IAAIhE,KAAK,CAAC+D,OAAN,KAAkB,MAAtB,EAA8B;MAC1B,MAAMK,cAAc,GAAGpE,KAAK,CAACiE,QAAN,CAAe1B,KAAf,CAAqB,CAArB,CAAvB;MACA,MAAM8B,qBAAqB,GAAG9D,KAAK,CAACC,OAAN,CAAcR,KAAK,CAACK,MAApB,IAA8BL,KAAK,CAACK,MAAN,CAAa8B,IAAb,CAAkB,GAAlB,CAA9B,GAAuDnC,KAAK,CAACK,MAA3F;MACA,MAAMiE,cAAc,GAAGvC,IAAI,CAACC,SAAL,CAAehC,KAAK,CAACiC,IAArB,CAAvB;MAEA,OAAQ,aAAYmC,cAAe,iCAAgCC,qBAAsB,cAAaC,cAAe,KAArH;IACH;;IAED,MAAMC,KAAK,GAAGvE,KAAK,CAACiE,QAAN,CAAe,CAAf,MAAsB,GAAtB,GAA4BjE,KAAK,CAACiE,QAAN,CAAe1B,KAAf,CAAqB,CAArB,CAA5B,GAAsDvC,KAAK,CAACiE,QAA1E;IAEA,OAAQ,IAAGM,KAAM,KAAIvE,KAAK,CAACkC,OAAQ,YAAWH,IAAI,CAACC,SAAL,CAAehC,KAAK,CAACiC,IAArB,CAA2B,EAAzE;EACH,CAjBM,EAiBJH,GAjBI,CAiBAI,OAAO,IAAK,OAAMA,OAAQ,KAjB1B,EAiBgCC,IAjBhC,CAiBqC,EAjBrC,CAAP;AAkBH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqC,oBAAT,CAA8BC,MAA9B,EAAqD;EAAA,IAAfnC,MAAe,uEAAN,IAAM;EACjDxC,cAAc,GAAGA,cAAc,IAAIN,GAAG,CAACkC,OAAJ,CAAYvC,YAAZ,CAAnC;;EAEA,IAAI,CAACW,cAAc,CAAC2E,MAAD,CAAnB,EAA6B;IACzB,MAAM,IAAItD,KAAJ,CAAW,2BAA0BmB,MAAO,iBAAgBwB,YAAY,CAAChE,cAAc,CAAC+B,MAAhB,CAAwB,EAAhG,CAAN;EACH;;EAED,IAAIgB,MAAM,CAAC6B,cAAP,CAAsBC,IAAtB,CAA2BF,MAA3B,EAAmC,cAAnC,CAAJ,EAAwD;IACpDlF,sBAAsB,CAAC+C,MAAD,EAAS,4BAAT,CAAtB;EACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsC,QAAT,CAAkBH,MAAlB,EAA0BnC,MAA1B,EAAkCc,iBAAlC,EAAqDR,gBAArD,EAAuE;EACnE4B,oBAAoB,CAACC,MAAD,EAASnC,MAAT,CAApB;EACAY,aAAa,CAACuB,MAAM,CAACI,KAAR,EAAevC,MAAf,EAAuBc,iBAAvB,CAAb;EACAV,mBAAmB,CAAC+B,MAAM,CAACxB,GAAR,EAAaX,MAAb,EAAqBM,gBAArB,CAAnB;EACAS,eAAe,CAACoB,MAAM,CAACK,OAAR,EAAiBxC,MAAjB,CAAf;;EAEA,KAAK,MAAMyC,QAAX,IAAuBN,MAAM,CAACO,SAAP,IAAoB,EAA3C,EAA+C;IAC3C9B,aAAa,CAAC6B,QAAQ,CAACF,KAAV,EAAiBvC,MAAjB,EAAyBc,iBAAzB,CAAb;IACAV,mBAAmB,CAACqC,QAAQ,CAAC9B,GAAV,EAAeX,MAAf,EAAuBM,gBAAvB,CAAnB;IACAS,eAAe,CAACoB,MAAM,CAACK,OAAR,EAAiBxC,MAAjB,CAAf;EACH;AACJ;;AAED,MAAM2C,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,mBAAT,CAA6BC,WAA7B,EAA0C;EACtC,MAAMC,YAAY,GAAGC,GAAG,CAACzF,SAAJ,CAAc+B,GAAd,CAAkB2D,IAAlB,CAAuBH,WAAW,CAACI,kBAAnC,CAArB;EACA,MAAMC,kBAAkB,GAAGH,GAAG,CAACzF,SAAJ,CAAc+B,GAAd,CAAkB2D,IAAlB,CAAuBH,WAAW,CAACM,gBAAnC,CAA3B;EACA,MAAMC,aAAa,GAAGL,GAAG,CAACzF,SAAJ,CAAc+B,GAAd,CAAkB2D,IAAlB,CAAuBH,WAAW,CAACQ,WAAnC,CAAtB,CAHsC,CAKtC;;EACA,KAAK,MAAMC,OAAX,IAAsBT,WAAtB,EAAmC;IAC/B,IAAIH,SAAS,CAACzD,GAAV,CAAcqE,OAAd,CAAJ,EAA4B;MACxB;IACH;;IACDZ,SAAS,CAACa,GAAV,CAAcD,OAAd;IAEAnD,mBAAmB,CAACmD,OAAO,CAAC5C,GAAT,EAAc4C,OAAO,CAACE,IAAtB,EAA4BV,YAA5B,CAAnB;IACAhC,eAAe,CAACwC,OAAO,CAACf,OAAT,EAAkBe,OAAO,CAACE,IAA1B,CAAf;IACApC,iBAAiB,CAACkC,OAAO,CAACG,SAAT,EAAoBH,OAAO,CAACE,IAA5B,EAAkCN,kBAAlC,CAAjB;IACAvC,aAAa,CAAC2C,OAAO,CAAChB,KAAT,EAAgBgB,OAAO,CAACE,IAAxB,EAA8BJ,aAA9B,CAAb;EACH;AACJ,C,CAED;AACA;AACA;;;AAEAM,MAAM,CAACC,OAAP,GAAiB;EACb/F,oBADa;EAEbyE,QAFa;EAGbO,mBAHa;EAIbX,oBAJa;EAKbpC;AALa,CAAjB"},"metadata":{},"sourceType":"script"}