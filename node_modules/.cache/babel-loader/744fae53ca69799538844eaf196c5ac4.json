{"ast":null,"code":"/**\n * @fileoverview Enforces or disallows inline comments.\n * @author Greg Cochard\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow inline comments after code\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-inline-comments\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        ignorePattern: {\n          type: \"string\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      unexpectedInlineComment: \"Unexpected comment inline with code.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    const options = context.options[0];\n    let customIgnoreRegExp;\n\n    if (options && options.ignorePattern) {\n      customIgnoreRegExp = new RegExp(options.ignorePattern, \"u\");\n    }\n    /**\n     * Will check that comments are not on lines starting with or ending with code\n     * @param {ASTNode} node The comment node to check\n     * @private\n     * @returns {void}\n     */\n\n\n    function testCodeAroundComment(node) {\n      const startLine = String(sourceCode.lines[node.loc.start.line - 1]),\n            endLine = String(sourceCode.lines[node.loc.end.line - 1]),\n            preamble = startLine.slice(0, node.loc.start.column).trim(),\n            postamble = endLine.slice(node.loc.end.column).trim(),\n            isPreambleEmpty = !preamble,\n            isPostambleEmpty = !postamble; // Nothing on both sides\n\n      if (isPreambleEmpty && isPostambleEmpty) {\n        return;\n      } // Matches the ignore pattern\n\n\n      if (customIgnoreRegExp && customIgnoreRegExp.test(node.value)) {\n        return;\n      } // JSX Exception\n\n\n      if ((isPreambleEmpty || preamble === \"{\") && (isPostambleEmpty || postamble === \"}\")) {\n        const enclosingNode = sourceCode.getNodeByRangeIndex(node.range[0]);\n\n        if (enclosingNode && enclosingNode.type === \"JSXEmptyExpression\") {\n          return;\n        }\n      } // Don't report ESLint directive comments\n\n\n      if (astUtils.isDirectiveComment(node)) {\n        return;\n      }\n\n      context.report({\n        node,\n        messageId: \"unexpectedInlineComment\"\n      });\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      Program() {\n        sourceCode.getAllComments().filter(token => token.type !== \"Shebang\").forEach(testCodeAroundComment);\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","ignorePattern","additionalProperties","messages","unexpectedInlineComment","create","context","sourceCode","getSourceCode","options","customIgnoreRegExp","RegExp","testCodeAroundComment","node","startLine","String","lines","loc","start","line","endLine","end","preamble","slice","column","trim","postamble","isPreambleEmpty","isPostambleEmpty","test","value","enclosingNode","getNodeByRangeIndex","range","isDirectiveComment","report","messageId","Program","getAllComments","filter","token","forEach"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-inline-comments.js"],"sourcesContent":["/**\n * @fileoverview Enforces or disallows inline comments.\n * @author Greg Cochard\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow inline comments after code\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-inline-comments\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    ignorePattern: {\n                        type: \"string\"\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            unexpectedInlineComment: \"Unexpected comment inline with code.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n        const options = context.options[0];\n        let customIgnoreRegExp;\n\n        if (options && options.ignorePattern) {\n            customIgnoreRegExp = new RegExp(options.ignorePattern, \"u\");\n        }\n\n        /**\n         * Will check that comments are not on lines starting with or ending with code\n         * @param {ASTNode} node The comment node to check\n         * @private\n         * @returns {void}\n         */\n        function testCodeAroundComment(node) {\n\n            const startLine = String(sourceCode.lines[node.loc.start.line - 1]),\n                endLine = String(sourceCode.lines[node.loc.end.line - 1]),\n                preamble = startLine.slice(0, node.loc.start.column).trim(),\n                postamble = endLine.slice(node.loc.end.column).trim(),\n                isPreambleEmpty = !preamble,\n                isPostambleEmpty = !postamble;\n\n            // Nothing on both sides\n            if (isPreambleEmpty && isPostambleEmpty) {\n                return;\n            }\n\n            // Matches the ignore pattern\n            if (customIgnoreRegExp && customIgnoreRegExp.test(node.value)) {\n                return;\n            }\n\n            // JSX Exception\n            if (\n                (isPreambleEmpty || preamble === \"{\") &&\n                (isPostambleEmpty || postamble === \"}\")\n            ) {\n                const enclosingNode = sourceCode.getNodeByRangeIndex(node.range[0]);\n\n                if (enclosingNode && enclosingNode.type === \"JSXEmptyExpression\") {\n                    return;\n                }\n            }\n\n            // Don't report ESLint directive comments\n            if (astUtils.isDirectiveComment(node)) {\n                return;\n            }\n\n            context.report({\n                node,\n                messageId: \"unexpectedInlineComment\"\n            });\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            Program() {\n                sourceCode.getAllComments()\n                    .filter(token => token.type !== \"Shebang\")\n                    .forEach(testCodeAroundComment);\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}