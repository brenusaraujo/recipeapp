{"ast":null,"code":"/**\n * @fileoverview Rule to check for ambiguous div operator in regexes\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow division operators explicitly at the beginning of regular expressions\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-div-regex\"\n    },\n    fixable: \"code\",\n    schema: [],\n    messages: {\n      unexpected: \"A regular expression literal can be confused with '/='.\"\n    }\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode();\n    return {\n      Literal(node) {\n        const token = sourceCode.getFirstToken(node);\n\n        if (token.type === \"RegularExpression\" && token.value[1] === \"=\") {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n\n            fix(fixer) {\n              return fixer.replaceTextRange([token.range[0] + 1, token.range[0] + 2], \"[=]\");\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","unexpected","create","context","sourceCode","getSourceCode","Literal","node","token","getFirstToken","value","report","messageId","fix","fixer","replaceTextRange","range"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-div-regex.js"],"sourcesContent":["/**\n * @fileoverview Rule to check for ambiguous div operator in regexes\n * @author Matt DuVall <http://www.mattduvall.com>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow division operators explicitly at the beginning of regular expressions\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-div-regex\"\n        },\n\n        fixable: \"code\",\n\n        schema: [],\n\n        messages: {\n            unexpected: \"A regular expression literal can be confused with '/='.\"\n        }\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        return {\n\n            Literal(node) {\n                const token = sourceCode.getFirstToken(node);\n\n                if (token.type === \"RegularExpression\" && token.value[1] === \"=\") {\n                    context.report({\n                        node,\n                        messageId: \"unexpected\",\n                        fix(fixer) {\n                            return fixer.replaceTextRange([token.range[0] + 1, token.range[0] + 2], \"[=]\");\n                        }\n                    });\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,gFADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,OAAO,EAAE,MAVP;IAYFC,MAAM,EAAE,EAZN;IAcFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAdR,CADO;;EAoBbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,UAAU,GAAGD,OAAO,CAACE,aAAR,EAAnB;IAEA,OAAO;MAEHC,OAAO,CAACC,IAAD,EAAO;QACV,MAAMC,KAAK,GAAGJ,UAAU,CAACK,aAAX,CAAyBF,IAAzB,CAAd;;QAEA,IAAIC,KAAK,CAAChB,IAAN,KAAe,mBAAf,IAAsCgB,KAAK,CAACE,KAAN,CAAY,CAAZ,MAAmB,GAA7D,EAAkE;UAC9DP,OAAO,CAACQ,MAAR,CAAe;YACXJ,IADW;YAEXK,SAAS,EAAE,YAFA;;YAGXC,GAAG,CAACC,KAAD,EAAQ;cACP,OAAOA,KAAK,CAACC,gBAAN,CAAuB,CAACP,KAAK,CAACQ,KAAN,CAAY,CAAZ,IAAiB,CAAlB,EAAqBR,KAAK,CAACQ,KAAN,CAAY,CAAZ,IAAiB,CAAtC,CAAvB,EAAiE,KAAjE,CAAP;YACH;;UALU,CAAf;QAOH;MACJ;;IAdE,CAAP;EAiBH;;AAxCY,CAAjB"},"metadata":{},"sourceType":"script"}