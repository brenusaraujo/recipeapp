{"ast":null,"code":"/**\n * @fileoverview Rule to count multiple spaces in regular expressions\n * @author Matt DuVall <http://www.mattduvall.com/>\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\n\nconst regexpp = require(\"regexpp\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n\nconst regExpParser = new regexpp.RegExpParser();\nconst DOUBLE_SPACE = / {2}/u;\n/**\n * Check if node is a string\n * @param {ASTNode} node node to evaluate\n * @returns {boolean} True if its a string\n * @private\n */\n\nfunction isString(node) {\n  return node && node.type === \"Literal\" && typeof node.value === \"string\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow multiple spaces in regular expressions\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-regex-spaces\"\n    },\n    schema: [],\n    fixable: \"code\",\n    messages: {\n      multipleSpaces: \"Spaces are hard to count. Use {{{length}}}.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Validate regular expression\n     * @param {ASTNode} nodeToReport Node to report.\n     * @param {string} pattern Regular expression pattern to validate.\n     * @param {string} rawPattern Raw representation of the pattern in the source code.\n     * @param {number} rawPatternStartRange Start range of the pattern in the source code.\n     * @param {string} flags Regular expression flags.\n     * @returns {void}\n     * @private\n     */\n    function checkRegex(nodeToReport, pattern, rawPattern, rawPatternStartRange, flags) {\n      // Skip if there are no consecutive spaces in the source code, to avoid reporting e.g., RegExp(' \\ ').\n      if (!DOUBLE_SPACE.test(rawPattern)) {\n        return;\n      }\n\n      const characterClassNodes = [];\n      let regExpAST;\n\n      try {\n        regExpAST = regExpParser.parsePattern(pattern, 0, pattern.length, flags.includes(\"u\"));\n      } catch {\n        // Ignore regular expressions with syntax errors\n        return;\n      }\n\n      regexpp.visitRegExpAST(regExpAST, {\n        onCharacterClassEnter(ccNode) {\n          characterClassNodes.push(ccNode);\n        }\n\n      });\n      const spacesPattern = /( {2,})(?: [+*{?]|[^+*{?]|$)/gu;\n      let match;\n\n      while (match = spacesPattern.exec(pattern)) {\n        const {\n          1: {\n            length\n          },\n          index\n        } = match; // Report only consecutive spaces that are not in character classes.\n\n        if (characterClassNodes.every(_ref => {\n          let {\n            start,\n            end\n          } = _ref;\n          return index < start || end <= index;\n        })) {\n          context.report({\n            node: nodeToReport,\n            messageId: \"multipleSpaces\",\n            data: {\n              length\n            },\n\n            fix(fixer) {\n              if (pattern !== rawPattern) {\n                return null;\n              }\n\n              return fixer.replaceTextRange([rawPatternStartRange + index, rawPatternStartRange + index + length], ` {${length}}`);\n            }\n\n          }); // Report only the first occurrence of consecutive spaces\n\n          return;\n        }\n      }\n    }\n    /**\n     * Validate regular expression literals\n     * @param {ASTNode} node node to validate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkLiteral(node) {\n      if (node.regex) {\n        const pattern = node.regex.pattern;\n        const rawPattern = node.raw.slice(1, node.raw.lastIndexOf(\"/\"));\n        const rawPatternStartRange = node.range[0] + 1;\n        const flags = node.regex.flags;\n        checkRegex(node, pattern, rawPattern, rawPatternStartRange, flags);\n      }\n    }\n    /**\n     * Validate strings passed to the RegExp constructor\n     * @param {ASTNode} node node to validate\n     * @returns {void}\n     * @private\n     */\n\n\n    function checkFunction(node) {\n      const scope = context.getScope();\n      const regExpVar = astUtils.getVariableByName(scope, \"RegExp\");\n      const shadowed = regExpVar && regExpVar.defs.length > 0;\n      const patternNode = node.arguments[0];\n      const flagsNode = node.arguments[1];\n\n      if (node.callee.type === \"Identifier\" && node.callee.name === \"RegExp\" && isString(patternNode) && !shadowed) {\n        const pattern = patternNode.value;\n        const rawPattern = patternNode.raw.slice(1, -1);\n        const rawPatternStartRange = patternNode.range[0] + 1;\n        const flags = isString(flagsNode) ? flagsNode.value : \"\";\n        checkRegex(node, pattern, rawPattern, rawPatternStartRange, flags);\n      }\n    }\n\n    return {\n      Literal: checkLiteral,\n      CallExpression: checkFunction,\n      NewExpression: checkFunction\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","regexpp","regExpParser","RegExpParser","DOUBLE_SPACE","isString","node","type","value","module","exports","meta","docs","description","category","recommended","url","schema","fixable","messages","multipleSpaces","create","context","checkRegex","nodeToReport","pattern","rawPattern","rawPatternStartRange","flags","test","characterClassNodes","regExpAST","parsePattern","length","includes","visitRegExpAST","onCharacterClassEnter","ccNode","push","spacesPattern","match","exec","index","every","start","end","report","messageId","data","fix","fixer","replaceTextRange","checkLiteral","regex","raw","slice","lastIndexOf","range","checkFunction","scope","getScope","regExpVar","getVariableByName","shadowed","defs","patternNode","arguments","flagsNode","callee","name","Literal","CallExpression","NewExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-regex-spaces.js"],"sourcesContent":["/**\n * @fileoverview Rule to count multiple spaces in regular expressions\n * @author Matt DuVall <http://www.mattduvall.com/>\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst astUtils = require(\"./utils/ast-utils\");\nconst regexpp = require(\"regexpp\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\nconst regExpParser = new regexpp.RegExpParser();\nconst DOUBLE_SPACE = / {2}/u;\n\n/**\n * Check if node is a string\n * @param {ASTNode} node node to evaluate\n * @returns {boolean} True if its a string\n * @private\n */\nfunction isString(node) {\n    return node && node.type === \"Literal\" && typeof node.value === \"string\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow multiple spaces in regular expressions\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-regex-spaces\"\n        },\n\n        schema: [],\n        fixable: \"code\",\n\n        messages: {\n            multipleSpaces: \"Spaces are hard to count. Use {{{length}}}.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Validate regular expression\n         * @param {ASTNode} nodeToReport Node to report.\n         * @param {string} pattern Regular expression pattern to validate.\n         * @param {string} rawPattern Raw representation of the pattern in the source code.\n         * @param {number} rawPatternStartRange Start range of the pattern in the source code.\n         * @param {string} flags Regular expression flags.\n         * @returns {void}\n         * @private\n         */\n        function checkRegex(nodeToReport, pattern, rawPattern, rawPatternStartRange, flags) {\n\n            // Skip if there are no consecutive spaces in the source code, to avoid reporting e.g., RegExp(' \\ ').\n            if (!DOUBLE_SPACE.test(rawPattern)) {\n                return;\n            }\n\n            const characterClassNodes = [];\n            let regExpAST;\n\n            try {\n                regExpAST = regExpParser.parsePattern(pattern, 0, pattern.length, flags.includes(\"u\"));\n            } catch {\n\n                // Ignore regular expressions with syntax errors\n                return;\n            }\n\n            regexpp.visitRegExpAST(regExpAST, {\n                onCharacterClassEnter(ccNode) {\n                    characterClassNodes.push(ccNode);\n                }\n            });\n\n            const spacesPattern = /( {2,})(?: [+*{?]|[^+*{?]|$)/gu;\n            let match;\n\n            while ((match = spacesPattern.exec(pattern))) {\n                const { 1: { length }, index } = match;\n\n                // Report only consecutive spaces that are not in character classes.\n                if (\n                    characterClassNodes.every(({ start, end }) => index < start || end <= index)\n                ) {\n                    context.report({\n                        node: nodeToReport,\n                        messageId: \"multipleSpaces\",\n                        data: { length },\n                        fix(fixer) {\n                            if (pattern !== rawPattern) {\n                                return null;\n                            }\n                            return fixer.replaceTextRange(\n                                [rawPatternStartRange + index, rawPatternStartRange + index + length],\n                                ` {${length}}`\n                            );\n                        }\n                    });\n\n                    // Report only the first occurrence of consecutive spaces\n                    return;\n                }\n            }\n        }\n\n        /**\n         * Validate regular expression literals\n         * @param {ASTNode} node node to validate\n         * @returns {void}\n         * @private\n         */\n        function checkLiteral(node) {\n            if (node.regex) {\n                const pattern = node.regex.pattern;\n                const rawPattern = node.raw.slice(1, node.raw.lastIndexOf(\"/\"));\n                const rawPatternStartRange = node.range[0] + 1;\n                const flags = node.regex.flags;\n\n                checkRegex(\n                    node,\n                    pattern,\n                    rawPattern,\n                    rawPatternStartRange,\n                    flags\n                );\n            }\n        }\n\n        /**\n         * Validate strings passed to the RegExp constructor\n         * @param {ASTNode} node node to validate\n         * @returns {void}\n         * @private\n         */\n        function checkFunction(node) {\n            const scope = context.getScope();\n            const regExpVar = astUtils.getVariableByName(scope, \"RegExp\");\n            const shadowed = regExpVar && regExpVar.defs.length > 0;\n            const patternNode = node.arguments[0];\n            const flagsNode = node.arguments[1];\n\n            if (node.callee.type === \"Identifier\" && node.callee.name === \"RegExp\" && isString(patternNode) && !shadowed) {\n                const pattern = patternNode.value;\n                const rawPattern = patternNode.raw.slice(1, -1);\n                const rawPatternStartRange = patternNode.range[0] + 1;\n                const flags = isString(flagsNode) ? flagsNode.value : \"\";\n\n                checkRegex(\n                    node,\n                    pattern,\n                    rawPattern,\n                    rawPatternStartRange,\n                    flags\n                );\n            }\n        }\n\n        return {\n            Literal: checkLiteral,\n            CallExpression: checkFunction,\n            NewExpression: checkFunction\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}