{"ast":null,"code":"/**\n * @fileoverview Define the abstract class about cursors which iterate tokens.\n * @author Toru Nagashima\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * The abstract class about cursors which iterate tokens.\n *\n * This class has 2 abstract methods.\n *\n * - `current: Token | Comment | null` ... The current token.\n * - `moveNext(): boolean` ... Moves this cursor to the next token. If the next token didn't exist, it returns `false`.\n *\n * This is similar to ES2015 Iterators.\n * However, Iterators were slow (at 2017-01), so I created this class as similar to C# IEnumerable.\n *\n * There are the following known sub classes.\n *\n * - ForwardTokenCursor .......... The cursor which iterates tokens only.\n * - BackwardTokenCursor ......... The cursor which iterates tokens only in reverse.\n * - ForwardTokenCommentCursor ... The cursor which iterates tokens and comments.\n * - BackwardTokenCommentCursor .. The cursor which iterates tokens and comments in reverse.\n * - DecorativeCursor\n *     - FilterCursor ............ The cursor which ignores the specified tokens.\n *     - SkipCursor .............. The cursor which ignores the first few tokens.\n *     - LimitCursor ............. The cursor which limits the count of tokens.\n *\n */\n\nmodule.exports = class Cursor {\n  /**\n   * Initializes this cursor.\n   */\n  constructor() {\n    this.current = null;\n  }\n  /**\n   * Gets the first token.\n   * This consumes this cursor.\n   * @returns {Token|Comment} The first token or null.\n   */\n\n\n  getOneToken() {\n    return this.moveNext() ? this.current : null;\n  }\n  /**\n   * Gets the first tokens.\n   * This consumes this cursor.\n   * @returns {(Token|Comment)[]} All tokens.\n   */\n\n\n  getAllTokens() {\n    const tokens = [];\n\n    while (this.moveNext()) {\n      tokens.push(this.current);\n    }\n\n    return tokens;\n  }\n  /**\n   * Moves this cursor to the next token.\n   * @returns {boolean} `true` if the next token exists.\n   * @abstract\n   */\n\n  /* istanbul ignore next */\n\n\n  moveNext() {\n    // eslint-disable-line class-methods-use-this\n    throw new Error(\"Not implemented.\");\n  }\n\n};","map":{"version":3,"names":["module","exports","Cursor","constructor","current","getOneToken","moveNext","getAllTokens","tokens","push","Error"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/source-code/token-store/cursor.js"],"sourcesContent":["/**\n * @fileoverview Define the abstract class about cursors which iterate tokens.\n * @author Toru Nagashima\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Exports\n//------------------------------------------------------------------------------\n\n/**\n * The abstract class about cursors which iterate tokens.\n *\n * This class has 2 abstract methods.\n *\n * - `current: Token | Comment | null` ... The current token.\n * - `moveNext(): boolean` ... Moves this cursor to the next token. If the next token didn't exist, it returns `false`.\n *\n * This is similar to ES2015 Iterators.\n * However, Iterators were slow (at 2017-01), so I created this class as similar to C# IEnumerable.\n *\n * There are the following known sub classes.\n *\n * - ForwardTokenCursor .......... The cursor which iterates tokens only.\n * - BackwardTokenCursor ......... The cursor which iterates tokens only in reverse.\n * - ForwardTokenCommentCursor ... The cursor which iterates tokens and comments.\n * - BackwardTokenCommentCursor .. The cursor which iterates tokens and comments in reverse.\n * - DecorativeCursor\n *     - FilterCursor ............ The cursor which ignores the specified tokens.\n *     - SkipCursor .............. The cursor which ignores the first few tokens.\n *     - LimitCursor ............. The cursor which limits the count of tokens.\n *\n */\nmodule.exports = class Cursor {\n\n    /**\n     * Initializes this cursor.\n     */\n    constructor() {\n        this.current = null;\n    }\n\n    /**\n     * Gets the first token.\n     * This consumes this cursor.\n     * @returns {Token|Comment} The first token or null.\n     */\n    getOneToken() {\n        return this.moveNext() ? this.current : null;\n    }\n\n    /**\n     * Gets the first tokens.\n     * This consumes this cursor.\n     * @returns {(Token|Comment)[]} All tokens.\n     */\n    getAllTokens() {\n        const tokens = [];\n\n        while (this.moveNext()) {\n            tokens.push(this.current);\n        }\n\n        return tokens;\n    }\n\n    /**\n     * Moves this cursor to the next token.\n     * @returns {boolean} `true` if the next token exists.\n     * @abstract\n     */\n    /* istanbul ignore next */\n    moveNext() { // eslint-disable-line class-methods-use-this\n        throw new Error(\"Not implemented.\");\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,MAAN,CAAa;EAE1B;AACJ;AACA;EACIC,WAAW,GAAG;IACV,KAAKC,OAAL,GAAe,IAAf;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIC,WAAW,GAAG;IACV,OAAO,KAAKC,QAAL,KAAkB,KAAKF,OAAvB,GAAiC,IAAxC;EACH;EAED;AACJ;AACA;AACA;AACA;;;EACIG,YAAY,GAAG;IACX,MAAMC,MAAM,GAAG,EAAf;;IAEA,OAAO,KAAKF,QAAL,EAAP,EAAwB;MACpBE,MAAM,CAACC,IAAP,CAAY,KAAKL,OAAjB;IACH;;IAED,OAAOI,MAAP;EACH;EAED;AACJ;AACA;AACA;AACA;;EACI;;;EACAF,QAAQ,GAAG;IAAE;IACT,MAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;EACH;;AAzCyB,CAA9B"},"metadata":{},"sourceType":"script"}