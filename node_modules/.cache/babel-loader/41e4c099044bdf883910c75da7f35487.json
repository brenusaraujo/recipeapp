{"ast":null,"code":"/**\n * @fileoverview require default case in switch statements\n * @author Aliaksei Shytkin\n */\n\"use strict\";\n\nconst DEFAULT_COMMENT_PATTERN = /^no default$/iu; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require `default` cases in `switch` statements\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/default-case\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        commentPattern: {\n          type: \"string\"\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      missingDefaultCase: \"Expected a default case.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0] || {};\n    const commentPattern = options.commentPattern ? new RegExp(options.commentPattern, \"u\") : DEFAULT_COMMENT_PATTERN;\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Shortcut to get last element of array\n     * @param  {*[]} collection Array\n     * @returns {*} Last element\n     */\n\n    function last(collection) {\n      return collection[collection.length - 1];\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      SwitchStatement(node) {\n        if (!node.cases.length) {\n          /*\n           * skip check of empty switch because there is no easy way\n           * to extract comments inside it now\n           */\n          return;\n        }\n\n        const hasDefault = node.cases.some(v => v.test === null);\n\n        if (!hasDefault) {\n          let comment;\n          const lastCase = last(node.cases);\n          const comments = sourceCode.getCommentsAfter(lastCase);\n\n          if (comments.length) {\n            comment = last(comments);\n          }\n\n          if (!comment || !commentPattern.test(comment.value.trim())) {\n            context.report({\n              node,\n              messageId: \"missingDefaultCase\"\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["DEFAULT_COMMENT_PATTERN","module","exports","meta","type","docs","description","category","recommended","url","schema","properties","commentPattern","additionalProperties","messages","missingDefaultCase","create","context","options","RegExp","sourceCode","getSourceCode","last","collection","length","SwitchStatement","node","cases","hasDefault","some","v","test","comment","lastCase","comments","getCommentsAfter","value","trim","report","messageId"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/default-case.js"],"sourcesContent":["/**\n * @fileoverview require default case in switch statements\n * @author Aliaksei Shytkin\n */\n\"use strict\";\n\nconst DEFAULT_COMMENT_PATTERN = /^no default$/iu;\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require `default` cases in `switch` statements\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/default-case\"\n        },\n\n        schema: [{\n            type: \"object\",\n            properties: {\n                commentPattern: {\n                    type: \"string\"\n                }\n            },\n            additionalProperties: false\n        }],\n\n        messages: {\n            missingDefaultCase: \"Expected a default case.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0] || {};\n        const commentPattern = options.commentPattern\n            ? new RegExp(options.commentPattern, \"u\")\n            : DEFAULT_COMMENT_PATTERN;\n\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Shortcut to get last element of array\n         * @param  {*[]} collection Array\n         * @returns {*} Last element\n         */\n        function last(collection) {\n            return collection[collection.length - 1];\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n\n            SwitchStatement(node) {\n\n                if (!node.cases.length) {\n\n                    /*\n                     * skip check of empty switch because there is no easy way\n                     * to extract comments inside it now\n                     */\n                    return;\n                }\n\n                const hasDefault = node.cases.some(v => v.test === null);\n\n                if (!hasDefault) {\n\n                    let comment;\n\n                    const lastCase = last(node.cases);\n                    const comments = sourceCode.getCommentsAfter(lastCase);\n\n                    if (comments.length) {\n                        comment = last(comments);\n                    }\n\n                    if (!comment || !commentPattern.test(comment.value.trim())) {\n                        context.report({ node, messageId: \"missingDefaultCase\" });\n                    }\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,uBAAuB,GAAG,gBAAhC,C,CAEA;AACA;AACA;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,YADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,gDADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CAAC;MACLN,IAAI,EAAE,QADD;MAELO,UAAU,EAAE;QACRC,cAAc,EAAE;UACZR,IAAI,EAAE;QADM;MADR,CAFP;MAOLS,oBAAoB,EAAE;IAPjB,CAAD,CAVN;IAoBFC,QAAQ,EAAE;MACNC,kBAAkB,EAAE;IADd;EApBR,CADO;;EA0BbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgB,CAAhB,KAAsB,EAAtC;IACA,MAAMN,cAAc,GAAGM,OAAO,CAACN,cAAR,GACjB,IAAIO,MAAJ,CAAWD,OAAO,CAACN,cAAnB,EAAmC,GAAnC,CADiB,GAEjBZ,uBAFN;IAIA,MAAMoB,UAAU,GAAGH,OAAO,CAACI,aAAR,EAAnB,CANY,CAQZ;IACA;IACA;;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASC,IAAT,CAAcC,UAAd,EAA0B;MACtB,OAAOA,UAAU,CAACA,UAAU,CAACC,MAAX,GAAoB,CAArB,CAAjB;IACH,CAnBW,CAqBZ;IACA;IACA;;;IAEA,OAAO;MAEHC,eAAe,CAACC,IAAD,EAAO;QAElB,IAAI,CAACA,IAAI,CAACC,KAAL,CAAWH,MAAhB,EAAwB;UAEpB;AACpB;AACA;AACA;UACoB;QACH;;QAED,MAAMI,UAAU,GAAGF,IAAI,CAACC,KAAL,CAAWE,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,IAAhC,CAAnB;;QAEA,IAAI,CAACH,UAAL,EAAiB;UAEb,IAAII,OAAJ;UAEA,MAAMC,QAAQ,GAAGX,IAAI,CAACI,IAAI,CAACC,KAAN,CAArB;UACA,MAAMO,QAAQ,GAAGd,UAAU,CAACe,gBAAX,CAA4BF,QAA5B,CAAjB;;UAEA,IAAIC,QAAQ,CAACV,MAAb,EAAqB;YACjBQ,OAAO,GAAGV,IAAI,CAACY,QAAD,CAAd;UACH;;UAED,IAAI,CAACF,OAAD,IAAY,CAACpB,cAAc,CAACmB,IAAf,CAAoBC,OAAO,CAACI,KAAR,CAAcC,IAAd,EAApB,CAAjB,EAA4D;YACxDpB,OAAO,CAACqB,MAAR,CAAe;cAAEZ,IAAF;cAAQa,SAAS,EAAE;YAAnB,CAAf;UACH;QACJ;MACJ;;IA9BE,CAAP;EAgCH;;AAnFY,CAAjB"},"metadata":{},"sourceType":"script"}