{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of alert, confirm, prompt\n * @author Nicholas C. Zakas\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n  getStaticPropertyName: getPropertyName,\n  getVariableByName,\n  skipChainExpression\n} = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given name is a prohibited identifier.\n * @param {string} name The name to check\n * @returns {boolean} Whether or not the name is prohibited.\n */\n\n\nfunction isProhibitedIdentifier(name) {\n  return /^(alert|confirm|prompt)$/u.test(name);\n}\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\n\n\nfunction findReference(scope, node) {\n  const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] && reference.identifier.range[1] === node.range[1]);\n\n  if (references.length === 1) {\n    return references[0];\n  }\n\n  return null;\n}\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the name is shadowed.\n */\n\n\nfunction isShadowed(scope, node) {\n  const reference = findReference(scope, node);\n  return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n/**\n * Checks if the given identifier node is a ThisExpression in the global scope or the global window property.\n * @param {Object} scope The current scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the node is a reference to the global object.\n */\n\n\nfunction isGlobalThisReferenceOrGlobalWindow(scope, node) {\n  if (scope.type === \"global\" && node.type === \"ThisExpression\") {\n    return true;\n  }\n\n  if (node.type === \"Identifier\" && (node.name === \"window\" || node.name === \"globalThis\" && getVariableByName(scope, \"globalThis\"))) {\n    return !isShadowed(scope, node);\n  }\n\n  return false;\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"disallow the use of `alert`, `confirm`, and `prompt`\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/no-alert\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Unexpected {{name}}.\"\n    }\n  },\n\n  create(context) {\n    return {\n      CallExpression(node) {\n        const callee = skipChainExpression(node.callee),\n              currentScope = context.getScope(); // without window.\n\n        if (callee.type === \"Identifier\") {\n          const name = callee.name;\n\n          if (!isShadowed(currentScope, callee) && isProhibitedIdentifier(callee.name)) {\n            context.report({\n              node,\n              messageId: \"unexpected\",\n              data: {\n                name\n              }\n            });\n          }\n        } else if (callee.type === \"MemberExpression\" && isGlobalThisReferenceOrGlobalWindow(currentScope, callee.object)) {\n          const name = getPropertyName(callee);\n\n          if (isProhibitedIdentifier(name)) {\n            context.report({\n              node,\n              messageId: \"unexpected\",\n              data: {\n                name\n              }\n            });\n          }\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["getStaticPropertyName","getPropertyName","getVariableByName","skipChainExpression","require","isProhibitedIdentifier","name","test","findReference","scope","node","references","filter","reference","identifier","range","length","isShadowed","resolved","defs","isGlobalThisReferenceOrGlobalWindow","type","module","exports","meta","docs","description","category","recommended","url","schema","messages","unexpected","create","context","CallExpression","callee","currentScope","getScope","report","messageId","data","object"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-alert.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of alert, confirm, prompt\n * @author Nicholas C. Zakas\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nconst {\n    getStaticPropertyName: getPropertyName,\n    getVariableByName,\n    skipChainExpression\n} = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given name is a prohibited identifier.\n * @param {string} name The name to check\n * @returns {boolean} Whether or not the name is prohibited.\n */\nfunction isProhibitedIdentifier(name) {\n    return /^(alert|confirm|prompt)$/u.test(name);\n}\n\n/**\n * Finds the eslint-scope reference in the given scope.\n * @param {Object} scope The scope to search.\n * @param {ASTNode} node The identifier node.\n * @returns {Reference|null} Returns the found reference or null if none were found.\n */\nfunction findReference(scope, node) {\n    const references = scope.references.filter(reference => reference.identifier.range[0] === node.range[0] &&\n            reference.identifier.range[1] === node.range[1]);\n\n    if (references.length === 1) {\n        return references[0];\n    }\n    return null;\n}\n\n/**\n * Checks if the given identifier node is shadowed in the given scope.\n * @param {Object} scope The current scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the name is shadowed.\n */\nfunction isShadowed(scope, node) {\n    const reference = findReference(scope, node);\n\n    return reference && reference.resolved && reference.resolved.defs.length > 0;\n}\n\n/**\n * Checks if the given identifier node is a ThisExpression in the global scope or the global window property.\n * @param {Object} scope The current scope.\n * @param {string} node The identifier node to check\n * @returns {boolean} Whether or not the node is a reference to the global object.\n */\nfunction isGlobalThisReferenceOrGlobalWindow(scope, node) {\n    if (scope.type === \"global\" && node.type === \"ThisExpression\") {\n        return true;\n    }\n    if (\n        node.type === \"Identifier\" &&\n        (\n            node.name === \"window\" ||\n            (node.name === \"globalThis\" && getVariableByName(scope, \"globalThis\"))\n        )\n    ) {\n        return !isShadowed(scope, node);\n    }\n\n    return false;\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"disallow the use of `alert`, `confirm`, and `prompt`\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/no-alert\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Unexpected {{name}}.\"\n        }\n    },\n\n    create(context) {\n        return {\n            CallExpression(node) {\n                const callee = skipChainExpression(node.callee),\n                    currentScope = context.getScope();\n\n                // without window.\n                if (callee.type === \"Identifier\") {\n                    const name = callee.name;\n\n                    if (!isShadowed(currentScope, callee) && isProhibitedIdentifier(callee.name)) {\n                        context.report({\n                            node,\n                            messageId: \"unexpected\",\n                            data: { name }\n                        });\n                    }\n\n                } else if (callee.type === \"MemberExpression\" && isGlobalThisReferenceOrGlobalWindow(currentScope, callee.object)) {\n                    const name = getPropertyName(callee);\n\n                    if (isProhibitedIdentifier(name)) {\n                        context.report({\n                            node,\n                            messageId: \"unexpected\",\n                            data: { name }\n                        });\n                    }\n                }\n            }\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA,MAAM;EACFA,qBAAqB,EAAEC,eADrB;EAEFC,iBAFE;EAGFC;AAHE,IAIFC,OAAO,CAAC,mBAAD,CAJX,C,CAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASC,sBAAT,CAAgCC,IAAhC,EAAsC;EAClC,OAAO,4BAA4BC,IAA5B,CAAiCD,IAAjC,CAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,aAAT,CAAuBC,KAAvB,EAA8BC,IAA9B,EAAoC;EAChC,MAAMC,UAAU,GAAGF,KAAK,CAACE,UAAN,CAAiBC,MAAjB,CAAwBC,SAAS,IAAIA,SAAS,CAACC,UAAV,CAAqBC,KAArB,CAA2B,CAA3B,MAAkCL,IAAI,CAACK,KAAL,CAAW,CAAX,CAAlC,IAChDF,SAAS,CAACC,UAAV,CAAqBC,KAArB,CAA2B,CAA3B,MAAkCL,IAAI,CAACK,KAAL,CAAW,CAAX,CADvB,CAAnB;;EAGA,IAAIJ,UAAU,CAACK,MAAX,KAAsB,CAA1B,EAA6B;IACzB,OAAOL,UAAU,CAAC,CAAD,CAAjB;EACH;;EACD,OAAO,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,UAAT,CAAoBR,KAApB,EAA2BC,IAA3B,EAAiC;EAC7B,MAAMG,SAAS,GAAGL,aAAa,CAACC,KAAD,EAAQC,IAAR,CAA/B;EAEA,OAAOG,SAAS,IAAIA,SAAS,CAACK,QAAvB,IAAmCL,SAAS,CAACK,QAAV,CAAmBC,IAAnB,CAAwBH,MAAxB,GAAiC,CAA3E;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,mCAAT,CAA6CX,KAA7C,EAAoDC,IAApD,EAA0D;EACtD,IAAID,KAAK,CAACY,IAAN,KAAe,QAAf,IAA2BX,IAAI,CAACW,IAAL,KAAc,gBAA7C,EAA+D;IAC3D,OAAO,IAAP;EACH;;EACD,IACIX,IAAI,CAACW,IAAL,KAAc,YAAd,KAEIX,IAAI,CAACJ,IAAL,KAAc,QAAd,IACCI,IAAI,CAACJ,IAAL,KAAc,YAAd,IAA8BJ,iBAAiB,CAACO,KAAD,EAAQ,YAAR,CAHpD,CADJ,EAME;IACE,OAAO,CAACQ,UAAU,CAACR,KAAD,EAAQC,IAAR,CAAlB;EACH;;EAED,OAAO,KAAP;AACH,C,CAED;AACA;AACA;;;AAEAY,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFH,IAAI,EAAE,YADJ;IAGFI,IAAI,EAAE;MACFC,WAAW,EAAE,sDADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IACZ,OAAO;MACHC,cAAc,CAACzB,IAAD,EAAO;QACjB,MAAM0B,MAAM,GAAGjC,mBAAmB,CAACO,IAAI,CAAC0B,MAAN,CAAlC;QAAA,MACIC,YAAY,GAAGH,OAAO,CAACI,QAAR,EADnB,CADiB,CAIjB;;QACA,IAAIF,MAAM,CAACf,IAAP,KAAgB,YAApB,EAAkC;UAC9B,MAAMf,IAAI,GAAG8B,MAAM,CAAC9B,IAApB;;UAEA,IAAI,CAACW,UAAU,CAACoB,YAAD,EAAeD,MAAf,CAAX,IAAqC/B,sBAAsB,CAAC+B,MAAM,CAAC9B,IAAR,CAA/D,EAA8E;YAC1E4B,OAAO,CAACK,MAAR,CAAe;cACX7B,IADW;cAEX8B,SAAS,EAAE,YAFA;cAGXC,IAAI,EAAE;gBAAEnC;cAAF;YAHK,CAAf;UAKH;QAEJ,CAXD,MAWO,IAAI8B,MAAM,CAACf,IAAP,KAAgB,kBAAhB,IAAsCD,mCAAmC,CAACiB,YAAD,EAAeD,MAAM,CAACM,MAAtB,CAA7E,EAA4G;UAC/G,MAAMpC,IAAI,GAAGL,eAAe,CAACmC,MAAD,CAA5B;;UAEA,IAAI/B,sBAAsB,CAACC,IAAD,CAA1B,EAAkC;YAC9B4B,OAAO,CAACK,MAAR,CAAe;cACX7B,IADW;cAEX8B,SAAS,EAAE,YAFA;cAGXC,IAAI,EAAE;gBAAEnC;cAAF;YAHK,CAAf;UAKH;QACJ;MACJ;;IA5BE,CAAP;EA+BH;;AAlDY,CAAjB"},"metadata":{},"sourceType":"script"}