{"ast":null,"code":"/**\n * @fileoverview Rule to flag references to undeclared variables.\n * @author Mark Macdonald\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given node is the argument of a typeof operator.\n * @param {ASTNode} node The AST node being checked.\n * @returns {boolean} Whether or not the node is the argument of a typeof operator.\n */\n\nfunction hasTypeOfOperator(node) {\n  const parent = node.parent;\n  return parent.type === \"UnaryExpression\" && parent.operator === \"typeof\";\n} //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow the use of undeclared variables unless mentioned in `/*global */` comments\",\n      category: \"Variables\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-undef\"\n    },\n    schema: [{\n      type: \"object\",\n      properties: {\n        typeof: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      undef: \"'{{name}}' is not defined.\"\n    }\n  },\n\n  create(context) {\n    const options = context.options[0];\n    const considerTypeOf = options && options.typeof === true || false;\n    return {\n      \"Program:exit\"() {\n        const globalScope = context.getScope();\n        globalScope.through.forEach(ref => {\n          const identifier = ref.identifier;\n\n          if (!considerTypeOf && hasTypeOfOperator(identifier)) {\n            return;\n          }\n\n          context.report({\n            node: identifier,\n            messageId: \"undef\",\n            data: identifier\n          });\n        });\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["hasTypeOfOperator","node","parent","type","operator","module","exports","meta","docs","description","category","recommended","url","schema","properties","typeof","default","additionalProperties","messages","undef","create","context","options","considerTypeOf","globalScope","getScope","through","forEach","ref","identifier","report","messageId","data"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-undef.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag references to undeclared variables.\n * @author Mark Macdonald\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Helpers\n//------------------------------------------------------------------------------\n\n/**\n * Checks if the given node is the argument of a typeof operator.\n * @param {ASTNode} node The AST node being checked.\n * @returns {boolean} Whether or not the node is the argument of a typeof operator.\n */\nfunction hasTypeOfOperator(node) {\n    const parent = node.parent;\n\n    return parent.type === \"UnaryExpression\" && parent.operator === \"typeof\";\n}\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow the use of undeclared variables unless mentioned in `/*global */` comments\",\n            category: \"Variables\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-undef\"\n        },\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    typeof: {\n                        type: \"boolean\",\n                        default: false\n                    }\n                },\n                additionalProperties: false\n            }\n        ],\n        messages: {\n            undef: \"'{{name}}' is not defined.\"\n        }\n    },\n\n    create(context) {\n        const options = context.options[0];\n        const considerTypeOf = options && options.typeof === true || false;\n\n        return {\n            \"Program:exit\"(/* node */) {\n                const globalScope = context.getScope();\n\n                globalScope.through.forEach(ref => {\n                    const identifier = ref.identifier;\n\n                    if (!considerTypeOf && hasTypeOfOperator(identifier)) {\n                        return;\n                    }\n\n                    context.report({\n                        node: identifier,\n                        messageId: \"undef\",\n                        data: identifier\n                    });\n                });\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,a,CAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASA,iBAAT,CAA2BC,IAA3B,EAAiC;EAC7B,MAAMC,MAAM,GAAGD,IAAI,CAACC,MAApB;EAEA,OAAOA,MAAM,CAACC,IAAP,KAAgB,iBAAhB,IAAqCD,MAAM,CAACE,QAAP,KAAoB,QAAhE;AACH,C,CAED;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFJ,IAAI,EAAE,SADJ;IAGFK,IAAI,EAAE;MACFC,WAAW,EAAE,qFADX;MAEFC,QAAQ,EAAE,WAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CACJ;MACIV,IAAI,EAAE,QADV;MAEIW,UAAU,EAAE;QACRC,MAAM,EAAE;UACJZ,IAAI,EAAE,SADF;UAEJa,OAAO,EAAE;QAFL;MADA,CAFhB;MAQIC,oBAAoB,EAAE;IAR1B,CADI,CAVN;IAsBFC,QAAQ,EAAE;MACNC,KAAK,EAAE;IADD;EAtBR,CADO;;EA4BbC,MAAM,CAACC,OAAD,EAAU;IACZ,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAR,CAAgB,CAAhB,CAAhB;IACA,MAAMC,cAAc,GAAGD,OAAO,IAAIA,OAAO,CAACP,MAAR,KAAmB,IAA9B,IAAsC,KAA7D;IAEA,OAAO;MACH,iBAA2B;QACvB,MAAMS,WAAW,GAAGH,OAAO,CAACI,QAAR,EAApB;QAEAD,WAAW,CAACE,OAAZ,CAAoBC,OAApB,CAA4BC,GAAG,IAAI;UAC/B,MAAMC,UAAU,GAAGD,GAAG,CAACC,UAAvB;;UAEA,IAAI,CAACN,cAAD,IAAmBvB,iBAAiB,CAAC6B,UAAD,CAAxC,EAAsD;YAClD;UACH;;UAEDR,OAAO,CAACS,MAAR,CAAe;YACX7B,IAAI,EAAE4B,UADK;YAEXE,SAAS,EAAE,OAFA;YAGXC,IAAI,EAAEH;UAHK,CAAf;QAKH,CAZD;MAaH;;IAjBE,CAAP;EAmBH;;AAnDY,CAAjB"},"metadata":{},"sourceType":"script"}