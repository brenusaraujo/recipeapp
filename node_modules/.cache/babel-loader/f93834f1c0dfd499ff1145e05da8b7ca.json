{"ast":null,"code":"/**\n * @fileoverview Ensure handling of errors when we know they exist.\n * @author Jamund Ferguson\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    deprecated: true,\n    replacedBy: [],\n    type: \"suggestion\",\n    docs: {\n      description: \"require error handling in callbacks\",\n      category: \"Node.js and CommonJS\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/handle-callback-err\"\n    },\n    schema: [{\n      type: \"string\"\n    }],\n    messages: {\n      expected: \"Expected error to be handled.\"\n    }\n  },\n\n  create(context) {\n    const errorArgument = context.options[0] || \"err\";\n    /**\n     * Checks if the given argument should be interpreted as a regexp pattern.\n     * @param {string} stringToCheck The string which should be checked.\n     * @returns {boolean} Whether or not the string should be interpreted as a pattern.\n     */\n\n    function isPattern(stringToCheck) {\n      const firstChar = stringToCheck[0];\n      return firstChar === \"^\";\n    }\n    /**\n     * Checks if the given name matches the configured error argument.\n     * @param {string} name The name which should be compared.\n     * @returns {boolean} Whether or not the given name matches the configured error variable name.\n     */\n\n\n    function matchesConfiguredErrorName(name) {\n      if (isPattern(errorArgument)) {\n        const regexp = new RegExp(errorArgument, \"u\");\n        return regexp.test(name);\n      }\n\n      return name === errorArgument;\n    }\n    /**\n     * Get the parameters of a given function scope.\n     * @param {Object} scope The function scope.\n     * @returns {Array} All parameters of the given scope.\n     */\n\n\n    function getParameters(scope) {\n      return scope.variables.filter(variable => variable.defs[0] && variable.defs[0].type === \"Parameter\");\n    }\n    /**\n     * Check to see if we're handling the error object properly.\n     * @param {ASTNode} node The AST node to check.\n     * @returns {void}\n     */\n\n\n    function checkForError(node) {\n      const scope = context.getScope(),\n            parameters = getParameters(scope),\n            firstParameter = parameters[0];\n\n      if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {\n        if (firstParameter.references.length === 0) {\n          context.report({\n            node,\n            messageId: \"expected\"\n          });\n        }\n      }\n    }\n\n    return {\n      FunctionDeclaration: checkForError,\n      FunctionExpression: checkForError,\n      ArrowFunctionExpression: checkForError\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","deprecated","replacedBy","type","docs","description","category","recommended","url","schema","messages","expected","create","context","errorArgument","options","isPattern","stringToCheck","firstChar","matchesConfiguredErrorName","name","regexp","RegExp","test","getParameters","scope","variables","filter","variable","defs","checkForError","node","getScope","parameters","firstParameter","references","length","report","messageId","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/handle-callback-err.js"],"sourcesContent":["/**\n * @fileoverview Ensure handling of errors when we know they exist.\n * @author Jamund Ferguson\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        deprecated: true,\n\n        replacedBy: [],\n\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require error handling in callbacks\",\n            category: \"Node.js and CommonJS\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/handle-callback-err\"\n        },\n\n        schema: [\n            {\n                type: \"string\"\n            }\n        ],\n        messages: {\n            expected: \"Expected error to be handled.\"\n        }\n    },\n\n    create(context) {\n\n        const errorArgument = context.options[0] || \"err\";\n\n        /**\n         * Checks if the given argument should be interpreted as a regexp pattern.\n         * @param {string} stringToCheck The string which should be checked.\n         * @returns {boolean} Whether or not the string should be interpreted as a pattern.\n         */\n        function isPattern(stringToCheck) {\n            const firstChar = stringToCheck[0];\n\n            return firstChar === \"^\";\n        }\n\n        /**\n         * Checks if the given name matches the configured error argument.\n         * @param {string} name The name which should be compared.\n         * @returns {boolean} Whether or not the given name matches the configured error variable name.\n         */\n        function matchesConfiguredErrorName(name) {\n            if (isPattern(errorArgument)) {\n                const regexp = new RegExp(errorArgument, \"u\");\n\n                return regexp.test(name);\n            }\n            return name === errorArgument;\n        }\n\n        /**\n         * Get the parameters of a given function scope.\n         * @param {Object} scope The function scope.\n         * @returns {Array} All parameters of the given scope.\n         */\n        function getParameters(scope) {\n            return scope.variables.filter(variable => variable.defs[0] && variable.defs[0].type === \"Parameter\");\n        }\n\n        /**\n         * Check to see if we're handling the error object properly.\n         * @param {ASTNode} node The AST node to check.\n         * @returns {void}\n         */\n        function checkForError(node) {\n            const scope = context.getScope(),\n                parameters = getParameters(scope),\n                firstParameter = parameters[0];\n\n            if (firstParameter && matchesConfiguredErrorName(firstParameter.name)) {\n                if (firstParameter.references.length === 0) {\n                    context.report({ node, messageId: \"expected\" });\n                }\n            }\n        }\n\n        return {\n            FunctionDeclaration: checkForError,\n            FunctionExpression: checkForError,\n            ArrowFunctionExpression: checkForError\n        };\n\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,a,CAEA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,UAAU,EAAE,IADV;IAGFC,UAAU,EAAE,EAHV;IAKFC,IAAI,EAAE,YALJ;IAOFC,IAAI,EAAE;MACFC,WAAW,EAAE,qCADX;MAEFC,QAAQ,EAAE,sBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAPJ;IAcFC,MAAM,EAAE,CACJ;MACIN,IAAI,EAAE;IADV,CADI,CAdN;IAmBFO,QAAQ,EAAE;MACNC,QAAQ,EAAE;IADJ;EAnBR,CADO;;EAyBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,MAAMC,aAAa,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,KAAsB,KAA5C;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASC,SAAT,CAAmBC,aAAnB,EAAkC;MAC9B,MAAMC,SAAS,GAAGD,aAAa,CAAC,CAAD,CAA/B;MAEA,OAAOC,SAAS,KAAK,GAArB;IACH;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASC,0BAAT,CAAoCC,IAApC,EAA0C;MACtC,IAAIJ,SAAS,CAACF,aAAD,CAAb,EAA8B;QAC1B,MAAMO,MAAM,GAAG,IAAIC,MAAJ,CAAWR,aAAX,EAA0B,GAA1B,CAAf;QAEA,OAAOO,MAAM,CAACE,IAAP,CAAYH,IAAZ,CAAP;MACH;;MACD,OAAOA,IAAI,KAAKN,aAAhB;IACH;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASU,aAAT,CAAuBC,KAAvB,EAA8B;MAC1B,OAAOA,KAAK,CAACC,SAAN,CAAgBC,MAAhB,CAAuBC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,CAAc,CAAd,KAAoBD,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiB1B,IAAjB,KAA0B,WAAjF,CAAP;IACH;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAAS2B,aAAT,CAAuBC,IAAvB,EAA6B;MACzB,MAAMN,KAAK,GAAGZ,OAAO,CAACmB,QAAR,EAAd;MAAA,MACIC,UAAU,GAAGT,aAAa,CAACC,KAAD,CAD9B;MAAA,MAEIS,cAAc,GAAGD,UAAU,CAAC,CAAD,CAF/B;;MAIA,IAAIC,cAAc,IAAIf,0BAA0B,CAACe,cAAc,CAACd,IAAhB,CAAhD,EAAuE;QACnE,IAAIc,cAAc,CAACC,UAAf,CAA0BC,MAA1B,KAAqC,CAAzC,EAA4C;UACxCvB,OAAO,CAACwB,MAAR,CAAe;YAAEN,IAAF;YAAQO,SAAS,EAAE;UAAnB,CAAf;QACH;MACJ;IACJ;;IAED,OAAO;MACHC,mBAAmB,EAAET,aADlB;MAEHU,kBAAkB,EAAEV,aAFjB;MAGHW,uBAAuB,EAAEX;IAHtB,CAAP;EAMH;;AAtFY,CAAjB"},"metadata":{},"sourceType":"script"}