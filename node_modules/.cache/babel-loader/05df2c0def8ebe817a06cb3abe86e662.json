{"ast":null,"code":"/**\n * @fileoverview A rule to disallow duplicate name in class members.\n * @author Toru Nagashima\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow duplicate class members\",\n      category: \"ECMAScript 6\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-dupe-class-members\"\n    },\n    schema: [],\n    messages: {\n      unexpected: \"Duplicate name '{{name}}'.\"\n    }\n  },\n\n  create(context) {\n    let stack = [];\n    /**\n     * Gets state of a given member name.\n     * @param {string} name A name of a member.\n     * @param {boolean} isStatic A flag which specifies that is a static member.\n     * @returns {Object} A state of a given member name.\n     *   - retv.init {boolean} A flag which shows the name is declared as normal member.\n     *   - retv.get {boolean} A flag which shows the name is declared as getter.\n     *   - retv.set {boolean} A flag which shows the name is declared as setter.\n     */\n\n    function getState(name, isStatic) {\n      const stateMap = stack[stack.length - 1];\n      const key = `$${name}`; // to avoid \"__proto__\".\n\n      if (!stateMap[key]) {\n        stateMap[key] = {\n          nonStatic: {\n            init: false,\n            get: false,\n            set: false\n          },\n          static: {\n            init: false,\n            get: false,\n            set: false\n          }\n        };\n      }\n\n      return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\n    }\n\n    return {\n      // Initializes the stack of state of member declarations.\n      Program() {\n        stack = [];\n      },\n\n      // Initializes state of member declarations for the class.\n      ClassBody() {\n        stack.push(Object.create(null));\n      },\n\n      // Disposes the state for the class.\n      \"ClassBody:exit\"() {\n        stack.pop();\n      },\n\n      // Reports the node if its name has been declared already.\n      MethodDefinition(node) {\n        const name = astUtils.getStaticPropertyName(node);\n\n        if (name === null || node.kind === \"constructor\") {\n          return;\n        }\n\n        const state = getState(name, node.static);\n        let isDuplicate = false;\n\n        if (node.kind === \"get\") {\n          isDuplicate = state.init || state.get;\n          state.get = true;\n        } else if (node.kind === \"set\") {\n          isDuplicate = state.init || state.set;\n          state.set = true;\n        } else {\n          isDuplicate = state.init || state.get || state.set;\n          state.init = true;\n        }\n\n        if (isDuplicate) {\n          context.report({\n            node,\n            messageId: \"unexpected\",\n            data: {\n              name\n            }\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","unexpected","create","context","stack","getState","name","isStatic","stateMap","length","key","nonStatic","init","get","set","static","Program","ClassBody","push","Object","pop","MethodDefinition","node","getStaticPropertyName","kind","state","isDuplicate","report","messageId","data"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-dupe-class-members.js"],"sourcesContent":["/**\n * @fileoverview A rule to disallow duplicate name in class members.\n * @author Toru Nagashima\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow duplicate class members\",\n            category: \"ECMAScript 6\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-dupe-class-members\"\n        },\n\n        schema: [],\n\n        messages: {\n            unexpected: \"Duplicate name '{{name}}'.\"\n        }\n    },\n\n    create(context) {\n        let stack = [];\n\n        /**\n         * Gets state of a given member name.\n         * @param {string} name A name of a member.\n         * @param {boolean} isStatic A flag which specifies that is a static member.\n         * @returns {Object} A state of a given member name.\n         *   - retv.init {boolean} A flag which shows the name is declared as normal member.\n         *   - retv.get {boolean} A flag which shows the name is declared as getter.\n         *   - retv.set {boolean} A flag which shows the name is declared as setter.\n         */\n        function getState(name, isStatic) {\n            const stateMap = stack[stack.length - 1];\n            const key = `$${name}`; // to avoid \"__proto__\".\n\n            if (!stateMap[key]) {\n                stateMap[key] = {\n                    nonStatic: { init: false, get: false, set: false },\n                    static: { init: false, get: false, set: false }\n                };\n            }\n\n            return stateMap[key][isStatic ? \"static\" : \"nonStatic\"];\n        }\n\n        return {\n\n            // Initializes the stack of state of member declarations.\n            Program() {\n                stack = [];\n            },\n\n            // Initializes state of member declarations for the class.\n            ClassBody() {\n                stack.push(Object.create(null));\n            },\n\n            // Disposes the state for the class.\n            \"ClassBody:exit\"() {\n                stack.pop();\n            },\n\n            // Reports the node if its name has been declared already.\n            MethodDefinition(node) {\n                const name = astUtils.getStaticPropertyName(node);\n\n                if (name === null || node.kind === \"constructor\") {\n                    return;\n                }\n\n                const state = getState(name, node.static);\n                let isDuplicate = false;\n\n                if (node.kind === \"get\") {\n                    isDuplicate = (state.init || state.get);\n                    state.get = true;\n                } else if (node.kind === \"set\") {\n                    isDuplicate = (state.init || state.set);\n                    state.set = true;\n                } else {\n                    isDuplicate = (state.init || state.get || state.set);\n                    state.init = true;\n                }\n\n                if (isDuplicate) {\n                    context.report({ node, messageId: \"unexpected\", data: { name } });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,kCADX;MAEFC,QAAQ,EAAE,cAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,UAAU,EAAE;IADN;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IACZ,IAAIC,KAAK,GAAG,EAAZ;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACQ,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,QAAxB,EAAkC;MAC9B,MAAMC,QAAQ,GAAGJ,KAAK,CAACA,KAAK,CAACK,MAAN,GAAe,CAAhB,CAAtB;MACA,MAAMC,GAAG,GAAI,IAAGJ,IAAK,EAArB,CAF8B,CAEN;;MAExB,IAAI,CAACE,QAAQ,CAACE,GAAD,CAAb,EAAoB;QAChBF,QAAQ,CAACE,GAAD,CAAR,GAAgB;UACZC,SAAS,EAAE;YAAEC,IAAI,EAAE,KAAR;YAAeC,GAAG,EAAE,KAApB;YAA2BC,GAAG,EAAE;UAAhC,CADC;UAEZC,MAAM,EAAE;YAAEH,IAAI,EAAE,KAAR;YAAeC,GAAG,EAAE,KAApB;YAA2BC,GAAG,EAAE;UAAhC;QAFI,CAAhB;MAIH;;MAED,OAAON,QAAQ,CAACE,GAAD,CAAR,CAAcH,QAAQ,GAAG,QAAH,GAAc,WAApC,CAAP;IACH;;IAED,OAAO;MAEH;MACAS,OAAO,GAAG;QACNZ,KAAK,GAAG,EAAR;MACH,CALE;;MAOH;MACAa,SAAS,GAAG;QACRb,KAAK,CAACc,IAAN,CAAWC,MAAM,CAACjB,MAAP,CAAc,IAAd,CAAX;MACH,CAVE;;MAYH;MACA,mBAAmB;QACfE,KAAK,CAACgB,GAAN;MACH,CAfE;;MAiBH;MACAC,gBAAgB,CAACC,IAAD,EAAO;QACnB,MAAMhB,IAAI,GAAGlB,QAAQ,CAACmC,qBAAT,CAA+BD,IAA/B,CAAb;;QAEA,IAAIhB,IAAI,KAAK,IAAT,IAAiBgB,IAAI,CAACE,IAAL,KAAc,aAAnC,EAAkD;UAC9C;QACH;;QAED,MAAMC,KAAK,GAAGpB,QAAQ,CAACC,IAAD,EAAOgB,IAAI,CAACP,MAAZ,CAAtB;QACA,IAAIW,WAAW,GAAG,KAAlB;;QAEA,IAAIJ,IAAI,CAACE,IAAL,KAAc,KAAlB,EAAyB;UACrBE,WAAW,GAAID,KAAK,CAACb,IAAN,IAAca,KAAK,CAACZ,GAAnC;UACAY,KAAK,CAACZ,GAAN,GAAY,IAAZ;QACH,CAHD,MAGO,IAAIS,IAAI,CAACE,IAAL,KAAc,KAAlB,EAAyB;UAC5BE,WAAW,GAAID,KAAK,CAACb,IAAN,IAAca,KAAK,CAACX,GAAnC;UACAW,KAAK,CAACX,GAAN,GAAY,IAAZ;QACH,CAHM,MAGA;UACHY,WAAW,GAAID,KAAK,CAACb,IAAN,IAAca,KAAK,CAACZ,GAApB,IAA2BY,KAAK,CAACX,GAAhD;UACAW,KAAK,CAACb,IAAN,GAAa,IAAb;QACH;;QAED,IAAIc,WAAJ,EAAiB;UACbvB,OAAO,CAACwB,MAAR,CAAe;YAAEL,IAAF;YAAQM,SAAS,EAAE,YAAnB;YAAiCC,IAAI,EAAE;cAAEvB;YAAF;UAAvC,CAAf;QACH;MACJ;;IA1CE,CAAP;EA4CH;;AAxFY,CAAjB"},"metadata":{},"sourceType":"script"}