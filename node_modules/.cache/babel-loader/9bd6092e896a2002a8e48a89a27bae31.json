{"ast":null,"code":"/**\n * @fileoverview restrict values that can be used as Promise rejection reasons\n * @author Teddy Katz\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"suggestion\",\n    docs: {\n      description: \"require using Error objects as Promise rejection reasons\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/prefer-promise-reject-errors\"\n    },\n    fixable: null,\n    schema: [{\n      type: \"object\",\n      properties: {\n        allowEmptyReject: {\n          type: \"boolean\",\n          default: false\n        }\n      },\n      additionalProperties: false\n    }],\n    messages: {\n      rejectAnError: \"Expected the Promise rejection reason to be an Error.\"\n    }\n  },\n\n  create(context) {\n    const ALLOW_EMPTY_REJECT = context.options.length && context.options[0].allowEmptyReject; //----------------------------------------------------------------------\n    // Helpers\n    //----------------------------------------------------------------------\n\n    /**\n     * Checks the argument of a reject() or Promise.reject() CallExpression, and reports it if it can't be an Error\n     * @param {ASTNode} callExpression A CallExpression node which is used to reject a Promise\n     * @returns {void}\n     */\n\n    function checkRejectCall(callExpression) {\n      if (!callExpression.arguments.length && ALLOW_EMPTY_REJECT) {\n        return;\n      }\n\n      if (!callExpression.arguments.length || !astUtils.couldBeError(callExpression.arguments[0]) || callExpression.arguments[0].type === \"Identifier\" && callExpression.arguments[0].name === \"undefined\") {\n        context.report({\n          node: callExpression,\n          messageId: \"rejectAnError\"\n        });\n      }\n    }\n    /**\n     * Determines whether a function call is a Promise.reject() call\n     * @param {ASTNode} node A CallExpression node\n     * @returns {boolean} `true` if the call is a Promise.reject() call\n     */\n\n\n    function isPromiseRejectCall(node) {\n      return astUtils.isSpecificMemberAccess(node.callee, \"Promise\", \"reject\");\n    } //----------------------------------------------------------------------\n    // Public\n    //----------------------------------------------------------------------\n\n\n    return {\n      // Check `Promise.reject(value)` calls.\n      CallExpression(node) {\n        if (isPromiseRejectCall(node)) {\n          checkRejectCall(node);\n        }\n      },\n\n      /*\n       * Check for `new Promise((resolve, reject) => {})`, and check for reject() calls.\n       * This function is run on \"NewExpression:exit\" instead of \"NewExpression\" to ensure that\n       * the nodes in the expression already have the `parent` property.\n       */\n      \"NewExpression:exit\"(node) {\n        if (node.callee.type === \"Identifier\" && node.callee.name === \"Promise\" && node.arguments.length && astUtils.isFunction(node.arguments[0]) && node.arguments[0].params.length > 1 && node.arguments[0].params[1].type === \"Identifier\") {\n          context.getDeclaredVariables(node.arguments[0])\n          /*\n           * Find the first variable that matches the second parameter's name.\n           * If the first parameter has the same name as the second parameter, then the variable will actually\n           * be \"declared\" when the first parameter is evaluated, but then it will be immediately overwritten\n           * by the second parameter. It's not possible for an expression with the variable to be evaluated before\n           * the variable is overwritten, because functions with duplicate parameters cannot have destructuring or\n           * default assignments in their parameter lists. Therefore, it's not necessary to explicitly account for\n           * this case.\n           */\n          .find(variable => variable.name === node.arguments[0].params[1].name) // Get the references to that variable.\n          .references // Only check the references that read the parameter's value.\n          .filter(ref => ref.isRead()) // Only check the references that are used as the callee in a function call, e.g. `reject(foo)`.\n          .filter(ref => ref.identifier.parent.type === \"CallExpression\" && ref.identifier === ref.identifier.parent.callee) // Check the argument of the function call to determine whether it's an Error.\n          .forEach(ref => checkRejectCall(ref.identifier.parent));\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","properties","allowEmptyReject","default","additionalProperties","messages","rejectAnError","create","context","ALLOW_EMPTY_REJECT","options","length","checkRejectCall","callExpression","arguments","couldBeError","name","report","node","messageId","isPromiseRejectCall","isSpecificMemberAccess","callee","CallExpression","isFunction","params","getDeclaredVariables","find","variable","references","filter","ref","isRead","identifier","parent","forEach"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/prefer-promise-reject-errors.js"],"sourcesContent":["/**\n * @fileoverview restrict values that can be used as Promise rejection reasons\n * @author Teddy Katz\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"suggestion\",\n\n        docs: {\n            description: \"require using Error objects as Promise rejection reasons\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/prefer-promise-reject-errors\"\n        },\n\n        fixable: null,\n\n        schema: [\n            {\n                type: \"object\",\n                properties: {\n                    allowEmptyReject: { type: \"boolean\", default: false }\n                },\n                additionalProperties: false\n            }\n        ],\n\n        messages: {\n            rejectAnError: \"Expected the Promise rejection reason to be an Error.\"\n        }\n    },\n\n    create(context) {\n\n        const ALLOW_EMPTY_REJECT = context.options.length && context.options[0].allowEmptyReject;\n\n        //----------------------------------------------------------------------\n        // Helpers\n        //----------------------------------------------------------------------\n\n        /**\n         * Checks the argument of a reject() or Promise.reject() CallExpression, and reports it if it can't be an Error\n         * @param {ASTNode} callExpression A CallExpression node which is used to reject a Promise\n         * @returns {void}\n         */\n        function checkRejectCall(callExpression) {\n            if (!callExpression.arguments.length && ALLOW_EMPTY_REJECT) {\n                return;\n            }\n            if (\n                !callExpression.arguments.length ||\n                !astUtils.couldBeError(callExpression.arguments[0]) ||\n                callExpression.arguments[0].type === \"Identifier\" && callExpression.arguments[0].name === \"undefined\"\n            ) {\n                context.report({\n                    node: callExpression,\n                    messageId: \"rejectAnError\"\n                });\n            }\n        }\n\n        /**\n         * Determines whether a function call is a Promise.reject() call\n         * @param {ASTNode} node A CallExpression node\n         * @returns {boolean} `true` if the call is a Promise.reject() call\n         */\n        function isPromiseRejectCall(node) {\n            return astUtils.isSpecificMemberAccess(node.callee, \"Promise\", \"reject\");\n        }\n\n        //----------------------------------------------------------------------\n        // Public\n        //----------------------------------------------------------------------\n\n        return {\n\n            // Check `Promise.reject(value)` calls.\n            CallExpression(node) {\n                if (isPromiseRejectCall(node)) {\n                    checkRejectCall(node);\n                }\n            },\n\n            /*\n             * Check for `new Promise((resolve, reject) => {})`, and check for reject() calls.\n             * This function is run on \"NewExpression:exit\" instead of \"NewExpression\" to ensure that\n             * the nodes in the expression already have the `parent` property.\n             */\n            \"NewExpression:exit\"(node) {\n                if (\n                    node.callee.type === \"Identifier\" && node.callee.name === \"Promise\" &&\n                    node.arguments.length && astUtils.isFunction(node.arguments[0]) &&\n                    node.arguments[0].params.length > 1 && node.arguments[0].params[1].type === \"Identifier\"\n                ) {\n                    context.getDeclaredVariables(node.arguments[0])\n\n                        /*\n                         * Find the first variable that matches the second parameter's name.\n                         * If the first parameter has the same name as the second parameter, then the variable will actually\n                         * be \"declared\" when the first parameter is evaluated, but then it will be immediately overwritten\n                         * by the second parameter. It's not possible for an expression with the variable to be evaluated before\n                         * the variable is overwritten, because functions with duplicate parameters cannot have destructuring or\n                         * default assignments in their parameter lists. Therefore, it's not necessary to explicitly account for\n                         * this case.\n                         */\n                        .find(variable => variable.name === node.arguments[0].params[1].name)\n\n                        // Get the references to that variable.\n                        .references\n\n                        // Only check the references that read the parameter's value.\n                        .filter(ref => ref.isRead())\n\n                        // Only check the references that are used as the callee in a function call, e.g. `reject(foo)`.\n                        .filter(ref => ref.identifier.parent.type === \"CallExpression\" && ref.identifier === ref.identifier.parent.callee)\n\n                        // Check the argument of the function call to determine whether it's an Error.\n                        .forEach(ref => checkRejectCall(ref.identifier.parent));\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}