{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nvar flatted = require('flatted');\n\nmodule.exports = {\n  tryParse: function (filePath, defaultValue) {\n    var result;\n\n    try {\n      result = this.readJSON(filePath);\n    } catch (ex) {\n      result = defaultValue;\n    }\n\n    return result;\n  },\n\n  /**\n   * Read json file synchronously using flatted\n   *\n   * @method readJSON\n   * @param  {String} filePath Json filepath\n   * @returns {*} parse result\n   */\n  readJSON: function (filePath) {\n    return flatted.parse(fs.readFileSync(filePath, {\n      encoding: 'utf8'\n    }));\n  },\n\n  /**\n   * Write json file synchronously using circular-json\n   *\n   * @method writeJSON\n   * @param  {String} filePath Json filepath\n   * @param  {*} data Object to serialize\n   */\n  writeJSON: function (filePath, data) {\n    fs.mkdirSync(path.dirname(filePath), {\n      recursive: true\n    });\n    fs.writeFileSync(filePath, flatted.stringify(data));\n  }\n};","map":{"version":3,"names":["fs","require","path","flatted","module","exports","tryParse","filePath","defaultValue","result","readJSON","ex","parse","readFileSync","encoding","writeJSON","data","mkdirSync","dirname","recursive","writeFileSync","stringify"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/node_modules/flat-cache/src/utils.js"],"sourcesContent":["var fs = require('fs');\nvar path = require('path');\nvar flatted = require('flatted');\n\nmodule.exports = {\n  tryParse: function (filePath, defaultValue) {\n    var result;\n    try {\n      result = this.readJSON(filePath);\n    } catch (ex) {\n      result = defaultValue;\n    }\n    return result;\n  },\n\n  /**\n   * Read json file synchronously using flatted\n   *\n   * @method readJSON\n   * @param  {String} filePath Json filepath\n   * @returns {*} parse result\n   */\n  readJSON: function (filePath) {\n    return flatted.parse(\n      fs.readFileSync(filePath, {\n        encoding: 'utf8',\n      })\n    );\n  },\n\n  /**\n   * Write json file synchronously using circular-json\n   *\n   * @method writeJSON\n   * @param  {String} filePath Json filepath\n   * @param  {*} data Object to serialize\n   */\n  writeJSON: function (filePath, data) {\n    fs.mkdirSync(path.dirname(filePath), {\n      recursive: true,\n    });\n    fs.writeFileSync(filePath, flatted.stringify(data));\n  },\n};\n"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,SAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiB;EACfC,QAAQ,EAAE,UAAUC,QAAV,EAAoBC,YAApB,EAAkC;IAC1C,IAAIC,MAAJ;;IACA,IAAI;MACFA,MAAM,GAAG,KAAKC,QAAL,CAAcH,QAAd,CAAT;IACD,CAFD,CAEE,OAAOI,EAAP,EAAW;MACXF,MAAM,GAAGD,YAAT;IACD;;IACD,OAAOC,MAAP;EACD,CATc;;EAWf;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,UAAUH,QAAV,EAAoB;IAC5B,OAAOJ,OAAO,CAACS,KAAR,CACLZ,EAAE,CAACa,YAAH,CAAgBN,QAAhB,EAA0B;MACxBO,QAAQ,EAAE;IADc,CAA1B,CADK,CAAP;EAKD,CAxBc;;EA0Bf;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,SAAS,EAAE,UAAUR,QAAV,EAAoBS,IAApB,EAA0B;IACnChB,EAAE,CAACiB,SAAH,CAAaf,IAAI,CAACgB,OAAL,CAAaX,QAAb,CAAb,EAAqC;MACnCY,SAAS,EAAE;IADwB,CAArC;IAGAnB,EAAE,CAACoB,aAAH,CAAiBb,QAAjB,EAA2BJ,OAAO,CAACkB,SAAR,CAAkBL,IAAlB,CAA3B;EACD;AAtCc,CAAjB"},"metadata":{},"sourceType":"script"}