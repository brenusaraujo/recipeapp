{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useFrameHeight = void 0;\n\nconst react_1 = require(\"react\");\n\nconst use_state_with_ref_1 = require(\"./use-state-with-ref\");\n/**\n * The frame height is normally, just `auto` (i.e., it expands to fit the\n * items), but in adaptiveHeight mode, it's the height of the tallest visible\n * item.\n *\n * In adaptiveHeight mode, we also switch between two states to ensure that\n * slides don't render with zero height when server-side-rendering:\n *\n * - When initializedAdaptiveHeight is false: the frame has height auto; visible\n *   slides have height auto; invisible slides have height 0\n * - The client sets initializedAdaptiveHeight to true once we've measured all\n *   the visible slides' heights\n * - When initializedAdaptiveHeight is true: the frame has height set to the\n *   tallest visible slide; all slides have height 100%\n */\n\n\nconst useFrameHeight = (adaptiveHeight, slidesToShow, slideCount) => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] = (0, use_state_with_ref_1.useStateWithRef)([]); // Whether we've received heights of all initial visible heights\n\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = (0, react_1.useState)(false);\n  const handleVisibleSlideHeightChange = (0, react_1.useCallback)((slideIndex, height) => {\n    // Use the ref's value since it's always the latest value\n    const latestVisibleHeights = visibleHeightsRef.current;\n    let newVisibleHeights;\n\n    if (height === null) {\n      newVisibleHeights = latestVisibleHeights.filter(slideHeight => slideHeight.slideIndex !== slideIndex);\n    } else {\n      newVisibleHeights = [...latestVisibleHeights, {\n        slideIndex,\n        height\n      }];\n    }\n\n    setVisibleHeights(newVisibleHeights);\n\n    if (newVisibleHeights.length >= Math.min(slideCount, Math.ceil(slidesToShow))) {\n      setInitializedAdaptiveHeight(true);\n    }\n  }, [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]);\n  const frameHeight = (0, react_1.useMemo)(() => {\n    if (adaptiveHeight) {\n      // We want server-side-rendering to render the carousel with non-zero\n      // height. to achieve this, we first set the height to `auto` until\n      // we've received the heights of the visible slides. Then, we switch to\n      // a mode where the frame controls the height.\n      if (!initializedAdaptiveHeight) {\n        return 'auto';\n      }\n\n      const maxHeight = Math.max(0, ...visibleHeights.map(height => height.height));\n      return `${maxHeight}px`;\n    } else {\n      return 'auto';\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight\n  };\n};\n\nexports.useFrameHeight = useFrameHeight;","map":{"version":3,"sources":["../../src/hooks/use-frame-height.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,MAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAEA;;;;;;;;;;;;;;AAcG;;;AACI,MAAM,cAAc,GAAG,CAC5B,cAD4B,EAE5B,YAF4B,EAG5B,UAH4B,KAsB1B;EACF,MAAM,CAAC,cAAD,EAAiB,iBAAjB,EAAoC,iBAApC,IACJ,CAAA,GAAA,oBAAA,CAAA,eAAA,EAA+B,EAA/B,CADF,CADE,CAIF;;EACA,MAAM,CAAC,yBAAD,EAA4B,4BAA5B,IACJ,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,KAAT,CADF;EAGA,MAAM,8BAA8B,GAAG,CAAA,GAAA,OAAA,CAAA,WAAA,EACrC,CAAC,UAAD,EAAqB,MAArB,KAA8C;IAC5C;IACA,MAAM,oBAAoB,GAAG,iBAAiB,CAAC,OAA/C;IACA,IAAI,iBAAJ;;IACA,IAAI,MAAM,KAAK,IAAf,EAAqB;MACnB,iBAAiB,GAAG,oBAAoB,CAAC,MAArB,CACjB,WAAD,IAAiB,WAAW,CAAC,UAAZ,KAA2B,UAD1B,CAApB;IAGD,CAJD,MAIO;MACL,iBAAiB,GAAG,CAAC,GAAG,oBAAJ,EAA0B;QAAE,UAAF;QAAc;MAAd,CAA1B,CAApB;IACD;;IACD,iBAAiB,CAAC,iBAAD,CAAjB;;IAEA,IACE,iBAAiB,CAAC,MAAlB,IACA,IAAI,CAAC,GAAL,CAAS,UAAT,EAAqB,IAAI,CAAC,IAAL,CAAU,YAAV,CAArB,CAFF,EAGE;MACA,4BAA4B,CAAC,IAAD,CAA5B;IACD;EACF,CApBoC,EAqBrC,CAAC,UAAD,EAAa,iBAAb,EAAgC,YAAhC,EAA8C,iBAA9C,CArBqC,CAAvC;EAwBA,MAAM,WAAW,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAQ,MAAK;IAC/B,IAAI,cAAJ,EAAoB;MAClB;MACA;MACA;MACA;MACA,IAAI,CAAC,yBAAL,EAAgC;QAC9B,OAAO,MAAP;MACD;;MAED,MAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAChB,CADgB,EAEhB,GAAG,cAAc,CAAC,GAAf,CAAoB,MAAD,IAAY,MAAM,CAAC,MAAtC,CAFa,CAAlB;MAIA,OAAO,GAAG,SAAS,IAAnB;IACD,CAdD,MAcO;MACL,OAAO,MAAP;IACD;EACF,CAlBmB,EAkBjB,CAAC,cAAD,EAAiB,yBAAjB,EAA4C,cAA5C,CAlBiB,CAApB;EAoBA,OAAO;IACL,8BADK;IAEL,WAFK;IAGL;EAHK,CAAP;AAKD,CA/EM;;AAAM,OAAA,CAAA,cAAA,GAAc,cAAd","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useFrameHeight = void 0;\nconst react_1 = require(\"react\");\nconst use_state_with_ref_1 = require(\"./use-state-with-ref\");\n/**\n * The frame height is normally, just `auto` (i.e., it expands to fit the\n * items), but in adaptiveHeight mode, it's the height of the tallest visible\n * item.\n *\n * In adaptiveHeight mode, we also switch between two states to ensure that\n * slides don't render with zero height when server-side-rendering:\n *\n * - When initializedAdaptiveHeight is false: the frame has height auto; visible\n *   slides have height auto; invisible slides have height 0\n * - The client sets initializedAdaptiveHeight to true once we've measured all\n *   the visible slides' heights\n * - When initializedAdaptiveHeight is true: the frame has height set to the\n *   tallest visible slide; all slides have height 100%\n */\nconst useFrameHeight = (adaptiveHeight, slidesToShow, slideCount) => {\n    const [visibleHeights, setVisibleHeights, visibleHeightsRef] = (0, use_state_with_ref_1.useStateWithRef)([]);\n    // Whether we've received heights of all initial visible heights\n    const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = (0, react_1.useState)(false);\n    const handleVisibleSlideHeightChange = (0, react_1.useCallback)((slideIndex, height) => {\n        // Use the ref's value since it's always the latest value\n        const latestVisibleHeights = visibleHeightsRef.current;\n        let newVisibleHeights;\n        if (height === null) {\n            newVisibleHeights = latestVisibleHeights.filter((slideHeight) => slideHeight.slideIndex !== slideIndex);\n        }\n        else {\n            newVisibleHeights = [...latestVisibleHeights, { slideIndex, height }];\n        }\n        setVisibleHeights(newVisibleHeights);\n        if (newVisibleHeights.length >=\n            Math.min(slideCount, Math.ceil(slidesToShow))) {\n            setInitializedAdaptiveHeight(true);\n        }\n    }, [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]);\n    const frameHeight = (0, react_1.useMemo)(() => {\n        if (adaptiveHeight) {\n            // We want server-side-rendering to render the carousel with non-zero\n            // height. to achieve this, we first set the height to `auto` until\n            // we've received the heights of the visible slides. Then, we switch to\n            // a mode where the frame controls the height.\n            if (!initializedAdaptiveHeight) {\n                return 'auto';\n            }\n            const maxHeight = Math.max(0, ...visibleHeights.map((height) => height.height));\n            return `${maxHeight}px`;\n        }\n        else {\n            return 'auto';\n        }\n    }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n    return {\n        handleVisibleSlideHeightChange,\n        frameHeight,\n        initializedAdaptiveHeight,\n    };\n};\nexports.useFrameHeight = useFrameHeight;\n"]},"metadata":{},"sourceType":"script"}