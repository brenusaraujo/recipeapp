{"ast":null,"code":"/**\n * @fileoverview Rule to require newlines before `return` statement\n * @author Kai Cataldo\n * @deprecated\n */\n\"use strict\"; //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"require an empty line before `return` statements\",\n      category: \"Stylistic Issues\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/newline-before-return\"\n    },\n    fixable: \"whitespace\",\n    schema: [],\n    messages: {\n      expected: \"Expected newline before return statement.\"\n    },\n    deprecated: true,\n    replacedBy: [\"padding-line-between-statements\"]\n  },\n\n  create(context) {\n    const sourceCode = context.getSourceCode(); //--------------------------------------------------------------------------\n    // Helpers\n    //--------------------------------------------------------------------------\n\n    /**\n     * Tests whether node is preceded by supplied tokens\n     * @param {ASTNode} node node to check\n     * @param {Array} testTokens array of tokens to test against\n     * @returns {boolean} Whether or not the node is preceded by one of the supplied tokens\n     * @private\n     */\n\n    function isPrecededByTokens(node, testTokens) {\n      const tokenBefore = sourceCode.getTokenBefore(node);\n      return testTokens.some(token => tokenBefore.value === token);\n    }\n    /**\n     * Checks whether node is the first node after statement or in block\n     * @param {ASTNode} node node to check\n     * @returns {boolean} Whether or not the node is the first node after statement or in block\n     * @private\n     */\n\n\n    function isFirstNode(node) {\n      const parentType = node.parent.type;\n\n      if (node.parent.body) {\n        return Array.isArray(node.parent.body) ? node.parent.body[0] === node : node.parent.body === node;\n      }\n\n      if (parentType === \"IfStatement\") {\n        return isPrecededByTokens(node, [\"else\", \")\"]);\n      }\n\n      if (parentType === \"DoWhileStatement\") {\n        return isPrecededByTokens(node, [\"do\"]);\n      }\n\n      if (parentType === \"SwitchCase\") {\n        return isPrecededByTokens(node, [\":\"]);\n      }\n\n      return isPrecededByTokens(node, [\")\"]);\n    }\n    /**\n     * Returns the number of lines of comments that precede the node\n     * @param {ASTNode} node node to check for overlapping comments\n     * @param {number} lineNumTokenBefore line number of previous token, to check for overlapping comments\n     * @returns {number} Number of lines of comments that precede the node\n     * @private\n     */\n\n\n    function calcCommentLines(node, lineNumTokenBefore) {\n      const comments = sourceCode.getCommentsBefore(node);\n      let numLinesComments = 0;\n\n      if (!comments.length) {\n        return numLinesComments;\n      }\n\n      comments.forEach(comment => {\n        numLinesComments++;\n\n        if (comment.type === \"Block\") {\n          numLinesComments += comment.loc.end.line - comment.loc.start.line;\n        } // avoid counting lines with inline comments twice\n\n\n        if (comment.loc.start.line === lineNumTokenBefore) {\n          numLinesComments--;\n        }\n\n        if (comment.loc.end.line === node.loc.start.line) {\n          numLinesComments--;\n        }\n      });\n      return numLinesComments;\n    }\n    /**\n     * Returns the line number of the token before the node that is passed in as an argument\n     * @param {ASTNode} node The node to use as the start of the calculation\n     * @returns {number} Line number of the token before `node`\n     * @private\n     */\n\n\n    function getLineNumberOfTokenBefore(node) {\n      const tokenBefore = sourceCode.getTokenBefore(node);\n      let lineNumTokenBefore;\n      /**\n       * Global return (at the beginning of a script) is a special case.\n       * If there is no token before `return`, then we expect no line\n       * break before the return. Comments are allowed to occupy lines\n       * before the global return, just no blank lines.\n       * Setting lineNumTokenBefore to zero in that case results in the\n       * desired behavior.\n       */\n\n      if (tokenBefore) {\n        lineNumTokenBefore = tokenBefore.loc.end.line;\n      } else {\n        lineNumTokenBefore = 0; // global return at beginning of script\n      }\n\n      return lineNumTokenBefore;\n    }\n    /**\n     * Checks whether node is preceded by a newline\n     * @param {ASTNode} node node to check\n     * @returns {boolean} Whether or not the node is preceded by a newline\n     * @private\n     */\n\n\n    function hasNewlineBefore(node) {\n      const lineNumNode = node.loc.start.line;\n      const lineNumTokenBefore = getLineNumberOfTokenBefore(node);\n      const commentLines = calcCommentLines(node, lineNumTokenBefore);\n      return lineNumNode - lineNumTokenBefore - commentLines > 1;\n    }\n    /**\n     * Checks whether it is safe to apply a fix to a given return statement.\n     *\n     * The fix is not considered safe if the given return statement has leading comments,\n     * as we cannot safely determine if the newline should be added before or after the comments.\n     * For more information, see: https://github.com/eslint/eslint/issues/5958#issuecomment-222767211\n     * @param {ASTNode} node The return statement node to check.\n     * @returns {boolean} `true` if it can fix the node.\n     * @private\n     */\n\n\n    function canFix(node) {\n      const leadingComments = sourceCode.getCommentsBefore(node);\n      const lastLeadingComment = leadingComments[leadingComments.length - 1];\n      const tokenBefore = sourceCode.getTokenBefore(node);\n\n      if (leadingComments.length === 0) {\n        return true;\n      }\n      /*\n       * if the last leading comment ends in the same line as the previous token and\n       * does not share a line with the `return` node, we can consider it safe to fix.\n       * Example:\n       * function a() {\n       *     var b; //comment\n       *     return;\n       * }\n       */\n\n\n      if (lastLeadingComment.loc.end.line === tokenBefore.loc.end.line && lastLeadingComment.loc.end.line !== node.loc.start.line) {\n        return true;\n      }\n\n      return false;\n    } //--------------------------------------------------------------------------\n    // Public\n    //--------------------------------------------------------------------------\n\n\n    return {\n      ReturnStatement(node) {\n        if (!isFirstNode(node) && !hasNewlineBefore(node)) {\n          context.report({\n            node,\n            messageId: \"expected\",\n\n            fix(fixer) {\n              if (canFix(node)) {\n                const tokenBefore = sourceCode.getTokenBefore(node);\n                const newlines = node.loc.start.line === tokenBefore.loc.end.line ? \"\\n\\n\" : \"\\n\";\n                return fixer.insertTextBefore(node, newlines);\n              }\n\n              return null;\n            }\n\n          });\n        }\n      }\n\n    };\n  }\n\n};","map":{"version":3,"names":["module","exports","meta","type","docs","description","category","recommended","url","fixable","schema","messages","expected","deprecated","replacedBy","create","context","sourceCode","getSourceCode","isPrecededByTokens","node","testTokens","tokenBefore","getTokenBefore","some","token","value","isFirstNode","parentType","parent","body","Array","isArray","calcCommentLines","lineNumTokenBefore","comments","getCommentsBefore","numLinesComments","length","forEach","comment","loc","end","line","start","getLineNumberOfTokenBefore","hasNewlineBefore","lineNumNode","commentLines","canFix","leadingComments","lastLeadingComment","ReturnStatement","report","messageId","fix","fixer","newlines","insertTextBefore"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/newline-before-return.js"],"sourcesContent":["/**\n * @fileoverview Rule to require newlines before `return` statement\n * @author Kai Cataldo\n * @deprecated\n */\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"require an empty line before `return` statements\",\n            category: \"Stylistic Issues\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/newline-before-return\"\n        },\n\n        fixable: \"whitespace\",\n        schema: [],\n        messages: {\n            expected: \"Expected newline before return statement.\"\n        },\n\n        deprecated: true,\n        replacedBy: [\"padding-line-between-statements\"]\n    },\n\n    create(context) {\n        const sourceCode = context.getSourceCode();\n\n        //--------------------------------------------------------------------------\n        // Helpers\n        //--------------------------------------------------------------------------\n\n        /**\n         * Tests whether node is preceded by supplied tokens\n         * @param {ASTNode} node node to check\n         * @param {Array} testTokens array of tokens to test against\n         * @returns {boolean} Whether or not the node is preceded by one of the supplied tokens\n         * @private\n         */\n        function isPrecededByTokens(node, testTokens) {\n            const tokenBefore = sourceCode.getTokenBefore(node);\n\n            return testTokens.some(token => tokenBefore.value === token);\n        }\n\n        /**\n         * Checks whether node is the first node after statement or in block\n         * @param {ASTNode} node node to check\n         * @returns {boolean} Whether or not the node is the first node after statement or in block\n         * @private\n         */\n        function isFirstNode(node) {\n            const parentType = node.parent.type;\n\n            if (node.parent.body) {\n                return Array.isArray(node.parent.body)\n                    ? node.parent.body[0] === node\n                    : node.parent.body === node;\n            }\n\n            if (parentType === \"IfStatement\") {\n                return isPrecededByTokens(node, [\"else\", \")\"]);\n            }\n            if (parentType === \"DoWhileStatement\") {\n                return isPrecededByTokens(node, [\"do\"]);\n            }\n            if (parentType === \"SwitchCase\") {\n                return isPrecededByTokens(node, [\":\"]);\n            }\n            return isPrecededByTokens(node, [\")\"]);\n\n        }\n\n        /**\n         * Returns the number of lines of comments that precede the node\n         * @param {ASTNode} node node to check for overlapping comments\n         * @param {number} lineNumTokenBefore line number of previous token, to check for overlapping comments\n         * @returns {number} Number of lines of comments that precede the node\n         * @private\n         */\n        function calcCommentLines(node, lineNumTokenBefore) {\n            const comments = sourceCode.getCommentsBefore(node);\n            let numLinesComments = 0;\n\n            if (!comments.length) {\n                return numLinesComments;\n            }\n\n            comments.forEach(comment => {\n                numLinesComments++;\n\n                if (comment.type === \"Block\") {\n                    numLinesComments += comment.loc.end.line - comment.loc.start.line;\n                }\n\n                // avoid counting lines with inline comments twice\n                if (comment.loc.start.line === lineNumTokenBefore) {\n                    numLinesComments--;\n                }\n\n                if (comment.loc.end.line === node.loc.start.line) {\n                    numLinesComments--;\n                }\n            });\n\n            return numLinesComments;\n        }\n\n        /**\n         * Returns the line number of the token before the node that is passed in as an argument\n         * @param {ASTNode} node The node to use as the start of the calculation\n         * @returns {number} Line number of the token before `node`\n         * @private\n         */\n        function getLineNumberOfTokenBefore(node) {\n            const tokenBefore = sourceCode.getTokenBefore(node);\n            let lineNumTokenBefore;\n\n            /**\n             * Global return (at the beginning of a script) is a special case.\n             * If there is no token before `return`, then we expect no line\n             * break before the return. Comments are allowed to occupy lines\n             * before the global return, just no blank lines.\n             * Setting lineNumTokenBefore to zero in that case results in the\n             * desired behavior.\n             */\n            if (tokenBefore) {\n                lineNumTokenBefore = tokenBefore.loc.end.line;\n            } else {\n                lineNumTokenBefore = 0; // global return at beginning of script\n            }\n\n            return lineNumTokenBefore;\n        }\n\n        /**\n         * Checks whether node is preceded by a newline\n         * @param {ASTNode} node node to check\n         * @returns {boolean} Whether or not the node is preceded by a newline\n         * @private\n         */\n        function hasNewlineBefore(node) {\n            const lineNumNode = node.loc.start.line;\n            const lineNumTokenBefore = getLineNumberOfTokenBefore(node);\n            const commentLines = calcCommentLines(node, lineNumTokenBefore);\n\n            return (lineNumNode - lineNumTokenBefore - commentLines) > 1;\n        }\n\n        /**\n         * Checks whether it is safe to apply a fix to a given return statement.\n         *\n         * The fix is not considered safe if the given return statement has leading comments,\n         * as we cannot safely determine if the newline should be added before or after the comments.\n         * For more information, see: https://github.com/eslint/eslint/issues/5958#issuecomment-222767211\n         * @param {ASTNode} node The return statement node to check.\n         * @returns {boolean} `true` if it can fix the node.\n         * @private\n         */\n        function canFix(node) {\n            const leadingComments = sourceCode.getCommentsBefore(node);\n            const lastLeadingComment = leadingComments[leadingComments.length - 1];\n            const tokenBefore = sourceCode.getTokenBefore(node);\n\n            if (leadingComments.length === 0) {\n                return true;\n            }\n\n            /*\n             * if the last leading comment ends in the same line as the previous token and\n             * does not share a line with the `return` node, we can consider it safe to fix.\n             * Example:\n             * function a() {\n             *     var b; //comment\n             *     return;\n             * }\n             */\n            if (lastLeadingComment.loc.end.line === tokenBefore.loc.end.line &&\n                lastLeadingComment.loc.end.line !== node.loc.start.line) {\n                return true;\n            }\n\n            return false;\n        }\n\n        //--------------------------------------------------------------------------\n        // Public\n        //--------------------------------------------------------------------------\n\n        return {\n            ReturnStatement(node) {\n                if (!isFirstNode(node) && !hasNewlineBefore(node)) {\n                    context.report({\n                        node,\n                        messageId: \"expected\",\n                        fix(fixer) {\n                            if (canFix(node)) {\n                                const tokenBefore = sourceCode.getTokenBefore(node);\n                                const newlines = node.loc.start.line === tokenBefore.loc.end.line ? \"\\n\\n\" : \"\\n\";\n\n                                return fixer.insertTextBefore(node, newlines);\n                            }\n                            return null;\n                        }\n                    });\n                }\n            }\n        };\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}