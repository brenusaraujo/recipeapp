{"ast":null,"code":"/**\n * @fileoverview Rule to flag use of function declaration identifiers as variables.\n * @author Ian Christian Myers\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"problem\",\n    docs: {\n      description: \"disallow reassigning `function` declarations\",\n      category: \"Possible Errors\",\n      recommended: true,\n      url: \"https://eslint.org/docs/rules/no-func-assign\"\n    },\n    schema: [],\n    messages: {\n      isAFunction: \"'{{name}}' is a function.\"\n    }\n  },\n\n  create(context) {\n    /**\n     * Reports a reference if is non initializer and writable.\n     * @param {References} references Collection of reference to check.\n     * @returns {void}\n     */\n    function checkReference(references) {\n      astUtils.getModifyingReferences(references).forEach(reference => {\n        context.report({\n          node: reference.identifier,\n          messageId: \"isAFunction\",\n          data: {\n            name: reference.identifier.name\n          }\n        });\n      });\n    }\n    /**\n     * Finds and reports references that are non initializer and writable.\n     * @param {Variable} variable A variable to check.\n     * @returns {void}\n     */\n\n\n    function checkVariable(variable) {\n      if (variable.defs[0].type === \"FunctionName\") {\n        checkReference(variable.references);\n      }\n    }\n    /**\n     * Checks parameters of a given function node.\n     * @param {ASTNode} node A function node to check.\n     * @returns {void}\n     */\n\n\n    function checkForFunction(node) {\n      context.getDeclaredVariables(node).forEach(checkVariable);\n    }\n\n    return {\n      FunctionDeclaration: checkForFunction,\n      FunctionExpression: checkForFunction\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","messages","isAFunction","create","context","checkReference","references","getModifyingReferences","forEach","reference","report","node","identifier","messageId","data","name","checkVariable","variable","defs","checkForFunction","getDeclaredVariables","FunctionDeclaration","FunctionExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/no-func-assign.js"],"sourcesContent":["/**\n * @fileoverview Rule to flag use of function declaration identifiers as variables.\n * @author Ian Christian Myers\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"problem\",\n\n        docs: {\n            description: \"disallow reassigning `function` declarations\",\n            category: \"Possible Errors\",\n            recommended: true,\n            url: \"https://eslint.org/docs/rules/no-func-assign\"\n        },\n\n        schema: [],\n\n        messages: {\n            isAFunction: \"'{{name}}' is a function.\"\n        }\n    },\n\n    create(context) {\n\n        /**\n         * Reports a reference if is non initializer and writable.\n         * @param {References} references Collection of reference to check.\n         * @returns {void}\n         */\n        function checkReference(references) {\n            astUtils.getModifyingReferences(references).forEach(reference => {\n                context.report({\n                    node: reference.identifier,\n                    messageId: \"isAFunction\",\n                    data: {\n                        name: reference.identifier.name\n                    }\n                });\n            });\n        }\n\n        /**\n         * Finds and reports references that are non initializer and writable.\n         * @param {Variable} variable A variable to check.\n         * @returns {void}\n         */\n        function checkVariable(variable) {\n            if (variable.defs[0].type === \"FunctionName\") {\n                checkReference(variable.references);\n            }\n        }\n\n        /**\n         * Checks parameters of a given function node.\n         * @param {ASTNode} node A function node to check.\n         * @returns {void}\n         */\n        function checkForFunction(node) {\n            context.getDeclaredVariables(node).forEach(checkVariable);\n        }\n\n        return {\n            FunctionDeclaration: checkForFunction,\n            FunctionExpression: checkForFunction\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,SADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,8CADX;MAEFC,QAAQ,EAAE,iBAFR;MAGFC,WAAW,EAAE,IAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,EAVN;IAYFC,QAAQ,EAAE;MACNC,WAAW,EAAE;IADP;EAZR,CADO;;EAkBbC,MAAM,CAACC,OAAD,EAAU;IAEZ;AACR;AACA;AACA;AACA;IACQ,SAASC,cAAT,CAAwBC,UAAxB,EAAoC;MAChCjB,QAAQ,CAACkB,sBAAT,CAAgCD,UAAhC,EAA4CE,OAA5C,CAAoDC,SAAS,IAAI;QAC7DL,OAAO,CAACM,MAAR,CAAe;UACXC,IAAI,EAAEF,SAAS,CAACG,UADL;UAEXC,SAAS,EAAE,aAFA;UAGXC,IAAI,EAAE;YACFC,IAAI,EAAEN,SAAS,CAACG,UAAV,CAAqBG;UADzB;QAHK,CAAf;MAOH,CARD;IASH;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;MAC7B,IAAIA,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBxB,IAAjB,KAA0B,cAA9B,EAA8C;QAC1CW,cAAc,CAACY,QAAQ,CAACX,UAAV,CAAd;MACH;IACJ;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASa,gBAAT,CAA0BR,IAA1B,EAAgC;MAC5BP,OAAO,CAACgB,oBAAR,CAA6BT,IAA7B,EAAmCH,OAAnC,CAA2CQ,aAA3C;IACH;;IAED,OAAO;MACHK,mBAAmB,EAAEF,gBADlB;MAEHG,kBAAkB,EAAEH;IAFjB,CAAP;EAIH;;AA7DY,CAAjB"},"metadata":{},"sourceType":"script"}