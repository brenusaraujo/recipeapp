{"ast":null,"code":"/**\n * @fileoverview Validates newlines before and after dots\n * @author Greg Cochard\n */\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\"); //------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\nmodule.exports = {\n  meta: {\n    type: \"layout\",\n    docs: {\n      description: \"enforce consistent newlines before and after dots\",\n      category: \"Best Practices\",\n      recommended: false,\n      url: \"https://eslint.org/docs/rules/dot-location\"\n    },\n    schema: [{\n      enum: [\"object\", \"property\"]\n    }],\n    fixable: \"code\",\n    messages: {\n      expectedDotAfterObject: \"Expected dot to be on same line as object.\",\n      expectedDotBeforeProperty: \"Expected dot to be on same line as property.\"\n    }\n  },\n\n  create(context) {\n    const config = context.options[0]; // default to onObject if no preference is passed\n\n    const onObject = config === \"object\" || !config;\n    const sourceCode = context.getSourceCode();\n    /**\n     * Reports if the dot between object and property is on the correct location.\n     * @param {ASTNode} node The `MemberExpression` node.\n     * @returns {void}\n     */\n\n    function checkDotLocation(node) {\n      const property = node.property;\n      const dotToken = sourceCode.getTokenBefore(property);\n\n      if (onObject) {\n        // `obj` expression can be parenthesized, but those paren tokens are not a part of the `obj` node.\n        const tokenBeforeDot = sourceCode.getTokenBefore(dotToken);\n\n        if (!astUtils.isTokenOnSameLine(tokenBeforeDot, dotToken)) {\n          context.report({\n            node,\n            loc: dotToken.loc,\n            messageId: \"expectedDotAfterObject\",\n\n            *fix(fixer) {\n              if (dotToken.value.startsWith(\".\") && astUtils.isDecimalIntegerNumericToken(tokenBeforeDot)) {\n                yield fixer.insertTextAfter(tokenBeforeDot, ` ${dotToken.value}`);\n              } else {\n                yield fixer.insertTextAfter(tokenBeforeDot, dotToken.value);\n              }\n\n              yield fixer.remove(dotToken);\n            }\n\n          });\n        }\n      } else if (!astUtils.isTokenOnSameLine(dotToken, property)) {\n        context.report({\n          node,\n          loc: dotToken.loc,\n          messageId: \"expectedDotBeforeProperty\",\n\n          *fix(fixer) {\n            yield fixer.remove(dotToken);\n            yield fixer.insertTextBefore(property, dotToken.value);\n          }\n\n        });\n      }\n    }\n    /**\n     * Checks the spacing of the dot within a member expression.\n     * @param {ASTNode} node The node to check.\n     * @returns {void}\n     */\n\n\n    function checkNode(node) {\n      if (!node.computed) {\n        checkDotLocation(node);\n      }\n    }\n\n    return {\n      MemberExpression: checkNode\n    };\n  }\n\n};","map":{"version":3,"names":["astUtils","require","module","exports","meta","type","docs","description","category","recommended","url","schema","enum","fixable","messages","expectedDotAfterObject","expectedDotBeforeProperty","create","context","config","options","onObject","sourceCode","getSourceCode","checkDotLocation","node","property","dotToken","getTokenBefore","tokenBeforeDot","isTokenOnSameLine","report","loc","messageId","fix","fixer","value","startsWith","isDecimalIntegerNumericToken","insertTextAfter","remove","insertTextBefore","checkNode","computed","MemberExpression"],"sources":["/Users/brenoaraujo/Projetos Trybe/sd-022-b-project-recipes-app/node_modules/eslint/lib/rules/dot-location.js"],"sourcesContent":["/**\n * @fileoverview Validates newlines before and after dots\n * @author Greg Cochard\n */\n\n\"use strict\";\n\nconst astUtils = require(\"./utils/ast-utils\");\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n    meta: {\n        type: \"layout\",\n\n        docs: {\n            description: \"enforce consistent newlines before and after dots\",\n            category: \"Best Practices\",\n            recommended: false,\n            url: \"https://eslint.org/docs/rules/dot-location\"\n        },\n\n        schema: [\n            {\n                enum: [\"object\", \"property\"]\n            }\n        ],\n\n        fixable: \"code\",\n\n        messages: {\n            expectedDotAfterObject: \"Expected dot to be on same line as object.\",\n            expectedDotBeforeProperty: \"Expected dot to be on same line as property.\"\n        }\n    },\n\n    create(context) {\n\n        const config = context.options[0];\n\n        // default to onObject if no preference is passed\n        const onObject = config === \"object\" || !config;\n\n        const sourceCode = context.getSourceCode();\n\n        /**\n         * Reports if the dot between object and property is on the correct location.\n         * @param {ASTNode} node The `MemberExpression` node.\n         * @returns {void}\n         */\n        function checkDotLocation(node) {\n            const property = node.property;\n            const dotToken = sourceCode.getTokenBefore(property);\n\n            if (onObject) {\n\n                // `obj` expression can be parenthesized, but those paren tokens are not a part of the `obj` node.\n                const tokenBeforeDot = sourceCode.getTokenBefore(dotToken);\n\n                if (!astUtils.isTokenOnSameLine(tokenBeforeDot, dotToken)) {\n                    context.report({\n                        node,\n                        loc: dotToken.loc,\n                        messageId: \"expectedDotAfterObject\",\n                        *fix(fixer) {\n                            if (dotToken.value.startsWith(\".\") && astUtils.isDecimalIntegerNumericToken(tokenBeforeDot)) {\n                                yield fixer.insertTextAfter(tokenBeforeDot, ` ${dotToken.value}`);\n                            } else {\n                                yield fixer.insertTextAfter(tokenBeforeDot, dotToken.value);\n                            }\n                            yield fixer.remove(dotToken);\n                        }\n                    });\n                }\n            } else if (!astUtils.isTokenOnSameLine(dotToken, property)) {\n                context.report({\n                    node,\n                    loc: dotToken.loc,\n                    messageId: \"expectedDotBeforeProperty\",\n                    *fix(fixer) {\n                        yield fixer.remove(dotToken);\n                        yield fixer.insertTextBefore(property, dotToken.value);\n                    }\n                });\n            }\n        }\n\n        /**\n         * Checks the spacing of the dot within a member expression.\n         * @param {ASTNode} node The node to check.\n         * @returns {void}\n         */\n        function checkNode(node) {\n            if (!node.computed) {\n                checkDotLocation(node);\n            }\n        }\n\n        return {\n            MemberExpression: checkNode\n        };\n    }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,mBAAD,CAAxB,C,CAEA;AACA;AACA;;;AAEAC,MAAM,CAACC,OAAP,GAAiB;EACbC,IAAI,EAAE;IACFC,IAAI,EAAE,QADJ;IAGFC,IAAI,EAAE;MACFC,WAAW,EAAE,mDADX;MAEFC,QAAQ,EAAE,gBAFR;MAGFC,WAAW,EAAE,KAHX;MAIFC,GAAG,EAAE;IAJH,CAHJ;IAUFC,MAAM,EAAE,CACJ;MACIC,IAAI,EAAE,CAAC,QAAD,EAAW,UAAX;IADV,CADI,CAVN;IAgBFC,OAAO,EAAE,MAhBP;IAkBFC,QAAQ,EAAE;MACNC,sBAAsB,EAAE,4CADlB;MAENC,yBAAyB,EAAE;IAFrB;EAlBR,CADO;;EAyBbC,MAAM,CAACC,OAAD,EAAU;IAEZ,MAAMC,MAAM,GAAGD,OAAO,CAACE,OAAR,CAAgB,CAAhB,CAAf,CAFY,CAIZ;;IACA,MAAMC,QAAQ,GAAGF,MAAM,KAAK,QAAX,IAAuB,CAACA,MAAzC;IAEA,MAAMG,UAAU,GAAGJ,OAAO,CAACK,aAAR,EAAnB;IAEA;AACR;AACA;AACA;AACA;;IACQ,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;MAC5B,MAAMC,QAAQ,GAAGD,IAAI,CAACC,QAAtB;MACA,MAAMC,QAAQ,GAAGL,UAAU,CAACM,cAAX,CAA0BF,QAA1B,CAAjB;;MAEA,IAAIL,QAAJ,EAAc;QAEV;QACA,MAAMQ,cAAc,GAAGP,UAAU,CAACM,cAAX,CAA0BD,QAA1B,CAAvB;;QAEA,IAAI,CAAC3B,QAAQ,CAAC8B,iBAAT,CAA2BD,cAA3B,EAA2CF,QAA3C,CAAL,EAA2D;UACvDT,OAAO,CAACa,MAAR,CAAe;YACXN,IADW;YAEXO,GAAG,EAAEL,QAAQ,CAACK,GAFH;YAGXC,SAAS,EAAE,wBAHA;;YAIX,CAACC,GAAD,CAAKC,KAAL,EAAY;cACR,IAAIR,QAAQ,CAACS,KAAT,CAAeC,UAAf,CAA0B,GAA1B,KAAkCrC,QAAQ,CAACsC,4BAAT,CAAsCT,cAAtC,CAAtC,EAA6F;gBACzF,MAAMM,KAAK,CAACI,eAAN,CAAsBV,cAAtB,EAAuC,IAAGF,QAAQ,CAACS,KAAM,EAAzD,CAAN;cACH,CAFD,MAEO;gBACH,MAAMD,KAAK,CAACI,eAAN,CAAsBV,cAAtB,EAAsCF,QAAQ,CAACS,KAA/C,CAAN;cACH;;cACD,MAAMD,KAAK,CAACK,MAAN,CAAab,QAAb,CAAN;YACH;;UAXU,CAAf;QAaH;MACJ,CApBD,MAoBO,IAAI,CAAC3B,QAAQ,CAAC8B,iBAAT,CAA2BH,QAA3B,EAAqCD,QAArC,CAAL,EAAqD;QACxDR,OAAO,CAACa,MAAR,CAAe;UACXN,IADW;UAEXO,GAAG,EAAEL,QAAQ,CAACK,GAFH;UAGXC,SAAS,EAAE,2BAHA;;UAIX,CAACC,GAAD,CAAKC,KAAL,EAAY;YACR,MAAMA,KAAK,CAACK,MAAN,CAAab,QAAb,CAAN;YACA,MAAMQ,KAAK,CAACM,gBAAN,CAAuBf,QAAvB,EAAiCC,QAAQ,CAACS,KAA1C,CAAN;UACH;;QAPU,CAAf;MASH;IACJ;IAED;AACR;AACA;AACA;AACA;;;IACQ,SAASM,SAAT,CAAmBjB,IAAnB,EAAyB;MACrB,IAAI,CAACA,IAAI,CAACkB,QAAV,EAAoB;QAChBnB,gBAAgB,CAACC,IAAD,CAAhB;MACH;IACJ;;IAED,OAAO;MACHmB,gBAAgB,EAAEF;IADf,CAAP;EAGH;;AA1FY,CAAjB"},"metadata":{},"sourceType":"script"}