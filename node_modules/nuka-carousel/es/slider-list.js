"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSliderListStyles = void 0;

var _defaultControls = require("./default-controls");

var _types = require("./types");

var getSliderListWidth = function getSliderListWidth(slideCount, slidesToShow, wrapAround) {
  var visibleSlides = slidesToShow;

  if (wrapAround) {
    var _percentage = slideCount * 100 / visibleSlides;

    return "".concat(3 * _percentage, "%");
  }

  var percentage = slideCount * 100 / visibleSlides;
  return "".concat(percentage, "%");
};

var getPercentOffsetForSlide = function getPercentOffsetForSlide(slideCount, initialValue, currentSlide, cellAlign, wrapAround) {
  if (cellAlign === _types.Alignment.Left) {
    if (wrapAround) {
      var _slideTransition = 100 / (3 * slideCount);

      var currentTransition = initialValue - _slideTransition * (currentSlide - 1);
      return currentTransition - _slideTransition;
    }

    var slideTransition = 100 / slideCount * currentSlide;
    return -(slideTransition + initialValue);
  } else if (cellAlign === _types.Alignment.Center) {
    if (wrapAround) {
      var _slideTransition3 = 100 / (3 * slideCount);

      var _currentTransition = initialValue - _slideTransition3 * (currentSlide - 1);

      return _currentTransition - _slideTransition3;
    }

    var _slideTransition2 = 100 / slideCount * currentSlide;

    return initialValue - _slideTransition2;
  } else if (cellAlign === _types.Alignment.Right) {
    if (wrapAround) {
      var _slideTransition5 = 100 / (3 * slideCount);

      var _currentTransition2 = initialValue - _slideTransition5 * (currentSlide - 1);

      return _currentTransition2 - _slideTransition5;
    }

    var _slideTransition4 = 100 / slideCount * currentSlide;

    return initialValue - _slideTransition4;
  }

  return initialValue;
};

var getPositioning = function getPositioning(cellAlign, slidesToShow, slideCount, currentSlide, wrapAround, draggedOffset, clampIndices) {
  // When wrapAround is enabled, we show the slides 3 times
  var totalCount = wrapAround ? 3 * slideCount : slideCount;
  var slideSize = 100 / totalCount;
  var initialValue = wrapAround ? -slideCount * slideSize : 0;

  if (cellAlign === _types.Alignment.Right && slidesToShow > 1) {
    var excessSlides = slidesToShow - 1;
    initialValue += slideSize * excessSlides;
  }

  if (cellAlign === _types.Alignment.Center && slidesToShow > 1) {
    var _excessSlides = slidesToShow - 1; // Half of excess is on left and half is on right when centered


    var excessLeftSlides = _excessSlides / 2;
    initialValue += slideSize * excessLeftSlides;
  }

  var slideBasedOffset = getPercentOffsetForSlide(slideCount, initialValue, currentSlide, cellAlign, wrapAround); // Special-case this. It's better to return undefined rather than a
  // transform of 0 pixels since transforms can cause flickering in chrome.

  if (draggedOffset === 0 && slideBasedOffset === 0) {
    return undefined;
  }

  var clampOffsets = null;

  if (clampIndices) {
    clampOffsets = clampIndices.map(function (index) {
      return getPercentOffsetForSlide(slideCount, initialValue, index, cellAlign, wrapAround);
    });
  }

  var clampedDraggedOffset = clampOffsets ? // Offsets are seemingly backwards because the rightmost slide creates
  // the most negative translate value
  "clamp(".concat(clampOffsets[1], "%, ").concat(draggedOffset, "px, ").concat(clampOffsets[0], "%)") : "".concat(draggedOffset, "px");
  return "translate3d(".concat(draggedOffset ? clampedDraggedOffset : "".concat(slideBasedOffset, "%"), ", 0, 0)");
};

var getSliderListStyles = function getSliderListStyles(slideCount, currentSlide, isAnimating, slidesToShow, cellAlign, wrapAround, speed, draggedOffset, slidesToScroll, scrollMode, disableEdgeSwiping, slideAnimation) {
  var width = getSliderListWidth(slideCount, slidesToShow, wrapAround); // When disableEdgeSwiping=true, we recycle dot index generation to determine
  // the leftmost and rightmost indices used, to be used in calculating the
  // x-translation values we need to limit to.

  var clampIndices = null;

  if (disableEdgeSwiping && !wrapAround) {
    var dotIndexes = (0, _defaultControls.getDotIndexes)(slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign);
    clampIndices = [dotIndexes[0], dotIndexes[dotIndexes.length - 1]];
  }

  var positioning = getPositioning(cellAlign, slidesToShow, slideCount, currentSlide, wrapAround, draggedOffset, clampIndices);
  return {
    width: width,
    textAlign: 'left',
    userSelect: 'auto',
    transition: draggedOffset === 0 && isAnimating && slideAnimation !== 'fade' ? "".concat(speed, "ms cubic-bezier(0.16, 1, 0.3, 1) 0s") : undefined,
    transform: positioning,
    display: 'flex'
  };
};

exports.getSliderListStyles = getSliderListStyles;