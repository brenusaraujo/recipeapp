"use strict";

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _carousel = _interopRequireDefault(require("./carousel"));

var _excluded = ["slideCount"];

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

// Fake timers using Jest
beforeEach(function () {
  jest.useFakeTimers();
}); // Running all pending timers and switching to real timers using Jest

afterEach(function () {
  jest.runOnlyPendingTimers();
  jest.useRealTimers();
});
describe('Carousel', function () {
  var renderCarousel = function renderCarousel() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _ref$slideCount = _ref.slideCount,
        slideCount = _ref$slideCount === void 0 ? 5 : _ref$slideCount,
        props = _objectWithoutProperties(_ref, _excluded);

    return (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_carousel["default"], props, _toConsumableArray(Array(slideCount)).map(function (_, index) {
      return /*#__PURE__*/_react["default"].createElement("img", {
        src: "#",
        alt: "slide ".concat(index),
        key: index
      });
    })));
  };

  it('autoplays at the right rate', function () {
    var beforeSlide = jest.fn();
    var afterSlide = jest.fn();
    var speed = 500;
    var autoplayInterval = 1000;
    var slideCount = 2;
    renderCarousel({
      slideCount: slideCount,
      autoplay: true,
      autoplayInterval: autoplayInterval,
      speed: speed,
      wrapAround: true,
      beforeSlide: beforeSlide,
      afterSlide: afterSlide
    });
    expect(beforeSlide).toHaveBeenCalledTimes(0);
    expect(afterSlide).toHaveBeenCalledTimes(0); // autoplay initiated, waiting for first interval

    (0, _react2.act)(function () {
      jest.advanceTimersByTime(autoplayInterval);
    });
    expect(beforeSlide).toHaveBeenCalledTimes(1);
    expect(afterSlide).toHaveBeenCalledTimes(0);

    var checkTimingCycle = function checkTimingCycle(timesMoved) {
      // Animation begins, and next autoplay timeout set up
      (0, _react2.act)(function () {
        jest.advanceTimersByTime(speed);
      }); // Animation completes

      expect(beforeSlide).toHaveBeenCalledTimes(timesMoved);
      expect(afterSlide).toHaveBeenCalledTimes(timesMoved);
      expect(afterSlide).toHaveBeenLastCalledWith(timesMoved % slideCount);
      (0, _react2.act)(function () {
        jest.advanceTimersByTime(autoplayInterval - speed);
      }); // autoplay timeout triggers

      expect(beforeSlide).toHaveBeenCalledTimes(timesMoved + 1);
      expect(afterSlide).toHaveBeenCalledTimes(timesMoved);
    };

    checkTimingCycle(1);
    checkTimingCycle(2);
    checkTimingCycle(3);
  });
  it('omits slides whose children are falsy', function () {
    var _render = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_carousel["default"], null, /*#__PURE__*/_react["default"].createElement("img", {
      src: "#",
      alt: "slide 1"
    }), /*#__PURE__*/_react["default"].createElement("img", {
      src: "#",
      alt: "slide 2"
    }), false && /*#__PURE__*/_react["default"].createElement("img", {
      src: "#",
      alt: "slide 3"
    }), null, /*#__PURE__*/_react["default"].createElement("img", {
      src: "#",
      alt: "slide 5"
    }))),
        container = _render.container;

    expect(container.getElementsByClassName('slide').length).toBe(3);
  });
  it('can be controlled with the keyboard', function () {
    var beforeSlide = jest.fn();
    var keyCodeConfig = {
      nextSlide: [39],
      previousSlide: [37],
      firstSlide: [81],
      lastSlide: [69],
      pause: [32]
    };
    renderCarousel({
      enableKeyboardControls: true,
      keyCodeConfig: keyCodeConfig,
      slideCount: 8,
      beforeSlide: beforeSlide
    });

    var carouselFrame = _react2.screen.getByRole('region');

    _react2.fireEvent.keyDown(carouselFrame, {
      keyCode: keyCodeConfig.nextSlide[0]
    });

    expect(beforeSlide).toHaveBeenLastCalledWith(0, 1);

    _react2.fireEvent.keyDown(carouselFrame, {
      keyCode: keyCodeConfig.nextSlide[0]
    });

    expect(beforeSlide).toHaveBeenLastCalledWith(1, 2);

    _react2.fireEvent.keyDown(carouselFrame, {
      keyCode: keyCodeConfig.previousSlide[0]
    });

    expect(beforeSlide).toHaveBeenLastCalledWith(2, 1);

    _react2.fireEvent.keyDown(carouselFrame, {
      keyCode: keyCodeConfig.previousSlide[0]
    });

    expect(beforeSlide).toHaveBeenLastCalledWith(1, 0);

    _react2.fireEvent.keyDown(carouselFrame, {
      keyCode: keyCodeConfig.lastSlide[0]
    });

    expect(beforeSlide).toHaveBeenLastCalledWith(0, 7);

    _react2.fireEvent.keyDown(carouselFrame, {
      keyCode: keyCodeConfig.firstSlide[0]
    });

    expect(beforeSlide).toHaveBeenLastCalledWith(7, 0);
  });
});